
AVRGCC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00002120  000021b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002120  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004dc  0080012e  0080012e  000021e2  2**0
                  ALLOC
  3 .stab         00000d08  00000000  00000000  000021e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000218  00000000  00000000  00002eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000248  00000000  00000000  00003104  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000004ba  00000000  00000000  0000334c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003036  00000000  00000000  00003806  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000017e2  00000000  00000000  0000683c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000027c4  00000000  00000000  0000801e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003e0  00000000  00000000  0000a7e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000007e8  00000000  00000000  0000abc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001593  00000000  00000000  0000b3ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000737  00000000  00000000  0000c93f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000c0  00000000  00000000  0000d076  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 3b 05 	jmp	0xa76	; 0xa76 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 5e 06 	jmp	0xcbc	; 0xcbc <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__vector_20>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 e2       	ldi	r30, 0x20	; 32
      7c:	f1 e2       	ldi	r31, 0x21	; 33
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 32       	cpi	r26, 0x2E	; 46
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	16 e0       	ldi	r17, 0x06	; 6
      8c:	ae e2       	ldi	r26, 0x2E	; 46
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	aa 30       	cpi	r26, 0x0A	; 10
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 0e 01 	call	0x21c	; 0x21c <main>
      9e:	0c 94 8e 10 	jmp	0x211c	; 0x211c <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <task1>:
// Tasks 1 and 2 will increment a global variable ctr, and every 10 increments task 1 will send the resulting value in ctr to task3 via a queue.
// Task 3 will then send it via serial to the PC. 

// In addition, do something fun and creative with this program, the serial port and the components you have. Describe it in your report. :)
void task1(void *p)
{
      a6:	df 93       	push	r29
      a8:	cf 93       	push	r28
      aa:	00 d0       	rcall	.+0      	; 0xac <task1+0x6>
      ac:	cd b7       	in	r28, 0x3d	; 61
      ae:	de b7       	in	r29, 0x3e	; 62
      b0:	9a 83       	std	Y+2, r25	; 0x02
      b2:	89 83       	std	Y+1, r24	; 0x01
	while(1)
	{
		say("1\n\r");
      b4:	80 e0       	ldi	r24, 0x00	; 0
      b6:	91 e0       	ldi	r25, 0x01	; 1
      b8:	0e 94 7f 06 	call	0xcfe	; 0xcfe <say>
		//_delay_ms(1000);
		//OSSemPend(sema);
	}
      bc:	fb cf       	rjmp	.-10     	; 0xb4 <task1+0xe>

000000be <task2>:
}

void task2(void *p)
{
      be:	df 93       	push	r29
      c0:	cf 93       	push	r28
      c2:	00 d0       	rcall	.+0      	; 0xc4 <task2+0x6>
      c4:	cd b7       	in	r28, 0x3d	; 61
      c6:	de b7       	in	r29, 0x3e	; 62
      c8:	9a 83       	std	Y+2, r25	; 0x02
      ca:	89 83       	std	Y+1, r24	; 0x01
	while(1)
	{
		say("2\n\r");
      cc:	84 e0       	ldi	r24, 0x04	; 4
      ce:	91 e0       	ldi	r25, 0x01	; 1
      d0:	0e 94 7f 06 	call	0xcfe	; 0xcfe <say>
		//_delay_ms(500);
		//OSSemPend(sema);
	}
      d4:	fb cf       	rjmp	.-10     	; 0xcc <task2+0xe>

000000d6 <task3>:
}

void task3(void *p)
{
      d6:	0f 93       	push	r16
      d8:	1f 93       	push	r17
      da:	df 93       	push	r29
      dc:	cf 93       	push	r28
      de:	cd b7       	in	r28, 0x3d	; 61
      e0:	de b7       	in	r29, 0x3e	; 62
      e2:	60 97       	sbiw	r28, 0x10	; 16
      e4:	0f b6       	in	r0, 0x3f	; 63
      e6:	f8 94       	cli
      e8:	de bf       	out	0x3e, r29	; 62
      ea:	0f be       	out	0x3f, r0	; 63
      ec:	cd bf       	out	0x3d, r28	; 61
      ee:	98 8b       	std	Y+16, r25	; 0x10
      f0:	8f 87       	std	Y+15, r24	; 0x0f
	while(1)
	{
		say("3\n\r");
      f2:	88 e0       	ldi	r24, 0x08	; 8
      f4:	91 e0       	ldi	r25, 0x01	; 1
      f6:	0e 94 7f 06 	call	0xcfe	; 0xcfe <say>
      fa:	80 e0       	ldi	r24, 0x00	; 0
      fc:	90 e4       	ldi	r25, 0x40	; 64
      fe:	ac e9       	ldi	r26, 0x9C	; 156
     100:	b5 e4       	ldi	r27, 0x45	; 69
     102:	89 83       	std	Y+1, r24	; 0x01
     104:	9a 83       	std	Y+2, r25	; 0x02
     106:	ab 83       	std	Y+3, r26	; 0x03
     108:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     10a:	69 81       	ldd	r22, Y+1	; 0x01
     10c:	7a 81       	ldd	r23, Y+2	; 0x02
     10e:	8b 81       	ldd	r24, Y+3	; 0x03
     110:	9c 81       	ldd	r25, Y+4	; 0x04
     112:	20 e0       	ldi	r18, 0x00	; 0
     114:	30 e0       	ldi	r19, 0x00	; 0
     116:	4a e7       	ldi	r20, 0x7A	; 122
     118:	55 e4       	ldi	r21, 0x45	; 69
     11a:	0e 94 de 08 	call	0x11bc	; 0x11bc <__mulsf3>
     11e:	dc 01       	movw	r26, r24
     120:	cb 01       	movw	r24, r22
     122:	8d 83       	std	Y+5, r24	; 0x05
     124:	9e 83       	std	Y+6, r25	; 0x06
     126:	af 83       	std	Y+7, r26	; 0x07
     128:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     12a:	11 e0       	ldi	r17, 0x01	; 1
     12c:	6d 81       	ldd	r22, Y+5	; 0x05
     12e:	7e 81       	ldd	r23, Y+6	; 0x06
     130:	8f 81       	ldd	r24, Y+7	; 0x07
     132:	98 85       	ldd	r25, Y+8	; 0x08
     134:	20 e0       	ldi	r18, 0x00	; 0
     136:	30 e0       	ldi	r19, 0x00	; 0
     138:	40 e8       	ldi	r20, 0x80	; 128
     13a:	5f e3       	ldi	r21, 0x3F	; 63
     13c:	0e 94 38 0a 	call	0x1470	; 0x1470 <__ltsf2>
     140:	88 23       	and	r24, r24
     142:	0c f0       	brlt	.+2      	; 0x146 <task3+0x70>
     144:	10 e0       	ldi	r17, 0x00	; 0
     146:	11 23       	and	r17, r17
     148:	29 f0       	breq	.+10     	; 0x154 <task3+0x7e>
		__ticks = 1;
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	9a 87       	std	Y+10, r25	; 0x0a
     150:	89 87       	std	Y+9, r24	; 0x09
     152:	46 c0       	rjmp	.+140    	; 0x1e0 <task3+0x10a>
	else if (__tmp > 65535)
     154:	11 e0       	ldi	r17, 0x01	; 1
     156:	6d 81       	ldd	r22, Y+5	; 0x05
     158:	7e 81       	ldd	r23, Y+6	; 0x06
     15a:	8f 81       	ldd	r24, Y+7	; 0x07
     15c:	98 85       	ldd	r25, Y+8	; 0x08
     15e:	20 e0       	ldi	r18, 0x00	; 0
     160:	3f ef       	ldi	r19, 0xFF	; 255
     162:	4f e7       	ldi	r20, 0x7F	; 127
     164:	57 e4       	ldi	r21, 0x47	; 71
     166:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <__gtsf2>
     16a:	18 16       	cp	r1, r24
     16c:	0c f0       	brlt	.+2      	; 0x170 <task3+0x9a>
     16e:	10 e0       	ldi	r17, 0x00	; 0
     170:	11 23       	and	r17, r17
     172:	61 f1       	breq	.+88     	; 0x1cc <task3+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     174:	69 81       	ldd	r22, Y+1	; 0x01
     176:	7a 81       	ldd	r23, Y+2	; 0x02
     178:	8b 81       	ldd	r24, Y+3	; 0x03
     17a:	9c 81       	ldd	r25, Y+4	; 0x04
     17c:	20 e0       	ldi	r18, 0x00	; 0
     17e:	30 e0       	ldi	r19, 0x00	; 0
     180:	40 e2       	ldi	r20, 0x20	; 32
     182:	51 e4       	ldi	r21, 0x41	; 65
     184:	0e 94 de 08 	call	0x11bc	; 0x11bc <__mulsf3>
     188:	dc 01       	movw	r26, r24
     18a:	cb 01       	movw	r24, r22
     18c:	bc 01       	movw	r22, r24
     18e:	cd 01       	movw	r24, r26
     190:	0e 94 0a 07 	call	0xe14	; 0xe14 <__fixunssfsi>
     194:	dc 01       	movw	r26, r24
     196:	cb 01       	movw	r24, r22
     198:	9a 87       	std	Y+10, r25	; 0x0a
     19a:	89 87       	std	Y+9, r24	; 0x09
     19c:	12 c0       	rjmp	.+36     	; 0x1c2 <task3+0xec>
     19e:	80 e9       	ldi	r24, 0x90	; 144
     1a0:	91 e0       	ldi	r25, 0x01	; 1
     1a2:	9c 87       	std	Y+12, r25	; 0x0c
     1a4:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1a6:	8b 85       	ldd	r24, Y+11	; 0x0b
     1a8:	9c 85       	ldd	r25, Y+12	; 0x0c
     1aa:	8c 01       	movw	r16, r24
     1ac:	c8 01       	movw	r24, r16
     1ae:	01 97       	sbiw	r24, 0x01	; 1
     1b0:	f1 f7       	brne	.-4      	; 0x1ae <task3+0xd8>
     1b2:	8c 01       	movw	r16, r24
     1b4:	1c 87       	std	Y+12, r17	; 0x0c
     1b6:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1b8:	89 85       	ldd	r24, Y+9	; 0x09
     1ba:	9a 85       	ldd	r25, Y+10	; 0x0a
     1bc:	01 97       	sbiw	r24, 0x01	; 1
     1be:	9a 87       	std	Y+10, r25	; 0x0a
     1c0:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1c2:	89 85       	ldd	r24, Y+9	; 0x09
     1c4:	9a 85       	ldd	r25, Y+10	; 0x0a
     1c6:	00 97       	sbiw	r24, 0x00	; 0
     1c8:	51 f7       	brne	.-44     	; 0x19e <task3+0xc8>
		_delay_ms(5000);
	}
     1ca:	93 cf       	rjmp	.-218    	; 0xf2 <task3+0x1c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1cc:	6d 81       	ldd	r22, Y+5	; 0x05
     1ce:	7e 81       	ldd	r23, Y+6	; 0x06
     1d0:	8f 81       	ldd	r24, Y+7	; 0x07
     1d2:	98 85       	ldd	r25, Y+8	; 0x08
     1d4:	0e 94 0a 07 	call	0xe14	; 0xe14 <__fixunssfsi>
     1d8:	dc 01       	movw	r26, r24
     1da:	cb 01       	movw	r24, r22
     1dc:	9a 87       	std	Y+10, r25	; 0x0a
     1de:	89 87       	std	Y+9, r24	; 0x09
     1e0:	89 85       	ldd	r24, Y+9	; 0x09
     1e2:	9a 85       	ldd	r25, Y+10	; 0x0a
     1e4:	9e 87       	std	Y+14, r25	; 0x0e
     1e6:	8d 87       	std	Y+13, r24	; 0x0d
     1e8:	8d 85       	ldd	r24, Y+13	; 0x0d
     1ea:	9e 85       	ldd	r25, Y+14	; 0x0e
     1ec:	8c 01       	movw	r16, r24
     1ee:	c8 01       	movw	r24, r16
     1f0:	01 97       	sbiw	r24, 0x01	; 1
     1f2:	f1 f7       	brne	.-4      	; 0x1f0 <task3+0x11a>
     1f4:	8c 01       	movw	r16, r24
     1f6:	1e 87       	std	Y+14, r17	; 0x0e
     1f8:	0d 87       	std	Y+13, r16	; 0x0d
     1fa:	7b cf       	rjmp	.-266    	; 0xf2 <task3+0x1c>

000001fc <setup>:
}

void setup()
{
     1fc:	df 93       	push	r29
     1fe:	cf 93       	push	r28
     200:	cd b7       	in	r28, 0x3d	; 61
     202:	de b7       	in	r29, 0x3e	; 62
	DDRB |= 0b11111111;
     204:	84 e2       	ldi	r24, 0x24	; 36
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	fc 01       	movw	r30, r24
     20a:	80 81       	ld	r24, Z
     20c:	84 e2       	ldi	r24, 0x24	; 36
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	2f ef       	ldi	r18, 0xFF	; 255
     212:	fc 01       	movw	r30, r24
     214:	20 83       	st	Z, r18
}
     216:	cf 91       	pop	r28
     218:	df 91       	pop	r29
     21a:	08 95       	ret

0000021c <main>:

int main(void)
{
     21c:	df 93       	push	r29
     21e:	cf 93       	push	r28
     220:	cd b7       	in	r28, 0x3d	; 61
     222:	de b7       	in	r29, 0x3e	; 62
	setupSerial();
     224:	0e 94 cb 05 	call	0xb96	; 0xb96 <setupSerial>
	sei();
     228:	78 94       	sei
	OSInit();
     22a:	0e 94 40 05 	call	0xa80	; 0xa80 <OSInit>
	
	say("B!egin\r\n");
     22e:	8c e0       	ldi	r24, 0x0C	; 12
     230:	91 e0       	ldi	r25, 0x01	; 1
     232:	0e 94 7f 06 	call	0xcfe	; 0xcfe <say>
	
	setup();
     236:	0e 94 fe 00 	call	0x1fc	; 0x1fc <setup>
	
	//while(1)	say("lualal\n\r");
	
	//sema = OSmakeSema(1);
	
	OSAddTask(task1,1,0);
     23a:	83 e5       	ldi	r24, 0x53	; 83
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	61 e0       	ldi	r22, 0x01	; 1
     240:	70 e0       	ldi	r23, 0x00	; 0
     242:	40 e0       	ldi	r20, 0x00	; 0
     244:	50 e0       	ldi	r21, 0x00	; 0
     246:	0e 94 5a 05 	call	0xab4	; 0xab4 <OSAddTask>
	OSAddTask(task2,1,0);
     24a:	8f e5       	ldi	r24, 0x5F	; 95
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	61 e0       	ldi	r22, 0x01	; 1
     250:	70 e0       	ldi	r23, 0x00	; 0
     252:	40 e0       	ldi	r20, 0x00	; 0
     254:	50 e0       	ldi	r21, 0x00	; 0
     256:	0e 94 5a 05 	call	0xab4	; 0xab4 <OSAddTask>
	OSAddTask(task3,1,0);
     25a:	8b e6       	ldi	r24, 0x6B	; 107
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	61 e0       	ldi	r22, 0x01	; 1
     260:	70 e0       	ldi	r23, 0x00	; 0
     262:	40 e0       	ldi	r20, 0x00	; 0
     264:	50 e0       	ldi	r21, 0x00	; 0
     266:	0e 94 5a 05 	call	0xab4	; 0xab4 <OSAddTask>
	
	OSRun();
     26a:	0e 94 b0 05 	call	0xb60	; 0xb60 <OSRun>
     26e:	80 e0       	ldi	r24, 0x00	; 0
     270:	90 e0       	ldi	r25, 0x00	; 0
}
     272:	cf 91       	pop	r28
     274:	df 91       	pop	r29
     276:	08 95       	ret

00000278 <enterCritical>:

/* ======================================= */
/* Critical section management             */
/* ======================================= */
inline void enterCritical()
{
     278:	df 93       	push	r29
     27a:	cf 93       	push	r28
     27c:	cd b7       	in	r28, 0x3d	; 61
     27e:	de b7       	in	r29, 0x3e	; 62
	cli();
     280:	f8 94       	cli
}
     282:	cf 91       	pop	r28
     284:	df 91       	pop	r29
     286:	08 95       	ret

00000288 <leaveCritical>:

inline void leaveCritical()
{
     288:	df 93       	push	r29
     28a:	cf 93       	push	r28
     28c:	cd b7       	in	r28, 0x3d	; 61
     28e:	de b7       	in	r29, 0x3e	; 62
	sei();
     290:	78 94       	sei
}
     292:	cf 91       	pop	r28
     294:	df 91       	pop	r29
     296:	08 95       	ret

00000298 <OSmakeSema>:

#ifdef OSIncludeSema

// Creates a semaphore with initial value initval
OSSignal *OSmakeSema(int initval)
{
     298:	df 93       	push	r29
     29a:	cf 93       	push	r28
     29c:	00 d0       	rcall	.+0      	; 0x29e <OSmakeSema+0x6>
     29e:	00 d0       	rcall	.+0      	; 0x2a0 <OSmakeSema+0x8>
     2a0:	cd b7       	in	r28, 0x3d	; 61
     2a2:	de b7       	in	r29, 0x3e	; 62
     2a4:	9c 83       	std	Y+4, r25	; 0x04
     2a6:	8b 83       	std	Y+3, r24	; 0x03
	OSSignal *sem = (OSSignal *) malloc(sizeof(OSSignal));
     2a8:	8c e6       	ldi	r24, 0x6C	; 108
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	0e 94 a8 0c 	call	0x1950	; 0x1950 <malloc>
     2b0:	9a 83       	std	Y+2, r25	; 0x02
     2b2:	89 83       	std	Y+1, r24	; 0x01
	sem->type	= SEMAPHORE_TYPE;
     2b4:	89 81       	ldd	r24, Y+1	; 0x01
     2b6:	9a 81       	ldd	r25, Y+2	; 0x02
     2b8:	fc 01       	movw	r30, r24
     2ba:	11 82       	std	Z+1, r1	; 0x01
     2bc:	10 82       	st	Z, r1
	sem->num	= initval;
     2be:	89 81       	ldd	r24, Y+1	; 0x01
     2c0:	9a 81       	ldd	r25, Y+2	; 0x02
     2c2:	2b 81       	ldd	r18, Y+3	; 0x03
     2c4:	3c 81       	ldd	r19, Y+4	; 0x04
     2c6:	fc 01       	movw	r30, r24
     2c8:	33 83       	std	Z+3, r19	; 0x03
     2ca:	22 83       	std	Z+2, r18	; 0x02
	sem->qH		= 0;
     2cc:	89 81       	ldd	r24, Y+1	; 0x01
     2ce:	9a 81       	ldd	r25, Y+2	; 0x02
     2d0:	88 59       	subi	r24, 0x98	; 152
     2d2:	9f 4f       	sbci	r25, 0xFF	; 255
     2d4:	fc 01       	movw	r30, r24
     2d6:	11 82       	std	Z+1, r1	; 0x01
     2d8:	10 82       	st	Z, r1
	sem->qT	= 0;
     2da:	89 81       	ldd	r24, Y+1	; 0x01
     2dc:	9a 81       	ldd	r25, Y+2	; 0x02
     2de:	86 59       	subi	r24, 0x96	; 150
     2e0:	9f 4f       	sbci	r25, 0xFF	; 255
     2e2:	fc 01       	movw	r30, r24
     2e4:	11 82       	std	Z+1, r1	; 0x01
     2e6:	10 82       	st	Z, r1
}
     2e8:	0f 90       	pop	r0
     2ea:	0f 90       	pop	r0
     2ec:	0f 90       	pop	r0
     2ee:	0f 90       	pop	r0
     2f0:	cf 91       	pop	r28
     2f2:	df 91       	pop	r29
     2f4:	08 95       	ret

000002f6 <OSSemPend>:

// Takes a semaphore. Blocks if semaphore is 0.
void OSSemPend(OSSignal *sema)
{
     2f6:	df 93       	push	r29
     2f8:	cf 93       	push	r28
     2fa:	00 d0       	rcall	.+0      	; 0x2fc <OSSemPend+0x6>
     2fc:	cd b7       	in	r28, 0x3d	; 61
     2fe:	de b7       	in	r29, 0x3e	; 62
     300:	9a 83       	std	Y+2, r25	; 0x02
     302:	89 83       	std	Y+1, r24	; 0x01
	cli();
     304:	f8 94       	cli
		
	// wrong type no use
	if(sema->type != SEMAPHORE_TYPE){
     306:	89 81       	ldd	r24, Y+1	; 0x01
     308:	9a 81       	ldd	r25, Y+2	; 0x02
     30a:	fc 01       	movw	r30, r24
     30c:	80 81       	ld	r24, Z
     30e:	91 81       	ldd	r25, Z+1	; 0x01
     310:	00 97       	sbiw	r24, 0x00	; 0
     312:	11 f0       	breq	.+4      	; 0x318 <OSSemPend+0x22>
		sei();
     314:	78 94       	sei
		return;
     316:	43 c0       	rjmp	.+134    	; 0x39e <OSSemPend+0xa8>
	}
	else if(sema->num <= 0){
     318:	89 81       	ldd	r24, Y+1	; 0x01
     31a:	9a 81       	ldd	r25, Y+2	; 0x02
     31c:	fc 01       	movw	r30, r24
     31e:	82 81       	ldd	r24, Z+2	; 0x02
     320:	93 81       	ldd	r25, Z+3	; 0x03
     322:	18 16       	cp	r1, r24
     324:	19 06       	cpc	r1, r25
     326:	74 f1       	brlt	.+92     	; 0x384 <OSSemPend+0x8e>
		// when the number of semaphore exceed the max allowed element in queue -> do nothing
		if(-(sema->num) > MAX_QUEUE_SIZE/sizeof(int)){
     328:	89 81       	ldd	r24, Y+1	; 0x01
     32a:	9a 81       	ldd	r25, Y+2	; 0x02
     32c:	fc 01       	movw	r30, r24
     32e:	82 81       	ldd	r24, Z+2	; 0x02
     330:	93 81       	ldd	r25, Z+3	; 0x03
     332:	90 95       	com	r25
     334:	81 95       	neg	r24
     336:	9f 4f       	sbci	r25, 0xFF	; 255
     338:	83 33       	cpi	r24, 0x33	; 51
     33a:	91 05       	cpc	r25, r1
     33c:	10 f0       	brcs	.+4      	; 0x342 <OSSemPend+0x4c>
			sei();
     33e:	78 94       	sei
			return;
     340:	2e c0       	rjmp	.+92     	; 0x39e <OSSemPend+0xa8>
		}	
		if(currentTask == -1){
     342:	80 91 15 01 	lds	r24, 0x0115
     346:	90 91 16 01 	lds	r25, 0x0116
     34a:	ff ef       	ldi	r31, 0xFF	; 255
     34c:	8f 3f       	cpi	r24, 0xFF	; 255
     34e:	9f 07       	cpc	r25, r31
     350:	11 f4       	brne	.+4      	; 0x356 <OSSemPend+0x60>
			sei();
     352:	78 94       	sei
			return;
     354:	24 c0       	rjmp	.+72     	; 0x39e <OSSemPend+0xa8>
		
		
		// set current task to block state, save the # of current task
		
		// set current task to block state
		taskTable[currentTask].runflag = TASK_BLOCKED;
     356:	40 91 15 01 	lds	r20, 0x0115
     35a:	50 91 16 01 	lds	r21, 0x0116
     35e:	2b e0       	ldi	r18, 0x0B	; 11
     360:	31 e0       	ldi	r19, 0x01	; 1
     362:	42 9f       	mul	r20, r18
     364:	c0 01       	movw	r24, r0
     366:	43 9f       	mul	r20, r19
     368:	90 0d       	add	r25, r0
     36a:	52 9f       	mul	r21, r18
     36c:	90 0d       	add	r25, r0
     36e:	11 24       	eor	r1, r1
     370:	86 5b       	subi	r24, 0xB6	; 182
     372:	9e 4f       	sbci	r25, 0xFE	; 254
     374:	22 e0       	ldi	r18, 0x02	; 2
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	fc 01       	movw	r30, r24
     37a:	31 83       	std	Z+1, r19	; 0x01
     37c:	20 83       	st	Z, r18
		*(int*)&(sema->q[sema->qT]) = currentTask;
		
		sema->qT += sizeof(int);
		if(sema->qT == MAX_QUEUE_SIZE)	sema->qT = 0;*/
		
		OSSwapTask();
     37e:	0e 94 4b 04 	call	0x896	; 0x896 <OSSwapTask>
     382:	0d c0       	rjmp	.+26     	; 0x39e <OSSemPend+0xa8>
	} else	sema->num --;
     384:	89 81       	ldd	r24, Y+1	; 0x01
     386:	9a 81       	ldd	r25, Y+2	; 0x02
     388:	fc 01       	movw	r30, r24
     38a:	82 81       	ldd	r24, Z+2	; 0x02
     38c:	93 81       	ldd	r25, Z+3	; 0x03
     38e:	9c 01       	movw	r18, r24
     390:	21 50       	subi	r18, 0x01	; 1
     392:	30 40       	sbci	r19, 0x00	; 0
     394:	89 81       	ldd	r24, Y+1	; 0x01
     396:	9a 81       	ldd	r25, Y+2	; 0x02
     398:	fc 01       	movw	r30, r24
     39a:	33 83       	std	Z+3, r19	; 0x03
     39c:	22 83       	std	Z+2, r18	; 0x02
}
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	cf 91       	pop	r28
     3a4:	df 91       	pop	r29
     3a6:	08 95       	ret

000003a8 <OSSemPost>:

// Posts a semaphore.
void OSSemPost(OSSignal *sema)
{
     3a8:	df 93       	push	r29
     3aa:	cf 93       	push	r28
     3ac:	00 d0       	rcall	.+0      	; 0x3ae <OSSemPost+0x6>
     3ae:	00 d0       	rcall	.+0      	; 0x3b0 <OSSemPost+0x8>
     3b0:	cd b7       	in	r28, 0x3d	; 61
     3b2:	de b7       	in	r29, 0x3e	; 62
     3b4:	9c 83       	std	Y+4, r25	; 0x04
     3b6:	8b 83       	std	Y+3, r24	; 0x03
	if(sema->type != SEMAPHORE_TYPE)	return;
     3b8:	8b 81       	ldd	r24, Y+3	; 0x03
     3ba:	9c 81       	ldd	r25, Y+4	; 0x04
     3bc:	fc 01       	movw	r30, r24
     3be:	80 81       	ld	r24, Z
     3c0:	91 81       	ldd	r25, Z+1	; 0x01
     3c2:	00 97       	sbiw	r24, 0x00	; 0
     3c4:	09 f0       	breq	.+2      	; 0x3c8 <OSSemPost+0x20>
     3c6:	5c c0       	rjmp	.+184    	; 0x480 <OSSemPost+0xd8>
	else if(sema->num <0){
     3c8:	8b 81       	ldd	r24, Y+3	; 0x03
     3ca:	9c 81       	ldd	r25, Y+4	; 0x04
     3cc:	fc 01       	movw	r30, r24
     3ce:	82 81       	ldd	r24, Z+2	; 0x02
     3d0:	93 81       	ldd	r25, Z+3	; 0x03
     3d2:	99 23       	and	r25, r25
     3d4:	0c f0       	brlt	.+2      	; 0x3d8 <OSSemPost+0x30>
     3d6:	46 c0       	rjmp	.+140    	; 0x464 <OSSemPost+0xbc>
		// pop the task from the top of the queue
		int taskToWake = *(int *)&(sema->q[sema->qH]);
     3d8:	8b 81       	ldd	r24, Y+3	; 0x03
     3da:	9c 81       	ldd	r25, Y+4	; 0x04
     3dc:	04 96       	adiw	r24, 0x04	; 4
     3de:	9c 01       	movw	r18, r24
     3e0:	8b 81       	ldd	r24, Y+3	; 0x03
     3e2:	9c 81       	ldd	r25, Y+4	; 0x04
     3e4:	88 59       	subi	r24, 0x98	; 152
     3e6:	9f 4f       	sbci	r25, 0xFF	; 255
     3e8:	fc 01       	movw	r30, r24
     3ea:	80 81       	ld	r24, Z
     3ec:	91 81       	ldd	r25, Z+1	; 0x01
     3ee:	82 0f       	add	r24, r18
     3f0:	93 1f       	adc	r25, r19
     3f2:	fc 01       	movw	r30, r24
     3f4:	80 81       	ld	r24, Z
     3f6:	91 81       	ldd	r25, Z+1	; 0x01
     3f8:	9a 83       	std	Y+2, r25	; 0x02
     3fa:	89 83       	std	Y+1, r24	; 0x01
		sema->qH += sizeof(int);
     3fc:	8b 81       	ldd	r24, Y+3	; 0x03
     3fe:	9c 81       	ldd	r25, Y+4	; 0x04
     400:	88 59       	subi	r24, 0x98	; 152
     402:	9f 4f       	sbci	r25, 0xFF	; 255
     404:	fc 01       	movw	r30, r24
     406:	80 81       	ld	r24, Z
     408:	91 81       	ldd	r25, Z+1	; 0x01
     40a:	02 96       	adiw	r24, 0x02	; 2
     40c:	9c 01       	movw	r18, r24
     40e:	8b 81       	ldd	r24, Y+3	; 0x03
     410:	9c 81       	ldd	r25, Y+4	; 0x04
     412:	88 59       	subi	r24, 0x98	; 152
     414:	9f 4f       	sbci	r25, 0xFF	; 255
     416:	fc 01       	movw	r30, r24
     418:	31 83       	std	Z+1, r19	; 0x01
     41a:	20 83       	st	Z, r18
		if(sema->qH == MAX_QUEUE_SIZE)	sema->qH = 0;
     41c:	8b 81       	ldd	r24, Y+3	; 0x03
     41e:	9c 81       	ldd	r25, Y+4	; 0x04
     420:	88 59       	subi	r24, 0x98	; 152
     422:	9f 4f       	sbci	r25, 0xFF	; 255
     424:	fc 01       	movw	r30, r24
     426:	80 81       	ld	r24, Z
     428:	91 81       	ldd	r25, Z+1	; 0x01
     42a:	84 36       	cpi	r24, 0x64	; 100
     42c:	91 05       	cpc	r25, r1
     42e:	39 f4       	brne	.+14     	; 0x43e <OSSemPost+0x96>
     430:	8b 81       	ldd	r24, Y+3	; 0x03
     432:	9c 81       	ldd	r25, Y+4	; 0x04
     434:	88 59       	subi	r24, 0x98	; 152
     436:	9f 4f       	sbci	r25, 0xFF	; 255
     438:	fc 01       	movw	r30, r24
     43a:	11 82       	std	Z+1, r1	; 0x01
     43c:	10 82       	st	Z, r1
		
		taskTable[taskToWake].runflag = TASK_PREEMPTED;
     43e:	49 81       	ldd	r20, Y+1	; 0x01
     440:	5a 81       	ldd	r21, Y+2	; 0x02
     442:	2b e0       	ldi	r18, 0x0B	; 11
     444:	31 e0       	ldi	r19, 0x01	; 1
     446:	42 9f       	mul	r20, r18
     448:	c0 01       	movw	r24, r0
     44a:	43 9f       	mul	r20, r19
     44c:	90 0d       	add	r25, r0
     44e:	52 9f       	mul	r21, r18
     450:	90 0d       	add	r25, r0
     452:	11 24       	eor	r1, r1
     454:	86 5b       	subi	r24, 0xB6	; 182
     456:	9e 4f       	sbci	r25, 0xFE	; 254
     458:	21 e0       	ldi	r18, 0x01	; 1
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	fc 01       	movw	r30, r24
     45e:	31 83       	std	Z+1, r19	; 0x01
     460:	20 83       	st	Z, r18
     462:	0f c0       	rjmp	.+30     	; 0x482 <OSSemPost+0xda>
	} else	sema->num ++;
     464:	8b 81       	ldd	r24, Y+3	; 0x03
     466:	9c 81       	ldd	r25, Y+4	; 0x04
     468:	fc 01       	movw	r30, r24
     46a:	82 81       	ldd	r24, Z+2	; 0x02
     46c:	93 81       	ldd	r25, Z+3	; 0x03
     46e:	9c 01       	movw	r18, r24
     470:	2f 5f       	subi	r18, 0xFF	; 255
     472:	3f 4f       	sbci	r19, 0xFF	; 255
     474:	8b 81       	ldd	r24, Y+3	; 0x03
     476:	9c 81       	ldd	r25, Y+4	; 0x04
     478:	fc 01       	movw	r30, r24
     47a:	33 83       	std	Z+3, r19	; 0x03
     47c:	22 83       	std	Z+2, r18	; 0x02
     47e:	01 c0       	rjmp	.+2      	; 0x482 <OSSemPost+0xda>
}

// Posts a semaphore.
void OSSemPost(OSSignal *sema)
{
	if(sema->type != SEMAPHORE_TYPE)	return;
     480:	00 00       	nop
		sema->qH += sizeof(int);
		if(sema->qH == MAX_QUEUE_SIZE)	sema->qH = 0;
		
		taskTable[taskToWake].runflag = TASK_PREEMPTED;
	} else	sema->num ++;
}
     482:	0f 90       	pop	r0
     484:	0f 90       	pop	r0
     486:	0f 90       	pop	r0
     488:	0f 90       	pop	r0
     48a:	cf 91       	pop	r28
     48c:	df 91       	pop	r29
     48e:	08 95       	ret

00000490 <OSmakeQ>:
#ifdef OSIncludeQueues

// qsize=number of elements in the queue. esize=size of each element. So calling makeQ(10, sizeof(int)) would produce a queue of 10 elements, 
// with each element being the size of an integer.
OSSignal *OSmakeQ(int qsize, int esize)
{
     490:	df 93       	push	r29
     492:	cf 93       	push	r28
     494:	00 d0       	rcall	.+0      	; 0x496 <OSmakeQ+0x6>
     496:	00 d0       	rcall	.+0      	; 0x498 <OSmakeQ+0x8>
     498:	00 d0       	rcall	.+0      	; 0x49a <OSmakeQ+0xa>
     49a:	cd b7       	in	r28, 0x3d	; 61
     49c:	de b7       	in	r29, 0x3e	; 62
     49e:	9c 83       	std	Y+4, r25	; 0x04
     4a0:	8b 83       	std	Y+3, r24	; 0x03
     4a2:	7e 83       	std	Y+6, r23	; 0x06
     4a4:	6d 83       	std	Y+5, r22	; 0x05
	// when cannot hold such a huge queue
	if(qsize > MAX_QUEUE_SIZE)	return 0;
     4a6:	8b 81       	ldd	r24, Y+3	; 0x03
     4a8:	9c 81       	ldd	r25, Y+4	; 0x04
     4aa:	85 36       	cpi	r24, 0x65	; 101
     4ac:	91 05       	cpc	r25, r1
     4ae:	1c f0       	brlt	.+6      	; 0x4b6 <OSmakeQ+0x26>
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	22 c0       	rjmp	.+68     	; 0x4fa <OSmakeQ+0x6a>
	
	OSSignal *sem = (OSSignal *) malloc(sizeof(OSSignal));
     4b6:	8c e6       	ldi	r24, 0x6C	; 108
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	0e 94 a8 0c 	call	0x1950	; 0x1950 <malloc>
     4be:	9a 83       	std	Y+2, r25	; 0x02
     4c0:	89 83       	std	Y+1, r24	; 0x01
	sem->type	= QUEUE_TYPE;
     4c2:	89 81       	ldd	r24, Y+1	; 0x01
     4c4:	9a 81       	ldd	r25, Y+2	; 0x02
     4c6:	21 e0       	ldi	r18, 0x01	; 1
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	fc 01       	movw	r30, r24
     4cc:	31 83       	std	Z+1, r19	; 0x01
     4ce:	20 83       	st	Z, r18
	sem->num	= esize;
     4d0:	89 81       	ldd	r24, Y+1	; 0x01
     4d2:	9a 81       	ldd	r25, Y+2	; 0x02
     4d4:	2d 81       	ldd	r18, Y+5	; 0x05
     4d6:	3e 81       	ldd	r19, Y+6	; 0x06
     4d8:	fc 01       	movw	r30, r24
     4da:	33 83       	std	Z+3, r19	; 0x03
     4dc:	22 83       	std	Z+2, r18	; 0x02
	sem->qH		= 0;
     4de:	89 81       	ldd	r24, Y+1	; 0x01
     4e0:	9a 81       	ldd	r25, Y+2	; 0x02
     4e2:	88 59       	subi	r24, 0x98	; 152
     4e4:	9f 4f       	sbci	r25, 0xFF	; 255
     4e6:	fc 01       	movw	r30, r24
     4e8:	11 82       	std	Z+1, r1	; 0x01
     4ea:	10 82       	st	Z, r1
	sem->qT		= 0;
     4ec:	89 81       	ldd	r24, Y+1	; 0x01
     4ee:	9a 81       	ldd	r25, Y+2	; 0x02
     4f0:	86 59       	subi	r24, 0x96	; 150
     4f2:	9f 4f       	sbci	r25, 0xFF	; 255
     4f4:	fc 01       	movw	r30, r24
     4f6:	11 82       	std	Z+1, r1	; 0x01
     4f8:	10 82       	st	Z, r1
}
     4fa:	26 96       	adiw	r28, 0x06	; 6
     4fc:	0f b6       	in	r0, 0x3f	; 63
     4fe:	f8 94       	cli
     500:	de bf       	out	0x3e, r29	; 62
     502:	0f be       	out	0x3f, r0	; 63
     504:	cd bf       	out	0x3d, r28	; 61
     506:	cf 91       	pop	r28
     508:	df 91       	pop	r29
     50a:	08 95       	ret

0000050c <OSenq>:

// Inserts item into queue q
void OSenq(OSSignal *q, void *item)
{
     50c:	df 93       	push	r29
     50e:	cf 93       	push	r28
     510:	00 d0       	rcall	.+0      	; 0x512 <OSenq+0x6>
     512:	00 d0       	rcall	.+0      	; 0x514 <OSenq+0x8>
     514:	00 d0       	rcall	.+0      	; 0x516 <OSenq+0xa>
     516:	cd b7       	in	r28, 0x3d	; 61
     518:	de b7       	in	r29, 0x3e	; 62
     51a:	9c 83       	std	Y+4, r25	; 0x04
     51c:	8b 83       	std	Y+3, r24	; 0x03
     51e:	7e 83       	std	Y+6, r23	; 0x06
     520:	6d 83       	std	Y+5, r22	; 0x05
	int i;
	for(i = 0;i < q->num;i += sizeof(char)){
     522:	1a 82       	std	Y+2, r1	; 0x02
     524:	19 82       	std	Y+1, r1	; 0x01
     526:	4e c0       	rjmp	.+156    	; 0x5c4 <OSenq+0xb8>
		q->q[q->qT] = *(char *)(item + i);
     528:	8b 81       	ldd	r24, Y+3	; 0x03
     52a:	9c 81       	ldd	r25, Y+4	; 0x04
     52c:	86 59       	subi	r24, 0x96	; 150
     52e:	9f 4f       	sbci	r25, 0xFF	; 255
     530:	fc 01       	movw	r30, r24
     532:	80 81       	ld	r24, Z
     534:	91 81       	ldd	r25, Z+1	; 0x01
     536:	4d 81       	ldd	r20, Y+5	; 0x05
     538:	5e 81       	ldd	r21, Y+6	; 0x06
     53a:	29 81       	ldd	r18, Y+1	; 0x01
     53c:	3a 81       	ldd	r19, Y+2	; 0x02
     53e:	24 0f       	add	r18, r20
     540:	35 1f       	adc	r19, r21
     542:	f9 01       	movw	r30, r18
     544:	40 81       	ld	r20, Z
     546:	2b 81       	ldd	r18, Y+3	; 0x03
     548:	3c 81       	ldd	r19, Y+4	; 0x04
     54a:	82 0f       	add	r24, r18
     54c:	93 1f       	adc	r25, r19
     54e:	04 96       	adiw	r24, 0x04	; 4
     550:	fc 01       	movw	r30, r24
     552:	40 83       	st	Z, r20
		q->qT += sizeof(char);
     554:	8b 81       	ldd	r24, Y+3	; 0x03
     556:	9c 81       	ldd	r25, Y+4	; 0x04
     558:	86 59       	subi	r24, 0x96	; 150
     55a:	9f 4f       	sbci	r25, 0xFF	; 255
     55c:	fc 01       	movw	r30, r24
     55e:	80 81       	ld	r24, Z
     560:	91 81       	ldd	r25, Z+1	; 0x01
     562:	01 96       	adiw	r24, 0x01	; 1
     564:	9c 01       	movw	r18, r24
     566:	8b 81       	ldd	r24, Y+3	; 0x03
     568:	9c 81       	ldd	r25, Y+4	; 0x04
     56a:	86 59       	subi	r24, 0x96	; 150
     56c:	9f 4f       	sbci	r25, 0xFF	; 255
     56e:	fc 01       	movw	r30, r24
     570:	31 83       	std	Z+1, r19	; 0x01
     572:	20 83       	st	Z, r18
		if(q->qT == MAX_QUEUE_SIZE)	q->qT = 0;
     574:	8b 81       	ldd	r24, Y+3	; 0x03
     576:	9c 81       	ldd	r25, Y+4	; 0x04
     578:	86 59       	subi	r24, 0x96	; 150
     57a:	9f 4f       	sbci	r25, 0xFF	; 255
     57c:	fc 01       	movw	r30, r24
     57e:	80 81       	ld	r24, Z
     580:	91 81       	ldd	r25, Z+1	; 0x01
     582:	84 36       	cpi	r24, 0x64	; 100
     584:	91 05       	cpc	r25, r1
     586:	41 f4       	brne	.+16     	; 0x598 <OSenq+0x8c>
     588:	8b 81       	ldd	r24, Y+3	; 0x03
     58a:	9c 81       	ldd	r25, Y+4	; 0x04
     58c:	86 59       	subi	r24, 0x96	; 150
     58e:	9f 4f       	sbci	r25, 0xFF	; 255
     590:	fc 01       	movw	r30, r24
     592:	11 82       	std	Z+1, r1	; 0x01
     594:	10 82       	st	Z, r1
     596:	11 c0       	rjmp	.+34     	; 0x5ba <OSenq+0xae>
		
		// when the queue got overflow
		else if(q->qT == q->qH)	return;
     598:	8b 81       	ldd	r24, Y+3	; 0x03
     59a:	9c 81       	ldd	r25, Y+4	; 0x04
     59c:	86 59       	subi	r24, 0x96	; 150
     59e:	9f 4f       	sbci	r25, 0xFF	; 255
     5a0:	fc 01       	movw	r30, r24
     5a2:	20 81       	ld	r18, Z
     5a4:	31 81       	ldd	r19, Z+1	; 0x01
     5a6:	8b 81       	ldd	r24, Y+3	; 0x03
     5a8:	9c 81       	ldd	r25, Y+4	; 0x04
     5aa:	88 59       	subi	r24, 0x98	; 152
     5ac:	9f 4f       	sbci	r25, 0xFF	; 255
     5ae:	fc 01       	movw	r30, r24
     5b0:	80 81       	ld	r24, Z
     5b2:	91 81       	ldd	r25, Z+1	; 0x01
     5b4:	28 17       	cp	r18, r24
     5b6:	39 07       	cpc	r19, r25
     5b8:	89 f0       	breq	.+34     	; 0x5dc <OSenq+0xd0>

// Inserts item into queue q
void OSenq(OSSignal *q, void *item)
{
	int i;
	for(i = 0;i < q->num;i += sizeof(char)){
     5ba:	89 81       	ldd	r24, Y+1	; 0x01
     5bc:	9a 81       	ldd	r25, Y+2	; 0x02
     5be:	01 96       	adiw	r24, 0x01	; 1
     5c0:	9a 83       	std	Y+2, r25	; 0x02
     5c2:	89 83       	std	Y+1, r24	; 0x01
     5c4:	8b 81       	ldd	r24, Y+3	; 0x03
     5c6:	9c 81       	ldd	r25, Y+4	; 0x04
     5c8:	fc 01       	movw	r30, r24
     5ca:	22 81       	ldd	r18, Z+2	; 0x02
     5cc:	33 81       	ldd	r19, Z+3	; 0x03
     5ce:	89 81       	ldd	r24, Y+1	; 0x01
     5d0:	9a 81       	ldd	r25, Y+2	; 0x02
     5d2:	82 17       	cp	r24, r18
     5d4:	93 07       	cpc	r25, r19
     5d6:	0c f4       	brge	.+2      	; 0x5da <OSenq+0xce>
     5d8:	a7 cf       	rjmp	.-178    	; 0x528 <OSenq+0x1c>
     5da:	01 c0       	rjmp	.+2      	; 0x5de <OSenq+0xd2>
		q->q[q->qT] = *(char *)(item + i);
		q->qT += sizeof(char);
		if(q->qT == MAX_QUEUE_SIZE)	q->qT = 0;
		
		// when the queue got overflow
		else if(q->qT == q->qH)	return;
     5dc:	00 00       	nop
	}
}
     5de:	26 96       	adiw	r28, 0x06	; 6
     5e0:	0f b6       	in	r0, 0x3f	; 63
     5e2:	f8 94       	cli
     5e4:	de bf       	out	0x3e, r29	; 62
     5e6:	0f be       	out	0x3f, r0	; 63
     5e8:	cd bf       	out	0x3d, r28	; 61
     5ea:	cf 91       	pop	r28
     5ec:	df 91       	pop	r29
     5ee:	08 95       	ret

000005f0 <OSdeq>:

// Removes and returns item from head of queue. Process blocks if queue is empty.
void *OSdeq(OSSignal *q)
{
     5f0:	df 93       	push	r29
     5f2:	cf 93       	push	r28
     5f4:	00 d0       	rcall	.+0      	; 0x5f6 <OSdeq+0x6>
     5f6:	00 d0       	rcall	.+0      	; 0x5f8 <OSdeq+0x8>
     5f8:	cd b7       	in	r28, 0x3d	; 61
     5fa:	de b7       	in	r29, 0x3e	; 62
     5fc:	9c 83       	std	Y+4, r25	; 0x04
     5fe:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	int iniqH = q->qH;
     600:	8b 81       	ldd	r24, Y+3	; 0x03
     602:	9c 81       	ldd	r25, Y+4	; 0x04
     604:	88 59       	subi	r24, 0x98	; 152
     606:	9f 4f       	sbci	r25, 0xFF	; 255
     608:	fc 01       	movw	r30, r24
     60a:	80 81       	ld	r24, Z
     60c:	91 81       	ldd	r25, Z+1	; 0x01
     60e:	9a 83       	std	Y+2, r25	; 0x02
     610:	89 83       	std	Y+1, r24	; 0x01
	q->qH += q->num * sizeof(char);
     612:	8b 81       	ldd	r24, Y+3	; 0x03
     614:	9c 81       	ldd	r25, Y+4	; 0x04
     616:	88 59       	subi	r24, 0x98	; 152
     618:	9f 4f       	sbci	r25, 0xFF	; 255
     61a:	fc 01       	movw	r30, r24
     61c:	80 81       	ld	r24, Z
     61e:	91 81       	ldd	r25, Z+1	; 0x01
     620:	9c 01       	movw	r18, r24
     622:	8b 81       	ldd	r24, Y+3	; 0x03
     624:	9c 81       	ldd	r25, Y+4	; 0x04
     626:	fc 01       	movw	r30, r24
     628:	82 81       	ldd	r24, Z+2	; 0x02
     62a:	93 81       	ldd	r25, Z+3	; 0x03
     62c:	82 0f       	add	r24, r18
     62e:	93 1f       	adc	r25, r19
     630:	9c 01       	movw	r18, r24
     632:	8b 81       	ldd	r24, Y+3	; 0x03
     634:	9c 81       	ldd	r25, Y+4	; 0x04
     636:	88 59       	subi	r24, 0x98	; 152
     638:	9f 4f       	sbci	r25, 0xFF	; 255
     63a:	fc 01       	movw	r30, r24
     63c:	31 83       	std	Z+1, r19	; 0x01
     63e:	20 83       	st	Z, r18
	
	// error: the qH encountered the qT
	if((iniqH - q->qT) * (q->qH - q->qT) <= 0)	return 0;
     640:	8b 81       	ldd	r24, Y+3	; 0x03
     642:	9c 81       	ldd	r25, Y+4	; 0x04
     644:	86 59       	subi	r24, 0x96	; 150
     646:	9f 4f       	sbci	r25, 0xFF	; 255
     648:	fc 01       	movw	r30, r24
     64a:	80 81       	ld	r24, Z
     64c:	91 81       	ldd	r25, Z+1	; 0x01
     64e:	29 81       	ldd	r18, Y+1	; 0x01
     650:	3a 81       	ldd	r19, Y+2	; 0x02
     652:	a9 01       	movw	r20, r18
     654:	48 1b       	sub	r20, r24
     656:	59 0b       	sbc	r21, r25
     658:	8b 81       	ldd	r24, Y+3	; 0x03
     65a:	9c 81       	ldd	r25, Y+4	; 0x04
     65c:	88 59       	subi	r24, 0x98	; 152
     65e:	9f 4f       	sbci	r25, 0xFF	; 255
     660:	fc 01       	movw	r30, r24
     662:	20 81       	ld	r18, Z
     664:	31 81       	ldd	r19, Z+1	; 0x01
     666:	8b 81       	ldd	r24, Y+3	; 0x03
     668:	9c 81       	ldd	r25, Y+4	; 0x04
     66a:	86 59       	subi	r24, 0x96	; 150
     66c:	9f 4f       	sbci	r25, 0xFF	; 255
     66e:	fc 01       	movw	r30, r24
     670:	80 81       	ld	r24, Z
     672:	91 81       	ldd	r25, Z+1	; 0x01
     674:	28 1b       	sub	r18, r24
     676:	39 0b       	sbc	r19, r25
     678:	42 9f       	mul	r20, r18
     67a:	c0 01       	movw	r24, r0
     67c:	43 9f       	mul	r20, r19
     67e:	90 0d       	add	r25, r0
     680:	52 9f       	mul	r21, r18
     682:	90 0d       	add	r25, r0
     684:	11 24       	eor	r1, r1
     686:	18 16       	cp	r1, r24
     688:	19 06       	cpc	r1, r25
     68a:	1c f0       	brlt	.+6      	; 0x692 <OSdeq+0xa2>
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	09 c0       	rjmp	.+18     	; 0x6a4 <OSdeq+0xb4>
	
	
	return (void *) &(q->q[iniqH]);
     692:	8b 81       	ldd	r24, Y+3	; 0x03
     694:	9c 81       	ldd	r25, Y+4	; 0x04
     696:	9c 01       	movw	r18, r24
     698:	2c 5f       	subi	r18, 0xFC	; 252
     69a:	3f 4f       	sbci	r19, 0xFF	; 255
     69c:	89 81       	ldd	r24, Y+1	; 0x01
     69e:	9a 81       	ldd	r25, Y+2	; 0x02
     6a0:	82 0f       	add	r24, r18
     6a2:	93 1f       	adc	r25, r19
}
     6a4:	0f 90       	pop	r0
     6a6:	0f 90       	pop	r0
     6a8:	0f 90       	pop	r0
     6aa:	0f 90       	pop	r0
     6ac:	cf 91       	pop	r28
     6ae:	df 91       	pop	r29
     6b0:	08 95       	ret

000006b2 <OSdestroyQ>:

// Destroys the queue
void *OSdestroyQ(OSSignal *q)
{
     6b2:	df 93       	push	r29
     6b4:	cf 93       	push	r28
     6b6:	00 d0       	rcall	.+0      	; 0x6b8 <OSdestroyQ+0x6>
     6b8:	cd b7       	in	r28, 0x3d	; 61
     6ba:	de b7       	in	r29, 0x3e	; 62
     6bc:	9a 83       	std	Y+2, r25	; 0x02
     6be:	89 83       	std	Y+1, r24	; 0x01
	free(q);
     6c0:	89 81       	ldd	r24, Y+1	; 0x01
     6c2:	9a 81       	ldd	r25, Y+2	; 0x02
     6c4:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <free>
}
     6c8:	0f 90       	pop	r0
     6ca:	0f 90       	pop	r0
     6cc:	cf 91       	pop	r28
     6ce:	df 91       	pop	r29
     6d0:	08 95       	ret

000006d2 <runTaskFirstTime>:
	"pop r0	\n\t"\
	"out __SREG__, r0\n\t"\
	"pop r0	\n\t": : "r" (pxCurrentTCB):\
	);

void runTaskFirstTime(int i){
     6d2:	df 93       	push	r29
     6d4:	cf 93       	push	r28
     6d6:	00 d0       	rcall	.+0      	; 0x6d8 <runTaskFirstTime+0x6>
     6d8:	cd b7       	in	r28, 0x3d	; 61
     6da:	de b7       	in	r29, 0x3e	; 62
     6dc:	9a 83       	std	Y+2, r25	; 0x02
     6de:	89 83       	std	Y+1, r24	; 0x01
	cli();
     6e0:	f8 94       	cli
	currentTask = i;
     6e2:	89 81       	ldd	r24, Y+1	; 0x01
     6e4:	9a 81       	ldd	r25, Y+2	; 0x02
     6e6:	90 93 16 01 	sts	0x0116, r25
     6ea:	80 93 15 01 	sts	0x0115, r24
	taskTable[currentTask].runflag = 1;
     6ee:	40 91 15 01 	lds	r20, 0x0115
     6f2:	50 91 16 01 	lds	r21, 0x0116
     6f6:	2b e0       	ldi	r18, 0x0B	; 11
     6f8:	31 e0       	ldi	r19, 0x01	; 1
     6fa:	42 9f       	mul	r20, r18
     6fc:	c0 01       	movw	r24, r0
     6fe:	43 9f       	mul	r20, r19
     700:	90 0d       	add	r25, r0
     702:	52 9f       	mul	r21, r18
     704:	90 0d       	add	r25, r0
     706:	11 24       	eor	r1, r1
     708:	86 5b       	subi	r24, 0xB6	; 182
     70a:	9e 4f       	sbci	r25, 0xFE	; 254
     70c:	21 e0       	ldi	r18, 0x01	; 1
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	fc 01       	movw	r30, r24
     712:	31 83       	std	Z+1, r19	; 0x01
     714:	20 83       	st	Z, r18
    
	pxCurrentTCB = (unsigned long)(taskTable[currentTask].stack + TASK_STACK_SIZE - 1);
     716:	40 91 15 01 	lds	r20, 0x0115
     71a:	50 91 16 01 	lds	r21, 0x0116
     71e:	2b e0       	ldi	r18, 0x0B	; 11
     720:	31 e0       	ldi	r19, 0x01	; 1
     722:	42 9f       	mul	r20, r18
     724:	c0 01       	movw	r24, r0
     726:	43 9f       	mul	r20, r19
     728:	90 0d       	add	r25, r0
     72a:	52 9f       	mul	r21, r18
     72c:	90 0d       	add	r25, r0
     72e:	11 24       	eor	r1, r1
     730:	86 5f       	subi	r24, 0xF6	; 246
     732:	9e 4f       	sbci	r25, 0xFE	; 254
     734:	86 5b       	subi	r24, 0xB6	; 182
     736:	9e 4f       	sbci	r25, 0xFE	; 254
     738:	aa 27       	eor	r26, r26
     73a:	97 fd       	sbrc	r25, 7
     73c:	a0 95       	com	r26
     73e:	ba 2f       	mov	r27, r26
     740:	80 93 46 01 	sts	0x0146, r24
     744:	90 93 47 01 	sts	0x0147, r25
     748:	a0 93 48 01 	sts	0x0148, r26
     74c:	b0 93 49 01 	sts	0x0149, r27
	
    asm volatile ("\n\t"\
     750:	a0 91 46 01 	lds	r26, 0x0146
     754:	b0 91 47 01 	lds	r27, 0x0147
     758:	ad bf       	out	0x3d, r26	; 61
     75a:	be bf       	out	0x3e, r27	; 62
                  "lds r26, pxCurrentTCB \n\t"\
                  "lds r27, pxCurrentTCB+1 \n\t"\
                  "out __SP_L__, r26 \n\t"\
                  "out __SP_H__, r27 \n\t"\
                  );
	sei();
     75c:	78 94       	sei
    taskTable[currentTask].fptr(taskTable[currentTask].arg);
     75e:	40 91 15 01 	lds	r20, 0x0115
     762:	50 91 16 01 	lds	r21, 0x0116
     766:	2b e0       	ldi	r18, 0x0B	; 11
     768:	31 e0       	ldi	r19, 0x01	; 1
     76a:	42 9f       	mul	r20, r18
     76c:	c0 01       	movw	r24, r0
     76e:	43 9f       	mul	r20, r19
     770:	90 0d       	add	r25, r0
     772:	52 9f       	mul	r21, r18
     774:	90 0d       	add	r25, r0
     776:	11 24       	eor	r1, r1
     778:	82 5b       	subi	r24, 0xB2	; 178
     77a:	9e 4f       	sbci	r25, 0xFE	; 254
     77c:	fc 01       	movw	r30, r24
     77e:	20 81       	ld	r18, Z
     780:	31 81       	ldd	r19, Z+1	; 0x01
     782:	60 91 15 01 	lds	r22, 0x0115
     786:	70 91 16 01 	lds	r23, 0x0116
     78a:	4b e0       	ldi	r20, 0x0B	; 11
     78c:	51 e0       	ldi	r21, 0x01	; 1
     78e:	64 9f       	mul	r22, r20
     790:	c0 01       	movw	r24, r0
     792:	65 9f       	mul	r22, r21
     794:	90 0d       	add	r25, r0
     796:	74 9f       	mul	r23, r20
     798:	90 0d       	add	r25, r0
     79a:	11 24       	eor	r1, r1
     79c:	80 5b       	subi	r24, 0xB0	; 176
     79e:	9e 4f       	sbci	r25, 0xFE	; 254
     7a0:	fc 01       	movw	r30, r24
     7a2:	80 81       	ld	r24, Z
     7a4:	91 81       	ldd	r25, Z+1	; 0x01
     7a6:	f9 01       	movw	r30, r18
     7a8:	09 95       	icall
}
     7aa:	0f 90       	pop	r0
     7ac:	0f 90       	pop	r0
     7ae:	cf 91       	pop	r28
     7b0:	df 91       	pop	r29
     7b2:	08 95       	ret

000007b4 <OSMakeAtomic>:



void OSMakeAtomic()
{
     7b4:	df 93       	push	r29
     7b6:	cf 93       	push	r28
     7b8:	cd b7       	in	r28, 0x3d	; 61
     7ba:	de b7       	in	r29, 0x3e	; 62
	// Disables interrupts to create an atomic section.
	cli();
     7bc:	f8 94       	cli
	//TIMSK0 &= 0b11111101;
}
     7be:	cf 91       	pop	r28
     7c0:	df 91       	pop	r29
     7c2:	08 95       	ret

000007c4 <OSLeaveAtomic>:

void OSLeaveAtomic()
{
     7c4:	df 93       	push	r29
     7c6:	cf 93       	push	r28
     7c8:	cd b7       	in	r28, 0x3d	; 61
     7ca:	de b7       	in	r29, 0x3e	; 62
	// Leaves atomic section by re-enabling interrupts.
	sei();
     7cc:	78 94       	sei
	//TIMSK0 |= 0b10;
}
     7ce:	cf 91       	pop	r28
     7d0:	df 91       	pop	r29
     7d2:	08 95       	ret

000007d4 <findNextTask>:

// DO NOT modify this!
void OSSwapTask() __attribute__ ((naked));

int findNextTask()
{
     7d4:	df 93       	push	r29
     7d6:	cf 93       	push	r28
     7d8:	00 d0       	rcall	.+0      	; 0x7da <findNextTask+0x6>
     7da:	cd b7       	in	r28, 0x3d	; 61
     7dc:	de b7       	in	r29, 0x3e	; 62
	// Apply scheduling algorithm to find next task to run, and returns the index number of that task.
	// Note that OS_NUM_TASKS in kernel.h is the MAXIMUM number of tasks that can be created, not the actual number
	// created. So OS_NUM_TASKS can be 10 although in actual fact only 4 tasks were created. You should pick only amongst
	// these 4 tasks.
	//say("finding task\n\r");
	for(i = currentTask + 1; i< task_counter; i++){
     7de:	80 91 15 01 	lds	r24, 0x0115
     7e2:	90 91 16 01 	lds	r25, 0x0116
     7e6:	01 96       	adiw	r24, 0x01	; 1
     7e8:	9a 83       	std	Y+2, r25	; 0x02
     7ea:	89 83       	std	Y+1, r24	; 0x01
     7ec:	1c c0       	rjmp	.+56     	; 0x826 <findNextTask+0x52>
		if(taskTable[i].runflag == TASK_BLOCKED)	continue;
     7ee:	49 81       	ldd	r20, Y+1	; 0x01
     7f0:	5a 81       	ldd	r21, Y+2	; 0x02
     7f2:	2b e0       	ldi	r18, 0x0B	; 11
     7f4:	31 e0       	ldi	r19, 0x01	; 1
     7f6:	42 9f       	mul	r20, r18
     7f8:	c0 01       	movw	r24, r0
     7fa:	43 9f       	mul	r20, r19
     7fc:	90 0d       	add	r25, r0
     7fe:	52 9f       	mul	r21, r18
     800:	90 0d       	add	r25, r0
     802:	11 24       	eor	r1, r1
     804:	86 5b       	subi	r24, 0xB6	; 182
     806:	9e 4f       	sbci	r25, 0xFE	; 254
     808:	fc 01       	movw	r30, r24
     80a:	80 81       	ld	r24, Z
     80c:	91 81       	ldd	r25, Z+1	; 0x01
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	91 05       	cpc	r25, r1
     812:	31 f4       	brne	.+12     	; 0x820 <findNextTask+0x4c>
	// Apply scheduling algorithm to find next task to run, and returns the index number of that task.
	// Note that OS_NUM_TASKS in kernel.h is the MAXIMUM number of tasks that can be created, not the actual number
	// created. So OS_NUM_TASKS can be 10 although in actual fact only 4 tasks were created. You should pick only amongst
	// these 4 tasks.
	//say("finding task\n\r");
	for(i = currentTask + 1; i< task_counter; i++){
     814:	89 81       	ldd	r24, Y+1	; 0x01
     816:	9a 81       	ldd	r25, Y+2	; 0x02
     818:	01 96       	adiw	r24, 0x01	; 1
     81a:	9a 83       	std	Y+2, r25	; 0x02
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	03 c0       	rjmp	.+6      	; 0x826 <findNextTask+0x52>
		if(taskTable[i].runflag == TASK_BLOCKED)	continue;
		else	return i;
     820:	89 81       	ldd	r24, Y+1	; 0x01
     822:	9a 81       	ldd	r25, Y+2	; 0x02
     824:	33 c0       	rjmp	.+102    	; 0x88c <findNextTask+0xb8>
	// Apply scheduling algorithm to find next task to run, and returns the index number of that task.
	// Note that OS_NUM_TASKS in kernel.h is the MAXIMUM number of tasks that can be created, not the actual number
	// created. So OS_NUM_TASKS can be 10 although in actual fact only 4 tasks were created. You should pick only amongst
	// these 4 tasks.
	//say("finding task\n\r");
	for(i = currentTask + 1; i< task_counter; i++){
     826:	80 91 2e 01 	lds	r24, 0x012E
     82a:	90 91 2f 01 	lds	r25, 0x012F
     82e:	29 81       	ldd	r18, Y+1	; 0x01
     830:	3a 81       	ldd	r19, Y+2	; 0x02
     832:	28 17       	cp	r18, r24
     834:	39 07       	cpc	r19, r25
     836:	dc f2       	brlt	.-74     	; 0x7ee <findNextTask+0x1a>
		if(taskTable[i].runflag == TASK_BLOCKED)	continue;
		else	return i;
	}
	
	for(i=0; i< currentTask; i++){
     838:	1a 82       	std	Y+2, r1	; 0x02
     83a:	19 82       	std	Y+1, r1	; 0x01
     83c:	1c c0       	rjmp	.+56     	; 0x876 <findNextTask+0xa2>
		if(taskTable[i].runflag == TASK_BLOCKED)	continue;
     83e:	49 81       	ldd	r20, Y+1	; 0x01
     840:	5a 81       	ldd	r21, Y+2	; 0x02
     842:	2b e0       	ldi	r18, 0x0B	; 11
     844:	31 e0       	ldi	r19, 0x01	; 1
     846:	42 9f       	mul	r20, r18
     848:	c0 01       	movw	r24, r0
     84a:	43 9f       	mul	r20, r19
     84c:	90 0d       	add	r25, r0
     84e:	52 9f       	mul	r21, r18
     850:	90 0d       	add	r25, r0
     852:	11 24       	eor	r1, r1
     854:	86 5b       	subi	r24, 0xB6	; 182
     856:	9e 4f       	sbci	r25, 0xFE	; 254
     858:	fc 01       	movw	r30, r24
     85a:	80 81       	ld	r24, Z
     85c:	91 81       	ldd	r25, Z+1	; 0x01
     85e:	82 30       	cpi	r24, 0x02	; 2
     860:	91 05       	cpc	r25, r1
     862:	31 f4       	brne	.+12     	; 0x870 <findNextTask+0x9c>
	for(i = currentTask + 1; i< task_counter; i++){
		if(taskTable[i].runflag == TASK_BLOCKED)	continue;
		else	return i;
	}
	
	for(i=0; i< currentTask; i++){
     864:	89 81       	ldd	r24, Y+1	; 0x01
     866:	9a 81       	ldd	r25, Y+2	; 0x02
     868:	01 96       	adiw	r24, 0x01	; 1
     86a:	9a 83       	std	Y+2, r25	; 0x02
     86c:	89 83       	std	Y+1, r24	; 0x01
     86e:	03 c0       	rjmp	.+6      	; 0x876 <findNextTask+0xa2>
		if(taskTable[i].runflag == TASK_BLOCKED)	continue;
		else	return i;
     870:	89 81       	ldd	r24, Y+1	; 0x01
     872:	9a 81       	ldd	r25, Y+2	; 0x02
     874:	0b c0       	rjmp	.+22     	; 0x88c <findNextTask+0xb8>
	for(i = currentTask + 1; i< task_counter; i++){
		if(taskTable[i].runflag == TASK_BLOCKED)	continue;
		else	return i;
	}
	
	for(i=0; i< currentTask; i++){
     876:	80 91 15 01 	lds	r24, 0x0115
     87a:	90 91 16 01 	lds	r25, 0x0116
     87e:	29 81       	ldd	r18, Y+1	; 0x01
     880:	3a 81       	ldd	r19, Y+2	; 0x02
     882:	28 17       	cp	r18, r24
     884:	39 07       	cpc	r19, r25
     886:	dc f2       	brlt	.-74     	; 0x83e <findNextTask+0x6a>
		if(taskTable[i].runflag == TASK_BLOCKED)	continue;
		else	return i;
	}
	
	return -1;	// unsuccessful
     888:	8f ef       	ldi	r24, 0xFF	; 255
     88a:	9f ef       	ldi	r25, 0xFF	; 255
}
     88c:	0f 90       	pop	r0
     88e:	0f 90       	pop	r0
     890:	cf 91       	pop	r28
     892:	df 91       	pop	r29
     894:	08 95       	ret

00000896 <OSSwapTask>:


void OSSwapTask()
 {
	// assumption: when this method is being called, there's always a running task; otherwise it would do nothing
	if(currentTask < 0)	return;
     896:	80 91 15 01 	lds	r24, 0x0115
     89a:	90 91 16 01 	lds	r25, 0x0116
     89e:	99 23       	and	r25, r25
     8a0:	0c f4       	brge	.+2      	; 0x8a4 <OSSwapTask+0xe>
     8a2:	e6 c0       	rjmp	.+460    	; 0xa70 <__stack+0x171>
	
	// Call findNextTask to decide which task to run next.
	int taskNum = findNextTask();
     8a4:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <findNextTask>
     8a8:	9a 83       	std	Y+2, r25	; 0x02
     8aa:	89 83       	std	Y+1, r24	; 0x01
	
	sprintf(buf,"n#:%d \n\r",taskNum);
     8ac:	00 d0       	rcall	.+0      	; 0x8ae <OSSwapTask+0x18>
     8ae:	00 d0       	rcall	.+0      	; 0x8b0 <OSSwapTask+0x1a>
     8b0:	00 d0       	rcall	.+0      	; 0x8b2 <OSSwapTask+0x1c>
     8b2:	8d b7       	in	r24, 0x3d	; 61
     8b4:	9e b7       	in	r25, 0x3e	; 62
     8b6:	01 96       	adiw	r24, 0x01	; 1
     8b8:	22 e3       	ldi	r18, 0x32	; 50
     8ba:	31 e0       	ldi	r19, 0x01	; 1
     8bc:	fc 01       	movw	r30, r24
     8be:	31 83       	std	Z+1, r19	; 0x01
     8c0:	20 83       	st	Z, r18
     8c2:	27 e1       	ldi	r18, 0x17	; 23
     8c4:	31 e0       	ldi	r19, 0x01	; 1
     8c6:	fc 01       	movw	r30, r24
     8c8:	33 83       	std	Z+3, r19	; 0x03
     8ca:	22 83       	std	Z+2, r18	; 0x02
     8cc:	29 81       	ldd	r18, Y+1	; 0x01
     8ce:	3a 81       	ldd	r19, Y+2	; 0x02
     8d0:	fc 01       	movw	r30, r24
     8d2:	35 83       	std	Z+5, r19	; 0x05
     8d4:	24 83       	std	Z+4, r18	; 0x04
     8d6:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <sprintf>
     8da:	8d b7       	in	r24, 0x3d	; 61
     8dc:	9e b7       	in	r25, 0x3e	; 62
     8de:	06 96       	adiw	r24, 0x06	; 6
     8e0:	0f b6       	in	r0, 0x3f	; 63
     8e2:	f8 94       	cli
     8e4:	9e bf       	out	0x3e, r25	; 62
     8e6:	0f be       	out	0x3f, r0	; 63
     8e8:	8d bf       	out	0x3d, r24	; 61
	say(buf);
     8ea:	82 e3       	ldi	r24, 0x32	; 50
     8ec:	91 e0       	ldi	r25, 0x01	; 1
     8ee:	0e 94 7f 06 	call	0xcfe	; 0xcfe <say>
	
	if(taskNum < 0){
     8f2:	89 81       	ldd	r24, Y+1	; 0x01
     8f4:	9a 81       	ldd	r25, Y+2	; 0x02
     8f6:	99 23       	and	r25, r25
     8f8:	0c f4       	brge	.+2      	; 0x8fc <OSSwapTask+0x66>
     8fa:	bc c0       	rjmp	.+376    	; 0xa74 <__stack+0x175>
		//say("minus\n\r");
		return;	// no task to swap
	}		
	cli();
     8fc:	f8 94       	cli
	// Save the context of the current task, and copy the task stack pointer to the task's entry in the Task Control Block (tcb).
	portSAVE_CONTEXT();
     8fe:	0f 92       	push	r0
     900:	0f b6       	in	r0, 0x3f	; 63
     902:	0f 92       	push	r0
     904:	1f 92       	push	r1
     906:	11 24       	eor	r1, r1
     908:	2f 92       	push	r2
     90a:	3f 92       	push	r3
     90c:	4f 92       	push	r4
     90e:	5f 92       	push	r5
     910:	6f 92       	push	r6
     912:	7f 92       	push	r7
     914:	8f 92       	push	r8
     916:	9f 92       	push	r9
     918:	af 92       	push	r10
     91a:	bf 92       	push	r11
     91c:	cf 92       	push	r12
     91e:	df 92       	push	r13
     920:	ef 92       	push	r14
     922:	ff 92       	push	r15
     924:	0f 93       	push	r16
     926:	1f 93       	push	r17
     928:	2f 93       	push	r18
     92a:	3f 93       	push	r19
     92c:	4f 93       	push	r20
     92e:	5f 93       	push	r21
     930:	6f 93       	push	r22
     932:	7f 93       	push	r23
     934:	8f 93       	push	r24
     936:	9f 93       	push	r25
     938:	af 93       	push	r26
     93a:	bf 93       	push	r27
     93c:	cf 93       	push	r28
     93e:	df 93       	push	r29
     940:	ef 93       	push	r30
     942:	ff 93       	push	r31
     944:	ad b7       	in	r26, 0x3d	; 61
     946:	be b7       	in	r27, 0x3e	; 62
     948:	b0 93 47 01 	sts	0x0147, r27
     94c:	a0 93 46 01 	sts	0x0146, r26
	
	// save the current stack pointer
	taskTable[currentTask].stack_ptr = pxCurrentTCB;
     950:	60 91 15 01 	lds	r22, 0x0115
     954:	70 91 16 01 	lds	r23, 0x0116
     958:	80 91 46 01 	lds	r24, 0x0146
     95c:	90 91 47 01 	lds	r25, 0x0147
     960:	a0 91 48 01 	lds	r26, 0x0148
     964:	b0 91 49 01 	lds	r27, 0x0149
     968:	4b e0       	ldi	r20, 0x0B	; 11
     96a:	51 e0       	ldi	r21, 0x01	; 1
     96c:	64 9f       	mul	r22, r20
     96e:	90 01       	movw	r18, r0
     970:	65 9f       	mul	r22, r21
     972:	30 0d       	add	r19, r0
     974:	74 9f       	mul	r23, r20
     976:	30 0d       	add	r19, r0
     978:	11 24       	eor	r1, r1
     97a:	2e 5a       	subi	r18, 0xAE	; 174
     97c:	3e 4f       	sbci	r19, 0xFE	; 254
     97e:	f9 01       	movw	r30, r18
     980:	80 83       	st	Z, r24
     982:	91 83       	std	Z+1, r25	; 0x01
     984:	a2 83       	std	Z+2, r26	; 0x02
     986:	b3 83       	std	Z+3, r27	; 0x03
	
	// update the "currentTask" to be the next task to run
	currentTask = taskNum;
     988:	89 81       	ldd	r24, Y+1	; 0x01
     98a:	9a 81       	ldd	r25, Y+2	; 0x02
     98c:	90 93 16 01 	sts	0x0116, r25
     990:	80 93 15 01 	sts	0x0115, r24
	
	TTaskBlock *t = &taskTable[currentTask];
     994:	80 91 15 01 	lds	r24, 0x0115
     998:	90 91 16 01 	lds	r25, 0x0116
     99c:	ac 01       	movw	r20, r24
     99e:	2b e0       	ldi	r18, 0x0B	; 11
     9a0:	31 e0       	ldi	r19, 0x01	; 1
     9a2:	42 9f       	mul	r20, r18
     9a4:	c0 01       	movw	r24, r0
     9a6:	43 9f       	mul	r20, r19
     9a8:	90 0d       	add	r25, r0
     9aa:	52 9f       	mul	r21, r18
     9ac:	90 0d       	add	r25, r0
     9ae:	11 24       	eor	r1, r1
     9b0:	86 5b       	subi	r24, 0xB6	; 182
     9b2:	9e 4f       	sbci	r25, 0xFE	; 254
     9b4:	9c 83       	std	Y+4, r25	; 0x04
     9b6:	8b 83       	std	Y+3, r24	; 0x03
	sei();
     9b8:	78 94       	sei
	
	if(t->runflag){	// has been run
     9ba:	8b 81       	ldd	r24, Y+3	; 0x03
     9bc:	9c 81       	ldd	r25, Y+4	; 0x04
     9be:	fc 01       	movw	r30, r24
     9c0:	80 81       	ld	r24, Z
     9c2:	91 81       	ldd	r25, Z+1	; 0x01
     9c4:	00 97       	sbiw	r24, 0x00	; 0
     9c6:	09 f4       	brne	.+2      	; 0x9ca <__stack+0xcb>
     9c8:	4b c0       	rjmp	.+150    	; 0xa60 <__stack+0x161>
		// get the stack pointer saved
		cli();
     9ca:	f8 94       	cli
		pxCurrentTCB = taskTable[currentTask].stack_ptr;
     9cc:	40 91 15 01 	lds	r20, 0x0115
     9d0:	50 91 16 01 	lds	r21, 0x0116
     9d4:	2b e0       	ldi	r18, 0x0B	; 11
     9d6:	31 e0       	ldi	r19, 0x01	; 1
     9d8:	42 9f       	mul	r20, r18
     9da:	c0 01       	movw	r24, r0
     9dc:	43 9f       	mul	r20, r19
     9de:	90 0d       	add	r25, r0
     9e0:	52 9f       	mul	r21, r18
     9e2:	90 0d       	add	r25, r0
     9e4:	11 24       	eor	r1, r1
     9e6:	8e 5a       	subi	r24, 0xAE	; 174
     9e8:	9e 4f       	sbci	r25, 0xFE	; 254
     9ea:	fc 01       	movw	r30, r24
     9ec:	80 81       	ld	r24, Z
     9ee:	91 81       	ldd	r25, Z+1	; 0x01
     9f0:	a2 81       	ldd	r26, Z+2	; 0x02
     9f2:	b3 81       	ldd	r27, Z+3	; 0x03
     9f4:	80 93 46 01 	sts	0x0146, r24
     9f8:	90 93 47 01 	sts	0x0147, r25
     9fc:	a0 93 48 01 	sts	0x0148, r26
     a00:	b0 93 49 01 	sts	0x0149, r27
		portRESTORE_CONTEXT();
     a04:	80 91 46 01 	lds	r24, 0x0146
     a08:	90 91 47 01 	lds	r25, 0x0147
     a0c:	a0 91 48 01 	lds	r26, 0x0148
     a10:	b0 91 49 01 	lds	r27, 0x0149
     a14:	8d bf       	out	0x3d, r24	; 61
     a16:	9e bf       	out	0x3e, r25	; 62
     a18:	ff 91       	pop	r31
     a1a:	ef 91       	pop	r30
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	bf 91       	pop	r27
     a22:	af 91       	pop	r26
     a24:	9f 91       	pop	r25
     a26:	8f 91       	pop	r24
     a28:	7f 91       	pop	r23
     a2a:	6f 91       	pop	r22
     a2c:	5f 91       	pop	r21
     a2e:	4f 91       	pop	r20
     a30:	3f 91       	pop	r19
     a32:	2f 91       	pop	r18
     a34:	1f 91       	pop	r17
     a36:	0f 91       	pop	r16
     a38:	ff 90       	pop	r15
     a3a:	ef 90       	pop	r14
     a3c:	df 90       	pop	r13
     a3e:	cf 90       	pop	r12
     a40:	bf 90       	pop	r11
     a42:	af 90       	pop	r10
     a44:	9f 90       	pop	r9
     a46:	8f 90       	pop	r8
     a48:	7f 90       	pop	r7
     a4a:	6f 90       	pop	r6
     a4c:	5f 90       	pop	r5
     a4e:	4f 90       	pop	r4
     a50:	3f 90       	pop	r3
     a52:	2f 90       	pop	r2
     a54:	1f 90       	pop	r1
     a56:	0f 90       	pop	r0
     a58:	0f be       	out	0x3f, r0	; 63
     a5a:	0f 90       	pop	r0
		sei();
     a5c:	78 94       	sei
     a5e:	06 c0       	rjmp	.+12     	; 0xa6c <__stack+0x16d>
	}else{	// never run -> then run
		runTaskFirstTime(currentTask);
     a60:	80 91 15 01 	lds	r24, 0x0115
     a64:	90 91 16 01 	lds	r25, 0x0116
     a68:	0e 94 69 03 	call	0x6d2	; 0x6d2 <runTaskFirstTime>
	}
	
	// Do not modify the line below!	
	asm("ret");
     a6c:	08 95       	ret
     a6e:	03 c0       	rjmp	.+6      	; 0xa76 <__vector_14>


void OSSwapTask()
 {
	// assumption: when this method is being called, there's always a running task; otherwise it would do nothing
	if(currentTask < 0)	return;
     a70:	00 00       	nop
     a72:	01 c0       	rjmp	.+2      	; 0xa76 <__vector_14>
	...

00000a76 <__vector_14>:
// ISR for the timer. IMPLEMENT ONLY IN PART 2!


ISR(TIMER0_COMPA_vect, ISR_NAKED)
{
	cli();
     a76:	f8 94       	cli
	
	OSSwapTask();
     a78:	0e 94 4b 04 	call	0x896	; 0x896 <OSSwapTask>
	
	// Do not change this!
	asm("reti");
     a7c:	18 95       	reti
	sei();
     a7e:	78 94       	sei

00000a80 <OSInit>:
}


void OSInit()
{ 
     a80:	df 93       	push	r29
     a82:	cf 93       	push	r28
     a84:	cd b7       	in	r28, 0x3d	; 61
     a86:	de b7       	in	r29, 0x3e	; 62
	// Initialize all OS state variables, hardware used DIRECTLY by the OS, etc etc. Do not initialize variables or hardware
	// used by the application. Only those used by the OS.
	int i;
	
	// initialize timer 0
	TCNT0 = 0; OCR0A = 100;
     a88:	86 e4       	ldi	r24, 0x46	; 70
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	fc 01       	movw	r30, r24
     a8e:	10 82       	st	Z, r1
     a90:	87 e4       	ldi	r24, 0x47	; 71
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	24 e6       	ldi	r18, 0x64	; 100
     a96:	fc 01       	movw	r30, r24
     a98:	20 83       	st	Z, r18
	TCCR0A = 0b00000010;
     a9a:	84 e4       	ldi	r24, 0x44	; 68
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	22 e0       	ldi	r18, 0x02	; 2
     aa0:	fc 01       	movw	r30, r24
     aa2:	20 83       	st	Z, r18
	TCCR0B = 0b00000101;
     aa4:	85 e4       	ldi	r24, 0x45	; 69
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	25 e0       	ldi	r18, 0x05	; 5
     aaa:	fc 01       	movw	r30, r24
     aac:	20 83       	st	Z, r18
}
     aae:	cf 91       	pop	r28
     ab0:	df 91       	pop	r29
     ab2:	08 95       	ret

00000ab4 <OSAddTask>:
// First argument is a pointer to the task's function code, the second is a priority number (0=highest priority)
// and the 3rd argument is an argument that will be passed to the task function the first time it is run.
// E.g. OSAddTask(task1, 0, (void *) 5) causes a task called task1 to be created with priority 0, and the integer
// 5 is passed to task1 when it is first called. See app.c to fully understand how OSAddTask is used.
int OSAddTask(void (*taskptr)(void *), int prio, void* arg)
{
     ab4:	df 93       	push	r29
     ab6:	cf 93       	push	r28
     ab8:	cd b7       	in	r28, 0x3d	; 61
     aba:	de b7       	in	r29, 0x3e	; 62
     abc:	28 97       	sbiw	r28, 0x08	; 8
     abe:	0f b6       	in	r0, 0x3f	; 63
     ac0:	f8 94       	cli
     ac2:	de bf       	out	0x3e, r29	; 62
     ac4:	0f be       	out	0x3f, r0	; 63
     ac6:	cd bf       	out	0x3d, r28	; 61
     ac8:	9c 83       	std	Y+4, r25	; 0x04
     aca:	8b 83       	std	Y+3, r24	; 0x03
     acc:	7e 83       	std	Y+6, r23	; 0x06
     ace:	6d 83       	std	Y+5, r22	; 0x05
     ad0:	58 87       	std	Y+8, r21	; 0x08
     ad2:	4f 83       	std	Y+7, r20	; 0x07
	// Adds a new entry to the TCB. Returns a -1 if # of tasks > OS_NUM_TASKS. Note that OS_NUM_TASKS is the MAXIMUM
	// number of tasks that can be created, not the actual number.
	if(task_counter >= OS_NUM_TASKS)	return -1;
     ad4:	80 91 2e 01 	lds	r24, 0x012E
     ad8:	90 91 2f 01 	lds	r25, 0x012F
     adc:	84 30       	cpi	r24, 0x04	; 4
     ade:	91 05       	cpc	r25, r1
     ae0:	1c f0       	brlt	.+6      	; 0xae8 <OSAddTask+0x34>
     ae2:	8f ef       	ldi	r24, 0xFF	; 255
     ae4:	9f ef       	ldi	r25, 0xFF	; 255
     ae6:	33 c0       	rjmp	.+102    	; 0xb4e <OSAddTask+0x9a>
	TTaskBlock *t = &taskTable[task_counter++];
     ae8:	80 91 2e 01 	lds	r24, 0x012E
     aec:	90 91 2f 01 	lds	r25, 0x012F
     af0:	bc 01       	movw	r22, r24
     af2:	4b e0       	ldi	r20, 0x0B	; 11
     af4:	51 e0       	ldi	r21, 0x01	; 1
     af6:	64 9f       	mul	r22, r20
     af8:	90 01       	movw	r18, r0
     afa:	65 9f       	mul	r22, r21
     afc:	30 0d       	add	r19, r0
     afe:	74 9f       	mul	r23, r20
     b00:	30 0d       	add	r19, r0
     b02:	11 24       	eor	r1, r1
     b04:	26 5b       	subi	r18, 0xB6	; 182
     b06:	3e 4f       	sbci	r19, 0xFE	; 254
     b08:	3a 83       	std	Y+2, r19	; 0x02
     b0a:	29 83       	std	Y+1, r18	; 0x01
     b0c:	01 96       	adiw	r24, 0x01	; 1
     b0e:	90 93 2f 01 	sts	0x012F, r25
     b12:	80 93 2e 01 	sts	0x012E, r24
	t->fptr = taskptr;
     b16:	89 81       	ldd	r24, Y+1	; 0x01
     b18:	9a 81       	ldd	r25, Y+2	; 0x02
     b1a:	2b 81       	ldd	r18, Y+3	; 0x03
     b1c:	3c 81       	ldd	r19, Y+4	; 0x04
     b1e:	fc 01       	movw	r30, r24
     b20:	35 83       	std	Z+5, r19	; 0x05
     b22:	24 83       	std	Z+4, r18	; 0x04
	t->prio = prio;
     b24:	89 81       	ldd	r24, Y+1	; 0x01
     b26:	9a 81       	ldd	r25, Y+2	; 0x02
     b28:	2d 81       	ldd	r18, Y+5	; 0x05
     b2a:	3e 81       	ldd	r19, Y+6	; 0x06
     b2c:	fc 01       	movw	r30, r24
     b2e:	33 83       	std	Z+3, r19	; 0x03
     b30:	22 83       	std	Z+2, r18	; 0x02
	t->arg = arg;
     b32:	89 81       	ldd	r24, Y+1	; 0x01
     b34:	9a 81       	ldd	r25, Y+2	; 0x02
     b36:	2f 81       	ldd	r18, Y+7	; 0x07
     b38:	38 85       	ldd	r19, Y+8	; 0x08
     b3a:	fc 01       	movw	r30, r24
     b3c:	37 83       	std	Z+7, r19	; 0x07
     b3e:	26 83       	std	Z+6, r18	; 0x06
	t->runflag = 0;
     b40:	89 81       	ldd	r24, Y+1	; 0x01
     b42:	9a 81       	ldd	r25, Y+2	; 0x02
     b44:	fc 01       	movw	r30, r24
     b46:	11 82       	std	Z+1, r1	; 0x01
     b48:	10 82       	st	Z, r1
	
	return 0;
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	90 e0       	ldi	r25, 0x00	; 0
}
     b4e:	28 96       	adiw	r28, 0x08	; 8
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	cf 91       	pop	r28
     b5c:	df 91       	pop	r29
     b5e:	08 95       	ret

00000b60 <OSRun>:

void OSRun()
{
     b60:	df 93       	push	r29
     b62:	cf 93       	push	r28
     b64:	cd b7       	in	r28, 0x3d	; 61
     b66:	de b7       	in	r29, 0x3e	; 62
	// start timer 0
	TIMSK0 |= 0b10;
     b68:	8e e6       	ldi	r24, 0x6E	; 110
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	2e e6       	ldi	r18, 0x6E	; 110
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	f9 01       	movw	r30, r18
     b72:	20 81       	ld	r18, Z
     b74:	22 60       	ori	r18, 0x02	; 2
     b76:	fc 01       	movw	r30, r24
     b78:	20 83       	st	Z, r18
	// enable global interrupt
	sei();
     b7a:	78 94       	sei
	
	// Starts by executing the first task
	currentTask = 0;
     b7c:	10 92 16 01 	sts	0x0116, r1
     b80:	10 92 15 01 	sts	0x0115, r1
	runTaskFirstTime(currentTask);
     b84:	80 91 15 01 	lds	r24, 0x0115
     b88:	90 91 16 01 	lds	r25, 0x0116
     b8c:	0e 94 69 03 	call	0x6d2	; 0x6d2 <runTaskFirstTime>
}
     b90:	cf 91       	pop	r28
     b92:	df 91       	pop	r29
     b94:	08 95       	ret

00000b96 <setupSerial>:
#define enter_atomic() cli()
#define leave_atomic() sei()

// Set up for 9600 8N1
void setupSerial()
{
     b96:	df 93       	push	r29
     b98:	cf 93       	push	r28
     b9a:	cd b7       	in	r28, 0x3d	; 61
     b9c:	de b7       	in	r29, 0x3e	; 62
	enter_atomic();
     b9e:	f8 94       	cli
	qcount=0;
     ba0:	10 92 c1 05 	sts	0x05C1, r1
     ba4:	10 92 c0 05 	sts	0x05C0, r1
	qhead=0;
     ba8:	10 92 05 06 	sts	0x0605, r1
     bac:	10 92 04 06 	sts	0x0604, r1
	qtail=0;
     bb0:	10 92 c3 05 	sts	0x05C3, r1
     bb4:	10 92 c2 05 	sts	0x05C2, r1
	lqhead=0;
     bb8:	10 92 bd 05 	sts	0x05BD, r1
     bbc:	10 92 bc 05 	sts	0x05BC, r1
	lqtail=0;
     bc0:	10 92 bf 05 	sts	0x05BF, r1
     bc4:	10 92 be 05 	sts	0x05BE, r1
	lqcount=0;
     bc8:	10 92 bb 05 	sts	0x05BB, r1
     bcc:	10 92 ba 05 	sts	0x05BA, r1

	// Set up baud rate generator. UBBR=16000000/(16*9600)-1 = 103
	UBRR0L=103;
     bd0:	84 ec       	ldi	r24, 0xC4	; 196
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	27 e6       	ldi	r18, 0x67	; 103
     bd6:	fc 01       	movw	r30, r24
     bd8:	20 83       	st	Z, r18
	UBRR0H=0;
     bda:	85 ec       	ldi	r24, 0xC5	; 197
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	fc 01       	movw	r30, r24
     be0:	10 82       	st	Z, r1
	
	// Set up 8N1
	UCSR0C=0b110;
     be2:	82 ec       	ldi	r24, 0xC2	; 194
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	26 e0       	ldi	r18, 0x06	; 6
     be8:	fc 01       	movw	r30, r24
     bea:	20 83       	st	Z, r18
	
	// Enable RX and TX.
	UCSR0B=0b10011000;
     bec:	81 ec       	ldi	r24, 0xC1	; 193
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	28 e9       	ldi	r18, 0x98	; 152
     bf2:	fc 01       	movw	r30, r24
     bf4:	20 83       	st	Z, r18
	UCSR0A=0;
     bf6:	80 ec       	ldi	r24, 0xC0	; 192
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	fc 01       	movw	r30, r24
     bfc:	10 82       	st	Z, r1
	leave_atomic();
     bfe:	78 94       	sei
}
     c00:	cf 91       	pop	r28
     c02:	df 91       	pop	r29
     c04:	08 95       	ret

00000c06 <__vector_20>:

// ISR for transmit end.
ISR(USART_TX_vect)
{
     c06:	1f 92       	push	r1
     c08:	0f 92       	push	r0
     c0a:	0f b6       	in	r0, 0x3f	; 63
     c0c:	0f 92       	push	r0
     c0e:	11 24       	eor	r1, r1
     c10:	2f 93       	push	r18
     c12:	3f 93       	push	r19
     c14:	5f 93       	push	r21
     c16:	6f 93       	push	r22
     c18:	7f 93       	push	r23
     c1a:	8f 93       	push	r24
     c1c:	9f 93       	push	r25
     c1e:	af 93       	push	r26
     c20:	bf 93       	push	r27
     c22:	ef 93       	push	r30
     c24:	ff 93       	push	r31
     c26:	df 93       	push	r29
     c28:	cf 93       	push	r28
     c2a:	cd b7       	in	r28, 0x3d	; 61
     c2c:	de b7       	in	r29, 0x3e	; 62

	enter_atomic();
     c2e:	f8 94       	cli
	// Disable interrupts. 
	if(qcount==0)
     c30:	80 91 c0 05 	lds	r24, 0x05C0
     c34:	90 91 c1 05 	lds	r25, 0x05C1
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	51 f4       	brne	.+20     	; 0xc50 <__vector_20+0x4a>
		UCSR0B&=0b10111111;
     c3c:	81 ec       	ldi	r24, 0xC1	; 193
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	21 ec       	ldi	r18, 0xC1	; 193
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	f9 01       	movw	r30, r18
     c46:	20 81       	ld	r18, Z
     c48:	2f 7b       	andi	r18, 0xBF	; 191
     c4a:	fc 01       	movw	r30, r24
     c4c:	20 83       	st	Z, r18
     c4e:	23 c0       	rjmp	.+70     	; 0xc96 <__vector_20+0x90>
	else
	{
		UDR0=q[qtail];
     c50:	86 ec       	ldi	r24, 0xC6	; 198
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	20 91 c2 05 	lds	r18, 0x05C2
     c58:	30 91 c3 05 	lds	r19, 0x05C3
     c5c:	2c 53       	subi	r18, 0x3C	; 60
     c5e:	3a 4f       	sbci	r19, 0xFA	; 250
     c60:	f9 01       	movw	r30, r18
     c62:	20 81       	ld	r18, Z
     c64:	fc 01       	movw	r30, r24
     c66:	20 83       	st	Z, r18
		qtail=(qtail+1)%QLEN;
     c68:	80 91 c2 05 	lds	r24, 0x05C2
     c6c:	90 91 c3 05 	lds	r25, 0x05C3
     c70:	01 96       	adiw	r24, 0x01	; 1
     c72:	20 e4       	ldi	r18, 0x40	; 64
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	b9 01       	movw	r22, r18
     c78:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__divmodhi4>
     c7c:	90 93 c3 05 	sts	0x05C3, r25
     c80:	80 93 c2 05 	sts	0x05C2, r24
		qcount--;
     c84:	80 91 c0 05 	lds	r24, 0x05C0
     c88:	90 91 c1 05 	lds	r25, 0x05C1
     c8c:	01 97       	sbiw	r24, 0x01	; 1
     c8e:	90 93 c1 05 	sts	0x05C1, r25
     c92:	80 93 c0 05 	sts	0x05C0, r24
	}	
	leave_atomic();
     c96:	78 94       	sei
}
     c98:	cf 91       	pop	r28
     c9a:	df 91       	pop	r29
     c9c:	ff 91       	pop	r31
     c9e:	ef 91       	pop	r30
     ca0:	bf 91       	pop	r27
     ca2:	af 91       	pop	r26
     ca4:	9f 91       	pop	r25
     ca6:	8f 91       	pop	r24
     ca8:	7f 91       	pop	r23
     caa:	6f 91       	pop	r22
     cac:	5f 91       	pop	r21
     cae:	3f 91       	pop	r19
     cb0:	2f 91       	pop	r18
     cb2:	0f 90       	pop	r0
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	0f 90       	pop	r0
     cb8:	1f 90       	pop	r1
     cba:	18 95       	reti

00000cbc <__vector_18>:

// Listener
ISR(USART_RX_vect)
{
     cbc:	1f 92       	push	r1
     cbe:	0f 92       	push	r0
     cc0:	0f b6       	in	r0, 0x3f	; 63
     cc2:	0f 92       	push	r0
     cc4:	11 24       	eor	r1, r1
     cc6:	8f 93       	push	r24
     cc8:	9f 93       	push	r25
     cca:	ef 93       	push	r30
     ccc:	ff 93       	push	r31
     cce:	df 93       	push	r29
     cd0:	cf 93       	push	r28
     cd2:	0f 92       	push	r0
     cd4:	cd b7       	in	r28, 0x3d	; 61
     cd6:	de b7       	in	r29, 0x3e	; 62
	// Guarantee atomicity
	enter_atomic();
     cd8:	f8 94       	cli
	// Get the character
	char ch=UDR0;
     cda:	86 ec       	ldi	r24, 0xC6	; 198
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	fc 01       	movw	r30, r24
     ce0:	80 81       	ld	r24, Z
     ce2:	89 83       	std	Y+1, r24	; 0x01
	leave_atomic();
     ce4:	78 94       	sei
}
     ce6:	0f 90       	pop	r0
     ce8:	cf 91       	pop	r28
     cea:	df 91       	pop	r29
     cec:	ff 91       	pop	r31
     cee:	ef 91       	pop	r30
     cf0:	9f 91       	pop	r25
     cf2:	8f 91       	pop	r24
     cf4:	0f 90       	pop	r0
     cf6:	0f be       	out	0x3f, r0	; 63
     cf8:	0f 90       	pop	r0
     cfa:	1f 90       	pop	r1
     cfc:	18 95       	reti

00000cfe <say>:

void say(char *str)
{
     cfe:	0f 93       	push	r16
     d00:	1f 93       	push	r17
     d02:	df 93       	push	r29
     d04:	cf 93       	push	r28
     d06:	00 d0       	rcall	.+0      	; 0xd08 <say+0xa>
     d08:	00 d0       	rcall	.+0      	; 0xd0a <say+0xc>
     d0a:	cd b7       	in	r28, 0x3d	; 61
     d0c:	de b7       	in	r29, 0x3e	; 62
     d0e:	9c 83       	std	Y+4, r25	; 0x04
     d10:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	
	// Guarantee atomicity
	enter_atomic();
     d12:	f8 94       	cli
	for(i=0; i<strlen(str) && qcount < QLEN; i++)
     d14:	1a 82       	std	Y+2, r1	; 0x02
     d16:	19 82       	std	Y+1, r1	; 0x01
     d18:	62 c0       	rjmp	.+196    	; 0xdde <say+0xe0>
	{
		q[qhead]=str[i];
     d1a:	80 91 04 06 	lds	r24, 0x0604
     d1e:	90 91 05 06 	lds	r25, 0x0605
     d22:	29 81       	ldd	r18, Y+1	; 0x01
     d24:	3a 81       	ldd	r19, Y+2	; 0x02
     d26:	4b 81       	ldd	r20, Y+3	; 0x03
     d28:	5c 81       	ldd	r21, Y+4	; 0x04
     d2a:	24 0f       	add	r18, r20
     d2c:	35 1f       	adc	r19, r21
     d2e:	f9 01       	movw	r30, r18
     d30:	20 81       	ld	r18, Z
     d32:	8c 53       	subi	r24, 0x3C	; 60
     d34:	9a 4f       	sbci	r25, 0xFA	; 250
     d36:	fc 01       	movw	r30, r24
     d38:	20 83       	st	Z, r18
		qhead=(qhead+1) %QLEN;
     d3a:	80 91 04 06 	lds	r24, 0x0604
     d3e:	90 91 05 06 	lds	r25, 0x0605
     d42:	01 96       	adiw	r24, 0x01	; 1
     d44:	20 e4       	ldi	r18, 0x40	; 64
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	b9 01       	movw	r22, r18
     d4a:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__divmodhi4>
     d4e:	90 93 05 06 	sts	0x0605, r25
     d52:	80 93 04 06 	sts	0x0604, r24
		qcount++;			
     d56:	80 91 c0 05 	lds	r24, 0x05C0
     d5a:	90 91 c1 05 	lds	r25, 0x05C1
     d5e:	01 96       	adiw	r24, 0x01	; 1
     d60:	90 93 c1 05 	sts	0x05C1, r25
     d64:	80 93 c0 05 	sts	0x05C0, r24
		
		if(!(UCSR0B & 0b01000000))
     d68:	81 ec       	ldi	r24, 0xC1	; 193
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	fc 01       	movw	r30, r24
     d6e:	80 81       	ld	r24, Z
     d70:	88 2f       	mov	r24, r24
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	80 74       	andi	r24, 0x40	; 64
     d76:	90 70       	andi	r25, 0x00	; 0
     d78:	00 97       	sbiw	r24, 0x00	; 0
     d7a:	61 f5       	brne	.+88     	; 0xdd4 <say+0xd6>
		{
			UDR0=q[qtail];
     d7c:	86 ec       	ldi	r24, 0xC6	; 198
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	20 91 c2 05 	lds	r18, 0x05C2
     d84:	30 91 c3 05 	lds	r19, 0x05C3
     d88:	2c 53       	subi	r18, 0x3C	; 60
     d8a:	3a 4f       	sbci	r19, 0xFA	; 250
     d8c:	f9 01       	movw	r30, r18
     d8e:	20 81       	ld	r18, Z
     d90:	fc 01       	movw	r30, r24
     d92:	20 83       	st	Z, r18
			qtail=(qtail+1)%QLEN;
     d94:	80 91 c2 05 	lds	r24, 0x05C2
     d98:	90 91 c3 05 	lds	r25, 0x05C3
     d9c:	01 96       	adiw	r24, 0x01	; 1
     d9e:	20 e4       	ldi	r18, 0x40	; 64
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	b9 01       	movw	r22, r18
     da4:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__divmodhi4>
     da8:	90 93 c3 05 	sts	0x05C3, r25
     dac:	80 93 c2 05 	sts	0x05C2, r24
			qcount--;
     db0:	80 91 c0 05 	lds	r24, 0x05C0
     db4:	90 91 c1 05 	lds	r25, 0x05C1
     db8:	01 97       	sbiw	r24, 0x01	; 1
     dba:	90 93 c1 05 	sts	0x05C1, r25
     dbe:	80 93 c0 05 	sts	0x05C0, r24
			UCSR0B|=0b01000000;
     dc2:	81 ec       	ldi	r24, 0xC1	; 193
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	21 ec       	ldi	r18, 0xC1	; 193
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	f9 01       	movw	r30, r18
     dcc:	20 81       	ld	r18, Z
     dce:	20 64       	ori	r18, 0x40	; 64
     dd0:	fc 01       	movw	r30, r24
     dd2:	20 83       	st	Z, r18
{
	int i;
	
	// Guarantee atomicity
	enter_atomic();
	for(i=0; i<strlen(str) && qcount < QLEN; i++)
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	9a 81       	ldd	r25, Y+2	; 0x02
     dd8:	01 96       	adiw	r24, 0x01	; 1
     dda:	9a 83       	std	Y+2, r25	; 0x02
     ddc:	89 83       	std	Y+1, r24	; 0x01
     dde:	09 81       	ldd	r16, Y+1	; 0x01
     de0:	1a 81       	ldd	r17, Y+2	; 0x02
     de2:	8b 81       	ldd	r24, Y+3	; 0x03
     de4:	9c 81       	ldd	r25, Y+4	; 0x04
     de6:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <strlen>
     dea:	08 17       	cp	r16, r24
     dec:	19 07       	cpc	r17, r25
     dee:	40 f4       	brcc	.+16     	; 0xe00 <say+0x102>
     df0:	80 91 c0 05 	lds	r24, 0x05C0
     df4:	90 91 c1 05 	lds	r25, 0x05C1
     df8:	80 34       	cpi	r24, 0x40	; 64
     dfa:	91 05       	cpc	r25, r1
     dfc:	0c f4       	brge	.+2      	; 0xe00 <say+0x102>
     dfe:	8d cf       	rjmp	.-230    	; 0xd1a <say+0x1c>
		//while(qcount == QLEN) {
		//	leave_atomic();
		//	enter_atomic();
		//}
	}
	leave_atomic();
     e00:	78 94       	sei
     e02:	0f 90       	pop	r0
     e04:	0f 90       	pop	r0
     e06:	0f 90       	pop	r0
     e08:	0f 90       	pop	r0
     e0a:	cf 91       	pop	r28
     e0c:	df 91       	pop	r29
     e0e:	1f 91       	pop	r17
     e10:	0f 91       	pop	r16
     e12:	08 95       	ret

00000e14 <__fixunssfsi>:
     e14:	ef 92       	push	r14
     e16:	ff 92       	push	r15
     e18:	0f 93       	push	r16
     e1a:	1f 93       	push	r17
     e1c:	7b 01       	movw	r14, r22
     e1e:	8c 01       	movw	r16, r24
     e20:	20 e0       	ldi	r18, 0x00	; 0
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	40 e0       	ldi	r20, 0x00	; 0
     e26:	5f e4       	ldi	r21, 0x4F	; 79
     e28:	0e 94 08 0a 	call	0x1410	; 0x1410 <__gesf2>
     e2c:	87 fd       	sbrc	r24, 7
     e2e:	11 c0       	rjmp	.+34     	; 0xe52 <__fixunssfsi+0x3e>
     e30:	c8 01       	movw	r24, r16
     e32:	b7 01       	movw	r22, r14
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	40 e0       	ldi	r20, 0x00	; 0
     e3a:	5f e4       	ldi	r21, 0x4F	; 79
     e3c:	0e 94 ad 08 	call	0x115a	; 0x115a <__subsf3>
     e40:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__fixsfsi>
     e44:	9b 01       	movw	r18, r22
     e46:	ac 01       	movw	r20, r24
     e48:	20 50       	subi	r18, 0x00	; 0
     e4a:	30 40       	sbci	r19, 0x00	; 0
     e4c:	40 40       	sbci	r20, 0x00	; 0
     e4e:	50 48       	sbci	r21, 0x80	; 128
     e50:	06 c0       	rjmp	.+12     	; 0xe5e <__fixunssfsi+0x4a>
     e52:	c8 01       	movw	r24, r16
     e54:	b7 01       	movw	r22, r14
     e56:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__fixsfsi>
     e5a:	9b 01       	movw	r18, r22
     e5c:	ac 01       	movw	r20, r24
     e5e:	b9 01       	movw	r22, r18
     e60:	ca 01       	movw	r24, r20
     e62:	1f 91       	pop	r17
     e64:	0f 91       	pop	r16
     e66:	ff 90       	pop	r15
     e68:	ef 90       	pop	r14
     e6a:	08 95       	ret

00000e6c <_fpadd_parts>:
     e6c:	a0 e0       	ldi	r26, 0x00	; 0
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	ec e3       	ldi	r30, 0x3C	; 60
     e72:	f7 e0       	ldi	r31, 0x07	; 7
     e74:	0c 94 75 0c 	jmp	0x18ea	; 0x18ea <__prologue_saves__+0x8>
     e78:	fc 01       	movw	r30, r24
     e7a:	ea 01       	movw	r28, r20
     e7c:	80 81       	ld	r24, Z
     e7e:	82 30       	cpi	r24, 0x02	; 2
     e80:	08 f4       	brcc	.+2      	; 0xe84 <_fpadd_parts+0x18>
     e82:	38 c1       	rjmp	.+624    	; 0x10f4 <_fpadd_parts+0x288>
     e84:	db 01       	movw	r26, r22
     e86:	9c 91       	ld	r25, X
     e88:	92 30       	cpi	r25, 0x02	; 2
     e8a:	08 f4       	brcc	.+2      	; 0xe8e <_fpadd_parts+0x22>
     e8c:	30 c1       	rjmp	.+608    	; 0x10ee <_fpadd_parts+0x282>
     e8e:	84 30       	cpi	r24, 0x04	; 4
     e90:	59 f4       	brne	.+22     	; 0xea8 <_fpadd_parts+0x3c>
     e92:	94 30       	cpi	r25, 0x04	; 4
     e94:	09 f0       	breq	.+2      	; 0xe98 <_fpadd_parts+0x2c>
     e96:	2e c1       	rjmp	.+604    	; 0x10f4 <_fpadd_parts+0x288>
     e98:	91 81       	ldd	r25, Z+1	; 0x01
     e9a:	11 96       	adiw	r26, 0x01	; 1
     e9c:	8c 91       	ld	r24, X
     e9e:	11 97       	sbiw	r26, 0x01	; 1
     ea0:	98 17       	cp	r25, r24
     ea2:	09 f0       	breq	.+2      	; 0xea6 <_fpadd_parts+0x3a>
     ea4:	21 c1       	rjmp	.+578    	; 0x10e8 <_fpadd_parts+0x27c>
     ea6:	26 c1       	rjmp	.+588    	; 0x10f4 <_fpadd_parts+0x288>
     ea8:	94 30       	cpi	r25, 0x04	; 4
     eaa:	09 f4       	brne	.+2      	; 0xeae <_fpadd_parts+0x42>
     eac:	20 c1       	rjmp	.+576    	; 0x10ee <_fpadd_parts+0x282>
     eae:	92 30       	cpi	r25, 0x02	; 2
     eb0:	b1 f4       	brne	.+44     	; 0xede <_fpadd_parts+0x72>
     eb2:	82 30       	cpi	r24, 0x02	; 2
     eb4:	09 f0       	breq	.+2      	; 0xeb8 <_fpadd_parts+0x4c>
     eb6:	1e c1       	rjmp	.+572    	; 0x10f4 <_fpadd_parts+0x288>
     eb8:	ca 01       	movw	r24, r20
     eba:	af 01       	movw	r20, r30
     ebc:	28 e0       	ldi	r18, 0x08	; 8
     ebe:	da 01       	movw	r26, r20
     ec0:	0d 90       	ld	r0, X+
     ec2:	ad 01       	movw	r20, r26
     ec4:	dc 01       	movw	r26, r24
     ec6:	0d 92       	st	X+, r0
     ec8:	cd 01       	movw	r24, r26
     eca:	21 50       	subi	r18, 0x01	; 1
     ecc:	c1 f7       	brne	.-16     	; 0xebe <_fpadd_parts+0x52>
     ece:	db 01       	movw	r26, r22
     ed0:	11 96       	adiw	r26, 0x01	; 1
     ed2:	8c 91       	ld	r24, X
     ed4:	11 97       	sbiw	r26, 0x01	; 1
     ed6:	91 81       	ldd	r25, Z+1	; 0x01
     ed8:	89 23       	and	r24, r25
     eda:	89 83       	std	Y+1, r24	; 0x01
     edc:	0a c1       	rjmp	.+532    	; 0x10f2 <_fpadd_parts+0x286>
     ede:	82 30       	cpi	r24, 0x02	; 2
     ee0:	09 f4       	brne	.+2      	; 0xee4 <_fpadd_parts+0x78>
     ee2:	05 c1       	rjmp	.+522    	; 0x10ee <_fpadd_parts+0x282>
     ee4:	c2 80       	ldd	r12, Z+2	; 0x02
     ee6:	d3 80       	ldd	r13, Z+3	; 0x03
     ee8:	db 01       	movw	r26, r22
     eea:	12 96       	adiw	r26, 0x02	; 2
     eec:	6d 90       	ld	r6, X+
     eee:	7c 90       	ld	r7, X
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	24 81       	ldd	r18, Z+4	; 0x04
     ef4:	35 81       	ldd	r19, Z+5	; 0x05
     ef6:	46 81       	ldd	r20, Z+6	; 0x06
     ef8:	57 81       	ldd	r21, Z+7	; 0x07
     efa:	14 96       	adiw	r26, 0x04	; 4
     efc:	ed 90       	ld	r14, X+
     efe:	fd 90       	ld	r15, X+
     f00:	0d 91       	ld	r16, X+
     f02:	1c 91       	ld	r17, X
     f04:	17 97       	sbiw	r26, 0x07	; 7
     f06:	c6 01       	movw	r24, r12
     f08:	86 19       	sub	r24, r6
     f0a:	97 09       	sbc	r25, r7
     f0c:	5c 01       	movw	r10, r24
     f0e:	97 ff       	sbrs	r25, 7
     f10:	04 c0       	rjmp	.+8      	; 0xf1a <_fpadd_parts+0xae>
     f12:	aa 24       	eor	r10, r10
     f14:	bb 24       	eor	r11, r11
     f16:	a8 1a       	sub	r10, r24
     f18:	b9 0a       	sbc	r11, r25
     f1a:	b0 e2       	ldi	r27, 0x20	; 32
     f1c:	ab 16       	cp	r10, r27
     f1e:	b1 04       	cpc	r11, r1
     f20:	0c f0       	brlt	.+2      	; 0xf24 <_fpadd_parts+0xb8>
     f22:	61 c0       	rjmp	.+194    	; 0xfe6 <_fpadd_parts+0x17a>
     f24:	18 16       	cp	r1, r24
     f26:	19 06       	cpc	r1, r25
     f28:	6c f5       	brge	.+90     	; 0xf84 <_fpadd_parts+0x118>
     f2a:	37 01       	movw	r6, r14
     f2c:	48 01       	movw	r8, r16
     f2e:	0a 2c       	mov	r0, r10
     f30:	04 c0       	rjmp	.+8      	; 0xf3a <_fpadd_parts+0xce>
     f32:	96 94       	lsr	r9
     f34:	87 94       	ror	r8
     f36:	77 94       	ror	r7
     f38:	67 94       	ror	r6
     f3a:	0a 94       	dec	r0
     f3c:	d2 f7       	brpl	.-12     	; 0xf32 <_fpadd_parts+0xc6>
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	a0 e0       	ldi	r26, 0x00	; 0
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	0a 2c       	mov	r0, r10
     f48:	04 c0       	rjmp	.+8      	; 0xf52 <_fpadd_parts+0xe6>
     f4a:	88 0f       	add	r24, r24
     f4c:	99 1f       	adc	r25, r25
     f4e:	aa 1f       	adc	r26, r26
     f50:	bb 1f       	adc	r27, r27
     f52:	0a 94       	dec	r0
     f54:	d2 f7       	brpl	.-12     	; 0xf4a <_fpadd_parts+0xde>
     f56:	01 97       	sbiw	r24, 0x01	; 1
     f58:	a1 09       	sbc	r26, r1
     f5a:	b1 09       	sbc	r27, r1
     f5c:	8e 21       	and	r24, r14
     f5e:	9f 21       	and	r25, r15
     f60:	a0 23       	and	r26, r16
     f62:	b1 23       	and	r27, r17
     f64:	ee 24       	eor	r14, r14
     f66:	ff 24       	eor	r15, r15
     f68:	87 01       	movw	r16, r14
     f6a:	e3 94       	inc	r14
     f6c:	00 97       	sbiw	r24, 0x00	; 0
     f6e:	a1 05       	cpc	r26, r1
     f70:	b1 05       	cpc	r27, r1
     f72:	19 f4       	brne	.+6      	; 0xf7a <_fpadd_parts+0x10e>
     f74:	ee 24       	eor	r14, r14
     f76:	ff 24       	eor	r15, r15
     f78:	87 01       	movw	r16, r14
     f7a:	e6 28       	or	r14, r6
     f7c:	f7 28       	or	r15, r7
     f7e:	08 29       	or	r16, r8
     f80:	19 29       	or	r17, r9
     f82:	3c c0       	rjmp	.+120    	; 0xffc <_fpadd_parts+0x190>
     f84:	00 97       	sbiw	r24, 0x00	; 0
     f86:	d1 f1       	breq	.+116    	; 0xffc <_fpadd_parts+0x190>
     f88:	ca 0c       	add	r12, r10
     f8a:	db 1c       	adc	r13, r11
     f8c:	39 01       	movw	r6, r18
     f8e:	4a 01       	movw	r8, r20
     f90:	0a 2c       	mov	r0, r10
     f92:	04 c0       	rjmp	.+8      	; 0xf9c <_fpadd_parts+0x130>
     f94:	96 94       	lsr	r9
     f96:	87 94       	ror	r8
     f98:	77 94       	ror	r7
     f9a:	67 94       	ror	r6
     f9c:	0a 94       	dec	r0
     f9e:	d2 f7       	brpl	.-12     	; 0xf94 <_fpadd_parts+0x128>
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	a0 e0       	ldi	r26, 0x00	; 0
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	0a 2c       	mov	r0, r10
     faa:	04 c0       	rjmp	.+8      	; 0xfb4 <_fpadd_parts+0x148>
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	aa 1f       	adc	r26, r26
     fb2:	bb 1f       	adc	r27, r27
     fb4:	0a 94       	dec	r0
     fb6:	d2 f7       	brpl	.-12     	; 0xfac <_fpadd_parts+0x140>
     fb8:	01 97       	sbiw	r24, 0x01	; 1
     fba:	a1 09       	sbc	r26, r1
     fbc:	b1 09       	sbc	r27, r1
     fbe:	82 23       	and	r24, r18
     fc0:	93 23       	and	r25, r19
     fc2:	a4 23       	and	r26, r20
     fc4:	b5 23       	and	r27, r21
     fc6:	21 e0       	ldi	r18, 0x01	; 1
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	40 e0       	ldi	r20, 0x00	; 0
     fcc:	50 e0       	ldi	r21, 0x00	; 0
     fce:	00 97       	sbiw	r24, 0x00	; 0
     fd0:	a1 05       	cpc	r26, r1
     fd2:	b1 05       	cpc	r27, r1
     fd4:	19 f4       	brne	.+6      	; 0xfdc <_fpadd_parts+0x170>
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	a9 01       	movw	r20, r18
     fdc:	26 29       	or	r18, r6
     fde:	37 29       	or	r19, r7
     fe0:	48 29       	or	r20, r8
     fe2:	59 29       	or	r21, r9
     fe4:	0b c0       	rjmp	.+22     	; 0xffc <_fpadd_parts+0x190>
     fe6:	6c 14       	cp	r6, r12
     fe8:	7d 04       	cpc	r7, r13
     fea:	24 f4       	brge	.+8      	; 0xff4 <_fpadd_parts+0x188>
     fec:	ee 24       	eor	r14, r14
     fee:	ff 24       	eor	r15, r15
     ff0:	87 01       	movw	r16, r14
     ff2:	04 c0       	rjmp	.+8      	; 0xffc <_fpadd_parts+0x190>
     ff4:	63 01       	movw	r12, r6
     ff6:	20 e0       	ldi	r18, 0x00	; 0
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	a9 01       	movw	r20, r18
     ffc:	81 81       	ldd	r24, Z+1	; 0x01
     ffe:	fb 01       	movw	r30, r22
    1000:	91 81       	ldd	r25, Z+1	; 0x01
    1002:	89 17       	cp	r24, r25
    1004:	09 f4       	brne	.+2      	; 0x1008 <_fpadd_parts+0x19c>
    1006:	45 c0       	rjmp	.+138    	; 0x1092 <_fpadd_parts+0x226>
    1008:	88 23       	and	r24, r24
    100a:	49 f0       	breq	.+18     	; 0x101e <_fpadd_parts+0x1b2>
    100c:	d8 01       	movw	r26, r16
    100e:	c7 01       	movw	r24, r14
    1010:	82 1b       	sub	r24, r18
    1012:	93 0b       	sbc	r25, r19
    1014:	a4 0b       	sbc	r26, r20
    1016:	b5 0b       	sbc	r27, r21
    1018:	9c 01       	movw	r18, r24
    101a:	ad 01       	movw	r20, r26
    101c:	04 c0       	rjmp	.+8      	; 0x1026 <_fpadd_parts+0x1ba>
    101e:	2e 19       	sub	r18, r14
    1020:	3f 09       	sbc	r19, r15
    1022:	40 0b       	sbc	r20, r16
    1024:	51 0b       	sbc	r21, r17
    1026:	57 fd       	sbrc	r21, 7
    1028:	04 c0       	rjmp	.+8      	; 0x1032 <_fpadd_parts+0x1c6>
    102a:	19 82       	std	Y+1, r1	; 0x01
    102c:	db 82       	std	Y+3, r13	; 0x03
    102e:	ca 82       	std	Y+2, r12	; 0x02
    1030:	0b c0       	rjmp	.+22     	; 0x1048 <_fpadd_parts+0x1dc>
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	db 82       	std	Y+3, r13	; 0x03
    1038:	ca 82       	std	Y+2, r12	; 0x02
    103a:	50 95       	com	r21
    103c:	40 95       	com	r20
    103e:	30 95       	com	r19
    1040:	21 95       	neg	r18
    1042:	3f 4f       	sbci	r19, 0xFF	; 255
    1044:	4f 4f       	sbci	r20, 0xFF	; 255
    1046:	5f 4f       	sbci	r21, 0xFF	; 255
    1048:	2c 83       	std	Y+4, r18	; 0x04
    104a:	3d 83       	std	Y+5, r19	; 0x05
    104c:	4e 83       	std	Y+6, r20	; 0x06
    104e:	5f 83       	std	Y+7, r21	; 0x07
    1050:	0d c0       	rjmp	.+26     	; 0x106c <_fpadd_parts+0x200>
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	aa 1f       	adc	r26, r26
    1058:	bb 1f       	adc	r27, r27
    105a:	8c 83       	std	Y+4, r24	; 0x04
    105c:	9d 83       	std	Y+5, r25	; 0x05
    105e:	ae 83       	std	Y+6, r26	; 0x06
    1060:	bf 83       	std	Y+7, r27	; 0x07
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	9b 81       	ldd	r25, Y+3	; 0x03
    1066:	01 97       	sbiw	r24, 0x01	; 1
    1068:	9b 83       	std	Y+3, r25	; 0x03
    106a:	8a 83       	std	Y+2, r24	; 0x02
    106c:	8c 81       	ldd	r24, Y+4	; 0x04
    106e:	9d 81       	ldd	r25, Y+5	; 0x05
    1070:	ae 81       	ldd	r26, Y+6	; 0x06
    1072:	bf 81       	ldd	r27, Y+7	; 0x07
    1074:	9c 01       	movw	r18, r24
    1076:	ad 01       	movw	r20, r26
    1078:	21 50       	subi	r18, 0x01	; 1
    107a:	30 40       	sbci	r19, 0x00	; 0
    107c:	40 40       	sbci	r20, 0x00	; 0
    107e:	50 40       	sbci	r21, 0x00	; 0
    1080:	2f 3f       	cpi	r18, 0xFF	; 255
    1082:	ef ef       	ldi	r30, 0xFF	; 255
    1084:	3e 07       	cpc	r19, r30
    1086:	ef ef       	ldi	r30, 0xFF	; 255
    1088:	4e 07       	cpc	r20, r30
    108a:	ef e3       	ldi	r30, 0x3F	; 63
    108c:	5e 07       	cpc	r21, r30
    108e:	08 f3       	brcs	.-62     	; 0x1052 <_fpadd_parts+0x1e6>
    1090:	0b c0       	rjmp	.+22     	; 0x10a8 <_fpadd_parts+0x23c>
    1092:	89 83       	std	Y+1, r24	; 0x01
    1094:	db 82       	std	Y+3, r13	; 0x03
    1096:	ca 82       	std	Y+2, r12	; 0x02
    1098:	2e 0d       	add	r18, r14
    109a:	3f 1d       	adc	r19, r15
    109c:	40 1f       	adc	r20, r16
    109e:	51 1f       	adc	r21, r17
    10a0:	2c 83       	std	Y+4, r18	; 0x04
    10a2:	3d 83       	std	Y+5, r19	; 0x05
    10a4:	4e 83       	std	Y+6, r20	; 0x06
    10a6:	5f 83       	std	Y+7, r21	; 0x07
    10a8:	83 e0       	ldi	r24, 0x03	; 3
    10aa:	88 83       	st	Y, r24
    10ac:	2c 81       	ldd	r18, Y+4	; 0x04
    10ae:	3d 81       	ldd	r19, Y+5	; 0x05
    10b0:	4e 81       	ldd	r20, Y+6	; 0x06
    10b2:	5f 81       	ldd	r21, Y+7	; 0x07
    10b4:	57 ff       	sbrs	r21, 7
    10b6:	1d c0       	rjmp	.+58     	; 0x10f2 <_fpadd_parts+0x286>
    10b8:	da 01       	movw	r26, r20
    10ba:	c9 01       	movw	r24, r18
    10bc:	81 70       	andi	r24, 0x01	; 1
    10be:	90 70       	andi	r25, 0x00	; 0
    10c0:	a0 70       	andi	r26, 0x00	; 0
    10c2:	b0 70       	andi	r27, 0x00	; 0
    10c4:	56 95       	lsr	r21
    10c6:	47 95       	ror	r20
    10c8:	37 95       	ror	r19
    10ca:	27 95       	ror	r18
    10cc:	82 2b       	or	r24, r18
    10ce:	93 2b       	or	r25, r19
    10d0:	a4 2b       	or	r26, r20
    10d2:	b5 2b       	or	r27, r21
    10d4:	8c 83       	std	Y+4, r24	; 0x04
    10d6:	9d 83       	std	Y+5, r25	; 0x05
    10d8:	ae 83       	std	Y+6, r26	; 0x06
    10da:	bf 83       	std	Y+7, r27	; 0x07
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02
    10de:	9b 81       	ldd	r25, Y+3	; 0x03
    10e0:	01 96       	adiw	r24, 0x01	; 1
    10e2:	9b 83       	std	Y+3, r25	; 0x03
    10e4:	8a 83       	std	Y+2, r24	; 0x02
    10e6:	05 c0       	rjmp	.+10     	; 0x10f2 <_fpadd_parts+0x286>
    10e8:	e0 e2       	ldi	r30, 0x20	; 32
    10ea:	f1 e0       	ldi	r31, 0x01	; 1
    10ec:	03 c0       	rjmp	.+6      	; 0x10f4 <_fpadd_parts+0x288>
    10ee:	fb 01       	movw	r30, r22
    10f0:	01 c0       	rjmp	.+2      	; 0x10f4 <_fpadd_parts+0x288>
    10f2:	fe 01       	movw	r30, r28
    10f4:	cf 01       	movw	r24, r30
    10f6:	cd b7       	in	r28, 0x3d	; 61
    10f8:	de b7       	in	r29, 0x3e	; 62
    10fa:	ee e0       	ldi	r30, 0x0E	; 14
    10fc:	0c 94 91 0c 	jmp	0x1922	; 0x1922 <__epilogue_restores__+0x8>

00001100 <__addsf3>:
    1100:	a0 e2       	ldi	r26, 0x20	; 32
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e6 e8       	ldi	r30, 0x86	; 134
    1106:	f8 e0       	ldi	r31, 0x08	; 8
    1108:	0c 94 7d 0c 	jmp	0x18fa	; 0x18fa <__prologue_saves__+0x18>
    110c:	69 83       	std	Y+1, r22	; 0x01
    110e:	7a 83       	std	Y+2, r23	; 0x02
    1110:	8b 83       	std	Y+3, r24	; 0x03
    1112:	9c 83       	std	Y+4, r25	; 0x04
    1114:	2d 83       	std	Y+5, r18	; 0x05
    1116:	3e 83       	std	Y+6, r19	; 0x06
    1118:	4f 83       	std	Y+7, r20	; 0x07
    111a:	58 87       	std	Y+8, r21	; 0x08
    111c:	89 e0       	ldi	r24, 0x09	; 9
    111e:	e8 2e       	mov	r14, r24
    1120:	f1 2c       	mov	r15, r1
    1122:	ec 0e       	add	r14, r28
    1124:	fd 1e       	adc	r15, r29
    1126:	ce 01       	movw	r24, r28
    1128:	01 96       	adiw	r24, 0x01	; 1
    112a:	b7 01       	movw	r22, r14
    112c:	0e 94 88 0b 	call	0x1710	; 0x1710 <__unpack_f>
    1130:	8e 01       	movw	r16, r28
    1132:	0f 5e       	subi	r16, 0xEF	; 239
    1134:	1f 4f       	sbci	r17, 0xFF	; 255
    1136:	ce 01       	movw	r24, r28
    1138:	05 96       	adiw	r24, 0x05	; 5
    113a:	b8 01       	movw	r22, r16
    113c:	0e 94 88 0b 	call	0x1710	; 0x1710 <__unpack_f>
    1140:	c7 01       	movw	r24, r14
    1142:	b8 01       	movw	r22, r16
    1144:	ae 01       	movw	r20, r28
    1146:	47 5e       	subi	r20, 0xE7	; 231
    1148:	5f 4f       	sbci	r21, 0xFF	; 255
    114a:	0e 94 36 07 	call	0xe6c	; 0xe6c <_fpadd_parts>
    114e:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__pack_f>
    1152:	a0 96       	adiw	r28, 0x20	; 32
    1154:	e6 e0       	ldi	r30, 0x06	; 6
    1156:	0c 94 99 0c 	jmp	0x1932	; 0x1932 <__epilogue_restores__+0x18>

0000115a <__subsf3>:
    115a:	a0 e2       	ldi	r26, 0x20	; 32
    115c:	b0 e0       	ldi	r27, 0x00	; 0
    115e:	e3 eb       	ldi	r30, 0xB3	; 179
    1160:	f8 e0       	ldi	r31, 0x08	; 8
    1162:	0c 94 7d 0c 	jmp	0x18fa	; 0x18fa <__prologue_saves__+0x18>
    1166:	69 83       	std	Y+1, r22	; 0x01
    1168:	7a 83       	std	Y+2, r23	; 0x02
    116a:	8b 83       	std	Y+3, r24	; 0x03
    116c:	9c 83       	std	Y+4, r25	; 0x04
    116e:	2d 83       	std	Y+5, r18	; 0x05
    1170:	3e 83       	std	Y+6, r19	; 0x06
    1172:	4f 83       	std	Y+7, r20	; 0x07
    1174:	58 87       	std	Y+8, r21	; 0x08
    1176:	8e 01       	movw	r16, r28
    1178:	07 5f       	subi	r16, 0xF7	; 247
    117a:	1f 4f       	sbci	r17, 0xFF	; 255
    117c:	ce 01       	movw	r24, r28
    117e:	01 96       	adiw	r24, 0x01	; 1
    1180:	b8 01       	movw	r22, r16
    1182:	0e 94 88 0b 	call	0x1710	; 0x1710 <__unpack_f>
    1186:	91 e1       	ldi	r25, 0x11	; 17
    1188:	e9 2e       	mov	r14, r25
    118a:	f1 2c       	mov	r15, r1
    118c:	ec 0e       	add	r14, r28
    118e:	fd 1e       	adc	r15, r29
    1190:	ce 01       	movw	r24, r28
    1192:	05 96       	adiw	r24, 0x05	; 5
    1194:	b7 01       	movw	r22, r14
    1196:	0e 94 88 0b 	call	0x1710	; 0x1710 <__unpack_f>
    119a:	8a 89       	ldd	r24, Y+18	; 0x12
    119c:	91 e0       	ldi	r25, 0x01	; 1
    119e:	89 27       	eor	r24, r25
    11a0:	8a 8b       	std	Y+18, r24	; 0x12
    11a2:	c8 01       	movw	r24, r16
    11a4:	b7 01       	movw	r22, r14
    11a6:	ae 01       	movw	r20, r28
    11a8:	47 5e       	subi	r20, 0xE7	; 231
    11aa:	5f 4f       	sbci	r21, 0xFF	; 255
    11ac:	0e 94 36 07 	call	0xe6c	; 0xe6c <_fpadd_parts>
    11b0:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__pack_f>
    11b4:	a0 96       	adiw	r28, 0x20	; 32
    11b6:	e6 e0       	ldi	r30, 0x06	; 6
    11b8:	0c 94 99 0c 	jmp	0x1932	; 0x1932 <__epilogue_restores__+0x18>

000011bc <__mulsf3>:
    11bc:	a0 e2       	ldi	r26, 0x20	; 32
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	e4 ee       	ldi	r30, 0xE4	; 228
    11c2:	f8 e0       	ldi	r31, 0x08	; 8
    11c4:	0c 94 71 0c 	jmp	0x18e2	; 0x18e2 <__prologue_saves__>
    11c8:	69 83       	std	Y+1, r22	; 0x01
    11ca:	7a 83       	std	Y+2, r23	; 0x02
    11cc:	8b 83       	std	Y+3, r24	; 0x03
    11ce:	9c 83       	std	Y+4, r25	; 0x04
    11d0:	2d 83       	std	Y+5, r18	; 0x05
    11d2:	3e 83       	std	Y+6, r19	; 0x06
    11d4:	4f 83       	std	Y+7, r20	; 0x07
    11d6:	58 87       	std	Y+8, r21	; 0x08
    11d8:	ce 01       	movw	r24, r28
    11da:	01 96       	adiw	r24, 0x01	; 1
    11dc:	be 01       	movw	r22, r28
    11de:	67 5f       	subi	r22, 0xF7	; 247
    11e0:	7f 4f       	sbci	r23, 0xFF	; 255
    11e2:	0e 94 88 0b 	call	0x1710	; 0x1710 <__unpack_f>
    11e6:	ce 01       	movw	r24, r28
    11e8:	05 96       	adiw	r24, 0x05	; 5
    11ea:	be 01       	movw	r22, r28
    11ec:	6f 5e       	subi	r22, 0xEF	; 239
    11ee:	7f 4f       	sbci	r23, 0xFF	; 255
    11f0:	0e 94 88 0b 	call	0x1710	; 0x1710 <__unpack_f>
    11f4:	99 85       	ldd	r25, Y+9	; 0x09
    11f6:	92 30       	cpi	r25, 0x02	; 2
    11f8:	78 f0       	brcs	.+30     	; 0x1218 <__mulsf3+0x5c>
    11fa:	89 89       	ldd	r24, Y+17	; 0x11
    11fc:	82 30       	cpi	r24, 0x02	; 2
    11fe:	c0 f0       	brcs	.+48     	; 0x1230 <__mulsf3+0x74>
    1200:	94 30       	cpi	r25, 0x04	; 4
    1202:	19 f4       	brne	.+6      	; 0x120a <__mulsf3+0x4e>
    1204:	82 30       	cpi	r24, 0x02	; 2
    1206:	41 f4       	brne	.+16     	; 0x1218 <__mulsf3+0x5c>
    1208:	cb c0       	rjmp	.+406    	; 0x13a0 <__mulsf3+0x1e4>
    120a:	84 30       	cpi	r24, 0x04	; 4
    120c:	19 f4       	brne	.+6      	; 0x1214 <__mulsf3+0x58>
    120e:	92 30       	cpi	r25, 0x02	; 2
    1210:	79 f4       	brne	.+30     	; 0x1230 <__mulsf3+0x74>
    1212:	c6 c0       	rjmp	.+396    	; 0x13a0 <__mulsf3+0x1e4>
    1214:	92 30       	cpi	r25, 0x02	; 2
    1216:	51 f4       	brne	.+20     	; 0x122c <__mulsf3+0x70>
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	2a 85       	ldd	r18, Y+10	; 0x0a
    121c:	9a 89       	ldd	r25, Y+18	; 0x12
    121e:	29 17       	cp	r18, r25
    1220:	09 f4       	brne	.+2      	; 0x1224 <__mulsf3+0x68>
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	8a 87       	std	Y+10, r24	; 0x0a
    1226:	ce 01       	movw	r24, r28
    1228:	09 96       	adiw	r24, 0x09	; 9
    122a:	bc c0       	rjmp	.+376    	; 0x13a4 <__mulsf3+0x1e8>
    122c:	82 30       	cpi	r24, 0x02	; 2
    122e:	51 f4       	brne	.+20     	; 0x1244 <__mulsf3+0x88>
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	2a 85       	ldd	r18, Y+10	; 0x0a
    1234:	9a 89       	ldd	r25, Y+18	; 0x12
    1236:	29 17       	cp	r18, r25
    1238:	09 f4       	brne	.+2      	; 0x123c <__mulsf3+0x80>
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	8a 8b       	std	Y+18, r24	; 0x12
    123e:	ce 01       	movw	r24, r28
    1240:	41 96       	adiw	r24, 0x11	; 17
    1242:	b0 c0       	rjmp	.+352    	; 0x13a4 <__mulsf3+0x1e8>
    1244:	6d 84       	ldd	r6, Y+13	; 0x0d
    1246:	7e 84       	ldd	r7, Y+14	; 0x0e
    1248:	8f 84       	ldd	r8, Y+15	; 0x0f
    124a:	98 88       	ldd	r9, Y+16	; 0x10
    124c:	ed 88       	ldd	r14, Y+21	; 0x15
    124e:	fe 88       	ldd	r15, Y+22	; 0x16
    1250:	0f 89       	ldd	r16, Y+23	; 0x17
    1252:	18 8d       	ldd	r17, Y+24	; 0x18
    1254:	e0 e2       	ldi	r30, 0x20	; 32
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 e0       	ldi	r24, 0x00	; 0
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	dc 01       	movw	r26, r24
    125e:	aa 24       	eor	r10, r10
    1260:	bb 24       	eor	r11, r11
    1262:	65 01       	movw	r12, r10
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	a9 01       	movw	r20, r18
    126a:	b3 01       	movw	r22, r6
    126c:	61 70       	andi	r22, 0x01	; 1
    126e:	70 70       	andi	r23, 0x00	; 0
    1270:	61 15       	cp	r22, r1
    1272:	71 05       	cpc	r23, r1
    1274:	d1 f0       	breq	.+52     	; 0x12aa <__mulsf3+0xee>
    1276:	2e 0d       	add	r18, r14
    1278:	3f 1d       	adc	r19, r15
    127a:	40 1f       	adc	r20, r16
    127c:	51 1f       	adc	r21, r17
    127e:	15 01       	movw	r2, r10
    1280:	26 01       	movw	r4, r12
    1282:	28 0e       	add	r2, r24
    1284:	39 1e       	adc	r3, r25
    1286:	4a 1e       	adc	r4, r26
    1288:	5b 1e       	adc	r5, r27
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	a0 e0       	ldi	r26, 0x00	; 0
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	2e 15       	cp	r18, r14
    1294:	3f 05       	cpc	r19, r15
    1296:	40 07       	cpc	r20, r16
    1298:	51 07       	cpc	r21, r17
    129a:	18 f0       	brcs	.+6      	; 0x12a2 <__mulsf3+0xe6>
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	dc 01       	movw	r26, r24
    12a2:	82 0d       	add	r24, r2
    12a4:	93 1d       	adc	r25, r3
    12a6:	a4 1d       	adc	r26, r4
    12a8:	b5 1d       	adc	r27, r5
    12aa:	aa 0c       	add	r10, r10
    12ac:	bb 1c       	adc	r11, r11
    12ae:	cc 1c       	adc	r12, r12
    12b0:	dd 1c       	adc	r13, r13
    12b2:	17 ff       	sbrs	r17, 7
    12b4:	09 c0       	rjmp	.+18     	; 0x12c8 <__mulsf3+0x10c>
    12b6:	61 e0       	ldi	r22, 0x01	; 1
    12b8:	26 2e       	mov	r2, r22
    12ba:	31 2c       	mov	r3, r1
    12bc:	41 2c       	mov	r4, r1
    12be:	51 2c       	mov	r5, r1
    12c0:	a2 28       	or	r10, r2
    12c2:	b3 28       	or	r11, r3
    12c4:	c4 28       	or	r12, r4
    12c6:	d5 28       	or	r13, r5
    12c8:	31 97       	sbiw	r30, 0x01	; 1
    12ca:	49 f0       	breq	.+18     	; 0x12de <__mulsf3+0x122>
    12cc:	ee 0c       	add	r14, r14
    12ce:	ff 1c       	adc	r15, r15
    12d0:	00 1f       	adc	r16, r16
    12d2:	11 1f       	adc	r17, r17
    12d4:	96 94       	lsr	r9
    12d6:	87 94       	ror	r8
    12d8:	77 94       	ror	r7
    12da:	67 94       	ror	r6
    12dc:	c6 cf       	rjmp	.-116    	; 0x126a <__mulsf3+0xae>
    12de:	6b 89       	ldd	r22, Y+19	; 0x13
    12e0:	7c 89       	ldd	r23, Y+20	; 0x14
    12e2:	eb 85       	ldd	r30, Y+11	; 0x0b
    12e4:	fc 85       	ldd	r31, Y+12	; 0x0c
    12e6:	6e 0f       	add	r22, r30
    12e8:	7f 1f       	adc	r23, r31
    12ea:	6e 5f       	subi	r22, 0xFE	; 254
    12ec:	7f 4f       	sbci	r23, 0xFF	; 255
    12ee:	7c 8f       	std	Y+28, r23	; 0x1c
    12f0:	6b 8f       	std	Y+27, r22	; 0x1b
    12f2:	61 e0       	ldi	r22, 0x01	; 1
    12f4:	ea 85       	ldd	r30, Y+10	; 0x0a
    12f6:	7a 89       	ldd	r23, Y+18	; 0x12
    12f8:	e7 17       	cp	r30, r23
    12fa:	09 f4       	brne	.+2      	; 0x12fe <__mulsf3+0x142>
    12fc:	60 e0       	ldi	r22, 0x00	; 0
    12fe:	6a 8f       	std	Y+26, r22	; 0x1a
    1300:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1302:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1304:	10 c0       	rjmp	.+32     	; 0x1326 <__mulsf3+0x16a>
    1306:	fc 01       	movw	r30, r24
    1308:	e1 70       	andi	r30, 0x01	; 1
    130a:	f0 70       	andi	r31, 0x00	; 0
    130c:	30 97       	sbiw	r30, 0x00	; 0
    130e:	29 f0       	breq	.+10     	; 0x131a <__mulsf3+0x15e>
    1310:	56 95       	lsr	r21
    1312:	47 95       	ror	r20
    1314:	37 95       	ror	r19
    1316:	27 95       	ror	r18
    1318:	50 68       	ori	r21, 0x80	; 128
    131a:	b6 95       	lsr	r27
    131c:	a7 95       	ror	r26
    131e:	97 95       	ror	r25
    1320:	87 95       	ror	r24
    1322:	6f 5f       	subi	r22, 0xFF	; 255
    1324:	7f 4f       	sbci	r23, 0xFF	; 255
    1326:	b7 fd       	sbrc	r27, 7
    1328:	ee cf       	rjmp	.-36     	; 0x1306 <__mulsf3+0x14a>
    132a:	0c c0       	rjmp	.+24     	; 0x1344 <__mulsf3+0x188>
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	aa 1f       	adc	r26, r26
    1332:	bb 1f       	adc	r27, r27
    1334:	57 fd       	sbrc	r21, 7
    1336:	81 60       	ori	r24, 0x01	; 1
    1338:	22 0f       	add	r18, r18
    133a:	33 1f       	adc	r19, r19
    133c:	44 1f       	adc	r20, r20
    133e:	55 1f       	adc	r21, r21
    1340:	61 50       	subi	r22, 0x01	; 1
    1342:	70 40       	sbci	r23, 0x00	; 0
    1344:	80 30       	cpi	r24, 0x00	; 0
    1346:	e0 e0       	ldi	r30, 0x00	; 0
    1348:	9e 07       	cpc	r25, r30
    134a:	e0 e0       	ldi	r30, 0x00	; 0
    134c:	ae 07       	cpc	r26, r30
    134e:	e0 e4       	ldi	r30, 0x40	; 64
    1350:	be 07       	cpc	r27, r30
    1352:	60 f3       	brcs	.-40     	; 0x132c <__mulsf3+0x170>
    1354:	6b 8f       	std	Y+27, r22	; 0x1b
    1356:	7c 8f       	std	Y+28, r23	; 0x1c
    1358:	6f e7       	ldi	r22, 0x7F	; 127
    135a:	e6 2e       	mov	r14, r22
    135c:	f1 2c       	mov	r15, r1
    135e:	01 2d       	mov	r16, r1
    1360:	11 2d       	mov	r17, r1
    1362:	e8 22       	and	r14, r24
    1364:	f9 22       	and	r15, r25
    1366:	0a 23       	and	r16, r26
    1368:	1b 23       	and	r17, r27
    136a:	60 e4       	ldi	r22, 0x40	; 64
    136c:	e6 16       	cp	r14, r22
    136e:	f1 04       	cpc	r15, r1
    1370:	01 05       	cpc	r16, r1
    1372:	11 05       	cpc	r17, r1
    1374:	61 f4       	brne	.+24     	; 0x138e <__mulsf3+0x1d2>
    1376:	87 fd       	sbrc	r24, 7
    1378:	0a c0       	rjmp	.+20     	; 0x138e <__mulsf3+0x1d2>
    137a:	21 15       	cp	r18, r1
    137c:	31 05       	cpc	r19, r1
    137e:	41 05       	cpc	r20, r1
    1380:	51 05       	cpc	r21, r1
    1382:	29 f0       	breq	.+10     	; 0x138e <__mulsf3+0x1d2>
    1384:	80 5c       	subi	r24, 0xC0	; 192
    1386:	9f 4f       	sbci	r25, 0xFF	; 255
    1388:	af 4f       	sbci	r26, 0xFF	; 255
    138a:	bf 4f       	sbci	r27, 0xFF	; 255
    138c:	80 78       	andi	r24, 0x80	; 128
    138e:	8d 8f       	std	Y+29, r24	; 0x1d
    1390:	9e 8f       	std	Y+30, r25	; 0x1e
    1392:	af 8f       	std	Y+31, r26	; 0x1f
    1394:	b8 a3       	std	Y+32, r27	; 0x20
    1396:	83 e0       	ldi	r24, 0x03	; 3
    1398:	89 8f       	std	Y+25, r24	; 0x19
    139a:	ce 01       	movw	r24, r28
    139c:	49 96       	adiw	r24, 0x19	; 25
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <__mulsf3+0x1e8>
    13a0:	80 e2       	ldi	r24, 0x20	; 32
    13a2:	91 e0       	ldi	r25, 0x01	; 1
    13a4:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__pack_f>
    13a8:	a0 96       	adiw	r28, 0x20	; 32
    13aa:	e2 e1       	ldi	r30, 0x12	; 18
    13ac:	0c 94 8d 0c 	jmp	0x191a	; 0x191a <__epilogue_restores__>

000013b0 <__gtsf2>:
    13b0:	a8 e1       	ldi	r26, 0x18	; 24
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	ee ed       	ldi	r30, 0xDE	; 222
    13b6:	f9 e0       	ldi	r31, 0x09	; 9
    13b8:	0c 94 7d 0c 	jmp	0x18fa	; 0x18fa <__prologue_saves__+0x18>
    13bc:	69 83       	std	Y+1, r22	; 0x01
    13be:	7a 83       	std	Y+2, r23	; 0x02
    13c0:	8b 83       	std	Y+3, r24	; 0x03
    13c2:	9c 83       	std	Y+4, r25	; 0x04
    13c4:	2d 83       	std	Y+5, r18	; 0x05
    13c6:	3e 83       	std	Y+6, r19	; 0x06
    13c8:	4f 83       	std	Y+7, r20	; 0x07
    13ca:	58 87       	std	Y+8, r21	; 0x08
    13cc:	8e 01       	movw	r16, r28
    13ce:	07 5f       	subi	r16, 0xF7	; 247
    13d0:	1f 4f       	sbci	r17, 0xFF	; 255
    13d2:	ce 01       	movw	r24, r28
    13d4:	01 96       	adiw	r24, 0x01	; 1
    13d6:	b8 01       	movw	r22, r16
    13d8:	0e 94 88 0b 	call	0x1710	; 0x1710 <__unpack_f>
    13dc:	81 e1       	ldi	r24, 0x11	; 17
    13de:	e8 2e       	mov	r14, r24
    13e0:	f1 2c       	mov	r15, r1
    13e2:	ec 0e       	add	r14, r28
    13e4:	fd 1e       	adc	r15, r29
    13e6:	ce 01       	movw	r24, r28
    13e8:	05 96       	adiw	r24, 0x05	; 5
    13ea:	b7 01       	movw	r22, r14
    13ec:	0e 94 88 0b 	call	0x1710	; 0x1710 <__unpack_f>
    13f0:	89 85       	ldd	r24, Y+9	; 0x09
    13f2:	82 30       	cpi	r24, 0x02	; 2
    13f4:	40 f0       	brcs	.+16     	; 0x1406 <__gtsf2+0x56>
    13f6:	89 89       	ldd	r24, Y+17	; 0x11
    13f8:	82 30       	cpi	r24, 0x02	; 2
    13fa:	28 f0       	brcs	.+10     	; 0x1406 <__gtsf2+0x56>
    13fc:	c8 01       	movw	r24, r16
    13fe:	b7 01       	movw	r22, r14
    1400:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__fpcmp_parts_f>
    1404:	01 c0       	rjmp	.+2      	; 0x1408 <__gtsf2+0x58>
    1406:	8f ef       	ldi	r24, 0xFF	; 255
    1408:	68 96       	adiw	r28, 0x18	; 24
    140a:	e6 e0       	ldi	r30, 0x06	; 6
    140c:	0c 94 99 0c 	jmp	0x1932	; 0x1932 <__epilogue_restores__+0x18>

00001410 <__gesf2>:
    1410:	a8 e1       	ldi	r26, 0x18	; 24
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	ee e0       	ldi	r30, 0x0E	; 14
    1416:	fa e0       	ldi	r31, 0x0A	; 10
    1418:	0c 94 7d 0c 	jmp	0x18fa	; 0x18fa <__prologue_saves__+0x18>
    141c:	69 83       	std	Y+1, r22	; 0x01
    141e:	7a 83       	std	Y+2, r23	; 0x02
    1420:	8b 83       	std	Y+3, r24	; 0x03
    1422:	9c 83       	std	Y+4, r25	; 0x04
    1424:	2d 83       	std	Y+5, r18	; 0x05
    1426:	3e 83       	std	Y+6, r19	; 0x06
    1428:	4f 83       	std	Y+7, r20	; 0x07
    142a:	58 87       	std	Y+8, r21	; 0x08
    142c:	8e 01       	movw	r16, r28
    142e:	07 5f       	subi	r16, 0xF7	; 247
    1430:	1f 4f       	sbci	r17, 0xFF	; 255
    1432:	ce 01       	movw	r24, r28
    1434:	01 96       	adiw	r24, 0x01	; 1
    1436:	b8 01       	movw	r22, r16
    1438:	0e 94 88 0b 	call	0x1710	; 0x1710 <__unpack_f>
    143c:	81 e1       	ldi	r24, 0x11	; 17
    143e:	e8 2e       	mov	r14, r24
    1440:	f1 2c       	mov	r15, r1
    1442:	ec 0e       	add	r14, r28
    1444:	fd 1e       	adc	r15, r29
    1446:	ce 01       	movw	r24, r28
    1448:	05 96       	adiw	r24, 0x05	; 5
    144a:	b7 01       	movw	r22, r14
    144c:	0e 94 88 0b 	call	0x1710	; 0x1710 <__unpack_f>
    1450:	89 85       	ldd	r24, Y+9	; 0x09
    1452:	82 30       	cpi	r24, 0x02	; 2
    1454:	40 f0       	brcs	.+16     	; 0x1466 <__gesf2+0x56>
    1456:	89 89       	ldd	r24, Y+17	; 0x11
    1458:	82 30       	cpi	r24, 0x02	; 2
    145a:	28 f0       	brcs	.+10     	; 0x1466 <__gesf2+0x56>
    145c:	c8 01       	movw	r24, r16
    145e:	b7 01       	movw	r22, r14
    1460:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__fpcmp_parts_f>
    1464:	01 c0       	rjmp	.+2      	; 0x1468 <__gesf2+0x58>
    1466:	8f ef       	ldi	r24, 0xFF	; 255
    1468:	68 96       	adiw	r28, 0x18	; 24
    146a:	e6 e0       	ldi	r30, 0x06	; 6
    146c:	0c 94 99 0c 	jmp	0x1932	; 0x1932 <__epilogue_restores__+0x18>

00001470 <__ltsf2>:
    1470:	a8 e1       	ldi	r26, 0x18	; 24
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	ee e3       	ldi	r30, 0x3E	; 62
    1476:	fa e0       	ldi	r31, 0x0A	; 10
    1478:	0c 94 7d 0c 	jmp	0x18fa	; 0x18fa <__prologue_saves__+0x18>
    147c:	69 83       	std	Y+1, r22	; 0x01
    147e:	7a 83       	std	Y+2, r23	; 0x02
    1480:	8b 83       	std	Y+3, r24	; 0x03
    1482:	9c 83       	std	Y+4, r25	; 0x04
    1484:	2d 83       	std	Y+5, r18	; 0x05
    1486:	3e 83       	std	Y+6, r19	; 0x06
    1488:	4f 83       	std	Y+7, r20	; 0x07
    148a:	58 87       	std	Y+8, r21	; 0x08
    148c:	8e 01       	movw	r16, r28
    148e:	07 5f       	subi	r16, 0xF7	; 247
    1490:	1f 4f       	sbci	r17, 0xFF	; 255
    1492:	ce 01       	movw	r24, r28
    1494:	01 96       	adiw	r24, 0x01	; 1
    1496:	b8 01       	movw	r22, r16
    1498:	0e 94 88 0b 	call	0x1710	; 0x1710 <__unpack_f>
    149c:	81 e1       	ldi	r24, 0x11	; 17
    149e:	e8 2e       	mov	r14, r24
    14a0:	f1 2c       	mov	r15, r1
    14a2:	ec 0e       	add	r14, r28
    14a4:	fd 1e       	adc	r15, r29
    14a6:	ce 01       	movw	r24, r28
    14a8:	05 96       	adiw	r24, 0x05	; 5
    14aa:	b7 01       	movw	r22, r14
    14ac:	0e 94 88 0b 	call	0x1710	; 0x1710 <__unpack_f>
    14b0:	89 85       	ldd	r24, Y+9	; 0x09
    14b2:	82 30       	cpi	r24, 0x02	; 2
    14b4:	40 f0       	brcs	.+16     	; 0x14c6 <__ltsf2+0x56>
    14b6:	89 89       	ldd	r24, Y+17	; 0x11
    14b8:	82 30       	cpi	r24, 0x02	; 2
    14ba:	28 f0       	brcs	.+10     	; 0x14c6 <__ltsf2+0x56>
    14bc:	c8 01       	movw	r24, r16
    14be:	b7 01       	movw	r22, r14
    14c0:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <__fpcmp_parts_f>
    14c4:	01 c0       	rjmp	.+2      	; 0x14c8 <__ltsf2+0x58>
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	68 96       	adiw	r28, 0x18	; 24
    14ca:	e6 e0       	ldi	r30, 0x06	; 6
    14cc:	0c 94 99 0c 	jmp	0x1932	; 0x1932 <__epilogue_restores__+0x18>

000014d0 <__fixsfsi>:
    14d0:	ac e0       	ldi	r26, 0x0C	; 12
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	ee e6       	ldi	r30, 0x6E	; 110
    14d6:	fa e0       	ldi	r31, 0x0A	; 10
    14d8:	0c 94 81 0c 	jmp	0x1902	; 0x1902 <__prologue_saves__+0x20>
    14dc:	69 83       	std	Y+1, r22	; 0x01
    14de:	7a 83       	std	Y+2, r23	; 0x02
    14e0:	8b 83       	std	Y+3, r24	; 0x03
    14e2:	9c 83       	std	Y+4, r25	; 0x04
    14e4:	ce 01       	movw	r24, r28
    14e6:	01 96       	adiw	r24, 0x01	; 1
    14e8:	be 01       	movw	r22, r28
    14ea:	6b 5f       	subi	r22, 0xFB	; 251
    14ec:	7f 4f       	sbci	r23, 0xFF	; 255
    14ee:	0e 94 88 0b 	call	0x1710	; 0x1710 <__unpack_f>
    14f2:	8d 81       	ldd	r24, Y+5	; 0x05
    14f4:	82 30       	cpi	r24, 0x02	; 2
    14f6:	81 f1       	breq	.+96     	; 0x1558 <__fixsfsi+0x88>
    14f8:	82 30       	cpi	r24, 0x02	; 2
    14fa:	70 f1       	brcs	.+92     	; 0x1558 <__fixsfsi+0x88>
    14fc:	84 30       	cpi	r24, 0x04	; 4
    14fe:	21 f4       	brne	.+8      	; 0x1508 <__fixsfsi+0x38>
    1500:	8e 81       	ldd	r24, Y+6	; 0x06
    1502:	88 23       	and	r24, r24
    1504:	69 f1       	breq	.+90     	; 0x1560 <__fixsfsi+0x90>
    1506:	0a c0       	rjmp	.+20     	; 0x151c <__fixsfsi+0x4c>
    1508:	2f 81       	ldd	r18, Y+7	; 0x07
    150a:	38 85       	ldd	r19, Y+8	; 0x08
    150c:	37 fd       	sbrc	r19, 7
    150e:	24 c0       	rjmp	.+72     	; 0x1558 <__fixsfsi+0x88>
    1510:	6e 81       	ldd	r22, Y+6	; 0x06
    1512:	2f 31       	cpi	r18, 0x1F	; 31
    1514:	31 05       	cpc	r19, r1
    1516:	3c f0       	brlt	.+14     	; 0x1526 <__fixsfsi+0x56>
    1518:	66 23       	and	r22, r22
    151a:	11 f1       	breq	.+68     	; 0x1560 <__fixsfsi+0x90>
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	40 e0       	ldi	r20, 0x00	; 0
    1522:	50 e8       	ldi	r21, 0x80	; 128
    1524:	21 c0       	rjmp	.+66     	; 0x1568 <__fixsfsi+0x98>
    1526:	8e e1       	ldi	r24, 0x1E	; 30
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	82 1b       	sub	r24, r18
    152c:	93 0b       	sbc	r25, r19
    152e:	29 85       	ldd	r18, Y+9	; 0x09
    1530:	3a 85       	ldd	r19, Y+10	; 0x0a
    1532:	4b 85       	ldd	r20, Y+11	; 0x0b
    1534:	5c 85       	ldd	r21, Y+12	; 0x0c
    1536:	04 c0       	rjmp	.+8      	; 0x1540 <__fixsfsi+0x70>
    1538:	56 95       	lsr	r21
    153a:	47 95       	ror	r20
    153c:	37 95       	ror	r19
    153e:	27 95       	ror	r18
    1540:	8a 95       	dec	r24
    1542:	d2 f7       	brpl	.-12     	; 0x1538 <__fixsfsi+0x68>
    1544:	66 23       	and	r22, r22
    1546:	81 f0       	breq	.+32     	; 0x1568 <__fixsfsi+0x98>
    1548:	50 95       	com	r21
    154a:	40 95       	com	r20
    154c:	30 95       	com	r19
    154e:	21 95       	neg	r18
    1550:	3f 4f       	sbci	r19, 0xFF	; 255
    1552:	4f 4f       	sbci	r20, 0xFF	; 255
    1554:	5f 4f       	sbci	r21, 0xFF	; 255
    1556:	08 c0       	rjmp	.+16     	; 0x1568 <__fixsfsi+0x98>
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	a9 01       	movw	r20, r18
    155e:	04 c0       	rjmp	.+8      	; 0x1568 <__fixsfsi+0x98>
    1560:	2f ef       	ldi	r18, 0xFF	; 255
    1562:	3f ef       	ldi	r19, 0xFF	; 255
    1564:	4f ef       	ldi	r20, 0xFF	; 255
    1566:	5f e7       	ldi	r21, 0x7F	; 127
    1568:	b9 01       	movw	r22, r18
    156a:	ca 01       	movw	r24, r20
    156c:	2c 96       	adiw	r28, 0x0c	; 12
    156e:	e2 e0       	ldi	r30, 0x02	; 2
    1570:	0c 94 9d 0c 	jmp	0x193a	; 0x193a <__epilogue_restores__+0x20>

00001574 <__pack_f>:
    1574:	ef 92       	push	r14
    1576:	ff 92       	push	r15
    1578:	0f 93       	push	r16
    157a:	1f 93       	push	r17
    157c:	cf 93       	push	r28
    157e:	df 93       	push	r29
    1580:	fc 01       	movw	r30, r24
    1582:	24 81       	ldd	r18, Z+4	; 0x04
    1584:	35 81       	ldd	r19, Z+5	; 0x05
    1586:	46 81       	ldd	r20, Z+6	; 0x06
    1588:	57 81       	ldd	r21, Z+7	; 0x07
    158a:	61 81       	ldd	r22, Z+1	; 0x01
    158c:	80 81       	ld	r24, Z
    158e:	82 30       	cpi	r24, 0x02	; 2
    1590:	20 f4       	brcc	.+8      	; 0x159a <__pack_f+0x26>
    1592:	40 61       	ori	r20, 0x10	; 16
    1594:	ef ef       	ldi	r30, 0xFF	; 255
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	a3 c0       	rjmp	.+326    	; 0x16e0 <__pack_f+0x16c>
    159a:	84 30       	cpi	r24, 0x04	; 4
    159c:	09 f4       	brne	.+2      	; 0x15a0 <__pack_f+0x2c>
    159e:	9b c0       	rjmp	.+310    	; 0x16d6 <__pack_f+0x162>
    15a0:	82 30       	cpi	r24, 0x02	; 2
    15a2:	09 f4       	brne	.+2      	; 0x15a6 <__pack_f+0x32>
    15a4:	92 c0       	rjmp	.+292    	; 0x16ca <__pack_f+0x156>
    15a6:	21 15       	cp	r18, r1
    15a8:	31 05       	cpc	r19, r1
    15aa:	41 05       	cpc	r20, r1
    15ac:	51 05       	cpc	r21, r1
    15ae:	09 f4       	brne	.+2      	; 0x15b2 <__pack_f+0x3e>
    15b0:	8f c0       	rjmp	.+286    	; 0x16d0 <__pack_f+0x15c>
    15b2:	02 80       	ldd	r0, Z+2	; 0x02
    15b4:	f3 81       	ldd	r31, Z+3	; 0x03
    15b6:	e0 2d       	mov	r30, r0
    15b8:	8f ef       	ldi	r24, 0xFF	; 255
    15ba:	e2 38       	cpi	r30, 0x82	; 130
    15bc:	f8 07       	cpc	r31, r24
    15be:	0c f0       	brlt	.+2      	; 0x15c2 <__pack_f+0x4e>
    15c0:	5a c0       	rjmp	.+180    	; 0x1676 <__pack_f+0x102>
    15c2:	c2 e8       	ldi	r28, 0x82	; 130
    15c4:	df ef       	ldi	r29, 0xFF	; 255
    15c6:	ce 1b       	sub	r28, r30
    15c8:	df 0b       	sbc	r29, r31
    15ca:	ca 31       	cpi	r28, 0x1A	; 26
    15cc:	d1 05       	cpc	r29, r1
    15ce:	6c f5       	brge	.+90     	; 0x162a <__pack_f+0xb6>
    15d0:	79 01       	movw	r14, r18
    15d2:	8a 01       	movw	r16, r20
    15d4:	0c 2e       	mov	r0, r28
    15d6:	04 c0       	rjmp	.+8      	; 0x15e0 <__pack_f+0x6c>
    15d8:	16 95       	lsr	r17
    15da:	07 95       	ror	r16
    15dc:	f7 94       	ror	r15
    15de:	e7 94       	ror	r14
    15e0:	0a 94       	dec	r0
    15e2:	d2 f7       	brpl	.-12     	; 0x15d8 <__pack_f+0x64>
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	a0 e0       	ldi	r26, 0x00	; 0
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	0c 2e       	mov	r0, r28
    15ee:	04 c0       	rjmp	.+8      	; 0x15f8 <__pack_f+0x84>
    15f0:	88 0f       	add	r24, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	aa 1f       	adc	r26, r26
    15f6:	bb 1f       	adc	r27, r27
    15f8:	0a 94       	dec	r0
    15fa:	d2 f7       	brpl	.-12     	; 0x15f0 <__pack_f+0x7c>
    15fc:	01 97       	sbiw	r24, 0x01	; 1
    15fe:	a1 09       	sbc	r26, r1
    1600:	b1 09       	sbc	r27, r1
    1602:	82 23       	and	r24, r18
    1604:	93 23       	and	r25, r19
    1606:	a4 23       	and	r26, r20
    1608:	b5 23       	and	r27, r21
    160a:	21 e0       	ldi	r18, 0x01	; 1
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	40 e0       	ldi	r20, 0x00	; 0
    1610:	50 e0       	ldi	r21, 0x00	; 0
    1612:	00 97       	sbiw	r24, 0x00	; 0
    1614:	a1 05       	cpc	r26, r1
    1616:	b1 05       	cpc	r27, r1
    1618:	19 f4       	brne	.+6      	; 0x1620 <__pack_f+0xac>
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	a9 01       	movw	r20, r18
    1620:	2e 29       	or	r18, r14
    1622:	3f 29       	or	r19, r15
    1624:	40 2b       	or	r20, r16
    1626:	51 2b       	or	r21, r17
    1628:	03 c0       	rjmp	.+6      	; 0x1630 <__pack_f+0xbc>
    162a:	20 e0       	ldi	r18, 0x00	; 0
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	a9 01       	movw	r20, r18
    1630:	da 01       	movw	r26, r20
    1632:	c9 01       	movw	r24, r18
    1634:	8f 77       	andi	r24, 0x7F	; 127
    1636:	90 70       	andi	r25, 0x00	; 0
    1638:	a0 70       	andi	r26, 0x00	; 0
    163a:	b0 70       	andi	r27, 0x00	; 0
    163c:	80 34       	cpi	r24, 0x40	; 64
    163e:	91 05       	cpc	r25, r1
    1640:	a1 05       	cpc	r26, r1
    1642:	b1 05       	cpc	r27, r1
    1644:	39 f4       	brne	.+14     	; 0x1654 <__pack_f+0xe0>
    1646:	27 ff       	sbrs	r18, 7
    1648:	09 c0       	rjmp	.+18     	; 0x165c <__pack_f+0xe8>
    164a:	20 5c       	subi	r18, 0xC0	; 192
    164c:	3f 4f       	sbci	r19, 0xFF	; 255
    164e:	4f 4f       	sbci	r20, 0xFF	; 255
    1650:	5f 4f       	sbci	r21, 0xFF	; 255
    1652:	04 c0       	rjmp	.+8      	; 0x165c <__pack_f+0xe8>
    1654:	21 5c       	subi	r18, 0xC1	; 193
    1656:	3f 4f       	sbci	r19, 0xFF	; 255
    1658:	4f 4f       	sbci	r20, 0xFF	; 255
    165a:	5f 4f       	sbci	r21, 0xFF	; 255
    165c:	e1 e0       	ldi	r30, 0x01	; 1
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	20 30       	cpi	r18, 0x00	; 0
    1662:	80 e0       	ldi	r24, 0x00	; 0
    1664:	38 07       	cpc	r19, r24
    1666:	80 e0       	ldi	r24, 0x00	; 0
    1668:	48 07       	cpc	r20, r24
    166a:	80 e4       	ldi	r24, 0x40	; 64
    166c:	58 07       	cpc	r21, r24
    166e:	28 f5       	brcc	.+74     	; 0x16ba <__pack_f+0x146>
    1670:	e0 e0       	ldi	r30, 0x00	; 0
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	22 c0       	rjmp	.+68     	; 0x16ba <__pack_f+0x146>
    1676:	e0 38       	cpi	r30, 0x80	; 128
    1678:	f1 05       	cpc	r31, r1
    167a:	6c f5       	brge	.+90     	; 0x16d6 <__pack_f+0x162>
    167c:	e1 58       	subi	r30, 0x81	; 129
    167e:	ff 4f       	sbci	r31, 0xFF	; 255
    1680:	da 01       	movw	r26, r20
    1682:	c9 01       	movw	r24, r18
    1684:	8f 77       	andi	r24, 0x7F	; 127
    1686:	90 70       	andi	r25, 0x00	; 0
    1688:	a0 70       	andi	r26, 0x00	; 0
    168a:	b0 70       	andi	r27, 0x00	; 0
    168c:	80 34       	cpi	r24, 0x40	; 64
    168e:	91 05       	cpc	r25, r1
    1690:	a1 05       	cpc	r26, r1
    1692:	b1 05       	cpc	r27, r1
    1694:	39 f4       	brne	.+14     	; 0x16a4 <__pack_f+0x130>
    1696:	27 ff       	sbrs	r18, 7
    1698:	09 c0       	rjmp	.+18     	; 0x16ac <__pack_f+0x138>
    169a:	20 5c       	subi	r18, 0xC0	; 192
    169c:	3f 4f       	sbci	r19, 0xFF	; 255
    169e:	4f 4f       	sbci	r20, 0xFF	; 255
    16a0:	5f 4f       	sbci	r21, 0xFF	; 255
    16a2:	04 c0       	rjmp	.+8      	; 0x16ac <__pack_f+0x138>
    16a4:	21 5c       	subi	r18, 0xC1	; 193
    16a6:	3f 4f       	sbci	r19, 0xFF	; 255
    16a8:	4f 4f       	sbci	r20, 0xFF	; 255
    16aa:	5f 4f       	sbci	r21, 0xFF	; 255
    16ac:	57 ff       	sbrs	r21, 7
    16ae:	05 c0       	rjmp	.+10     	; 0x16ba <__pack_f+0x146>
    16b0:	56 95       	lsr	r21
    16b2:	47 95       	ror	r20
    16b4:	37 95       	ror	r19
    16b6:	27 95       	ror	r18
    16b8:	31 96       	adiw	r30, 0x01	; 1
    16ba:	87 e0       	ldi	r24, 0x07	; 7
    16bc:	56 95       	lsr	r21
    16be:	47 95       	ror	r20
    16c0:	37 95       	ror	r19
    16c2:	27 95       	ror	r18
    16c4:	8a 95       	dec	r24
    16c6:	d1 f7       	brne	.-12     	; 0x16bc <__pack_f+0x148>
    16c8:	0b c0       	rjmp	.+22     	; 0x16e0 <__pack_f+0x16c>
    16ca:	e0 e0       	ldi	r30, 0x00	; 0
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	05 c0       	rjmp	.+10     	; 0x16da <__pack_f+0x166>
    16d0:	e0 e0       	ldi	r30, 0x00	; 0
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	05 c0       	rjmp	.+10     	; 0x16e0 <__pack_f+0x16c>
    16d6:	ef ef       	ldi	r30, 0xFF	; 255
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	a9 01       	movw	r20, r18
    16e0:	8e 2f       	mov	r24, r30
    16e2:	87 95       	ror	r24
    16e4:	88 27       	eor	r24, r24
    16e6:	87 95       	ror	r24
    16e8:	94 2f       	mov	r25, r20
    16ea:	9f 77       	andi	r25, 0x7F	; 127
    16ec:	67 95       	ror	r22
    16ee:	66 27       	eor	r22, r22
    16f0:	67 95       	ror	r22
    16f2:	e6 95       	lsr	r30
    16f4:	e2 2e       	mov	r14, r18
    16f6:	a9 2f       	mov	r26, r25
    16f8:	a8 2b       	or	r26, r24
    16fa:	fe 2f       	mov	r31, r30
    16fc:	f6 2b       	or	r31, r22
    16fe:	62 2f       	mov	r22, r18
    1700:	73 2f       	mov	r23, r19
    1702:	8a 2f       	mov	r24, r26
    1704:	9f 2f       	mov	r25, r31
    1706:	cd b7       	in	r28, 0x3d	; 61
    1708:	de b7       	in	r29, 0x3e	; 62
    170a:	e6 e0       	ldi	r30, 0x06	; 6
    170c:	0c 94 99 0c 	jmp	0x1932	; 0x1932 <__epilogue_restores__+0x18>

00001710 <__unpack_f>:
    1710:	dc 01       	movw	r26, r24
    1712:	fb 01       	movw	r30, r22
    1714:	2c 91       	ld	r18, X
    1716:	11 96       	adiw	r26, 0x01	; 1
    1718:	3c 91       	ld	r19, X
    171a:	11 97       	sbiw	r26, 0x01	; 1
    171c:	12 96       	adiw	r26, 0x02	; 2
    171e:	8c 91       	ld	r24, X
    1720:	12 97       	sbiw	r26, 0x02	; 2
    1722:	48 2f       	mov	r20, r24
    1724:	4f 77       	andi	r20, 0x7F	; 127
    1726:	50 e0       	ldi	r21, 0x00	; 0
    1728:	98 2f       	mov	r25, r24
    172a:	99 1f       	adc	r25, r25
    172c:	99 27       	eor	r25, r25
    172e:	99 1f       	adc	r25, r25
    1730:	13 96       	adiw	r26, 0x03	; 3
    1732:	6c 91       	ld	r22, X
    1734:	13 97       	sbiw	r26, 0x03	; 3
    1736:	86 2f       	mov	r24, r22
    1738:	88 0f       	add	r24, r24
    173a:	89 2b       	or	r24, r25
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	66 1f       	adc	r22, r22
    1740:	66 27       	eor	r22, r22
    1742:	66 1f       	adc	r22, r22
    1744:	61 83       	std	Z+1, r22	; 0x01
    1746:	00 97       	sbiw	r24, 0x00	; 0
    1748:	39 f5       	brne	.+78     	; 0x1798 <__unpack_f+0x88>
    174a:	21 15       	cp	r18, r1
    174c:	31 05       	cpc	r19, r1
    174e:	41 05       	cpc	r20, r1
    1750:	51 05       	cpc	r21, r1
    1752:	11 f4       	brne	.+4      	; 0x1758 <__unpack_f+0x48>
    1754:	82 e0       	ldi	r24, 0x02	; 2
    1756:	29 c0       	rjmp	.+82     	; 0x17aa <__unpack_f+0x9a>
    1758:	82 e8       	ldi	r24, 0x82	; 130
    175a:	9f ef       	ldi	r25, 0xFF	; 255
    175c:	93 83       	std	Z+3, r25	; 0x03
    175e:	82 83       	std	Z+2, r24	; 0x02
    1760:	67 e0       	ldi	r22, 0x07	; 7
    1762:	22 0f       	add	r18, r18
    1764:	33 1f       	adc	r19, r19
    1766:	44 1f       	adc	r20, r20
    1768:	55 1f       	adc	r21, r21
    176a:	6a 95       	dec	r22
    176c:	d1 f7       	brne	.-12     	; 0x1762 <__unpack_f+0x52>
    176e:	83 e0       	ldi	r24, 0x03	; 3
    1770:	80 83       	st	Z, r24
    1772:	09 c0       	rjmp	.+18     	; 0x1786 <__unpack_f+0x76>
    1774:	22 0f       	add	r18, r18
    1776:	33 1f       	adc	r19, r19
    1778:	44 1f       	adc	r20, r20
    177a:	55 1f       	adc	r21, r21
    177c:	82 81       	ldd	r24, Z+2	; 0x02
    177e:	93 81       	ldd	r25, Z+3	; 0x03
    1780:	01 97       	sbiw	r24, 0x01	; 1
    1782:	93 83       	std	Z+3, r25	; 0x03
    1784:	82 83       	std	Z+2, r24	; 0x02
    1786:	20 30       	cpi	r18, 0x00	; 0
    1788:	80 e0       	ldi	r24, 0x00	; 0
    178a:	38 07       	cpc	r19, r24
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	48 07       	cpc	r20, r24
    1790:	80 e4       	ldi	r24, 0x40	; 64
    1792:	58 07       	cpc	r21, r24
    1794:	78 f3       	brcs	.-34     	; 0x1774 <__unpack_f+0x64>
    1796:	20 c0       	rjmp	.+64     	; 0x17d8 <__unpack_f+0xc8>
    1798:	8f 3f       	cpi	r24, 0xFF	; 255
    179a:	91 05       	cpc	r25, r1
    179c:	79 f4       	brne	.+30     	; 0x17bc <__unpack_f+0xac>
    179e:	21 15       	cp	r18, r1
    17a0:	31 05       	cpc	r19, r1
    17a2:	41 05       	cpc	r20, r1
    17a4:	51 05       	cpc	r21, r1
    17a6:	19 f4       	brne	.+6      	; 0x17ae <__unpack_f+0x9e>
    17a8:	84 e0       	ldi	r24, 0x04	; 4
    17aa:	80 83       	st	Z, r24
    17ac:	08 95       	ret
    17ae:	44 ff       	sbrs	r20, 4
    17b0:	03 c0       	rjmp	.+6      	; 0x17b8 <__unpack_f+0xa8>
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	80 83       	st	Z, r24
    17b6:	10 c0       	rjmp	.+32     	; 0x17d8 <__unpack_f+0xc8>
    17b8:	10 82       	st	Z, r1
    17ba:	0e c0       	rjmp	.+28     	; 0x17d8 <__unpack_f+0xc8>
    17bc:	8f 57       	subi	r24, 0x7F	; 127
    17be:	90 40       	sbci	r25, 0x00	; 0
    17c0:	93 83       	std	Z+3, r25	; 0x03
    17c2:	82 83       	std	Z+2, r24	; 0x02
    17c4:	83 e0       	ldi	r24, 0x03	; 3
    17c6:	80 83       	st	Z, r24
    17c8:	87 e0       	ldi	r24, 0x07	; 7
    17ca:	22 0f       	add	r18, r18
    17cc:	33 1f       	adc	r19, r19
    17ce:	44 1f       	adc	r20, r20
    17d0:	55 1f       	adc	r21, r21
    17d2:	8a 95       	dec	r24
    17d4:	d1 f7       	brne	.-12     	; 0x17ca <__unpack_f+0xba>
    17d6:	50 64       	ori	r21, 0x40	; 64
    17d8:	24 83       	std	Z+4, r18	; 0x04
    17da:	35 83       	std	Z+5, r19	; 0x05
    17dc:	46 83       	std	Z+6, r20	; 0x06
    17de:	57 83       	std	Z+7, r21	; 0x07
    17e0:	08 95       	ret

000017e2 <__fpcmp_parts_f>:
    17e2:	fc 01       	movw	r30, r24
    17e4:	db 01       	movw	r26, r22
    17e6:	90 81       	ld	r25, Z
    17e8:	92 30       	cpi	r25, 0x02	; 2
    17ea:	08 f4       	brcc	.+2      	; 0x17ee <__fpcmp_parts_f+0xc>
    17ec:	49 c0       	rjmp	.+146    	; 0x1880 <__fpcmp_parts_f+0x9e>
    17ee:	8c 91       	ld	r24, X
    17f0:	82 30       	cpi	r24, 0x02	; 2
    17f2:	08 f4       	brcc	.+2      	; 0x17f6 <__fpcmp_parts_f+0x14>
    17f4:	45 c0       	rjmp	.+138    	; 0x1880 <__fpcmp_parts_f+0x9e>
    17f6:	94 30       	cpi	r25, 0x04	; 4
    17f8:	51 f4       	brne	.+20     	; 0x180e <__fpcmp_parts_f+0x2c>
    17fa:	61 81       	ldd	r22, Z+1	; 0x01
    17fc:	84 30       	cpi	r24, 0x04	; 4
    17fe:	b1 f5       	brne	.+108    	; 0x186c <__fpcmp_parts_f+0x8a>
    1800:	11 96       	adiw	r26, 0x01	; 1
    1802:	2c 91       	ld	r18, X
    1804:	11 97       	sbiw	r26, 0x01	; 1
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	26 1b       	sub	r18, r22
    180a:	31 09       	sbc	r19, r1
    180c:	41 c0       	rjmp	.+130    	; 0x1890 <__fpcmp_parts_f+0xae>
    180e:	84 30       	cpi	r24, 0x04	; 4
    1810:	21 f0       	breq	.+8      	; 0x181a <__fpcmp_parts_f+0x38>
    1812:	92 30       	cpi	r25, 0x02	; 2
    1814:	41 f4       	brne	.+16     	; 0x1826 <__fpcmp_parts_f+0x44>
    1816:	82 30       	cpi	r24, 0x02	; 2
    1818:	b1 f1       	breq	.+108    	; 0x1886 <__fpcmp_parts_f+0xa4>
    181a:	11 96       	adiw	r26, 0x01	; 1
    181c:	8c 91       	ld	r24, X
    181e:	11 97       	sbiw	r26, 0x01	; 1
    1820:	88 23       	and	r24, r24
    1822:	a1 f1       	breq	.+104    	; 0x188c <__fpcmp_parts_f+0xaa>
    1824:	2d c0       	rjmp	.+90     	; 0x1880 <__fpcmp_parts_f+0x9e>
    1826:	61 81       	ldd	r22, Z+1	; 0x01
    1828:	82 30       	cpi	r24, 0x02	; 2
    182a:	01 f1       	breq	.+64     	; 0x186c <__fpcmp_parts_f+0x8a>
    182c:	11 96       	adiw	r26, 0x01	; 1
    182e:	8c 91       	ld	r24, X
    1830:	11 97       	sbiw	r26, 0x01	; 1
    1832:	68 17       	cp	r22, r24
    1834:	d9 f4       	brne	.+54     	; 0x186c <__fpcmp_parts_f+0x8a>
    1836:	22 81       	ldd	r18, Z+2	; 0x02
    1838:	33 81       	ldd	r19, Z+3	; 0x03
    183a:	12 96       	adiw	r26, 0x02	; 2
    183c:	8d 91       	ld	r24, X+
    183e:	9c 91       	ld	r25, X
    1840:	13 97       	sbiw	r26, 0x03	; 3
    1842:	82 17       	cp	r24, r18
    1844:	93 07       	cpc	r25, r19
    1846:	94 f0       	brlt	.+36     	; 0x186c <__fpcmp_parts_f+0x8a>
    1848:	28 17       	cp	r18, r24
    184a:	39 07       	cpc	r19, r25
    184c:	bc f0       	brlt	.+46     	; 0x187c <__fpcmp_parts_f+0x9a>
    184e:	24 81       	ldd	r18, Z+4	; 0x04
    1850:	35 81       	ldd	r19, Z+5	; 0x05
    1852:	46 81       	ldd	r20, Z+6	; 0x06
    1854:	57 81       	ldd	r21, Z+7	; 0x07
    1856:	14 96       	adiw	r26, 0x04	; 4
    1858:	8d 91       	ld	r24, X+
    185a:	9d 91       	ld	r25, X+
    185c:	0d 90       	ld	r0, X+
    185e:	bc 91       	ld	r27, X
    1860:	a0 2d       	mov	r26, r0
    1862:	82 17       	cp	r24, r18
    1864:	93 07       	cpc	r25, r19
    1866:	a4 07       	cpc	r26, r20
    1868:	b5 07       	cpc	r27, r21
    186a:	18 f4       	brcc	.+6      	; 0x1872 <__fpcmp_parts_f+0x90>
    186c:	66 23       	and	r22, r22
    186e:	41 f0       	breq	.+16     	; 0x1880 <__fpcmp_parts_f+0x9e>
    1870:	0d c0       	rjmp	.+26     	; 0x188c <__fpcmp_parts_f+0xaa>
    1872:	28 17       	cp	r18, r24
    1874:	39 07       	cpc	r19, r25
    1876:	4a 07       	cpc	r20, r26
    1878:	5b 07       	cpc	r21, r27
    187a:	28 f4       	brcc	.+10     	; 0x1886 <__fpcmp_parts_f+0xa4>
    187c:	66 23       	and	r22, r22
    187e:	31 f0       	breq	.+12     	; 0x188c <__fpcmp_parts_f+0xaa>
    1880:	21 e0       	ldi	r18, 0x01	; 1
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	05 c0       	rjmp	.+10     	; 0x1890 <__fpcmp_parts_f+0xae>
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	02 c0       	rjmp	.+4      	; 0x1890 <__fpcmp_parts_f+0xae>
    188c:	2f ef       	ldi	r18, 0xFF	; 255
    188e:	3f ef       	ldi	r19, 0xFF	; 255
    1890:	c9 01       	movw	r24, r18
    1892:	08 95       	ret

00001894 <__divmodhi4>:
    1894:	97 fb       	bst	r25, 7
    1896:	09 2e       	mov	r0, r25
    1898:	07 26       	eor	r0, r23
    189a:	0a d0       	rcall	.+20     	; 0x18b0 <__divmodhi4_neg1>
    189c:	77 fd       	sbrc	r23, 7
    189e:	04 d0       	rcall	.+8      	; 0x18a8 <__divmodhi4_neg2>
    18a0:	0c d0       	rcall	.+24     	; 0x18ba <__udivmodhi4>
    18a2:	06 d0       	rcall	.+12     	; 0x18b0 <__divmodhi4_neg1>
    18a4:	00 20       	and	r0, r0
    18a6:	1a f4       	brpl	.+6      	; 0x18ae <__divmodhi4_exit>

000018a8 <__divmodhi4_neg2>:
    18a8:	70 95       	com	r23
    18aa:	61 95       	neg	r22
    18ac:	7f 4f       	sbci	r23, 0xFF	; 255

000018ae <__divmodhi4_exit>:
    18ae:	08 95       	ret

000018b0 <__divmodhi4_neg1>:
    18b0:	f6 f7       	brtc	.-4      	; 0x18ae <__divmodhi4_exit>
    18b2:	90 95       	com	r25
    18b4:	81 95       	neg	r24
    18b6:	9f 4f       	sbci	r25, 0xFF	; 255
    18b8:	08 95       	ret

000018ba <__udivmodhi4>:
    18ba:	aa 1b       	sub	r26, r26
    18bc:	bb 1b       	sub	r27, r27
    18be:	51 e1       	ldi	r21, 0x11	; 17
    18c0:	07 c0       	rjmp	.+14     	; 0x18d0 <__udivmodhi4_ep>

000018c2 <__udivmodhi4_loop>:
    18c2:	aa 1f       	adc	r26, r26
    18c4:	bb 1f       	adc	r27, r27
    18c6:	a6 17       	cp	r26, r22
    18c8:	b7 07       	cpc	r27, r23
    18ca:	10 f0       	brcs	.+4      	; 0x18d0 <__udivmodhi4_ep>
    18cc:	a6 1b       	sub	r26, r22
    18ce:	b7 0b       	sbc	r27, r23

000018d0 <__udivmodhi4_ep>:
    18d0:	88 1f       	adc	r24, r24
    18d2:	99 1f       	adc	r25, r25
    18d4:	5a 95       	dec	r21
    18d6:	a9 f7       	brne	.-22     	; 0x18c2 <__udivmodhi4_loop>
    18d8:	80 95       	com	r24
    18da:	90 95       	com	r25
    18dc:	bc 01       	movw	r22, r24
    18de:	cd 01       	movw	r24, r26
    18e0:	08 95       	ret

000018e2 <__prologue_saves__>:
    18e2:	2f 92       	push	r2
    18e4:	3f 92       	push	r3
    18e6:	4f 92       	push	r4
    18e8:	5f 92       	push	r5
    18ea:	6f 92       	push	r6
    18ec:	7f 92       	push	r7
    18ee:	8f 92       	push	r8
    18f0:	9f 92       	push	r9
    18f2:	af 92       	push	r10
    18f4:	bf 92       	push	r11
    18f6:	cf 92       	push	r12
    18f8:	df 92       	push	r13
    18fa:	ef 92       	push	r14
    18fc:	ff 92       	push	r15
    18fe:	0f 93       	push	r16
    1900:	1f 93       	push	r17
    1902:	cf 93       	push	r28
    1904:	df 93       	push	r29
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
    190a:	ca 1b       	sub	r28, r26
    190c:	db 0b       	sbc	r29, r27
    190e:	0f b6       	in	r0, 0x3f	; 63
    1910:	f8 94       	cli
    1912:	de bf       	out	0x3e, r29	; 62
    1914:	0f be       	out	0x3f, r0	; 63
    1916:	cd bf       	out	0x3d, r28	; 61
    1918:	09 94       	ijmp

0000191a <__epilogue_restores__>:
    191a:	2a 88       	ldd	r2, Y+18	; 0x12
    191c:	39 88       	ldd	r3, Y+17	; 0x11
    191e:	48 88       	ldd	r4, Y+16	; 0x10
    1920:	5f 84       	ldd	r5, Y+15	; 0x0f
    1922:	6e 84       	ldd	r6, Y+14	; 0x0e
    1924:	7d 84       	ldd	r7, Y+13	; 0x0d
    1926:	8c 84       	ldd	r8, Y+12	; 0x0c
    1928:	9b 84       	ldd	r9, Y+11	; 0x0b
    192a:	aa 84       	ldd	r10, Y+10	; 0x0a
    192c:	b9 84       	ldd	r11, Y+9	; 0x09
    192e:	c8 84       	ldd	r12, Y+8	; 0x08
    1930:	df 80       	ldd	r13, Y+7	; 0x07
    1932:	ee 80       	ldd	r14, Y+6	; 0x06
    1934:	fd 80       	ldd	r15, Y+5	; 0x05
    1936:	0c 81       	ldd	r16, Y+4	; 0x04
    1938:	1b 81       	ldd	r17, Y+3	; 0x03
    193a:	aa 81       	ldd	r26, Y+2	; 0x02
    193c:	b9 81       	ldd	r27, Y+1	; 0x01
    193e:	ce 0f       	add	r28, r30
    1940:	d1 1d       	adc	r29, r1
    1942:	0f b6       	in	r0, 0x3f	; 63
    1944:	f8 94       	cli
    1946:	de bf       	out	0x3e, r29	; 62
    1948:	0f be       	out	0x3f, r0	; 63
    194a:	cd bf       	out	0x3d, r28	; 61
    194c:	ed 01       	movw	r28, r26
    194e:	08 95       	ret

00001950 <malloc>:
    1950:	cf 93       	push	r28
    1952:	df 93       	push	r29
    1954:	82 30       	cpi	r24, 0x02	; 2
    1956:	91 05       	cpc	r25, r1
    1958:	10 f4       	brcc	.+4      	; 0x195e <malloc+0xe>
    195a:	82 e0       	ldi	r24, 0x02	; 2
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	e0 91 08 06 	lds	r30, 0x0608
    1962:	f0 91 09 06 	lds	r31, 0x0609
    1966:	40 e0       	ldi	r20, 0x00	; 0
    1968:	50 e0       	ldi	r21, 0x00	; 0
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	26 c0       	rjmp	.+76     	; 0x19bc <malloc+0x6c>
    1970:	60 81       	ld	r22, Z
    1972:	71 81       	ldd	r23, Z+1	; 0x01
    1974:	68 17       	cp	r22, r24
    1976:	79 07       	cpc	r23, r25
    1978:	e0 f0       	brcs	.+56     	; 0x19b2 <malloc+0x62>
    197a:	68 17       	cp	r22, r24
    197c:	79 07       	cpc	r23, r25
    197e:	81 f4       	brne	.+32     	; 0x19a0 <malloc+0x50>
    1980:	82 81       	ldd	r24, Z+2	; 0x02
    1982:	93 81       	ldd	r25, Z+3	; 0x03
    1984:	21 15       	cp	r18, r1
    1986:	31 05       	cpc	r19, r1
    1988:	31 f0       	breq	.+12     	; 0x1996 <malloc+0x46>
    198a:	d9 01       	movw	r26, r18
    198c:	13 96       	adiw	r26, 0x03	; 3
    198e:	9c 93       	st	X, r25
    1990:	8e 93       	st	-X, r24
    1992:	12 97       	sbiw	r26, 0x02	; 2
    1994:	2b c0       	rjmp	.+86     	; 0x19ec <malloc+0x9c>
    1996:	90 93 09 06 	sts	0x0609, r25
    199a:	80 93 08 06 	sts	0x0608, r24
    199e:	26 c0       	rjmp	.+76     	; 0x19ec <malloc+0x9c>
    19a0:	41 15       	cp	r20, r1
    19a2:	51 05       	cpc	r21, r1
    19a4:	19 f0       	breq	.+6      	; 0x19ac <malloc+0x5c>
    19a6:	64 17       	cp	r22, r20
    19a8:	75 07       	cpc	r23, r21
    19aa:	18 f4       	brcc	.+6      	; 0x19b2 <malloc+0x62>
    19ac:	ab 01       	movw	r20, r22
    19ae:	e9 01       	movw	r28, r18
    19b0:	df 01       	movw	r26, r30
    19b2:	9f 01       	movw	r18, r30
    19b4:	72 81       	ldd	r23, Z+2	; 0x02
    19b6:	63 81       	ldd	r22, Z+3	; 0x03
    19b8:	e7 2f       	mov	r30, r23
    19ba:	f6 2f       	mov	r31, r22
    19bc:	30 97       	sbiw	r30, 0x00	; 0
    19be:	c1 f6       	brne	.-80     	; 0x1970 <malloc+0x20>
    19c0:	41 15       	cp	r20, r1
    19c2:	51 05       	cpc	r21, r1
    19c4:	01 f1       	breq	.+64     	; 0x1a06 <malloc+0xb6>
    19c6:	48 1b       	sub	r20, r24
    19c8:	59 0b       	sbc	r21, r25
    19ca:	44 30       	cpi	r20, 0x04	; 4
    19cc:	51 05       	cpc	r21, r1
    19ce:	80 f4       	brcc	.+32     	; 0x19f0 <malloc+0xa0>
    19d0:	12 96       	adiw	r26, 0x02	; 2
    19d2:	8d 91       	ld	r24, X+
    19d4:	9c 91       	ld	r25, X
    19d6:	13 97       	sbiw	r26, 0x03	; 3
    19d8:	20 97       	sbiw	r28, 0x00	; 0
    19da:	19 f0       	breq	.+6      	; 0x19e2 <malloc+0x92>
    19dc:	9b 83       	std	Y+3, r25	; 0x03
    19de:	8a 83       	std	Y+2, r24	; 0x02
    19e0:	04 c0       	rjmp	.+8      	; 0x19ea <malloc+0x9a>
    19e2:	90 93 09 06 	sts	0x0609, r25
    19e6:	80 93 08 06 	sts	0x0608, r24
    19ea:	fd 01       	movw	r30, r26
    19ec:	32 96       	adiw	r30, 0x02	; 2
    19ee:	46 c0       	rjmp	.+140    	; 0x1a7c <malloc+0x12c>
    19f0:	fd 01       	movw	r30, r26
    19f2:	e4 0f       	add	r30, r20
    19f4:	f5 1f       	adc	r31, r21
    19f6:	81 93       	st	Z+, r24
    19f8:	91 93       	st	Z+, r25
    19fa:	42 50       	subi	r20, 0x02	; 2
    19fc:	50 40       	sbci	r21, 0x00	; 0
    19fe:	11 96       	adiw	r26, 0x01	; 1
    1a00:	5c 93       	st	X, r21
    1a02:	4e 93       	st	-X, r20
    1a04:	3b c0       	rjmp	.+118    	; 0x1a7c <malloc+0x12c>
    1a06:	20 91 06 06 	lds	r18, 0x0606
    1a0a:	30 91 07 06 	lds	r19, 0x0607
    1a0e:	21 15       	cp	r18, r1
    1a10:	31 05       	cpc	r19, r1
    1a12:	41 f4       	brne	.+16     	; 0x1a24 <malloc+0xd4>
    1a14:	20 91 2a 01 	lds	r18, 0x012A
    1a18:	30 91 2b 01 	lds	r19, 0x012B
    1a1c:	30 93 07 06 	sts	0x0607, r19
    1a20:	20 93 06 06 	sts	0x0606, r18
    1a24:	20 91 2c 01 	lds	r18, 0x012C
    1a28:	30 91 2d 01 	lds	r19, 0x012D
    1a2c:	21 15       	cp	r18, r1
    1a2e:	31 05       	cpc	r19, r1
    1a30:	41 f4       	brne	.+16     	; 0x1a42 <malloc+0xf2>
    1a32:	2d b7       	in	r18, 0x3d	; 61
    1a34:	3e b7       	in	r19, 0x3e	; 62
    1a36:	40 91 28 01 	lds	r20, 0x0128
    1a3a:	50 91 29 01 	lds	r21, 0x0129
    1a3e:	24 1b       	sub	r18, r20
    1a40:	35 0b       	sbc	r19, r21
    1a42:	e0 91 06 06 	lds	r30, 0x0606
    1a46:	f0 91 07 06 	lds	r31, 0x0607
    1a4a:	e2 17       	cp	r30, r18
    1a4c:	f3 07       	cpc	r31, r19
    1a4e:	a0 f4       	brcc	.+40     	; 0x1a78 <malloc+0x128>
    1a50:	2e 1b       	sub	r18, r30
    1a52:	3f 0b       	sbc	r19, r31
    1a54:	28 17       	cp	r18, r24
    1a56:	39 07       	cpc	r19, r25
    1a58:	78 f0       	brcs	.+30     	; 0x1a78 <malloc+0x128>
    1a5a:	ac 01       	movw	r20, r24
    1a5c:	4e 5f       	subi	r20, 0xFE	; 254
    1a5e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a60:	24 17       	cp	r18, r20
    1a62:	35 07       	cpc	r19, r21
    1a64:	48 f0       	brcs	.+18     	; 0x1a78 <malloc+0x128>
    1a66:	4e 0f       	add	r20, r30
    1a68:	5f 1f       	adc	r21, r31
    1a6a:	50 93 07 06 	sts	0x0607, r21
    1a6e:	40 93 06 06 	sts	0x0606, r20
    1a72:	81 93       	st	Z+, r24
    1a74:	91 93       	st	Z+, r25
    1a76:	02 c0       	rjmp	.+4      	; 0x1a7c <malloc+0x12c>
    1a78:	e0 e0       	ldi	r30, 0x00	; 0
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	cf 01       	movw	r24, r30
    1a7e:	df 91       	pop	r29
    1a80:	cf 91       	pop	r28
    1a82:	08 95       	ret

00001a84 <free>:
    1a84:	cf 93       	push	r28
    1a86:	df 93       	push	r29
    1a88:	00 97       	sbiw	r24, 0x00	; 0
    1a8a:	09 f4       	brne	.+2      	; 0x1a8e <free+0xa>
    1a8c:	91 c0       	rjmp	.+290    	; 0x1bb0 <free+0x12c>
    1a8e:	fc 01       	movw	r30, r24
    1a90:	32 97       	sbiw	r30, 0x02	; 2
    1a92:	13 82       	std	Z+3, r1	; 0x03
    1a94:	12 82       	std	Z+2, r1	; 0x02
    1a96:	60 91 08 06 	lds	r22, 0x0608
    1a9a:	70 91 09 06 	lds	r23, 0x0609
    1a9e:	61 15       	cp	r22, r1
    1aa0:	71 05       	cpc	r23, r1
    1aa2:	81 f4       	brne	.+32     	; 0x1ac4 <free+0x40>
    1aa4:	20 81       	ld	r18, Z
    1aa6:	31 81       	ldd	r19, Z+1	; 0x01
    1aa8:	28 0f       	add	r18, r24
    1aaa:	39 1f       	adc	r19, r25
    1aac:	80 91 06 06 	lds	r24, 0x0606
    1ab0:	90 91 07 06 	lds	r25, 0x0607
    1ab4:	82 17       	cp	r24, r18
    1ab6:	93 07       	cpc	r25, r19
    1ab8:	99 f5       	brne	.+102    	; 0x1b20 <free+0x9c>
    1aba:	f0 93 07 06 	sts	0x0607, r31
    1abe:	e0 93 06 06 	sts	0x0606, r30
    1ac2:	76 c0       	rjmp	.+236    	; 0x1bb0 <free+0x12c>
    1ac4:	db 01       	movw	r26, r22
    1ac6:	80 e0       	ldi	r24, 0x00	; 0
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <free+0x4c>
    1acc:	cd 01       	movw	r24, r26
    1ace:	d9 01       	movw	r26, r18
    1ad0:	ae 17       	cp	r26, r30
    1ad2:	bf 07       	cpc	r27, r31
    1ad4:	48 f4       	brcc	.+18     	; 0x1ae8 <free+0x64>
    1ad6:	12 96       	adiw	r26, 0x02	; 2
    1ad8:	2d 91       	ld	r18, X+
    1ada:	3c 91       	ld	r19, X
    1adc:	13 97       	sbiw	r26, 0x03	; 3
    1ade:	21 15       	cp	r18, r1
    1ae0:	31 05       	cpc	r19, r1
    1ae2:	a1 f7       	brne	.-24     	; 0x1acc <free+0x48>
    1ae4:	cd 01       	movw	r24, r26
    1ae6:	21 c0       	rjmp	.+66     	; 0x1b2a <free+0xa6>
    1ae8:	b3 83       	std	Z+3, r27	; 0x03
    1aea:	a2 83       	std	Z+2, r26	; 0x02
    1aec:	ef 01       	movw	r28, r30
    1aee:	49 91       	ld	r20, Y+
    1af0:	59 91       	ld	r21, Y+
    1af2:	9e 01       	movw	r18, r28
    1af4:	24 0f       	add	r18, r20
    1af6:	35 1f       	adc	r19, r21
    1af8:	a2 17       	cp	r26, r18
    1afa:	b3 07       	cpc	r27, r19
    1afc:	79 f4       	brne	.+30     	; 0x1b1c <free+0x98>
    1afe:	2d 91       	ld	r18, X+
    1b00:	3c 91       	ld	r19, X
    1b02:	11 97       	sbiw	r26, 0x01	; 1
    1b04:	24 0f       	add	r18, r20
    1b06:	35 1f       	adc	r19, r21
    1b08:	2e 5f       	subi	r18, 0xFE	; 254
    1b0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b0c:	31 83       	std	Z+1, r19	; 0x01
    1b0e:	20 83       	st	Z, r18
    1b10:	12 96       	adiw	r26, 0x02	; 2
    1b12:	2d 91       	ld	r18, X+
    1b14:	3c 91       	ld	r19, X
    1b16:	13 97       	sbiw	r26, 0x03	; 3
    1b18:	33 83       	std	Z+3, r19	; 0x03
    1b1a:	22 83       	std	Z+2, r18	; 0x02
    1b1c:	00 97       	sbiw	r24, 0x00	; 0
    1b1e:	29 f4       	brne	.+10     	; 0x1b2a <free+0xa6>
    1b20:	f0 93 09 06 	sts	0x0609, r31
    1b24:	e0 93 08 06 	sts	0x0608, r30
    1b28:	43 c0       	rjmp	.+134    	; 0x1bb0 <free+0x12c>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	13 96       	adiw	r26, 0x03	; 3
    1b2e:	fc 93       	st	X, r31
    1b30:	ee 93       	st	-X, r30
    1b32:	12 97       	sbiw	r26, 0x02	; 2
    1b34:	4d 91       	ld	r20, X+
    1b36:	5d 91       	ld	r21, X+
    1b38:	a4 0f       	add	r26, r20
    1b3a:	b5 1f       	adc	r27, r21
    1b3c:	ea 17       	cp	r30, r26
    1b3e:	fb 07       	cpc	r31, r27
    1b40:	69 f4       	brne	.+26     	; 0x1b5c <free+0xd8>
    1b42:	20 81       	ld	r18, Z
    1b44:	31 81       	ldd	r19, Z+1	; 0x01
    1b46:	24 0f       	add	r18, r20
    1b48:	35 1f       	adc	r19, r21
    1b4a:	2e 5f       	subi	r18, 0xFE	; 254
    1b4c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b4e:	ec 01       	movw	r28, r24
    1b50:	39 83       	std	Y+1, r19	; 0x01
    1b52:	28 83       	st	Y, r18
    1b54:	22 81       	ldd	r18, Z+2	; 0x02
    1b56:	33 81       	ldd	r19, Z+3	; 0x03
    1b58:	3b 83       	std	Y+3, r19	; 0x03
    1b5a:	2a 83       	std	Y+2, r18	; 0x02
    1b5c:	e0 e0       	ldi	r30, 0x00	; 0
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	02 c0       	rjmp	.+4      	; 0x1b66 <free+0xe2>
    1b62:	fb 01       	movw	r30, r22
    1b64:	bc 01       	movw	r22, r24
    1b66:	db 01       	movw	r26, r22
    1b68:	12 96       	adiw	r26, 0x02	; 2
    1b6a:	8d 91       	ld	r24, X+
    1b6c:	9c 91       	ld	r25, X
    1b6e:	13 97       	sbiw	r26, 0x03	; 3
    1b70:	00 97       	sbiw	r24, 0x00	; 0
    1b72:	b9 f7       	brne	.-18     	; 0x1b62 <free+0xde>
    1b74:	9b 01       	movw	r18, r22
    1b76:	2e 5f       	subi	r18, 0xFE	; 254
    1b78:	3f 4f       	sbci	r19, 0xFF	; 255
    1b7a:	8d 91       	ld	r24, X+
    1b7c:	9c 91       	ld	r25, X
    1b7e:	11 97       	sbiw	r26, 0x01	; 1
    1b80:	82 0f       	add	r24, r18
    1b82:	93 1f       	adc	r25, r19
    1b84:	40 91 06 06 	lds	r20, 0x0606
    1b88:	50 91 07 06 	lds	r21, 0x0607
    1b8c:	48 17       	cp	r20, r24
    1b8e:	59 07       	cpc	r21, r25
    1b90:	79 f4       	brne	.+30     	; 0x1bb0 <free+0x12c>
    1b92:	30 97       	sbiw	r30, 0x00	; 0
    1b94:	29 f4       	brne	.+10     	; 0x1ba0 <free+0x11c>
    1b96:	10 92 09 06 	sts	0x0609, r1
    1b9a:	10 92 08 06 	sts	0x0608, r1
    1b9e:	02 c0       	rjmp	.+4      	; 0x1ba4 <free+0x120>
    1ba0:	13 82       	std	Z+3, r1	; 0x03
    1ba2:	12 82       	std	Z+2, r1	; 0x02
    1ba4:	22 50       	subi	r18, 0x02	; 2
    1ba6:	30 40       	sbci	r19, 0x00	; 0
    1ba8:	30 93 07 06 	sts	0x0607, r19
    1bac:	20 93 06 06 	sts	0x0606, r18
    1bb0:	df 91       	pop	r29
    1bb2:	cf 91       	pop	r28
    1bb4:	08 95       	ret

00001bb6 <strlen>:
    1bb6:	fc 01       	movw	r30, r24
    1bb8:	01 90       	ld	r0, Z+
    1bba:	00 20       	and	r0, r0
    1bbc:	e9 f7       	brne	.-6      	; 0x1bb8 <strlen+0x2>
    1bbe:	80 95       	com	r24
    1bc0:	90 95       	com	r25
    1bc2:	8e 0f       	add	r24, r30
    1bc4:	9f 1f       	adc	r25, r31
    1bc6:	08 95       	ret

00001bc8 <sprintf>:
    1bc8:	ae e0       	ldi	r26, 0x0E	; 14
    1bca:	b0 e0       	ldi	r27, 0x00	; 0
    1bcc:	ea ee       	ldi	r30, 0xEA	; 234
    1bce:	fd e0       	ldi	r31, 0x0D	; 13
    1bd0:	0c 94 7f 0c 	jmp	0x18fe	; 0x18fe <__prologue_saves__+0x1c>
    1bd4:	0d 89       	ldd	r16, Y+21	; 0x15
    1bd6:	1e 89       	ldd	r17, Y+22	; 0x16
    1bd8:	86 e0       	ldi	r24, 0x06	; 6
    1bda:	8c 83       	std	Y+4, r24	; 0x04
    1bdc:	1a 83       	std	Y+2, r17	; 0x02
    1bde:	09 83       	std	Y+1, r16	; 0x01
    1be0:	8f ef       	ldi	r24, 0xFF	; 255
    1be2:	9f e7       	ldi	r25, 0x7F	; 127
    1be4:	9e 83       	std	Y+6, r25	; 0x06
    1be6:	8d 83       	std	Y+5, r24	; 0x05
    1be8:	9e 01       	movw	r18, r28
    1bea:	27 5e       	subi	r18, 0xE7	; 231
    1bec:	3f 4f       	sbci	r19, 0xFF	; 255
    1bee:	ce 01       	movw	r24, r28
    1bf0:	01 96       	adiw	r24, 0x01	; 1
    1bf2:	6f 89       	ldd	r22, Y+23	; 0x17
    1bf4:	78 8d       	ldd	r23, Y+24	; 0x18
    1bf6:	a9 01       	movw	r20, r18
    1bf8:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <vfprintf>
    1bfc:	ef 81       	ldd	r30, Y+7	; 0x07
    1bfe:	f8 85       	ldd	r31, Y+8	; 0x08
    1c00:	e0 0f       	add	r30, r16
    1c02:	f1 1f       	adc	r31, r17
    1c04:	10 82       	st	Z, r1
    1c06:	2e 96       	adiw	r28, 0x0e	; 14
    1c08:	e4 e0       	ldi	r30, 0x04	; 4
    1c0a:	0c 94 9b 0c 	jmp	0x1936	; 0x1936 <__epilogue_restores__+0x1c>

00001c0e <vfprintf>:
    1c0e:	ac e0       	ldi	r26, 0x0C	; 12
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	ed e0       	ldi	r30, 0x0D	; 13
    1c14:	fe e0       	ldi	r31, 0x0E	; 14
    1c16:	0c 94 71 0c 	jmp	0x18e2	; 0x18e2 <__prologue_saves__>
    1c1a:	6c 01       	movw	r12, r24
    1c1c:	1b 01       	movw	r2, r22
    1c1e:	8a 01       	movw	r16, r20
    1c20:	fc 01       	movw	r30, r24
    1c22:	17 82       	std	Z+7, r1	; 0x07
    1c24:	16 82       	std	Z+6, r1	; 0x06
    1c26:	83 81       	ldd	r24, Z+3	; 0x03
    1c28:	81 ff       	sbrs	r24, 1
    1c2a:	d1 c1       	rjmp	.+930    	; 0x1fce <vfprintf+0x3c0>
    1c2c:	2e 01       	movw	r4, r28
    1c2e:	08 94       	sec
    1c30:	41 1c       	adc	r4, r1
    1c32:	51 1c       	adc	r5, r1
    1c34:	f6 01       	movw	r30, r12
    1c36:	93 81       	ldd	r25, Z+3	; 0x03
    1c38:	f1 01       	movw	r30, r2
    1c3a:	93 fd       	sbrc	r25, 3
    1c3c:	85 91       	lpm	r24, Z+
    1c3e:	93 ff       	sbrs	r25, 3
    1c40:	81 91       	ld	r24, Z+
    1c42:	1f 01       	movw	r2, r30
    1c44:	88 23       	and	r24, r24
    1c46:	09 f4       	brne	.+2      	; 0x1c4a <vfprintf+0x3c>
    1c48:	be c1       	rjmp	.+892    	; 0x1fc6 <vfprintf+0x3b8>
    1c4a:	85 32       	cpi	r24, 0x25	; 37
    1c4c:	39 f4       	brne	.+14     	; 0x1c5c <vfprintf+0x4e>
    1c4e:	93 fd       	sbrc	r25, 3
    1c50:	85 91       	lpm	r24, Z+
    1c52:	93 ff       	sbrs	r25, 3
    1c54:	81 91       	ld	r24, Z+
    1c56:	1f 01       	movw	r2, r30
    1c58:	85 32       	cpi	r24, 0x25	; 37
    1c5a:	29 f4       	brne	.+10     	; 0x1c66 <vfprintf+0x58>
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	b6 01       	movw	r22, r12
    1c60:	0e 94 04 10 	call	0x2008	; 0x2008 <fputc>
    1c64:	e7 cf       	rjmp	.-50     	; 0x1c34 <vfprintf+0x26>
    1c66:	ee 24       	eor	r14, r14
    1c68:	ff 24       	eor	r15, r15
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	20 32       	cpi	r18, 0x20	; 32
    1c6e:	b0 f4       	brcc	.+44     	; 0x1c9c <vfprintf+0x8e>
    1c70:	8b 32       	cpi	r24, 0x2B	; 43
    1c72:	69 f0       	breq	.+26     	; 0x1c8e <vfprintf+0x80>
    1c74:	8c 32       	cpi	r24, 0x2C	; 44
    1c76:	28 f4       	brcc	.+10     	; 0x1c82 <vfprintf+0x74>
    1c78:	80 32       	cpi	r24, 0x20	; 32
    1c7a:	51 f0       	breq	.+20     	; 0x1c90 <vfprintf+0x82>
    1c7c:	83 32       	cpi	r24, 0x23	; 35
    1c7e:	71 f4       	brne	.+28     	; 0x1c9c <vfprintf+0x8e>
    1c80:	0b c0       	rjmp	.+22     	; 0x1c98 <vfprintf+0x8a>
    1c82:	8d 32       	cpi	r24, 0x2D	; 45
    1c84:	39 f0       	breq	.+14     	; 0x1c94 <vfprintf+0x86>
    1c86:	80 33       	cpi	r24, 0x30	; 48
    1c88:	49 f4       	brne	.+18     	; 0x1c9c <vfprintf+0x8e>
    1c8a:	21 60       	ori	r18, 0x01	; 1
    1c8c:	2c c0       	rjmp	.+88     	; 0x1ce6 <vfprintf+0xd8>
    1c8e:	22 60       	ori	r18, 0x02	; 2
    1c90:	24 60       	ori	r18, 0x04	; 4
    1c92:	29 c0       	rjmp	.+82     	; 0x1ce6 <vfprintf+0xd8>
    1c94:	28 60       	ori	r18, 0x08	; 8
    1c96:	27 c0       	rjmp	.+78     	; 0x1ce6 <vfprintf+0xd8>
    1c98:	20 61       	ori	r18, 0x10	; 16
    1c9a:	25 c0       	rjmp	.+74     	; 0x1ce6 <vfprintf+0xd8>
    1c9c:	27 fd       	sbrc	r18, 7
    1c9e:	2c c0       	rjmp	.+88     	; 0x1cf8 <vfprintf+0xea>
    1ca0:	38 2f       	mov	r19, r24
    1ca2:	30 53       	subi	r19, 0x30	; 48
    1ca4:	3a 30       	cpi	r19, 0x0A	; 10
    1ca6:	98 f4       	brcc	.+38     	; 0x1cce <vfprintf+0xc0>
    1ca8:	26 ff       	sbrs	r18, 6
    1caa:	08 c0       	rjmp	.+16     	; 0x1cbc <vfprintf+0xae>
    1cac:	8e 2d       	mov	r24, r14
    1cae:	88 0f       	add	r24, r24
    1cb0:	e8 2e       	mov	r14, r24
    1cb2:	ee 0c       	add	r14, r14
    1cb4:	ee 0c       	add	r14, r14
    1cb6:	e8 0e       	add	r14, r24
    1cb8:	e3 0e       	add	r14, r19
    1cba:	15 c0       	rjmp	.+42     	; 0x1ce6 <vfprintf+0xd8>
    1cbc:	8f 2d       	mov	r24, r15
    1cbe:	88 0f       	add	r24, r24
    1cc0:	f8 2e       	mov	r15, r24
    1cc2:	ff 0c       	add	r15, r15
    1cc4:	ff 0c       	add	r15, r15
    1cc6:	f8 0e       	add	r15, r24
    1cc8:	f3 0e       	add	r15, r19
    1cca:	20 62       	ori	r18, 0x20	; 32
    1ccc:	0c c0       	rjmp	.+24     	; 0x1ce6 <vfprintf+0xd8>
    1cce:	8e 32       	cpi	r24, 0x2E	; 46
    1cd0:	21 f4       	brne	.+8      	; 0x1cda <vfprintf+0xcc>
    1cd2:	26 fd       	sbrc	r18, 6
    1cd4:	78 c1       	rjmp	.+752    	; 0x1fc6 <vfprintf+0x3b8>
    1cd6:	20 64       	ori	r18, 0x40	; 64
    1cd8:	06 c0       	rjmp	.+12     	; 0x1ce6 <vfprintf+0xd8>
    1cda:	8c 36       	cpi	r24, 0x6C	; 108
    1cdc:	11 f4       	brne	.+4      	; 0x1ce2 <vfprintf+0xd4>
    1cde:	20 68       	ori	r18, 0x80	; 128
    1ce0:	02 c0       	rjmp	.+4      	; 0x1ce6 <vfprintf+0xd8>
    1ce2:	88 36       	cpi	r24, 0x68	; 104
    1ce4:	49 f4       	brne	.+18     	; 0x1cf8 <vfprintf+0xea>
    1ce6:	f1 01       	movw	r30, r2
    1ce8:	93 fd       	sbrc	r25, 3
    1cea:	85 91       	lpm	r24, Z+
    1cec:	93 ff       	sbrs	r25, 3
    1cee:	81 91       	ld	r24, Z+
    1cf0:	1f 01       	movw	r2, r30
    1cf2:	88 23       	and	r24, r24
    1cf4:	09 f0       	breq	.+2      	; 0x1cf8 <vfprintf+0xea>
    1cf6:	ba cf       	rjmp	.-140    	; 0x1c6c <vfprintf+0x5e>
    1cf8:	98 2f       	mov	r25, r24
    1cfa:	95 54       	subi	r25, 0x45	; 69
    1cfc:	93 30       	cpi	r25, 0x03	; 3
    1cfe:	18 f0       	brcs	.+6      	; 0x1d06 <vfprintf+0xf8>
    1d00:	90 52       	subi	r25, 0x20	; 32
    1d02:	93 30       	cpi	r25, 0x03	; 3
    1d04:	28 f4       	brcc	.+10     	; 0x1d10 <vfprintf+0x102>
    1d06:	0c 5f       	subi	r16, 0xFC	; 252
    1d08:	1f 4f       	sbci	r17, 0xFF	; 255
    1d0a:	ff e3       	ldi	r31, 0x3F	; 63
    1d0c:	f9 83       	std	Y+1, r31	; 0x01
    1d0e:	0d c0       	rjmp	.+26     	; 0x1d2a <vfprintf+0x11c>
    1d10:	83 36       	cpi	r24, 0x63	; 99
    1d12:	31 f0       	breq	.+12     	; 0x1d20 <vfprintf+0x112>
    1d14:	83 37       	cpi	r24, 0x73	; 115
    1d16:	71 f0       	breq	.+28     	; 0x1d34 <vfprintf+0x126>
    1d18:	83 35       	cpi	r24, 0x53	; 83
    1d1a:	09 f0       	breq	.+2      	; 0x1d1e <vfprintf+0x110>
    1d1c:	60 c0       	rjmp	.+192    	; 0x1dde <vfprintf+0x1d0>
    1d1e:	22 c0       	rjmp	.+68     	; 0x1d64 <vfprintf+0x156>
    1d20:	f8 01       	movw	r30, r16
    1d22:	80 81       	ld	r24, Z
    1d24:	89 83       	std	Y+1, r24	; 0x01
    1d26:	0e 5f       	subi	r16, 0xFE	; 254
    1d28:	1f 4f       	sbci	r17, 0xFF	; 255
    1d2a:	42 01       	movw	r8, r4
    1d2c:	71 e0       	ldi	r23, 0x01	; 1
    1d2e:	a7 2e       	mov	r10, r23
    1d30:	b1 2c       	mov	r11, r1
    1d32:	16 c0       	rjmp	.+44     	; 0x1d60 <vfprintf+0x152>
    1d34:	62 e0       	ldi	r22, 0x02	; 2
    1d36:	66 2e       	mov	r6, r22
    1d38:	71 2c       	mov	r7, r1
    1d3a:	60 0e       	add	r6, r16
    1d3c:	71 1e       	adc	r7, r17
    1d3e:	f8 01       	movw	r30, r16
    1d40:	80 80       	ld	r8, Z
    1d42:	91 80       	ldd	r9, Z+1	; 0x01
    1d44:	26 ff       	sbrs	r18, 6
    1d46:	03 c0       	rjmp	.+6      	; 0x1d4e <vfprintf+0x140>
    1d48:	6e 2d       	mov	r22, r14
    1d4a:	70 e0       	ldi	r23, 0x00	; 0
    1d4c:	02 c0       	rjmp	.+4      	; 0x1d52 <vfprintf+0x144>
    1d4e:	6f ef       	ldi	r22, 0xFF	; 255
    1d50:	7f ef       	ldi	r23, 0xFF	; 255
    1d52:	c4 01       	movw	r24, r8
    1d54:	2c 87       	std	Y+12, r18	; 0x0c
    1d56:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <strnlen>
    1d5a:	5c 01       	movw	r10, r24
    1d5c:	83 01       	movw	r16, r6
    1d5e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d60:	2f 77       	andi	r18, 0x7F	; 127
    1d62:	17 c0       	rjmp	.+46     	; 0x1d92 <vfprintf+0x184>
    1d64:	52 e0       	ldi	r21, 0x02	; 2
    1d66:	65 2e       	mov	r6, r21
    1d68:	71 2c       	mov	r7, r1
    1d6a:	60 0e       	add	r6, r16
    1d6c:	71 1e       	adc	r7, r17
    1d6e:	f8 01       	movw	r30, r16
    1d70:	80 80       	ld	r8, Z
    1d72:	91 80       	ldd	r9, Z+1	; 0x01
    1d74:	26 ff       	sbrs	r18, 6
    1d76:	03 c0       	rjmp	.+6      	; 0x1d7e <vfprintf+0x170>
    1d78:	6e 2d       	mov	r22, r14
    1d7a:	70 e0       	ldi	r23, 0x00	; 0
    1d7c:	02 c0       	rjmp	.+4      	; 0x1d82 <vfprintf+0x174>
    1d7e:	6f ef       	ldi	r22, 0xFF	; 255
    1d80:	7f ef       	ldi	r23, 0xFF	; 255
    1d82:	c4 01       	movw	r24, r8
    1d84:	2c 87       	std	Y+12, r18	; 0x0c
    1d86:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <strnlen_P>
    1d8a:	5c 01       	movw	r10, r24
    1d8c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d8e:	20 68       	ori	r18, 0x80	; 128
    1d90:	83 01       	movw	r16, r6
    1d92:	23 fd       	sbrc	r18, 3
    1d94:	20 c0       	rjmp	.+64     	; 0x1dd6 <vfprintf+0x1c8>
    1d96:	08 c0       	rjmp	.+16     	; 0x1da8 <vfprintf+0x19a>
    1d98:	80 e2       	ldi	r24, 0x20	; 32
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	b6 01       	movw	r22, r12
    1d9e:	2c 87       	std	Y+12, r18	; 0x0c
    1da0:	0e 94 04 10 	call	0x2008	; 0x2008 <fputc>
    1da4:	fa 94       	dec	r15
    1da6:	2c 85       	ldd	r18, Y+12	; 0x0c
    1da8:	8f 2d       	mov	r24, r15
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	a8 16       	cp	r10, r24
    1dae:	b9 06       	cpc	r11, r25
    1db0:	98 f3       	brcs	.-26     	; 0x1d98 <vfprintf+0x18a>
    1db2:	11 c0       	rjmp	.+34     	; 0x1dd6 <vfprintf+0x1c8>
    1db4:	f4 01       	movw	r30, r8
    1db6:	27 fd       	sbrc	r18, 7
    1db8:	85 91       	lpm	r24, Z+
    1dba:	27 ff       	sbrs	r18, 7
    1dbc:	81 91       	ld	r24, Z+
    1dbe:	4f 01       	movw	r8, r30
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	b6 01       	movw	r22, r12
    1dc4:	2c 87       	std	Y+12, r18	; 0x0c
    1dc6:	0e 94 04 10 	call	0x2008	; 0x2008 <fputc>
    1dca:	2c 85       	ldd	r18, Y+12	; 0x0c
    1dcc:	f1 10       	cpse	r15, r1
    1dce:	fa 94       	dec	r15
    1dd0:	08 94       	sec
    1dd2:	a1 08       	sbc	r10, r1
    1dd4:	b1 08       	sbc	r11, r1
    1dd6:	a1 14       	cp	r10, r1
    1dd8:	b1 04       	cpc	r11, r1
    1dda:	61 f7       	brne	.-40     	; 0x1db4 <vfprintf+0x1a6>
    1ddc:	f1 c0       	rjmp	.+482    	; 0x1fc0 <vfprintf+0x3b2>
    1dde:	84 36       	cpi	r24, 0x64	; 100
    1de0:	11 f0       	breq	.+4      	; 0x1de6 <vfprintf+0x1d8>
    1de2:	89 36       	cpi	r24, 0x69	; 105
    1de4:	49 f5       	brne	.+82     	; 0x1e38 <vfprintf+0x22a>
    1de6:	27 ff       	sbrs	r18, 7
    1de8:	08 c0       	rjmp	.+16     	; 0x1dfa <vfprintf+0x1ec>
    1dea:	f8 01       	movw	r30, r16
    1dec:	60 81       	ld	r22, Z
    1dee:	71 81       	ldd	r23, Z+1	; 0x01
    1df0:	82 81       	ldd	r24, Z+2	; 0x02
    1df2:	93 81       	ldd	r25, Z+3	; 0x03
    1df4:	0c 5f       	subi	r16, 0xFC	; 252
    1df6:	1f 4f       	sbci	r17, 0xFF	; 255
    1df8:	09 c0       	rjmp	.+18     	; 0x1e0c <vfprintf+0x1fe>
    1dfa:	f8 01       	movw	r30, r16
    1dfc:	60 81       	ld	r22, Z
    1dfe:	71 81       	ldd	r23, Z+1	; 0x01
    1e00:	88 27       	eor	r24, r24
    1e02:	77 fd       	sbrc	r23, 7
    1e04:	80 95       	com	r24
    1e06:	98 2f       	mov	r25, r24
    1e08:	0e 5f       	subi	r16, 0xFE	; 254
    1e0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e0c:	4f e6       	ldi	r20, 0x6F	; 111
    1e0e:	b4 2e       	mov	r11, r20
    1e10:	b2 22       	and	r11, r18
    1e12:	97 ff       	sbrs	r25, 7
    1e14:	09 c0       	rjmp	.+18     	; 0x1e28 <vfprintf+0x21a>
    1e16:	90 95       	com	r25
    1e18:	80 95       	com	r24
    1e1a:	70 95       	com	r23
    1e1c:	61 95       	neg	r22
    1e1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e20:	8f 4f       	sbci	r24, 0xFF	; 255
    1e22:	9f 4f       	sbci	r25, 0xFF	; 255
    1e24:	f0 e8       	ldi	r31, 0x80	; 128
    1e26:	bf 2a       	or	r11, r31
    1e28:	a2 01       	movw	r20, r4
    1e2a:	2a e0       	ldi	r18, 0x0A	; 10
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	0e 94 30 10 	call	0x2060	; 0x2060 <__ultoa_invert>
    1e32:	78 2e       	mov	r7, r24
    1e34:	74 18       	sub	r7, r4
    1e36:	45 c0       	rjmp	.+138    	; 0x1ec2 <vfprintf+0x2b4>
    1e38:	85 37       	cpi	r24, 0x75	; 117
    1e3a:	31 f4       	brne	.+12     	; 0x1e48 <vfprintf+0x23a>
    1e3c:	3f ee       	ldi	r19, 0xEF	; 239
    1e3e:	b3 2e       	mov	r11, r19
    1e40:	b2 22       	and	r11, r18
    1e42:	2a e0       	ldi	r18, 0x0A	; 10
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	25 c0       	rjmp	.+74     	; 0x1e92 <vfprintf+0x284>
    1e48:	99 ef       	ldi	r25, 0xF9	; 249
    1e4a:	b9 2e       	mov	r11, r25
    1e4c:	b2 22       	and	r11, r18
    1e4e:	8f 36       	cpi	r24, 0x6F	; 111
    1e50:	c1 f0       	breq	.+48     	; 0x1e82 <vfprintf+0x274>
    1e52:	80 37       	cpi	r24, 0x70	; 112
    1e54:	20 f4       	brcc	.+8      	; 0x1e5e <vfprintf+0x250>
    1e56:	88 35       	cpi	r24, 0x58	; 88
    1e58:	09 f0       	breq	.+2      	; 0x1e5c <vfprintf+0x24e>
    1e5a:	b5 c0       	rjmp	.+362    	; 0x1fc6 <vfprintf+0x3b8>
    1e5c:	0d c0       	rjmp	.+26     	; 0x1e78 <vfprintf+0x26a>
    1e5e:	80 37       	cpi	r24, 0x70	; 112
    1e60:	21 f0       	breq	.+8      	; 0x1e6a <vfprintf+0x25c>
    1e62:	88 37       	cpi	r24, 0x78	; 120
    1e64:	09 f0       	breq	.+2      	; 0x1e68 <vfprintf+0x25a>
    1e66:	af c0       	rjmp	.+350    	; 0x1fc6 <vfprintf+0x3b8>
    1e68:	02 c0       	rjmp	.+4      	; 0x1e6e <vfprintf+0x260>
    1e6a:	20 e1       	ldi	r18, 0x10	; 16
    1e6c:	b2 2a       	or	r11, r18
    1e6e:	b4 fe       	sbrs	r11, 4
    1e70:	0b c0       	rjmp	.+22     	; 0x1e88 <vfprintf+0x27a>
    1e72:	84 e0       	ldi	r24, 0x04	; 4
    1e74:	b8 2a       	or	r11, r24
    1e76:	08 c0       	rjmp	.+16     	; 0x1e88 <vfprintf+0x27a>
    1e78:	b4 fe       	sbrs	r11, 4
    1e7a:	09 c0       	rjmp	.+18     	; 0x1e8e <vfprintf+0x280>
    1e7c:	e6 e0       	ldi	r30, 0x06	; 6
    1e7e:	be 2a       	or	r11, r30
    1e80:	06 c0       	rjmp	.+12     	; 0x1e8e <vfprintf+0x280>
    1e82:	28 e0       	ldi	r18, 0x08	; 8
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	05 c0       	rjmp	.+10     	; 0x1e92 <vfprintf+0x284>
    1e88:	20 e1       	ldi	r18, 0x10	; 16
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	02 c0       	rjmp	.+4      	; 0x1e92 <vfprintf+0x284>
    1e8e:	20 e1       	ldi	r18, 0x10	; 16
    1e90:	32 e0       	ldi	r19, 0x02	; 2
    1e92:	b7 fe       	sbrs	r11, 7
    1e94:	08 c0       	rjmp	.+16     	; 0x1ea6 <vfprintf+0x298>
    1e96:	f8 01       	movw	r30, r16
    1e98:	60 81       	ld	r22, Z
    1e9a:	71 81       	ldd	r23, Z+1	; 0x01
    1e9c:	82 81       	ldd	r24, Z+2	; 0x02
    1e9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ea0:	0c 5f       	subi	r16, 0xFC	; 252
    1ea2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ea4:	07 c0       	rjmp	.+14     	; 0x1eb4 <vfprintf+0x2a6>
    1ea6:	f8 01       	movw	r30, r16
    1ea8:	60 81       	ld	r22, Z
    1eaa:	71 81       	ldd	r23, Z+1	; 0x01
    1eac:	80 e0       	ldi	r24, 0x00	; 0
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	0e 5f       	subi	r16, 0xFE	; 254
    1eb2:	1f 4f       	sbci	r17, 0xFF	; 255
    1eb4:	a2 01       	movw	r20, r4
    1eb6:	0e 94 30 10 	call	0x2060	; 0x2060 <__ultoa_invert>
    1eba:	78 2e       	mov	r7, r24
    1ebc:	74 18       	sub	r7, r4
    1ebe:	ff e7       	ldi	r31, 0x7F	; 127
    1ec0:	bf 22       	and	r11, r31
    1ec2:	b6 fe       	sbrs	r11, 6
    1ec4:	0b c0       	rjmp	.+22     	; 0x1edc <vfprintf+0x2ce>
    1ec6:	2e ef       	ldi	r18, 0xFE	; 254
    1ec8:	b2 22       	and	r11, r18
    1eca:	7e 14       	cp	r7, r14
    1ecc:	38 f4       	brcc	.+14     	; 0x1edc <vfprintf+0x2ce>
    1ece:	b4 fe       	sbrs	r11, 4
    1ed0:	07 c0       	rjmp	.+14     	; 0x1ee0 <vfprintf+0x2d2>
    1ed2:	b2 fc       	sbrc	r11, 2
    1ed4:	05 c0       	rjmp	.+10     	; 0x1ee0 <vfprintf+0x2d2>
    1ed6:	8f ee       	ldi	r24, 0xEF	; 239
    1ed8:	b8 22       	and	r11, r24
    1eda:	02 c0       	rjmp	.+4      	; 0x1ee0 <vfprintf+0x2d2>
    1edc:	a7 2c       	mov	r10, r7
    1ede:	01 c0       	rjmp	.+2      	; 0x1ee2 <vfprintf+0x2d4>
    1ee0:	ae 2c       	mov	r10, r14
    1ee2:	8b 2d       	mov	r24, r11
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	b4 fe       	sbrs	r11, 4
    1ee8:	0d c0       	rjmp	.+26     	; 0x1f04 <vfprintf+0x2f6>
    1eea:	fe 01       	movw	r30, r28
    1eec:	e7 0d       	add	r30, r7
    1eee:	f1 1d       	adc	r31, r1
    1ef0:	20 81       	ld	r18, Z
    1ef2:	20 33       	cpi	r18, 0x30	; 48
    1ef4:	19 f4       	brne	.+6      	; 0x1efc <vfprintf+0x2ee>
    1ef6:	e9 ee       	ldi	r30, 0xE9	; 233
    1ef8:	be 22       	and	r11, r30
    1efa:	09 c0       	rjmp	.+18     	; 0x1f0e <vfprintf+0x300>
    1efc:	a3 94       	inc	r10
    1efe:	b2 fe       	sbrs	r11, 2
    1f00:	06 c0       	rjmp	.+12     	; 0x1f0e <vfprintf+0x300>
    1f02:	04 c0       	rjmp	.+8      	; 0x1f0c <vfprintf+0x2fe>
    1f04:	86 78       	andi	r24, 0x86	; 134
    1f06:	90 70       	andi	r25, 0x00	; 0
    1f08:	00 97       	sbiw	r24, 0x00	; 0
    1f0a:	09 f0       	breq	.+2      	; 0x1f0e <vfprintf+0x300>
    1f0c:	a3 94       	inc	r10
    1f0e:	8b 2c       	mov	r8, r11
    1f10:	99 24       	eor	r9, r9
    1f12:	b3 fc       	sbrc	r11, 3
    1f14:	14 c0       	rjmp	.+40     	; 0x1f3e <vfprintf+0x330>
    1f16:	b0 fe       	sbrs	r11, 0
    1f18:	0f c0       	rjmp	.+30     	; 0x1f38 <vfprintf+0x32a>
    1f1a:	af 14       	cp	r10, r15
    1f1c:	28 f4       	brcc	.+10     	; 0x1f28 <vfprintf+0x31a>
    1f1e:	e7 2c       	mov	r14, r7
    1f20:	ef 0c       	add	r14, r15
    1f22:	ea 18       	sub	r14, r10
    1f24:	af 2c       	mov	r10, r15
    1f26:	08 c0       	rjmp	.+16     	; 0x1f38 <vfprintf+0x32a>
    1f28:	e7 2c       	mov	r14, r7
    1f2a:	06 c0       	rjmp	.+12     	; 0x1f38 <vfprintf+0x32a>
    1f2c:	80 e2       	ldi	r24, 0x20	; 32
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	b6 01       	movw	r22, r12
    1f32:	0e 94 04 10 	call	0x2008	; 0x2008 <fputc>
    1f36:	a3 94       	inc	r10
    1f38:	af 14       	cp	r10, r15
    1f3a:	c0 f3       	brcs	.-16     	; 0x1f2c <vfprintf+0x31e>
    1f3c:	04 c0       	rjmp	.+8      	; 0x1f46 <vfprintf+0x338>
    1f3e:	af 14       	cp	r10, r15
    1f40:	10 f4       	brcc	.+4      	; 0x1f46 <vfprintf+0x338>
    1f42:	fa 18       	sub	r15, r10
    1f44:	01 c0       	rjmp	.+2      	; 0x1f48 <vfprintf+0x33a>
    1f46:	ff 24       	eor	r15, r15
    1f48:	84 fe       	sbrs	r8, 4
    1f4a:	0f c0       	rjmp	.+30     	; 0x1f6a <vfprintf+0x35c>
    1f4c:	80 e3       	ldi	r24, 0x30	; 48
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	b6 01       	movw	r22, r12
    1f52:	0e 94 04 10 	call	0x2008	; 0x2008 <fputc>
    1f56:	82 fe       	sbrs	r8, 2
    1f58:	1f c0       	rjmp	.+62     	; 0x1f98 <vfprintf+0x38a>
    1f5a:	81 fe       	sbrs	r8, 1
    1f5c:	03 c0       	rjmp	.+6      	; 0x1f64 <vfprintf+0x356>
    1f5e:	88 e5       	ldi	r24, 0x58	; 88
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	10 c0       	rjmp	.+32     	; 0x1f84 <vfprintf+0x376>
    1f64:	88 e7       	ldi	r24, 0x78	; 120
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	0d c0       	rjmp	.+26     	; 0x1f84 <vfprintf+0x376>
    1f6a:	c4 01       	movw	r24, r8
    1f6c:	86 78       	andi	r24, 0x86	; 134
    1f6e:	90 70       	andi	r25, 0x00	; 0
    1f70:	00 97       	sbiw	r24, 0x00	; 0
    1f72:	91 f0       	breq	.+36     	; 0x1f98 <vfprintf+0x38a>
    1f74:	81 fc       	sbrc	r8, 1
    1f76:	02 c0       	rjmp	.+4      	; 0x1f7c <vfprintf+0x36e>
    1f78:	80 e2       	ldi	r24, 0x20	; 32
    1f7a:	01 c0       	rjmp	.+2      	; 0x1f7e <vfprintf+0x370>
    1f7c:	8b e2       	ldi	r24, 0x2B	; 43
    1f7e:	b7 fc       	sbrc	r11, 7
    1f80:	8d e2       	ldi	r24, 0x2D	; 45
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	b6 01       	movw	r22, r12
    1f86:	0e 94 04 10 	call	0x2008	; 0x2008 <fputc>
    1f8a:	06 c0       	rjmp	.+12     	; 0x1f98 <vfprintf+0x38a>
    1f8c:	80 e3       	ldi	r24, 0x30	; 48
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	b6 01       	movw	r22, r12
    1f92:	0e 94 04 10 	call	0x2008	; 0x2008 <fputc>
    1f96:	ea 94       	dec	r14
    1f98:	7e 14       	cp	r7, r14
    1f9a:	c0 f3       	brcs	.-16     	; 0x1f8c <vfprintf+0x37e>
    1f9c:	7a 94       	dec	r7
    1f9e:	f2 01       	movw	r30, r4
    1fa0:	e7 0d       	add	r30, r7
    1fa2:	f1 1d       	adc	r31, r1
    1fa4:	80 81       	ld	r24, Z
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	b6 01       	movw	r22, r12
    1faa:	0e 94 04 10 	call	0x2008	; 0x2008 <fputc>
    1fae:	77 20       	and	r7, r7
    1fb0:	a9 f7       	brne	.-22     	; 0x1f9c <vfprintf+0x38e>
    1fb2:	06 c0       	rjmp	.+12     	; 0x1fc0 <vfprintf+0x3b2>
    1fb4:	80 e2       	ldi	r24, 0x20	; 32
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	b6 01       	movw	r22, r12
    1fba:	0e 94 04 10 	call	0x2008	; 0x2008 <fputc>
    1fbe:	fa 94       	dec	r15
    1fc0:	ff 20       	and	r15, r15
    1fc2:	c1 f7       	brne	.-16     	; 0x1fb4 <vfprintf+0x3a6>
    1fc4:	37 ce       	rjmp	.-914    	; 0x1c34 <vfprintf+0x26>
    1fc6:	f6 01       	movw	r30, r12
    1fc8:	26 81       	ldd	r18, Z+6	; 0x06
    1fca:	37 81       	ldd	r19, Z+7	; 0x07
    1fcc:	02 c0       	rjmp	.+4      	; 0x1fd2 <vfprintf+0x3c4>
    1fce:	2f ef       	ldi	r18, 0xFF	; 255
    1fd0:	3f ef       	ldi	r19, 0xFF	; 255
    1fd2:	c9 01       	movw	r24, r18
    1fd4:	2c 96       	adiw	r28, 0x0c	; 12
    1fd6:	e2 e1       	ldi	r30, 0x12	; 18
    1fd8:	0c 94 8d 0c 	jmp	0x191a	; 0x191a <__epilogue_restores__>

00001fdc <strnlen_P>:
    1fdc:	fc 01       	movw	r30, r24
    1fde:	05 90       	lpm	r0, Z+
    1fe0:	61 50       	subi	r22, 0x01	; 1
    1fe2:	70 40       	sbci	r23, 0x00	; 0
    1fe4:	01 10       	cpse	r0, r1
    1fe6:	d8 f7       	brcc	.-10     	; 0x1fde <strnlen_P+0x2>
    1fe8:	80 95       	com	r24
    1fea:	90 95       	com	r25
    1fec:	8e 0f       	add	r24, r30
    1fee:	9f 1f       	adc	r25, r31
    1ff0:	08 95       	ret

00001ff2 <strnlen>:
    1ff2:	fc 01       	movw	r30, r24
    1ff4:	61 50       	subi	r22, 0x01	; 1
    1ff6:	70 40       	sbci	r23, 0x00	; 0
    1ff8:	01 90       	ld	r0, Z+
    1ffa:	01 10       	cpse	r0, r1
    1ffc:	d8 f7       	brcc	.-10     	; 0x1ff4 <strnlen+0x2>
    1ffe:	80 95       	com	r24
    2000:	90 95       	com	r25
    2002:	8e 0f       	add	r24, r30
    2004:	9f 1f       	adc	r25, r31
    2006:	08 95       	ret

00002008 <fputc>:
    2008:	0f 93       	push	r16
    200a:	1f 93       	push	r17
    200c:	cf 93       	push	r28
    200e:	df 93       	push	r29
    2010:	8c 01       	movw	r16, r24
    2012:	eb 01       	movw	r28, r22
    2014:	8b 81       	ldd	r24, Y+3	; 0x03
    2016:	81 ff       	sbrs	r24, 1
    2018:	1b c0       	rjmp	.+54     	; 0x2050 <fputc+0x48>
    201a:	82 ff       	sbrs	r24, 2
    201c:	0d c0       	rjmp	.+26     	; 0x2038 <fputc+0x30>
    201e:	2e 81       	ldd	r18, Y+6	; 0x06
    2020:	3f 81       	ldd	r19, Y+7	; 0x07
    2022:	8c 81       	ldd	r24, Y+4	; 0x04
    2024:	9d 81       	ldd	r25, Y+5	; 0x05
    2026:	28 17       	cp	r18, r24
    2028:	39 07       	cpc	r19, r25
    202a:	64 f4       	brge	.+24     	; 0x2044 <fputc+0x3c>
    202c:	e8 81       	ld	r30, Y
    202e:	f9 81       	ldd	r31, Y+1	; 0x01
    2030:	01 93       	st	Z+, r16
    2032:	f9 83       	std	Y+1, r31	; 0x01
    2034:	e8 83       	st	Y, r30
    2036:	06 c0       	rjmp	.+12     	; 0x2044 <fputc+0x3c>
    2038:	e8 85       	ldd	r30, Y+8	; 0x08
    203a:	f9 85       	ldd	r31, Y+9	; 0x09
    203c:	80 2f       	mov	r24, r16
    203e:	09 95       	icall
    2040:	00 97       	sbiw	r24, 0x00	; 0
    2042:	31 f4       	brne	.+12     	; 0x2050 <fputc+0x48>
    2044:	8e 81       	ldd	r24, Y+6	; 0x06
    2046:	9f 81       	ldd	r25, Y+7	; 0x07
    2048:	01 96       	adiw	r24, 0x01	; 1
    204a:	9f 83       	std	Y+7, r25	; 0x07
    204c:	8e 83       	std	Y+6, r24	; 0x06
    204e:	02 c0       	rjmp	.+4      	; 0x2054 <fputc+0x4c>
    2050:	0f ef       	ldi	r16, 0xFF	; 255
    2052:	1f ef       	ldi	r17, 0xFF	; 255
    2054:	c8 01       	movw	r24, r16
    2056:	df 91       	pop	r29
    2058:	cf 91       	pop	r28
    205a:	1f 91       	pop	r17
    205c:	0f 91       	pop	r16
    205e:	08 95       	ret

00002060 <__ultoa_invert>:
    2060:	fa 01       	movw	r30, r20
    2062:	aa 27       	eor	r26, r26
    2064:	28 30       	cpi	r18, 0x08	; 8
    2066:	51 f1       	breq	.+84     	; 0x20bc <__ultoa_invert+0x5c>
    2068:	20 31       	cpi	r18, 0x10	; 16
    206a:	81 f1       	breq	.+96     	; 0x20cc <__ultoa_invert+0x6c>
    206c:	e8 94       	clt
    206e:	6f 93       	push	r22
    2070:	6e 7f       	andi	r22, 0xFE	; 254
    2072:	6e 5f       	subi	r22, 0xFE	; 254
    2074:	7f 4f       	sbci	r23, 0xFF	; 255
    2076:	8f 4f       	sbci	r24, 0xFF	; 255
    2078:	9f 4f       	sbci	r25, 0xFF	; 255
    207a:	af 4f       	sbci	r26, 0xFF	; 255
    207c:	b1 e0       	ldi	r27, 0x01	; 1
    207e:	3e d0       	rcall	.+124    	; 0x20fc <__ultoa_invert+0x9c>
    2080:	b4 e0       	ldi	r27, 0x04	; 4
    2082:	3c d0       	rcall	.+120    	; 0x20fc <__ultoa_invert+0x9c>
    2084:	67 0f       	add	r22, r23
    2086:	78 1f       	adc	r23, r24
    2088:	89 1f       	adc	r24, r25
    208a:	9a 1f       	adc	r25, r26
    208c:	a1 1d       	adc	r26, r1
    208e:	68 0f       	add	r22, r24
    2090:	79 1f       	adc	r23, r25
    2092:	8a 1f       	adc	r24, r26
    2094:	91 1d       	adc	r25, r1
    2096:	a1 1d       	adc	r26, r1
    2098:	6a 0f       	add	r22, r26
    209a:	71 1d       	adc	r23, r1
    209c:	81 1d       	adc	r24, r1
    209e:	91 1d       	adc	r25, r1
    20a0:	a1 1d       	adc	r26, r1
    20a2:	20 d0       	rcall	.+64     	; 0x20e4 <__ultoa_invert+0x84>
    20a4:	09 f4       	brne	.+2      	; 0x20a8 <__ultoa_invert+0x48>
    20a6:	68 94       	set
    20a8:	3f 91       	pop	r19
    20aa:	2a e0       	ldi	r18, 0x0A	; 10
    20ac:	26 9f       	mul	r18, r22
    20ae:	11 24       	eor	r1, r1
    20b0:	30 19       	sub	r19, r0
    20b2:	30 5d       	subi	r19, 0xD0	; 208
    20b4:	31 93       	st	Z+, r19
    20b6:	de f6       	brtc	.-74     	; 0x206e <__ultoa_invert+0xe>
    20b8:	cf 01       	movw	r24, r30
    20ba:	08 95       	ret
    20bc:	46 2f       	mov	r20, r22
    20be:	47 70       	andi	r20, 0x07	; 7
    20c0:	40 5d       	subi	r20, 0xD0	; 208
    20c2:	41 93       	st	Z+, r20
    20c4:	b3 e0       	ldi	r27, 0x03	; 3
    20c6:	0f d0       	rcall	.+30     	; 0x20e6 <__ultoa_invert+0x86>
    20c8:	c9 f7       	brne	.-14     	; 0x20bc <__ultoa_invert+0x5c>
    20ca:	f6 cf       	rjmp	.-20     	; 0x20b8 <__ultoa_invert+0x58>
    20cc:	46 2f       	mov	r20, r22
    20ce:	4f 70       	andi	r20, 0x0F	; 15
    20d0:	40 5d       	subi	r20, 0xD0	; 208
    20d2:	4a 33       	cpi	r20, 0x3A	; 58
    20d4:	18 f0       	brcs	.+6      	; 0x20dc <__ultoa_invert+0x7c>
    20d6:	49 5d       	subi	r20, 0xD9	; 217
    20d8:	31 fd       	sbrc	r19, 1
    20da:	40 52       	subi	r20, 0x20	; 32
    20dc:	41 93       	st	Z+, r20
    20de:	02 d0       	rcall	.+4      	; 0x20e4 <__ultoa_invert+0x84>
    20e0:	a9 f7       	brne	.-22     	; 0x20cc <__ultoa_invert+0x6c>
    20e2:	ea cf       	rjmp	.-44     	; 0x20b8 <__ultoa_invert+0x58>
    20e4:	b4 e0       	ldi	r27, 0x04	; 4
    20e6:	a6 95       	lsr	r26
    20e8:	97 95       	ror	r25
    20ea:	87 95       	ror	r24
    20ec:	77 95       	ror	r23
    20ee:	67 95       	ror	r22
    20f0:	ba 95       	dec	r27
    20f2:	c9 f7       	brne	.-14     	; 0x20e6 <__ultoa_invert+0x86>
    20f4:	00 97       	sbiw	r24, 0x00	; 0
    20f6:	61 05       	cpc	r22, r1
    20f8:	71 05       	cpc	r23, r1
    20fa:	08 95       	ret
    20fc:	9b 01       	movw	r18, r22
    20fe:	ac 01       	movw	r20, r24
    2100:	0a 2e       	mov	r0, r26
    2102:	06 94       	lsr	r0
    2104:	57 95       	ror	r21
    2106:	47 95       	ror	r20
    2108:	37 95       	ror	r19
    210a:	27 95       	ror	r18
    210c:	ba 95       	dec	r27
    210e:	c9 f7       	brne	.-14     	; 0x2102 <__ultoa_invert+0xa2>
    2110:	62 0f       	add	r22, r18
    2112:	73 1f       	adc	r23, r19
    2114:	84 1f       	adc	r24, r20
    2116:	95 1f       	adc	r25, r21
    2118:	a0 1d       	adc	r26, r0
    211a:	08 95       	ret

0000211c <_exit>:
    211c:	f8 94       	cli

0000211e <__stop_program>:
    211e:	ff cf       	rjmp	.-2      	; 0x211e <__stop_program>
