
assignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  0000298e  00002a22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000298e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000522  0080011a  0080011a  00002a3c  2**0
                  ALLOC
  3 .stab         00000d74  00000000  00000000  00002a3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000027a  00000000  00000000  000037b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000268  00000000  00000000  00003a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000529  00000000  00000000  00003c92  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000032f5  00000000  00000000  000041bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001897  00000000  00000000  000074b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002cfc  00000000  00000000  00008d47  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000410  00000000  00000000  0000ba44  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000a40  00000000  00000000  0000be54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000015fb  00000000  00000000  0000c894  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000760  00000000  00000000  0000de8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000a0  00000000  00000000  0000e5ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 b0 08 	jmp	0x1160	; 0x1160 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 d9 09 	jmp	0x13b2	; 0x13b2 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 7e 09 	jmp	0x12fc	; 0x12fc <__vector_20>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee e8       	ldi	r30, 0x8E	; 142
      7c:	f9 e2       	ldi	r31, 0x29	; 41
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 31       	cpi	r26, 0x1A	; 26
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	16 e0       	ldi	r17, 0x06	; 6
      8c:	aa e1       	ldi	r26, 0x1A	; 26
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ac 33       	cpi	r26, 0x3C	; 60
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 bb 01 	call	0x376	; 0x376 <main>
      9e:	0c 94 c5 14 	jmp	0x298a	; 0x298a <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <task1>:
// Tasks 1 and 2 will increment a global variable ctr, and every 10 increments task 1 will send the resulting value in ctr to task3 via a queue.
// Task 3 will then send it via serial to the PC. 

// In addition, do something fun and creative with this program, the serial port and the components you have. Describe it in your report. :)
void task1(void *p)
{
      a6:	df 93       	push	r29
      a8:	cf 93       	push	r28
      aa:	00 d0       	rcall	.+0      	; 0xac <task1+0x6>
      ac:	cd b7       	in	r28, 0x3d	; 61
      ae:	de b7       	in	r29, 0x3e	; 62
      b0:	9a 83       	std	Y+2, r25	; 0x02
      b2:	89 83       	std	Y+1, r24	; 0x01
	while(1)
	{
		enterCritical();
      b4:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <enterCritical>
		variable++;
      b8:	80 91 1a 01 	lds	r24, 0x011A
      bc:	90 91 1b 01 	lds	r25, 0x011B
      c0:	01 96       	adiw	r24, 0x01	; 1
      c2:	90 93 1b 01 	sts	0x011B, r25
      c6:	80 93 1a 01 	sts	0x011A, r24
		if(variable % 10 == 0){
      ca:	80 91 1a 01 	lds	r24, 0x011A
      ce:	90 91 1b 01 	lds	r25, 0x011B
      d2:	2a e0       	ldi	r18, 0x0A	; 10
      d4:	30 e0       	ldi	r19, 0x00	; 0
      d6:	b9 01       	movw	r22, r18
      d8:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__divmodhi4>
      dc:	00 97       	sbiw	r24, 0x00	; 0
      de:	99 f4       	brne	.+38     	; 0x106 <task1+0x60>
			PORTD ^= 0b10000000;
      e0:	8b e2       	ldi	r24, 0x2B	; 43
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	2b e2       	ldi	r18, 0x2B	; 43
      e6:	30 e0       	ldi	r19, 0x00	; 0
      e8:	f9 01       	movw	r30, r18
      ea:	30 81       	ld	r19, Z
      ec:	20 e8       	ldi	r18, 0x80	; 128
      ee:	23 27       	eor	r18, r19
      f0:	fc 01       	movw	r30, r24
      f2:	20 83       	st	Z, r18
			OSenq(queue,&variable);
      f4:	80 91 60 01 	lds	r24, 0x0160
      f8:	90 91 61 01 	lds	r25, 0x0161
      fc:	2a e1       	ldi	r18, 0x1A	; 26
      fe:	31 e0       	ldi	r19, 0x01	; 1
     100:	b9 01       	movw	r22, r18
     102:	0e 94 d7 04 	call	0x9ae	; 0x9ae <OSenq>
		}
		
		leaveCritical();
     106:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <leaveCritical>
	}
     10a:	d4 cf       	rjmp	.-88     	; 0xb4 <task1+0xe>

0000010c <task2>:
}

void task2(void *p)
{
     10c:	df 93       	push	r29
     10e:	cf 93       	push	r28
     110:	00 d0       	rcall	.+0      	; 0x112 <task2+0x6>
     112:	cd b7       	in	r28, 0x3d	; 61
     114:	de b7       	in	r29, 0x3e	; 62
     116:	9a 83       	std	Y+2, r25	; 0x02
     118:	89 83       	std	Y+1, r24	; 0x01
	while(1)
	{
		enterCritical();
     11a:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <enterCritical>
		variable++;
     11e:	80 91 1a 01 	lds	r24, 0x011A
     122:	90 91 1b 01 	lds	r25, 0x011B
     126:	01 96       	adiw	r24, 0x01	; 1
     128:	90 93 1b 01 	sts	0x011B, r25
     12c:	80 93 1a 01 	sts	0x011A, r24
		
		if(variable % 10 == 0){
     130:	80 91 1a 01 	lds	r24, 0x011A
     134:	90 91 1b 01 	lds	r25, 0x011B
     138:	2a e0       	ldi	r18, 0x0A	; 10
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	b9 01       	movw	r22, r18
     13e:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__divmodhi4>
     142:	00 97       	sbiw	r24, 0x00	; 0
     144:	99 f4       	brne	.+38     	; 0x16c <task2+0x60>
			PORTD ^= 0b01000000;
     146:	8b e2       	ldi	r24, 0x2B	; 43
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	2b e2       	ldi	r18, 0x2B	; 43
     14c:	30 e0       	ldi	r19, 0x00	; 0
     14e:	f9 01       	movw	r30, r18
     150:	30 81       	ld	r19, Z
     152:	20 e4       	ldi	r18, 0x40	; 64
     154:	23 27       	eor	r18, r19
     156:	fc 01       	movw	r30, r24
     158:	20 83       	st	Z, r18
			OSenq(queue,&variable);
     15a:	80 91 60 01 	lds	r24, 0x0160
     15e:	90 91 61 01 	lds	r25, 0x0161
     162:	2a e1       	ldi	r18, 0x1A	; 26
     164:	31 e0       	ldi	r19, 0x01	; 1
     166:	b9 01       	movw	r22, r18
     168:	0e 94 d7 04 	call	0x9ae	; 0x9ae <OSenq>
		}
		
		leaveCritical();
     16c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <leaveCritical>
	}
     170:	d4 cf       	rjmp	.-88     	; 0x11a <task2+0xe>

00000172 <task3>:
}

void task3(void *p)
{
     172:	0f 93       	push	r16
     174:	1f 93       	push	r17
     176:	df 93       	push	r29
     178:	cf 93       	push	r28
     17a:	cd b7       	in	r28, 0x3d	; 61
     17c:	de b7       	in	r29, 0x3e	; 62
     17e:	64 97       	sbiw	r28, 0x14	; 20
     180:	0f b6       	in	r0, 0x3f	; 63
     182:	f8 94       	cli
     184:	de bf       	out	0x3e, r29	; 62
     186:	0f be       	out	0x3f, r0	; 63
     188:	cd bf       	out	0x3d, r28	; 61
     18a:	9c 8b       	std	Y+20, r25	; 0x14
     18c:	8b 8b       	std	Y+19, r24	; 0x13
     18e:	01 c0       	rjmp	.+2      	; 0x192 <task3+0x20>
			say(sayBuf);
			_delay_ms(30);
			leaveCritical();
			PORTD ^= 0b00100000;
		}
	}
     190:	00 00       	nop
{
	void *addr;
	int res,i;
	while(1)
	{
		if(queue->size > 0){
     192:	80 91 60 01 	lds	r24, 0x0160
     196:	90 91 61 01 	lds	r25, 0x0161
     19a:	fc 01       	movw	r30, r24
     19c:	86 81       	ldd	r24, Z+6	; 0x06
     19e:	97 81       	ldd	r25, Z+7	; 0x07
     1a0:	18 16       	cp	r1, r24
     1a2:	19 06       	cpc	r1, r25
     1a4:	ac f7       	brge	.-22     	; 0x190 <task3+0x1e>
			enterCritical();
     1a6:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <enterCritical>
			addr = OSdeq(queue);
     1aa:	80 91 60 01 	lds	r24, 0x0160
     1ae:	90 91 61 01 	lds	r25, 0x0161
     1b2:	0e 94 8e 05 	call	0xb1c	; 0xb1c <OSdeq>
     1b6:	9a 83       	std	Y+2, r25	; 0x02
     1b8:	89 83       	std	Y+1, r24	; 0x01
			res = *(int*)addr;
     1ba:	89 81       	ldd	r24, Y+1	; 0x01
     1bc:	9a 81       	ldd	r25, Y+2	; 0x02
     1be:	fc 01       	movw	r30, r24
     1c0:	80 81       	ld	r24, Z
     1c2:	91 81       	ldd	r25, Z+1	; 0x01
     1c4:	9c 83       	std	Y+4, r25	; 0x04
     1c6:	8b 83       	std	Y+3, r24	; 0x03
			
			sprintf(sayBuf,"r:%d \n\r",res);
     1c8:	00 d0       	rcall	.+0      	; 0x1ca <task3+0x58>
     1ca:	00 d0       	rcall	.+0      	; 0x1cc <task3+0x5a>
     1cc:	00 d0       	rcall	.+0      	; 0x1ce <task3+0x5c>
     1ce:	8d b7       	in	r24, 0x3d	; 61
     1d0:	9e b7       	in	r25, 0x3e	; 62
     1d2:	01 96       	adiw	r24, 0x01	; 1
     1d4:	20 e2       	ldi	r18, 0x20	; 32
     1d6:	31 e0       	ldi	r19, 0x01	; 1
     1d8:	fc 01       	movw	r30, r24
     1da:	31 83       	std	Z+1, r19	; 0x01
     1dc:	20 83       	st	Z, r18
     1de:	20 e0       	ldi	r18, 0x00	; 0
     1e0:	31 e0       	ldi	r19, 0x01	; 1
     1e2:	fc 01       	movw	r30, r24
     1e4:	33 83       	std	Z+3, r19	; 0x03
     1e6:	22 83       	std	Z+2, r18	; 0x02
     1e8:	2b 81       	ldd	r18, Y+3	; 0x03
     1ea:	3c 81       	ldd	r19, Y+4	; 0x04
     1ec:	fc 01       	movw	r30, r24
     1ee:	35 83       	std	Z+5, r19	; 0x05
     1f0:	24 83       	std	Z+4, r18	; 0x04
     1f2:	0e 94 1b 12 	call	0x2436	; 0x2436 <sprintf>
     1f6:	8d b7       	in	r24, 0x3d	; 61
     1f8:	9e b7       	in	r25, 0x3e	; 62
     1fa:	06 96       	adiw	r24, 0x06	; 6
     1fc:	0f b6       	in	r0, 0x3f	; 63
     1fe:	f8 94       	cli
     200:	9e bf       	out	0x3e, r25	; 62
     202:	0f be       	out	0x3f, r0	; 63
     204:	8d bf       	out	0x3d, r24	; 61
			say(sayBuf);
     206:	80 e2       	ldi	r24, 0x20	; 32
     208:	91 e0       	ldi	r25, 0x01	; 1
     20a:	0e 94 8b 0a 	call	0x1516	; 0x1516 <say>
     20e:	80 e0       	ldi	r24, 0x00	; 0
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	a0 ef       	ldi	r26, 0xF0	; 240
     214:	b1 e4       	ldi	r27, 0x41	; 65
     216:	8d 83       	std	Y+5, r24	; 0x05
     218:	9e 83       	std	Y+6, r25	; 0x06
     21a:	af 83       	std	Y+7, r26	; 0x07
     21c:	b8 87       	std	Y+8, r27	; 0x08
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     21e:	6d 81       	ldd	r22, Y+5	; 0x05
     220:	7e 81       	ldd	r23, Y+6	; 0x06
     222:	8f 81       	ldd	r24, Y+7	; 0x07
     224:	98 85       	ldd	r25, Y+8	; 0x08
     226:	20 e0       	ldi	r18, 0x00	; 0
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	4a e7       	ldi	r20, 0x7A	; 122
     22c:	55 e4       	ldi	r21, 0x45	; 69
     22e:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <__mulsf3>
     232:	dc 01       	movw	r26, r24
     234:	cb 01       	movw	r24, r22
     236:	89 87       	std	Y+9, r24	; 0x09
     238:	9a 87       	std	Y+10, r25	; 0x0a
     23a:	ab 87       	std	Y+11, r26	; 0x0b
     23c:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     23e:	11 e0       	ldi	r17, 0x01	; 1
     240:	69 85       	ldd	r22, Y+9	; 0x09
     242:	7a 85       	ldd	r23, Y+10	; 0x0a
     244:	8b 85       	ldd	r24, Y+11	; 0x0b
     246:	9c 85       	ldd	r25, Y+12	; 0x0c
     248:	20 e0       	ldi	r18, 0x00	; 0
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	40 e8       	ldi	r20, 0x80	; 128
     24e:	5f e3       	ldi	r21, 0x3F	; 63
     250:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <__ltsf2>
     254:	88 23       	and	r24, r24
     256:	0c f0       	brlt	.+2      	; 0x25a <task3+0xe8>
     258:	10 e0       	ldi	r17, 0x00	; 0
     25a:	11 23       	and	r17, r17
     25c:	29 f0       	breq	.+10     	; 0x268 <task3+0xf6>
		__ticks = 1;
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	9e 87       	std	Y+14, r25	; 0x0e
     264:	8d 87       	std	Y+13, r24	; 0x0d
     266:	46 c0       	rjmp	.+140    	; 0x2f4 <task3+0x182>
	else if (__tmp > 65535)
     268:	11 e0       	ldi	r17, 0x01	; 1
     26a:	69 85       	ldd	r22, Y+9	; 0x09
     26c:	7a 85       	ldd	r23, Y+10	; 0x0a
     26e:	8b 85       	ldd	r24, Y+11	; 0x0b
     270:	9c 85       	ldd	r25, Y+12	; 0x0c
     272:	20 e0       	ldi	r18, 0x00	; 0
     274:	3f ef       	ldi	r19, 0xFF	; 255
     276:	4f e7       	ldi	r20, 0x7F	; 127
     278:	57 e4       	ldi	r21, 0x47	; 71
     27a:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__gtsf2>
     27e:	18 16       	cp	r1, r24
     280:	0c f0       	brlt	.+2      	; 0x284 <task3+0x112>
     282:	10 e0       	ldi	r17, 0x00	; 0
     284:	11 23       	and	r17, r17
     286:	61 f1       	breq	.+88     	; 0x2e0 <task3+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     288:	6d 81       	ldd	r22, Y+5	; 0x05
     28a:	7e 81       	ldd	r23, Y+6	; 0x06
     28c:	8f 81       	ldd	r24, Y+7	; 0x07
     28e:	98 85       	ldd	r25, Y+8	; 0x08
     290:	20 e0       	ldi	r18, 0x00	; 0
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	40 e2       	ldi	r20, 0x20	; 32
     296:	51 e4       	ldi	r21, 0x41	; 65
     298:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <__mulsf3>
     29c:	dc 01       	movw	r26, r24
     29e:	cb 01       	movw	r24, r22
     2a0:	bc 01       	movw	r22, r24
     2a2:	cd 01       	movw	r24, r26
     2a4:	0e 94 16 0b 	call	0x162c	; 0x162c <__fixunssfsi>
     2a8:	dc 01       	movw	r26, r24
     2aa:	cb 01       	movw	r24, r22
     2ac:	9e 87       	std	Y+14, r25	; 0x0e
     2ae:	8d 87       	std	Y+13, r24	; 0x0d
     2b0:	12 c0       	rjmp	.+36     	; 0x2d6 <task3+0x164>
     2b2:	80 e9       	ldi	r24, 0x90	; 144
     2b4:	91 e0       	ldi	r25, 0x01	; 1
     2b6:	98 8b       	std	Y+16, r25	; 0x10
     2b8:	8f 87       	std	Y+15, r24	; 0x0f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2ba:	8f 85       	ldd	r24, Y+15	; 0x0f
     2bc:	98 89       	ldd	r25, Y+16	; 0x10
     2be:	8c 01       	movw	r16, r24
     2c0:	f8 01       	movw	r30, r16
     2c2:	31 97       	sbiw	r30, 0x01	; 1
     2c4:	f1 f7       	brne	.-4      	; 0x2c2 <task3+0x150>
     2c6:	8f 01       	movw	r16, r30
     2c8:	18 8b       	std	Y+16, r17	; 0x10
     2ca:	0f 87       	std	Y+15, r16	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2cc:	8d 85       	ldd	r24, Y+13	; 0x0d
     2ce:	9e 85       	ldd	r25, Y+14	; 0x0e
     2d0:	01 97       	sbiw	r24, 0x01	; 1
     2d2:	9e 87       	std	Y+14, r25	; 0x0e
     2d4:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2d6:	8d 85       	ldd	r24, Y+13	; 0x0d
     2d8:	9e 85       	ldd	r25, Y+14	; 0x0e
     2da:	00 97       	sbiw	r24, 0x00	; 0
     2dc:	51 f7       	brne	.-44     	; 0x2b2 <task3+0x140>
     2de:	17 c0       	rjmp	.+46     	; 0x30e <task3+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2e0:	69 85       	ldd	r22, Y+9	; 0x09
     2e2:	7a 85       	ldd	r23, Y+10	; 0x0a
     2e4:	8b 85       	ldd	r24, Y+11	; 0x0b
     2e6:	9c 85       	ldd	r25, Y+12	; 0x0c
     2e8:	0e 94 16 0b 	call	0x162c	; 0x162c <__fixunssfsi>
     2ec:	dc 01       	movw	r26, r24
     2ee:	cb 01       	movw	r24, r22
     2f0:	9e 87       	std	Y+14, r25	; 0x0e
     2f2:	8d 87       	std	Y+13, r24	; 0x0d
     2f4:	8d 85       	ldd	r24, Y+13	; 0x0d
     2f6:	9e 85       	ldd	r25, Y+14	; 0x0e
     2f8:	9a 8b       	std	Y+18, r25	; 0x12
     2fa:	89 8b       	std	Y+17, r24	; 0x11
     2fc:	89 89       	ldd	r24, Y+17	; 0x11
     2fe:	9a 89       	ldd	r25, Y+18	; 0x12
     300:	8c 01       	movw	r16, r24
     302:	c8 01       	movw	r24, r16
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	f1 f7       	brne	.-4      	; 0x304 <task3+0x192>
     308:	8c 01       	movw	r16, r24
     30a:	1a 8b       	std	Y+18, r17	; 0x12
     30c:	09 8b       	std	Y+17, r16	; 0x11
			_delay_ms(30);
			leaveCritical();
     30e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <leaveCritical>
			PORTD ^= 0b00100000;
     312:	8b e2       	ldi	r24, 0x2B	; 43
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	2b e2       	ldi	r18, 0x2B	; 43
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	f9 01       	movw	r30, r18
     31c:	30 81       	ld	r19, Z
     31e:	20 e2       	ldi	r18, 0x20	; 32
     320:	23 27       	eor	r18, r19
     322:	fc 01       	movw	r30, r24
     324:	20 83       	st	Z, r18
		}
	}
     326:	35 cf       	rjmp	.-406    	; 0x192 <task3+0x20>

00000328 <setup>:
}

void setup()
{
     328:	df 93       	push	r29
     32a:	cf 93       	push	r28
     32c:	cd b7       	in	r28, 0x3d	; 61
     32e:	de b7       	in	r29, 0x3e	; 62
	// create a global queue
	queue = (OSSignal*)OSmakeQ(MAX_QUEUE_SIZE,sizeof(int));
     330:	8a e0       	ldi	r24, 0x0A	; 10
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	62 e0       	ldi	r22, 0x02	; 2
     336:	70 e0       	ldi	r23, 0x00	; 0
     338:	0e 94 29 04 	call	0x852	; 0x852 <OSmakeQ>
     33c:	90 93 61 01 	sts	0x0161, r25
     340:	80 93 60 01 	sts	0x0160, r24
	
	// for testing only
	DDRD |= 0b11111100;
     344:	8a e2       	ldi	r24, 0x2A	; 42
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	2a e2       	ldi	r18, 0x2A	; 42
     34a:	30 e0       	ldi	r19, 0x00	; 0
     34c:	f9 01       	movw	r30, r18
     34e:	20 81       	ld	r18, Z
     350:	2c 6f       	ori	r18, 0xFC	; 252
     352:	fc 01       	movw	r30, r24
     354:	20 83       	st	Z, r18
	
	// signal OS running correctly
	PORTD |= 0b10000000;
     356:	8b e2       	ldi	r24, 0x2B	; 43
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	2b e2       	ldi	r18, 0x2B	; 43
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	f9 01       	movw	r30, r18
     360:	20 81       	ld	r18, Z
     362:	20 68       	ori	r18, 0x80	; 128
     364:	fc 01       	movw	r30, r24
     366:	20 83       	st	Z, r18
	
	variable = 0;
     368:	10 92 1b 01 	sts	0x011B, r1
     36c:	10 92 1a 01 	sts	0x011A, r1
}
     370:	cf 91       	pop	r28
     372:	df 91       	pop	r29
     374:	08 95       	ret

00000376 <main>:




int main()
{
     376:	df 93       	push	r29
     378:	cf 93       	push	r28
     37a:	cd b7       	in	r28, 0x3d	; 61
     37c:	de b7       	in	r29, 0x3e	; 62
	setupSerial();
     37e:	0e 94 46 09 	call	0x128c	; 0x128c <setupSerial>
	
	cli();
     382:	f8 94       	cli
	
	OSInit();
     384:	0e 94 b4 08 	call	0x1168	; 0x1168 <OSInit>
	
	setup();
     388:	0e 94 94 01 	call	0x328	; 0x328 <setup>
	
	// Create the tasks. Task1 is for the buzzer and we pass in the base frequency as an argument.
	
	OSAddTask(task1, 0, NULL);
     38c:	83 e5       	ldi	r24, 0x53	; 83
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	60 e0       	ldi	r22, 0x00	; 0
     392:	70 e0       	ldi	r23, 0x00	; 0
     394:	40 e0       	ldi	r20, 0x00	; 0
     396:	50 e0       	ldi	r21, 0x00	; 0
     398:	0e 94 ce 08 	call	0x119c	; 0x119c <OSAddTask>
	
	OSAddTask(task2, 1, NULL);
     39c:	86 e8       	ldi	r24, 0x86	; 134
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	61 e0       	ldi	r22, 0x01	; 1
     3a2:	70 e0       	ldi	r23, 0x00	; 0
     3a4:	40 e0       	ldi	r20, 0x00	; 0
     3a6:	50 e0       	ldi	r21, 0x00	; 0
     3a8:	0e 94 ce 08 	call	0x119c	; 0x119c <OSAddTask>
	
	OSAddTask(task3, 1, NULL);
     3ac:	89 eb       	ldi	r24, 0xB9	; 185
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	61 e0       	ldi	r22, 0x01	; 1
     3b2:	70 e0       	ldi	r23, 0x00	; 0
     3b4:	40 e0       	ldi	r20, 0x00	; 0
     3b6:	50 e0       	ldi	r21, 0x00	; 0
     3b8:	0e 94 ce 08 	call	0x119c	; 0x119c <OSAddTask>
	
	// start the OS
	OSRun();
     3bc:	0e 94 2b 09 	call	0x1256	; 0x1256 <OSRun>
	
	while(1);
     3c0:	ff cf       	rjmp	.-2      	; 0x3c0 <main+0x4a>

000003c2 <enterCritical>:

/* ======================================= */
/* Critical section management             */
/* ======================================= */
inline void enterCritical()
{
     3c2:	df 93       	push	r29
     3c4:	cf 93       	push	r28
     3c6:	cd b7       	in	r28, 0x3d	; 61
     3c8:	de b7       	in	r29, 0x3e	; 62
	cli();
     3ca:	f8 94       	cli
}
     3cc:	cf 91       	pop	r28
     3ce:	df 91       	pop	r29
     3d0:	08 95       	ret

000003d2 <leaveCritical>:

inline void leaveCritical()
{
     3d2:	df 93       	push	r29
     3d4:	cf 93       	push	r28
     3d6:	cd b7       	in	r28, 0x3d	; 61
     3d8:	de b7       	in	r29, 0x3e	; 62
	sei();
     3da:	78 94       	sei
}
     3dc:	cf 91       	pop	r28
     3de:	df 91       	pop	r29
     3e0:	08 95       	ret

000003e2 <OSmakeSema>:

#ifdef OSIncludeSema

// Creates a semaphore with initial value initval
OSSignal *OSmakeSema(int initval)
{
     3e2:	df 93       	push	r29
     3e4:	cf 93       	push	r28
     3e6:	00 d0       	rcall	.+0      	; 0x3e8 <OSmakeSema+0x6>
     3e8:	00 d0       	rcall	.+0      	; 0x3ea <OSmakeSema+0x8>
     3ea:	cd b7       	in	r28, 0x3d	; 61
     3ec:	de b7       	in	r29, 0x3e	; 62
     3ee:	9c 83       	std	Y+4, r25	; 0x04
     3f0:	8b 83       	std	Y+3, r24	; 0x03
	OSSignal *sem = (OSSignal *) malloc(sizeof(OSSignal));
     3f2:	8c e0       	ldi	r24, 0x0C	; 12
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <malloc>
     3fa:	9a 83       	std	Y+2, r25	; 0x02
     3fc:	89 83       	std	Y+1, r24	; 0x01
	if(!sem){	// when the space allocation is not successful
     3fe:	89 81       	ldd	r24, Y+1	; 0x01
     400:	9a 81       	ldd	r25, Y+2	; 0x02
     402:	00 97       	sbiw	r24, 0x00	; 0
     404:	61 f4       	brne	.+24     	; 0x41e <OSmakeSema+0x3c>
		PORTD |= 0b00010000;	// signal error
     406:	8b e2       	ldi	r24, 0x2B	; 43
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	2b e2       	ldi	r18, 0x2B	; 43
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	f9 01       	movw	r30, r18
     410:	20 81       	ld	r18, Z
     412:	20 61       	ori	r18, 0x10	; 16
     414:	fc 01       	movw	r30, r24
     416:	20 83       	st	Z, r18
		return NULL;
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	50 c0       	rjmp	.+160    	; 0x4be <OSmakeSema+0xdc>
	}
	
	sem->type	= SEMAPHORE_TYPE;
     41e:	89 81       	ldd	r24, Y+1	; 0x01
     420:	9a 81       	ldd	r25, Y+2	; 0x02
     422:	fc 01       	movw	r30, r24
     424:	11 82       	std	Z+1, r1	; 0x01
     426:	10 82       	st	Z, r1
	sem->num	= initval;	// the (-num) is qsize; when num >= 0, qsize = 0
     428:	89 81       	ldd	r24, Y+1	; 0x01
     42a:	9a 81       	ldd	r25, Y+2	; 0x02
     42c:	2b 81       	ldd	r18, Y+3	; 0x03
     42e:	3c 81       	ldd	r19, Y+4	; 0x04
     430:	fc 01       	movw	r30, r24
     432:	33 83       	std	Z+3, r19	; 0x03
     434:	22 83       	std	Z+2, r18	; 0x02
	sem->esize	= sizeof(int);	// store the task id
     436:	89 81       	ldd	r24, Y+1	; 0x01
     438:	9a 81       	ldd	r25, Y+2	; 0x02
     43a:	22 e0       	ldi	r18, 0x02	; 2
     43c:	30 e0       	ldi	r19, 0x00	; 0
     43e:	fc 01       	movw	r30, r24
     440:	35 83       	std	Z+5, r19	; 0x05
     442:	24 83       	std	Z+4, r18	; 0x04
	sem->size	= OS_NUM_TASKS;	// the maximum is the number of tasks system has
     444:	89 81       	ldd	r24, Y+1	; 0x01
     446:	9a 81       	ldd	r25, Y+2	; 0x02
     448:	24 e0       	ldi	r18, 0x04	; 4
     44a:	30 e0       	ldi	r19, 0x00	; 0
     44c:	fc 01       	movw	r30, r24
     44e:	37 83       	std	Z+7, r19	; 0x07
     450:	26 83       	std	Z+6, r18	; 0x06
	sem->start	= calloc(sem->size,sem->esize);
     452:	89 81       	ldd	r24, Y+1	; 0x01
     454:	9a 81       	ldd	r25, Y+2	; 0x02
     456:	fc 01       	movw	r30, r24
     458:	86 81       	ldd	r24, Z+6	; 0x06
     45a:	97 81       	ldd	r25, Z+7	; 0x07
     45c:	29 81       	ldd	r18, Y+1	; 0x01
     45e:	3a 81       	ldd	r19, Y+2	; 0x02
     460:	f9 01       	movw	r30, r18
     462:	24 81       	ldd	r18, Z+4	; 0x04
     464:	35 81       	ldd	r19, Z+5	; 0x05
     466:	b9 01       	movw	r22, r18
     468:	0e 94 b4 10 	call	0x2168	; 0x2168 <calloc>
     46c:	9c 01       	movw	r18, r24
     46e:	89 81       	ldd	r24, Y+1	; 0x01
     470:	9a 81       	ldd	r25, Y+2	; 0x02
     472:	fc 01       	movw	r30, r24
     474:	31 87       	std	Z+9, r19	; 0x09
     476:	20 87       	std	Z+8, r18	; 0x08
	
	if(!(sem->start)){	// when the space allocation is not successful
     478:	89 81       	ldd	r24, Y+1	; 0x01
     47a:	9a 81       	ldd	r25, Y+2	; 0x02
     47c:	fc 01       	movw	r30, r24
     47e:	80 85       	ldd	r24, Z+8	; 0x08
     480:	91 85       	ldd	r25, Z+9	; 0x09
     482:	00 97       	sbiw	r24, 0x00	; 0
     484:	81 f4       	brne	.+32     	; 0x4a6 <OSmakeSema+0xc4>
		free(sem);
     486:	89 81       	ldd	r24, Y+1	; 0x01
     488:	9a 81       	ldd	r25, Y+2	; 0x02
     48a:	0e 94 72 11 	call	0x22e4	; 0x22e4 <free>
		PORTD |= 0b00010000;	// signal error
     48e:	8b e2       	ldi	r24, 0x2B	; 43
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	2b e2       	ldi	r18, 0x2B	; 43
     494:	30 e0       	ldi	r19, 0x00	; 0
     496:	f9 01       	movw	r30, r18
     498:	20 81       	ld	r18, Z
     49a:	20 61       	ori	r18, 0x10	; 16
     49c:	fc 01       	movw	r30, r24
     49e:	20 83       	st	Z, r18
		return NULL;
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	0c c0       	rjmp	.+24     	; 0x4be <OSmakeSema+0xdc>
	}
	
	sem->head	= sem->start;
     4a6:	89 81       	ldd	r24, Y+1	; 0x01
     4a8:	9a 81       	ldd	r25, Y+2	; 0x02
     4aa:	fc 01       	movw	r30, r24
     4ac:	20 85       	ldd	r18, Z+8	; 0x08
     4ae:	31 85       	ldd	r19, Z+9	; 0x09
     4b0:	89 81       	ldd	r24, Y+1	; 0x01
     4b2:	9a 81       	ldd	r25, Y+2	; 0x02
     4b4:	fc 01       	movw	r30, r24
     4b6:	33 87       	std	Z+11, r19	; 0x0b
     4b8:	22 87       	std	Z+10, r18	; 0x0a
	
	return sem;
     4ba:	89 81       	ldd	r24, Y+1	; 0x01
     4bc:	9a 81       	ldd	r25, Y+2	; 0x02
}
     4be:	0f 90       	pop	r0
     4c0:	0f 90       	pop	r0
     4c2:	0f 90       	pop	r0
     4c4:	0f 90       	pop	r0
     4c6:	cf 91       	pop	r28
     4c8:	df 91       	pop	r29
     4ca:	08 95       	ret

000004cc <OSSemPend>:

// Takes a semaphore. Blocks if semaphore is 0.
void OSSemPend(OSSignal *sema)
{
     4cc:	df 93       	push	r29
     4ce:	cf 93       	push	r28
     4d0:	00 d0       	rcall	.+0      	; 0x4d2 <OSSemPend+0x6>
     4d2:	00 d0       	rcall	.+0      	; 0x4d4 <OSSemPend+0x8>
     4d4:	00 d0       	rcall	.+0      	; 0x4d6 <OSSemPend+0xa>
     4d6:	cd b7       	in	r28, 0x3d	; 61
     4d8:	de b7       	in	r29, 0x3e	; 62
     4da:	9e 83       	std	Y+6, r25	; 0x06
     4dc:	8d 83       	std	Y+5, r24	; 0x05
	enterCritical();
     4de:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <enterCritical>
	
	// wrong type no use
	if(sema == NULL || sema->type != SEMAPHORE_TYPE){
     4e2:	8d 81       	ldd	r24, Y+5	; 0x05
     4e4:	9e 81       	ldd	r25, Y+6	; 0x06
     4e6:	00 97       	sbiw	r24, 0x00	; 0
     4e8:	39 f0       	breq	.+14     	; 0x4f8 <OSSemPend+0x2c>
     4ea:	8d 81       	ldd	r24, Y+5	; 0x05
     4ec:	9e 81       	ldd	r25, Y+6	; 0x06
     4ee:	fc 01       	movw	r30, r24
     4f0:	80 81       	ld	r24, Z
     4f2:	91 81       	ldd	r25, Z+1	; 0x01
     4f4:	00 97       	sbiw	r24, 0x00	; 0
     4f6:	19 f0       	breq	.+6      	; 0x4fe <OSSemPend+0x32>
		leaveCritical();
     4f8:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <leaveCritical>
		return;
     4fc:	ca c0       	rjmp	.+404    	; 0x692 <OSSemPend+0x1c6>
	}
	
	if(sema->num <= 0){
     4fe:	8d 81       	ldd	r24, Y+5	; 0x05
     500:	9e 81       	ldd	r25, Y+6	; 0x06
     502:	fc 01       	movw	r30, r24
     504:	82 81       	ldd	r24, Z+2	; 0x02
     506:	93 81       	ldd	r25, Z+3	; 0x03
     508:	18 16       	cp	r1, r24
     50a:	19 06       	cpc	r1, r25
     50c:	0c f4       	brge	.+2      	; 0x510 <OSSemPend+0x44>
     50e:	b2 c0       	rjmp	.+356    	; 0x674 <OSSemPend+0x1a8>
		// the queue used in the semaphore would be always less than the maximum
		// but check to avoid overflow
		if(-(sema->num) >= sema->size){
     510:	8d 81       	ldd	r24, Y+5	; 0x05
     512:	9e 81       	ldd	r25, Y+6	; 0x06
     514:	fc 01       	movw	r30, r24
     516:	82 81       	ldd	r24, Z+2	; 0x02
     518:	93 81       	ldd	r25, Z+3	; 0x03
     51a:	22 27       	eor	r18, r18
     51c:	33 27       	eor	r19, r19
     51e:	28 1b       	sub	r18, r24
     520:	39 0b       	sbc	r19, r25
     522:	8d 81       	ldd	r24, Y+5	; 0x05
     524:	9e 81       	ldd	r25, Y+6	; 0x06
     526:	fc 01       	movw	r30, r24
     528:	86 81       	ldd	r24, Z+6	; 0x06
     52a:	97 81       	ldd	r25, Z+7	; 0x07
     52c:	28 17       	cp	r18, r24
     52e:	39 07       	cpc	r19, r25
     530:	64 f0       	brlt	.+24     	; 0x54a <OSSemPend+0x7e>
			PORTD |= 0b00010000;	// signal error
     532:	8b e2       	ldi	r24, 0x2B	; 43
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	2b e2       	ldi	r18, 0x2B	; 43
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	f9 01       	movw	r30, r18
     53c:	20 81       	ld	r18, Z
     53e:	20 61       	ori	r18, 0x10	; 16
     540:	fc 01       	movw	r30, r24
     542:	20 83       	st	Z, r18
			leaveCritical();
     544:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <leaveCritical>
			return;
     548:	a4 c0       	rjmp	.+328    	; 0x692 <OSSemPend+0x1c6>
		} else if(currentTask == -1){	// when possibly os not run
     54a:	80 91 0a 01 	lds	r24, 0x010A
     54e:	90 91 0b 01 	lds	r25, 0x010B
     552:	ff ef       	ldi	r31, 0xFF	; 255
     554:	8f 3f       	cpi	r24, 0xFF	; 255
     556:	9f 07       	cpc	r25, r31
     558:	61 f4       	brne	.+24     	; 0x572 <OSSemPend+0xa6>
			PORTD |= 0b00010000;	// signal error
     55a:	8b e2       	ldi	r24, 0x2B	; 43
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	2b e2       	ldi	r18, 0x2B	; 43
     560:	30 e0       	ldi	r19, 0x00	; 0
     562:	f9 01       	movw	r30, r18
     564:	20 81       	ld	r18, Z
     566:	20 61       	ori	r18, 0x10	; 16
     568:	fc 01       	movw	r30, r24
     56a:	20 83       	st	Z, r18
			leaveCritical();
     56c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <leaveCritical>
			return;
     570:	90 c0       	rjmp	.+288    	; 0x692 <OSSemPend+0x1c6>
		}
		
		// set current task to block state, save the # of current task
		
		// current blocked by this semaphore
		taskTable[currentTask].sem_counter++;
     572:	80 91 0a 01 	lds	r24, 0x010A
     576:	90 91 0b 01 	lds	r25, 0x010B
     57a:	4f e0       	ldi	r20, 0x0F	; 15
     57c:	51 e0       	ldi	r21, 0x01	; 1
     57e:	84 9f       	mul	r24, r20
     580:	90 01       	movw	r18, r0
     582:	85 9f       	mul	r24, r21
     584:	30 0d       	add	r19, r0
     586:	94 9f       	mul	r25, r20
     588:	30 0d       	add	r19, r0
     58a:	11 24       	eor	r1, r1
     58c:	27 58       	subi	r18, 0x87	; 135
     58e:	3d 4f       	sbci	r19, 0xFD	; 253
     590:	f9 01       	movw	r30, r18
     592:	20 81       	ld	r18, Z
     594:	31 81       	ldd	r19, Z+1	; 0x01
     596:	2f 5f       	subi	r18, 0xFF	; 255
     598:	3f 4f       	sbci	r19, 0xFF	; 255
     59a:	6f e0       	ldi	r22, 0x0F	; 15
     59c:	71 e0       	ldi	r23, 0x01	; 1
     59e:	86 9f       	mul	r24, r22
     5a0:	a0 01       	movw	r20, r0
     5a2:	87 9f       	mul	r24, r23
     5a4:	50 0d       	add	r21, r0
     5a6:	96 9f       	mul	r25, r22
     5a8:	50 0d       	add	r21, r0
     5aa:	11 24       	eor	r1, r1
     5ac:	ca 01       	movw	r24, r20
     5ae:	87 58       	subi	r24, 0x87	; 135
     5b0:	9d 4f       	sbci	r25, 0xFD	; 253
     5b2:	fc 01       	movw	r30, r24
     5b4:	31 83       	std	Z+1, r19	; 0x01
     5b6:	20 83       	st	Z, r18
		
		
		unsigned shift = 
			(unsigned)(sema->head - sema->start + (-sema->num * sema->esize)) %
     5b8:	8d 81       	ldd	r24, Y+5	; 0x05
     5ba:	9e 81       	ldd	r25, Y+6	; 0x06
     5bc:	fc 01       	movw	r30, r24
     5be:	82 85       	ldd	r24, Z+10	; 0x0a
     5c0:	93 85       	ldd	r25, Z+11	; 0x0b
     5c2:	9c 01       	movw	r18, r24
     5c4:	8d 81       	ldd	r24, Y+5	; 0x05
     5c6:	9e 81       	ldd	r25, Y+6	; 0x06
     5c8:	fc 01       	movw	r30, r24
     5ca:	80 85       	ldd	r24, Z+8	; 0x08
     5cc:	91 85       	ldd	r25, Z+9	; 0x09
     5ce:	28 1b       	sub	r18, r24
     5d0:	39 0b       	sbc	r19, r25
     5d2:	8d 81       	ldd	r24, Y+5	; 0x05
     5d4:	9e 81       	ldd	r25, Y+6	; 0x06
     5d6:	fc 01       	movw	r30, r24
     5d8:	82 81       	ldd	r24, Z+2	; 0x02
     5da:	93 81       	ldd	r25, Z+3	; 0x03
     5dc:	66 27       	eor	r22, r22
     5de:	77 27       	eor	r23, r23
     5e0:	68 1b       	sub	r22, r24
     5e2:	79 0b       	sbc	r23, r25
     5e4:	8d 81       	ldd	r24, Y+5	; 0x05
     5e6:	9e 81       	ldd	r25, Y+6	; 0x06
     5e8:	fc 01       	movw	r30, r24
     5ea:	44 81       	ldd	r20, Z+4	; 0x04
     5ec:	55 81       	ldd	r21, Z+5	; 0x05
     5ee:	64 9f       	mul	r22, r20
     5f0:	c0 01       	movw	r24, r0
     5f2:	65 9f       	mul	r22, r21
     5f4:	90 0d       	add	r25, r0
     5f6:	74 9f       	mul	r23, r20
     5f8:	90 0d       	add	r25, r0
     5fa:	11 24       	eor	r1, r1
     5fc:	82 0f       	add	r24, r18
     5fe:	93 1f       	adc	r25, r19
			(unsigned)(sema->size * sema->esize);
     600:	2d 81       	ldd	r18, Y+5	; 0x05
     602:	3e 81       	ldd	r19, Y+6	; 0x06
     604:	f9 01       	movw	r30, r18
     606:	66 81       	ldd	r22, Z+6	; 0x06
     608:	77 81       	ldd	r23, Z+7	; 0x07
     60a:	2d 81       	ldd	r18, Y+5	; 0x05
     60c:	3e 81       	ldd	r19, Y+6	; 0x06
     60e:	f9 01       	movw	r30, r18
     610:	44 81       	ldd	r20, Z+4	; 0x04
     612:	55 81       	ldd	r21, Z+5	; 0x05
     614:	64 9f       	mul	r22, r20
     616:	90 01       	movw	r18, r0
     618:	65 9f       	mul	r22, r21
     61a:	30 0d       	add	r19, r0
     61c:	74 9f       	mul	r23, r20
     61e:	30 0d       	add	r19, r0
     620:	11 24       	eor	r1, r1
		
		// current blocked by this semaphore
		taskTable[currentTask].sem_counter++;
		
		
		unsigned shift = 
     622:	b9 01       	movw	r22, r18
     624:	0e 94 56 10 	call	0x20ac	; 0x20ac <__udivmodhi4>
     628:	9a 83       	std	Y+2, r25	; 0x02
     62a:	89 83       	std	Y+1, r24	; 0x01
			(unsigned)(sema->head - sema->start + (-sema->num * sema->esize)) %
			(unsigned)(sema->size * sema->esize);
		void *currentPos = sema->start + shift;
     62c:	8d 81       	ldd	r24, Y+5	; 0x05
     62e:	9e 81       	ldd	r25, Y+6	; 0x06
     630:	fc 01       	movw	r30, r24
     632:	20 85       	ldd	r18, Z+8	; 0x08
     634:	31 85       	ldd	r19, Z+9	; 0x09
     636:	89 81       	ldd	r24, Y+1	; 0x01
     638:	9a 81       	ldd	r25, Y+2	; 0x02
     63a:	82 0f       	add	r24, r18
     63c:	93 1f       	adc	r25, r19
     63e:	9c 83       	std	Y+4, r25	; 0x04
     640:	8b 83       	std	Y+3, r24	; 0x03
		
		// then push the currentTask id into queue
		*(int*)(currentPos) = currentTask;
     642:	8b 81       	ldd	r24, Y+3	; 0x03
     644:	9c 81       	ldd	r25, Y+4	; 0x04
     646:	20 91 0a 01 	lds	r18, 0x010A
     64a:	30 91 0b 01 	lds	r19, 0x010B
     64e:	fc 01       	movw	r30, r24
     650:	31 83       	std	Z+1, r19	; 0x01
     652:	20 83       	st	Z, r18
		
		sema->num--;
     654:	8d 81       	ldd	r24, Y+5	; 0x05
     656:	9e 81       	ldd	r25, Y+6	; 0x06
     658:	fc 01       	movw	r30, r24
     65a:	82 81       	ldd	r24, Z+2	; 0x02
     65c:	93 81       	ldd	r25, Z+3	; 0x03
     65e:	9c 01       	movw	r18, r24
     660:	21 50       	subi	r18, 0x01	; 1
     662:	30 40       	sbci	r19, 0x00	; 0
     664:	8d 81       	ldd	r24, Y+5	; 0x05
     666:	9e 81       	ldd	r25, Y+6	; 0x06
     668:	fc 01       	movw	r30, r24
     66a:	33 83       	std	Z+3, r19	; 0x03
     66c:	22 83       	std	Z+2, r18	; 0x02

		OSSwapTask();
     66e:	0e 94 bf 07 	call	0xf7e	; 0xf7e <OSSwapTask>
     672:	0d c0       	rjmp	.+26     	; 0x68e <OSSemPend+0x1c2>
	} else (sema->num)--;
     674:	8d 81       	ldd	r24, Y+5	; 0x05
     676:	9e 81       	ldd	r25, Y+6	; 0x06
     678:	fc 01       	movw	r30, r24
     67a:	82 81       	ldd	r24, Z+2	; 0x02
     67c:	93 81       	ldd	r25, Z+3	; 0x03
     67e:	9c 01       	movw	r18, r24
     680:	21 50       	subi	r18, 0x01	; 1
     682:	30 40       	sbci	r19, 0x00	; 0
     684:	8d 81       	ldd	r24, Y+5	; 0x05
     686:	9e 81       	ldd	r25, Y+6	; 0x06
     688:	fc 01       	movw	r30, r24
     68a:	33 83       	std	Z+3, r19	; 0x03
     68c:	22 83       	std	Z+2, r18	; 0x02
	
	leaveCritical();
     68e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <leaveCritical>
}
     692:	26 96       	adiw	r28, 0x06	; 6
     694:	0f b6       	in	r0, 0x3f	; 63
     696:	f8 94       	cli
     698:	de bf       	out	0x3e, r29	; 62
     69a:	0f be       	out	0x3f, r0	; 63
     69c:	cd bf       	out	0x3d, r28	; 61
     69e:	cf 91       	pop	r28
     6a0:	df 91       	pop	r29
     6a2:	08 95       	ret

000006a4 <OSSemPost>:

// Posts a semaphore.
void OSSemPost(OSSignal *sema)
{
     6a4:	df 93       	push	r29
     6a6:	cf 93       	push	r28
     6a8:	00 d0       	rcall	.+0      	; 0x6aa <OSSemPost+0x6>
     6aa:	00 d0       	rcall	.+0      	; 0x6ac <OSSemPost+0x8>
     6ac:	cd b7       	in	r28, 0x3d	; 61
     6ae:	de b7       	in	r29, 0x3e	; 62
     6b0:	9c 83       	std	Y+4, r25	; 0x04
     6b2:	8b 83       	std	Y+3, r24	; 0x03
	enterCritical();
     6b4:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <enterCritical>
	
	// wrong type no use
	if(sema == NULL || sema->type != SEMAPHORE_TYPE){
     6b8:	8b 81       	ldd	r24, Y+3	; 0x03
     6ba:	9c 81       	ldd	r25, Y+4	; 0x04
     6bc:	00 97       	sbiw	r24, 0x00	; 0
     6be:	41 f0       	breq	.+16     	; 0x6d0 <OSSemPost+0x2c>
     6c0:	8b 81       	ldd	r24, Y+3	; 0x03
     6c2:	9c 81       	ldd	r25, Y+4	; 0x04
     6c4:	dc 01       	movw	r26, r24
     6c6:	8d 91       	ld	r24, X+
     6c8:	9c 91       	ld	r25, X
     6ca:	11 97       	sbiw	r26, 0x01	; 1
     6cc:	00 97       	sbiw	r24, 0x00	; 0
     6ce:	19 f0       	breq	.+6      	; 0x6d6 <OSSemPost+0x32>
		leaveCritical();
     6d0:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <leaveCritical>
		return;
     6d4:	b7 c0       	rjmp	.+366    	; 0x844 <OSSemPost+0x1a0>
	}
	
	if(sema->num < 0){	// only when queue has element
     6d6:	8b 81       	ldd	r24, Y+3	; 0x03
     6d8:	9c 81       	ldd	r25, Y+4	; 0x04
     6da:	fc 01       	movw	r30, r24
     6dc:	82 81       	ldd	r24, Z+2	; 0x02
     6de:	93 81       	ldd	r25, Z+3	; 0x03
     6e0:	99 23       	and	r25, r25
     6e2:	0c f0       	brlt	.+2      	; 0x6e6 <OSSemPost+0x42>
     6e4:	95 c0       	rjmp	.+298    	; 0x810 <OSSemPost+0x16c>
		if(currentTask == -1){	// when possibly os not run
     6e6:	80 91 0a 01 	lds	r24, 0x010A
     6ea:	90 91 0b 01 	lds	r25, 0x010B
     6ee:	ff ef       	ldi	r31, 0xFF	; 255
     6f0:	8f 3f       	cpi	r24, 0xFF	; 255
     6f2:	9f 07       	cpc	r25, r31
     6f4:	19 f4       	brne	.+6      	; 0x6fc <OSSemPost+0x58>
			//PORTD |= 0b00010000;	// signal error	TODO
			leaveCritical();
     6f6:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <leaveCritical>
			return;
     6fa:	a4 c0       	rjmp	.+328    	; 0x844 <OSSemPost+0x1a0>
		}
		
		// pop the element from the head
		int taskId = *(int*)sema->head;
     6fc:	8b 81       	ldd	r24, Y+3	; 0x03
     6fe:	9c 81       	ldd	r25, Y+4	; 0x04
     700:	dc 01       	movw	r26, r24
     702:	1a 96       	adiw	r26, 0x0a	; 10
     704:	8d 91       	ld	r24, X+
     706:	9c 91       	ld	r25, X
     708:	1b 97       	sbiw	r26, 0x0b	; 11
     70a:	fc 01       	movw	r30, r24
     70c:	80 81       	ld	r24, Z
     70e:	91 81       	ldd	r25, Z+1	; 0x01
     710:	9a 83       	std	Y+2, r25	; 0x02
     712:	89 83       	std	Y+1, r24	; 0x01
		
		// decrease the counter because of current semaphore
		taskTable[taskId].sem_counter--;
     714:	49 81       	ldd	r20, Y+1	; 0x01
     716:	5a 81       	ldd	r21, Y+2	; 0x02
     718:	2f e0       	ldi	r18, 0x0F	; 15
     71a:	31 e0       	ldi	r19, 0x01	; 1
     71c:	42 9f       	mul	r20, r18
     71e:	c0 01       	movw	r24, r0
     720:	43 9f       	mul	r20, r19
     722:	90 0d       	add	r25, r0
     724:	52 9f       	mul	r21, r18
     726:	90 0d       	add	r25, r0
     728:	11 24       	eor	r1, r1
     72a:	87 58       	subi	r24, 0x87	; 135
     72c:	9d 4f       	sbci	r25, 0xFD	; 253
     72e:	dc 01       	movw	r26, r24
     730:	8d 91       	ld	r24, X+
     732:	9c 91       	ld	r25, X
     734:	9c 01       	movw	r18, r24
     736:	21 50       	subi	r18, 0x01	; 1
     738:	30 40       	sbci	r19, 0x00	; 0
     73a:	69 81       	ldd	r22, Y+1	; 0x01
     73c:	7a 81       	ldd	r23, Y+2	; 0x02
     73e:	4f e0       	ldi	r20, 0x0F	; 15
     740:	51 e0       	ldi	r21, 0x01	; 1
     742:	64 9f       	mul	r22, r20
     744:	c0 01       	movw	r24, r0
     746:	65 9f       	mul	r22, r21
     748:	90 0d       	add	r25, r0
     74a:	74 9f       	mul	r23, r20
     74c:	90 0d       	add	r25, r0
     74e:	11 24       	eor	r1, r1
     750:	87 58       	subi	r24, 0x87	; 135
     752:	9d 4f       	sbci	r25, 0xFD	; 253
     754:	fc 01       	movw	r30, r24
     756:	31 83       	std	Z+1, r19	; 0x01
     758:	20 83       	st	Z, r18
		
		// then update the queue
		sema->num++;
     75a:	8b 81       	ldd	r24, Y+3	; 0x03
     75c:	9c 81       	ldd	r25, Y+4	; 0x04
     75e:	dc 01       	movw	r26, r24
     760:	12 96       	adiw	r26, 0x02	; 2
     762:	8d 91       	ld	r24, X+
     764:	9c 91       	ld	r25, X
     766:	13 97       	sbiw	r26, 0x03	; 3
     768:	9c 01       	movw	r18, r24
     76a:	2f 5f       	subi	r18, 0xFF	; 255
     76c:	3f 4f       	sbci	r19, 0xFF	; 255
     76e:	8b 81       	ldd	r24, Y+3	; 0x03
     770:	9c 81       	ldd	r25, Y+4	; 0x04
     772:	fc 01       	movw	r30, r24
     774:	33 83       	std	Z+3, r19	; 0x03
     776:	22 83       	std	Z+2, r18	; 0x02
		
		sema->head += sema->esize;
     778:	8b 81       	ldd	r24, Y+3	; 0x03
     77a:	9c 81       	ldd	r25, Y+4	; 0x04
     77c:	dc 01       	movw	r26, r24
     77e:	1a 96       	adiw	r26, 0x0a	; 10
     780:	2d 91       	ld	r18, X+
     782:	3c 91       	ld	r19, X
     784:	1b 97       	sbiw	r26, 0x0b	; 11
     786:	8b 81       	ldd	r24, Y+3	; 0x03
     788:	9c 81       	ldd	r25, Y+4	; 0x04
     78a:	fc 01       	movw	r30, r24
     78c:	84 81       	ldd	r24, Z+4	; 0x04
     78e:	95 81       	ldd	r25, Z+5	; 0x05
     790:	28 0f       	add	r18, r24
     792:	39 1f       	adc	r19, r25
     794:	8b 81       	ldd	r24, Y+3	; 0x03
     796:	9c 81       	ldd	r25, Y+4	; 0x04
     798:	dc 01       	movw	r26, r24
     79a:	1b 96       	adiw	r26, 0x0b	; 11
     79c:	3c 93       	st	X, r19
     79e:	2e 93       	st	-X, r18
     7a0:	1a 97       	sbiw	r26, 0x0a	; 10
		if(sema->head == sema->start + (-sema->num * sema->esize) ){
     7a2:	8b 81       	ldd	r24, Y+3	; 0x03
     7a4:	9c 81       	ldd	r25, Y+4	; 0x04
     7a6:	fc 01       	movw	r30, r24
     7a8:	22 85       	ldd	r18, Z+10	; 0x0a
     7aa:	33 85       	ldd	r19, Z+11	; 0x0b
     7ac:	8b 81       	ldd	r24, Y+3	; 0x03
     7ae:	9c 81       	ldd	r25, Y+4	; 0x04
     7b0:	dc 01       	movw	r26, r24
     7b2:	18 96       	adiw	r26, 0x08	; 8
     7b4:	4d 91       	ld	r20, X+
     7b6:	5c 91       	ld	r21, X
     7b8:	19 97       	sbiw	r26, 0x09	; 9
     7ba:	8b 81       	ldd	r24, Y+3	; 0x03
     7bc:	9c 81       	ldd	r25, Y+4	; 0x04
     7be:	fc 01       	movw	r30, r24
     7c0:	82 81       	ldd	r24, Z+2	; 0x02
     7c2:	93 81       	ldd	r25, Z+3	; 0x03
     7c4:	ee 27       	eor	r30, r30
     7c6:	ff 27       	eor	r31, r31
     7c8:	e8 1b       	sub	r30, r24
     7ca:	f9 0b       	sbc	r31, r25
     7cc:	8b 81       	ldd	r24, Y+3	; 0x03
     7ce:	9c 81       	ldd	r25, Y+4	; 0x04
     7d0:	dc 01       	movw	r26, r24
     7d2:	14 96       	adiw	r26, 0x04	; 4
     7d4:	6d 91       	ld	r22, X+
     7d6:	7c 91       	ld	r23, X
     7d8:	15 97       	sbiw	r26, 0x05	; 5
     7da:	e6 9f       	mul	r30, r22
     7dc:	c0 01       	movw	r24, r0
     7de:	e7 9f       	mul	r30, r23
     7e0:	90 0d       	add	r25, r0
     7e2:	f6 9f       	mul	r31, r22
     7e4:	90 0d       	add	r25, r0
     7e6:	11 24       	eor	r1, r1
     7e8:	84 0f       	add	r24, r20
     7ea:	95 1f       	adc	r25, r21
     7ec:	28 17       	cp	r18, r24
     7ee:	39 07       	cpc	r19, r25
     7f0:	61 f4       	brne	.+24     	; 0x80a <OSSemPost+0x166>
			sema->head = sema->start;
     7f2:	8b 81       	ldd	r24, Y+3	; 0x03
     7f4:	9c 81       	ldd	r25, Y+4	; 0x04
     7f6:	fc 01       	movw	r30, r24
     7f8:	20 85       	ldd	r18, Z+8	; 0x08
     7fa:	31 85       	ldd	r19, Z+9	; 0x09
     7fc:	8b 81       	ldd	r24, Y+3	; 0x03
     7fe:	9c 81       	ldd	r25, Y+4	; 0x04
     800:	dc 01       	movw	r26, r24
     802:	1b 96       	adiw	r26, 0x0b	; 11
     804:	3c 93       	st	X, r19
     806:	2e 93       	st	-X, r18
     808:	1a 97       	sbiw	r26, 0x0a	; 10
		}
		
		OSSwapTask();
     80a:	0e 94 bf 07 	call	0xf7e	; 0xf7e <OSSwapTask>
     80e:	18 c0       	rjmp	.+48     	; 0x840 <OSSemPost+0x19c>
	} else{
		// set an upper limit to avoid overflow
		if(sema->num <= 10000)	(sema->num)++;
     810:	8b 81       	ldd	r24, Y+3	; 0x03
     812:	9c 81       	ldd	r25, Y+4	; 0x04
     814:	fc 01       	movw	r30, r24
     816:	82 81       	ldd	r24, Z+2	; 0x02
     818:	93 81       	ldd	r25, Z+3	; 0x03
     81a:	f7 e2       	ldi	r31, 0x27	; 39
     81c:	81 31       	cpi	r24, 0x11	; 17
     81e:	9f 07       	cpc	r25, r31
     820:	7c f4       	brge	.+30     	; 0x840 <OSSemPost+0x19c>
     822:	8b 81       	ldd	r24, Y+3	; 0x03
     824:	9c 81       	ldd	r25, Y+4	; 0x04
     826:	dc 01       	movw	r26, r24
     828:	12 96       	adiw	r26, 0x02	; 2
     82a:	8d 91       	ld	r24, X+
     82c:	9c 91       	ld	r25, X
     82e:	13 97       	sbiw	r26, 0x03	; 3
     830:	9c 01       	movw	r18, r24
     832:	2f 5f       	subi	r18, 0xFF	; 255
     834:	3f 4f       	sbci	r19, 0xFF	; 255
     836:	8b 81       	ldd	r24, Y+3	; 0x03
     838:	9c 81       	ldd	r25, Y+4	; 0x04
     83a:	fc 01       	movw	r30, r24
     83c:	33 83       	std	Z+3, r19	; 0x03
     83e:	22 83       	std	Z+2, r18	; 0x02
	}
	
	leaveCritical();
     840:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <leaveCritical>
}
     844:	0f 90       	pop	r0
     846:	0f 90       	pop	r0
     848:	0f 90       	pop	r0
     84a:	0f 90       	pop	r0
     84c:	cf 91       	pop	r28
     84e:	df 91       	pop	r29
     850:	08 95       	ret

00000852 <OSmakeQ>:
#ifdef OSIncludeQueues

// qsize=number of elements in the queue. esize=size of each element. So calling makeQ(10, sizeof(int)) would produce a queue of 10 elements, 
// with each element being the size of an integer.
OSSignal *OSmakeQ(int qsize, int esize)
{
     852:	df 93       	push	r29
     854:	cf 93       	push	r28
     856:	00 d0       	rcall	.+0      	; 0x858 <OSmakeQ+0x6>
     858:	00 d0       	rcall	.+0      	; 0x85a <OSmakeQ+0x8>
     85a:	00 d0       	rcall	.+0      	; 0x85c <OSmakeQ+0xa>
     85c:	cd b7       	in	r28, 0x3d	; 61
     85e:	de b7       	in	r29, 0x3e	; 62
     860:	9c 83       	std	Y+4, r25	; 0x04
     862:	8b 83       	std	Y+3, r24	; 0x03
     864:	7e 83       	std	Y+6, r23	; 0x06
     866:	6d 83       	std	Y+5, r22	; 0x05
	// use the q_sema
	if(q_sema_empty == NULL)	q_sema_empty = (OSSignal*)OSmakeSema(0);
     868:	80 91 62 01 	lds	r24, 0x0162
     86c:	90 91 63 01 	lds	r25, 0x0163
     870:	00 97       	sbiw	r24, 0x00	; 0
     872:	41 f4       	brne	.+16     	; 0x884 <OSmakeQ+0x32>
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <OSmakeSema>
     87c:	90 93 63 01 	sts	0x0163, r25
     880:	80 93 62 01 	sts	0x0162, r24
	if(q_sema_full == NULL)		q_sema_full  = (OSSignal*)OSmakeSema(0);
     884:	80 91 64 01 	lds	r24, 0x0164
     888:	90 91 65 01 	lds	r25, 0x0165
     88c:	00 97       	sbiw	r24, 0x00	; 0
     88e:	41 f4       	brne	.+16     	; 0x8a0 <OSmakeQ+0x4e>
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <OSmakeSema>
     898:	90 93 65 01 	sts	0x0165, r25
     89c:	80 93 64 01 	sts	0x0164, r24
	if(q_sema_empty == NULL	||	q_sema_full == NULL){	// semaphore creation failed
     8a0:	80 91 62 01 	lds	r24, 0x0162
     8a4:	90 91 63 01 	lds	r25, 0x0163
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	31 f0       	breq	.+12     	; 0x8b8 <OSmakeQ+0x66>
     8ac:	80 91 64 01 	lds	r24, 0x0164
     8b0:	90 91 65 01 	lds	r25, 0x0165
     8b4:	00 97       	sbiw	r24, 0x00	; 0
     8b6:	61 f4       	brne	.+24     	; 0x8d0 <OSmakeQ+0x7e>
		PORTD |= 0b00010000;
     8b8:	8b e2       	ldi	r24, 0x2B	; 43
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	2b e2       	ldi	r18, 0x2B	; 43
     8be:	30 e0       	ldi	r19, 0x00	; 0
     8c0:	f9 01       	movw	r30, r18
     8c2:	20 81       	ld	r18, Z
     8c4:	20 61       	ori	r18, 0x10	; 16
     8c6:	fc 01       	movw	r30, r24
     8c8:	20 83       	st	Z, r18
		return NULL;
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	66 c0       	rjmp	.+204    	; 0x99c <__stack+0x9d>
	}
	
	OSSignal *que = (OSSignal *) malloc(sizeof(OSSignal));
     8d0:	8c e0       	ldi	r24, 0x0C	; 12
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <malloc>
     8d8:	9a 83       	std	Y+2, r25	; 0x02
     8da:	89 83       	std	Y+1, r24	; 0x01
	if(!que){	// when the space allocation is not successful
     8dc:	89 81       	ldd	r24, Y+1	; 0x01
     8de:	9a 81       	ldd	r25, Y+2	; 0x02
     8e0:	00 97       	sbiw	r24, 0x00	; 0
     8e2:	61 f4       	brne	.+24     	; 0x8fc <OSmakeQ+0xaa>
		PORTD |= 0b00010000;	// signal error
     8e4:	8b e2       	ldi	r24, 0x2B	; 43
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	2b e2       	ldi	r18, 0x2B	; 43
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	f9 01       	movw	r30, r18
     8ee:	20 81       	ld	r18, Z
     8f0:	20 61       	ori	r18, 0x10	; 16
     8f2:	fc 01       	movw	r30, r24
     8f4:	20 83       	st	Z, r18
		return NULL;
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	50 c0       	rjmp	.+160    	; 0x99c <__stack+0x9d>
	}
	
	que->type	= QUEUE_TYPE;
     8fc:	89 81       	ldd	r24, Y+1	; 0x01
     8fe:	9a 81       	ldd	r25, Y+2	; 0x02
     900:	21 e0       	ldi	r18, 0x01	; 1
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	fc 01       	movw	r30, r24
     906:	31 83       	std	Z+1, r19	; 0x01
     908:	20 83       	st	Z, r18
	que->num	= 0;	// initially empty
     90a:	89 81       	ldd	r24, Y+1	; 0x01
     90c:	9a 81       	ldd	r25, Y+2	; 0x02
     90e:	fc 01       	movw	r30, r24
     910:	13 82       	std	Z+3, r1	; 0x03
     912:	12 82       	std	Z+2, r1	; 0x02
	que->esize	= esize;	// store the task id
     914:	89 81       	ldd	r24, Y+1	; 0x01
     916:	9a 81       	ldd	r25, Y+2	; 0x02
     918:	2d 81       	ldd	r18, Y+5	; 0x05
     91a:	3e 81       	ldd	r19, Y+6	; 0x06
     91c:	fc 01       	movw	r30, r24
     91e:	35 83       	std	Z+5, r19	; 0x05
     920:	24 83       	std	Z+4, r18	; 0x04
	que->size	= qsize;	// the maximum is the number of tasks system has
     922:	89 81       	ldd	r24, Y+1	; 0x01
     924:	9a 81       	ldd	r25, Y+2	; 0x02
     926:	2b 81       	ldd	r18, Y+3	; 0x03
     928:	3c 81       	ldd	r19, Y+4	; 0x04
     92a:	fc 01       	movw	r30, r24
     92c:	37 83       	std	Z+7, r19	; 0x07
     92e:	26 83       	std	Z+6, r18	; 0x06
	que->start	= calloc(que->size,que->esize);
     930:	89 81       	ldd	r24, Y+1	; 0x01
     932:	9a 81       	ldd	r25, Y+2	; 0x02
     934:	fc 01       	movw	r30, r24
     936:	86 81       	ldd	r24, Z+6	; 0x06
     938:	97 81       	ldd	r25, Z+7	; 0x07
     93a:	29 81       	ldd	r18, Y+1	; 0x01
     93c:	3a 81       	ldd	r19, Y+2	; 0x02
     93e:	f9 01       	movw	r30, r18
     940:	24 81       	ldd	r18, Z+4	; 0x04
     942:	35 81       	ldd	r19, Z+5	; 0x05
     944:	b9 01       	movw	r22, r18
     946:	0e 94 b4 10 	call	0x2168	; 0x2168 <calloc>
     94a:	9c 01       	movw	r18, r24
     94c:	89 81       	ldd	r24, Y+1	; 0x01
     94e:	9a 81       	ldd	r25, Y+2	; 0x02
     950:	fc 01       	movw	r30, r24
     952:	31 87       	std	Z+9, r19	; 0x09
     954:	20 87       	std	Z+8, r18	; 0x08
	
	if(!(que->start)){	// when the space allocation is not successful
     956:	89 81       	ldd	r24, Y+1	; 0x01
     958:	9a 81       	ldd	r25, Y+2	; 0x02
     95a:	fc 01       	movw	r30, r24
     95c:	80 85       	ldd	r24, Z+8	; 0x08
     95e:	91 85       	ldd	r25, Z+9	; 0x09
     960:	00 97       	sbiw	r24, 0x00	; 0
     962:	81 f4       	brne	.+32     	; 0x984 <__stack+0x85>
		free(que);
     964:	89 81       	ldd	r24, Y+1	; 0x01
     966:	9a 81       	ldd	r25, Y+2	; 0x02
     968:	0e 94 72 11 	call	0x22e4	; 0x22e4 <free>
		PORTD |= 0b00010000;	// signal error
     96c:	8b e2       	ldi	r24, 0x2B	; 43
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	2b e2       	ldi	r18, 0x2B	; 43
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	f9 01       	movw	r30, r18
     976:	20 81       	ld	r18, Z
     978:	20 61       	ori	r18, 0x10	; 16
     97a:	fc 01       	movw	r30, r24
     97c:	20 83       	st	Z, r18
		return NULL;
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	0c c0       	rjmp	.+24     	; 0x99c <__stack+0x9d>
	}
	
	que->head	= que->start;
     984:	89 81       	ldd	r24, Y+1	; 0x01
     986:	9a 81       	ldd	r25, Y+2	; 0x02
     988:	fc 01       	movw	r30, r24
     98a:	20 85       	ldd	r18, Z+8	; 0x08
     98c:	31 85       	ldd	r19, Z+9	; 0x09
     98e:	89 81       	ldd	r24, Y+1	; 0x01
     990:	9a 81       	ldd	r25, Y+2	; 0x02
     992:	fc 01       	movw	r30, r24
     994:	33 87       	std	Z+11, r19	; 0x0b
     996:	22 87       	std	Z+10, r18	; 0x0a
	
	return que;
     998:	89 81       	ldd	r24, Y+1	; 0x01
     99a:	9a 81       	ldd	r25, Y+2	; 0x02
}
     99c:	26 96       	adiw	r28, 0x06	; 6
     99e:	0f b6       	in	r0, 0x3f	; 63
     9a0:	f8 94       	cli
     9a2:	de bf       	out	0x3e, r29	; 62
     9a4:	0f be       	out	0x3f, r0	; 63
     9a6:	cd bf       	out	0x3d, r28	; 61
     9a8:	cf 91       	pop	r28
     9aa:	df 91       	pop	r29
     9ac:	08 95       	ret

000009ae <OSenq>:

// Inserts item into queue q
void OSenq(OSSignal *q, void *item)
{
     9ae:	df 93       	push	r29
     9b0:	cf 93       	push	r28
     9b2:	cd b7       	in	r28, 0x3d	; 61
     9b4:	de b7       	in	r29, 0x3e	; 62
     9b6:	2a 97       	sbiw	r28, 0x0a	; 10
     9b8:	0f b6       	in	r0, 0x3f	; 63
     9ba:	f8 94       	cli
     9bc:	de bf       	out	0x3e, r29	; 62
     9be:	0f be       	out	0x3f, r0	; 63
     9c0:	cd bf       	out	0x3d, r28	; 61
     9c2:	98 87       	std	Y+8, r25	; 0x08
     9c4:	8f 83       	std	Y+7, r24	; 0x07
     9c6:	7a 87       	std	Y+10, r23	; 0x0a
     9c8:	69 87       	std	Y+9, r22	; 0x09
	enterCritical();
     9ca:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <enterCritical>
	
	// wrong type no use
	if(q == NULL || q->type != QUEUE_TYPE){
     9ce:	8f 81       	ldd	r24, Y+7	; 0x07
     9d0:	98 85       	ldd	r25, Y+8	; 0x08
     9d2:	00 97       	sbiw	r24, 0x00	; 0
     9d4:	41 f0       	breq	.+16     	; 0x9e6 <OSenq+0x38>
     9d6:	8f 81       	ldd	r24, Y+7	; 0x07
     9d8:	98 85       	ldd	r25, Y+8	; 0x08
     9da:	fc 01       	movw	r30, r24
     9dc:	80 81       	ld	r24, Z
     9de:	91 81       	ldd	r25, Z+1	; 0x01
     9e0:	81 30       	cpi	r24, 0x01	; 1
     9e2:	91 05       	cpc	r25, r1
     9e4:	61 f0       	breq	.+24     	; 0x9fe <OSenq+0x50>
		leaveCritical();
     9e6:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <leaveCritical>
		return;
     9ea:	8f c0       	rjmp	.+286    	; 0xb0a <OSenq+0x15c>
	}
	
	while(q->num == q->size){	// queue full
		//leaveCritical();	// can let others to run here
		OSSemPend(q_sema_full);
     9ec:	80 91 64 01 	lds	r24, 0x0164
     9f0:	90 91 65 01 	lds	r25, 0x0165
     9f4:	0e 94 66 02 	call	0x4cc	; 0x4cc <OSSemPend>
		enterCritical();	// but after the pend, would go back to run
     9f8:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <enterCritical>
     9fc:	01 c0       	rjmp	.+2      	; 0xa00 <OSenq+0x52>
	if(q == NULL || q->type != QUEUE_TYPE){
		leaveCritical();
		return;
	}
	
	while(q->num == q->size){	// queue full
     9fe:	00 00       	nop
     a00:	8f 81       	ldd	r24, Y+7	; 0x07
     a02:	98 85       	ldd	r25, Y+8	; 0x08
     a04:	fc 01       	movw	r30, r24
     a06:	22 81       	ldd	r18, Z+2	; 0x02
     a08:	33 81       	ldd	r19, Z+3	; 0x03
     a0a:	8f 81       	ldd	r24, Y+7	; 0x07
     a0c:	98 85       	ldd	r25, Y+8	; 0x08
     a0e:	fc 01       	movw	r30, r24
     a10:	86 81       	ldd	r24, Z+6	; 0x06
     a12:	97 81       	ldd	r25, Z+7	; 0x07
     a14:	28 17       	cp	r18, r24
     a16:	39 07       	cpc	r19, r25
     a18:	49 f3       	breq	.-46     	; 0x9ec <OSenq+0x3e>
		OSSemPend(q_sema_full);
		enterCritical();	// but after the pend, would go back to run
	}
	
	unsigned shift = 
		(unsigned)(q->head - q->start + (q->num * q->esize)) %
     a1a:	8f 81       	ldd	r24, Y+7	; 0x07
     a1c:	98 85       	ldd	r25, Y+8	; 0x08
     a1e:	fc 01       	movw	r30, r24
     a20:	82 85       	ldd	r24, Z+10	; 0x0a
     a22:	93 85       	ldd	r25, Z+11	; 0x0b
     a24:	9c 01       	movw	r18, r24
     a26:	8f 81       	ldd	r24, Y+7	; 0x07
     a28:	98 85       	ldd	r25, Y+8	; 0x08
     a2a:	fc 01       	movw	r30, r24
     a2c:	80 85       	ldd	r24, Z+8	; 0x08
     a2e:	91 85       	ldd	r25, Z+9	; 0x09
     a30:	28 1b       	sub	r18, r24
     a32:	39 0b       	sbc	r19, r25
     a34:	8f 81       	ldd	r24, Y+7	; 0x07
     a36:	98 85       	ldd	r25, Y+8	; 0x08
     a38:	fc 01       	movw	r30, r24
     a3a:	62 81       	ldd	r22, Z+2	; 0x02
     a3c:	73 81       	ldd	r23, Z+3	; 0x03
     a3e:	8f 81       	ldd	r24, Y+7	; 0x07
     a40:	98 85       	ldd	r25, Y+8	; 0x08
     a42:	fc 01       	movw	r30, r24
     a44:	44 81       	ldd	r20, Z+4	; 0x04
     a46:	55 81       	ldd	r21, Z+5	; 0x05
     a48:	64 9f       	mul	r22, r20
     a4a:	c0 01       	movw	r24, r0
     a4c:	65 9f       	mul	r22, r21
     a4e:	90 0d       	add	r25, r0
     a50:	74 9f       	mul	r23, r20
     a52:	90 0d       	add	r25, r0
     a54:	11 24       	eor	r1, r1
     a56:	82 0f       	add	r24, r18
     a58:	93 1f       	adc	r25, r19
		(unsigned)(q->size * q->esize);
     a5a:	2f 81       	ldd	r18, Y+7	; 0x07
     a5c:	38 85       	ldd	r19, Y+8	; 0x08
     a5e:	f9 01       	movw	r30, r18
     a60:	66 81       	ldd	r22, Z+6	; 0x06
     a62:	77 81       	ldd	r23, Z+7	; 0x07
     a64:	2f 81       	ldd	r18, Y+7	; 0x07
     a66:	38 85       	ldd	r19, Y+8	; 0x08
     a68:	f9 01       	movw	r30, r18
     a6a:	44 81       	ldd	r20, Z+4	; 0x04
     a6c:	55 81       	ldd	r21, Z+5	; 0x05
     a6e:	64 9f       	mul	r22, r20
     a70:	90 01       	movw	r18, r0
     a72:	65 9f       	mul	r22, r21
     a74:	30 0d       	add	r19, r0
     a76:	74 9f       	mul	r23, r20
     a78:	30 0d       	add	r19, r0
     a7a:	11 24       	eor	r1, r1
		//leaveCritical();	// can let others to run here
		OSSemPend(q_sema_full);
		enterCritical();	// but after the pend, would go back to run
	}
	
	unsigned shift = 
     a7c:	b9 01       	movw	r22, r18
     a7e:	0e 94 56 10 	call	0x20ac	; 0x20ac <__udivmodhi4>
     a82:	9c 83       	std	Y+4, r25	; 0x04
     a84:	8b 83       	std	Y+3, r24	; 0x03
		(unsigned)(q->head - q->start + (q->num * q->esize)) %
		(unsigned)(q->size * q->esize);
	void *currentPos = q->start + shift;
     a86:	8f 81       	ldd	r24, Y+7	; 0x07
     a88:	98 85       	ldd	r25, Y+8	; 0x08
     a8a:	fc 01       	movw	r30, r24
     a8c:	20 85       	ldd	r18, Z+8	; 0x08
     a8e:	31 85       	ldd	r19, Z+9	; 0x09
     a90:	8b 81       	ldd	r24, Y+3	; 0x03
     a92:	9c 81       	ldd	r25, Y+4	; 0x04
     a94:	82 0f       	add	r24, r18
     a96:	93 1f       	adc	r25, r19
     a98:	9e 83       	std	Y+6, r25	; 0x06
     a9a:	8d 83       	std	Y+5, r24	; 0x05
	
	// then copy the element into queue
	for(int i=0;i< q->esize; i++){
     a9c:	1a 82       	std	Y+2, r1	; 0x02
     a9e:	19 82       	std	Y+1, r1	; 0x01
     aa0:	15 c0       	rjmp	.+42     	; 0xacc <OSenq+0x11e>
		*(char*)(currentPos + i) = *(char*)(item + i);
     aa2:	2d 81       	ldd	r18, Y+5	; 0x05
     aa4:	3e 81       	ldd	r19, Y+6	; 0x06
     aa6:	89 81       	ldd	r24, Y+1	; 0x01
     aa8:	9a 81       	ldd	r25, Y+2	; 0x02
     aaa:	82 0f       	add	r24, r18
     aac:	93 1f       	adc	r25, r19
     aae:	49 85       	ldd	r20, Y+9	; 0x09
     ab0:	5a 85       	ldd	r21, Y+10	; 0x0a
     ab2:	29 81       	ldd	r18, Y+1	; 0x01
     ab4:	3a 81       	ldd	r19, Y+2	; 0x02
     ab6:	24 0f       	add	r18, r20
     ab8:	35 1f       	adc	r19, r21
     aba:	f9 01       	movw	r30, r18
     abc:	20 81       	ld	r18, Z
     abe:	fc 01       	movw	r30, r24
     ac0:	20 83       	st	Z, r18
		(unsigned)(q->head - q->start + (q->num * q->esize)) %
		(unsigned)(q->size * q->esize);
	void *currentPos = q->start + shift;
	
	// then copy the element into queue
	for(int i=0;i< q->esize; i++){
     ac2:	89 81       	ldd	r24, Y+1	; 0x01
     ac4:	9a 81       	ldd	r25, Y+2	; 0x02
     ac6:	01 96       	adiw	r24, 0x01	; 1
     ac8:	9a 83       	std	Y+2, r25	; 0x02
     aca:	89 83       	std	Y+1, r24	; 0x01
     acc:	8f 81       	ldd	r24, Y+7	; 0x07
     ace:	98 85       	ldd	r25, Y+8	; 0x08
     ad0:	fc 01       	movw	r30, r24
     ad2:	24 81       	ldd	r18, Z+4	; 0x04
     ad4:	35 81       	ldd	r19, Z+5	; 0x05
     ad6:	89 81       	ldd	r24, Y+1	; 0x01
     ad8:	9a 81       	ldd	r25, Y+2	; 0x02
     ada:	82 17       	cp	r24, r18
     adc:	93 07       	cpc	r25, r19
     ade:	0c f3       	brlt	.-62     	; 0xaa2 <OSenq+0xf4>
		*(char*)(currentPos + i) = *(char*)(item + i);
	}
		
	q->num++;
     ae0:	8f 81       	ldd	r24, Y+7	; 0x07
     ae2:	98 85       	ldd	r25, Y+8	; 0x08
     ae4:	fc 01       	movw	r30, r24
     ae6:	82 81       	ldd	r24, Z+2	; 0x02
     ae8:	93 81       	ldd	r25, Z+3	; 0x03
     aea:	9c 01       	movw	r18, r24
     aec:	2f 5f       	subi	r18, 0xFF	; 255
     aee:	3f 4f       	sbci	r19, 0xFF	; 255
     af0:	8f 81       	ldd	r24, Y+7	; 0x07
     af2:	98 85       	ldd	r25, Y+8	; 0x08
     af4:	fc 01       	movw	r30, r24
     af6:	33 83       	std	Z+3, r19	; 0x03
     af8:	22 83       	std	Z+2, r18	; 0x02
	
	// produced one
	OSSemPost(q_sema_empty);
     afa:	80 91 62 01 	lds	r24, 0x0162
     afe:	90 91 63 01 	lds	r25, 0x0163
     b02:	0e 94 52 03 	call	0x6a4	; 0x6a4 <OSSemPost>
	
	leaveCritical();
     b06:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <leaveCritical>
}
     b0a:	2a 96       	adiw	r28, 0x0a	; 10
     b0c:	0f b6       	in	r0, 0x3f	; 63
     b0e:	f8 94       	cli
     b10:	de bf       	out	0x3e, r29	; 62
     b12:	0f be       	out	0x3f, r0	; 63
     b14:	cd bf       	out	0x3d, r28	; 61
     b16:	cf 91       	pop	r28
     b18:	df 91       	pop	r29
     b1a:	08 95       	ret

00000b1c <OSdeq>:

// Removes and returns item from head of queue. Process blocks if queue is empty.
void *OSdeq(OSSignal *q)
{
     b1c:	df 93       	push	r29
     b1e:	cf 93       	push	r28
     b20:	00 d0       	rcall	.+0      	; 0xb22 <OSdeq+0x6>
     b22:	00 d0       	rcall	.+0      	; 0xb24 <OSdeq+0x8>
     b24:	cd b7       	in	r28, 0x3d	; 61
     b26:	de b7       	in	r29, 0x3e	; 62
     b28:	9c 83       	std	Y+4, r25	; 0x04
     b2a:	8b 83       	std	Y+3, r24	; 0x03
	enterCritical();
     b2c:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <enterCritical>
	
	// wrong type no use
	if(q == NULL || q->type != QUEUE_TYPE){
     b30:	8b 81       	ldd	r24, Y+3	; 0x03
     b32:	9c 81       	ldd	r25, Y+4	; 0x04
     b34:	00 97       	sbiw	r24, 0x00	; 0
     b36:	49 f0       	breq	.+18     	; 0xb4a <OSdeq+0x2e>
     b38:	8b 81       	ldd	r24, Y+3	; 0x03
     b3a:	9c 81       	ldd	r25, Y+4	; 0x04
     b3c:	dc 01       	movw	r26, r24
     b3e:	8d 91       	ld	r24, X+
     b40:	9c 91       	ld	r25, X
     b42:	11 97       	sbiw	r26, 0x01	; 1
     b44:	81 30       	cpi	r24, 0x01	; 1
     b46:	91 05       	cpc	r25, r1
     b48:	71 f0       	breq	.+28     	; 0xb66 <OSdeq+0x4a>
		leaveCritical();
     b4a:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <leaveCritical>
     b4e:	7b c0       	rjmp	.+246    	; 0xc46 <OSdeq+0x12a>
		return;
	}
	
	while(q->num <= 0){	// queue empty
		leaveCritical();	// can let others to run here
     b50:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <leaveCritical>
		OSSemPend(q_sema_empty);
     b54:	80 91 62 01 	lds	r24, 0x0162
     b58:	90 91 63 01 	lds	r25, 0x0163
     b5c:	0e 94 66 02 	call	0x4cc	; 0x4cc <OSSemPend>
		enterCritical();	// but after the pend, would go back to run
     b60:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <enterCritical>
     b64:	01 c0       	rjmp	.+2      	; 0xb68 <OSdeq+0x4c>
	if(q == NULL || q->type != QUEUE_TYPE){
		leaveCritical();
		return;
	}
	
	while(q->num <= 0){	// queue empty
     b66:	00 00       	nop
     b68:	8b 81       	ldd	r24, Y+3	; 0x03
     b6a:	9c 81       	ldd	r25, Y+4	; 0x04
     b6c:	fc 01       	movw	r30, r24
     b6e:	82 81       	ldd	r24, Z+2	; 0x02
     b70:	93 81       	ldd	r25, Z+3	; 0x03
     b72:	18 16       	cp	r1, r24
     b74:	19 06       	cpc	r1, r25
     b76:	64 f7       	brge	.-40     	; 0xb50 <OSdeq+0x34>
		leaveCritical();	// can let others to run here
		OSSemPend(q_sema_empty);
		enterCritical();	// but after the pend, would go back to run
	}

	void* res = q->head;
     b78:	8b 81       	ldd	r24, Y+3	; 0x03
     b7a:	9c 81       	ldd	r25, Y+4	; 0x04
     b7c:	dc 01       	movw	r26, r24
     b7e:	1a 96       	adiw	r26, 0x0a	; 10
     b80:	8d 91       	ld	r24, X+
     b82:	9c 91       	ld	r25, X
     b84:	1b 97       	sbiw	r26, 0x0b	; 11
     b86:	9a 83       	std	Y+2, r25	; 0x02
     b88:	89 83       	std	Y+1, r24	; 0x01
	
	q->head += q->esize;
     b8a:	8b 81       	ldd	r24, Y+3	; 0x03
     b8c:	9c 81       	ldd	r25, Y+4	; 0x04
     b8e:	fc 01       	movw	r30, r24
     b90:	22 85       	ldd	r18, Z+10	; 0x0a
     b92:	33 85       	ldd	r19, Z+11	; 0x0b
     b94:	8b 81       	ldd	r24, Y+3	; 0x03
     b96:	9c 81       	ldd	r25, Y+4	; 0x04
     b98:	dc 01       	movw	r26, r24
     b9a:	14 96       	adiw	r26, 0x04	; 4
     b9c:	8d 91       	ld	r24, X+
     b9e:	9c 91       	ld	r25, X
     ba0:	15 97       	sbiw	r26, 0x05	; 5
     ba2:	28 0f       	add	r18, r24
     ba4:	39 1f       	adc	r19, r25
     ba6:	8b 81       	ldd	r24, Y+3	; 0x03
     ba8:	9c 81       	ldd	r25, Y+4	; 0x04
     baa:	fc 01       	movw	r30, r24
     bac:	33 87       	std	Z+11, r19	; 0x0b
     bae:	22 87       	std	Z+10, r18	; 0x0a
	if(q->head == q->start + (q->num * q->esize) ){
     bb0:	8b 81       	ldd	r24, Y+3	; 0x03
     bb2:	9c 81       	ldd	r25, Y+4	; 0x04
     bb4:	dc 01       	movw	r26, r24
     bb6:	1a 96       	adiw	r26, 0x0a	; 10
     bb8:	2d 91       	ld	r18, X+
     bba:	3c 91       	ld	r19, X
     bbc:	1b 97       	sbiw	r26, 0x0b	; 11
     bbe:	8b 81       	ldd	r24, Y+3	; 0x03
     bc0:	9c 81       	ldd	r25, Y+4	; 0x04
     bc2:	fc 01       	movw	r30, r24
     bc4:	40 85       	ldd	r20, Z+8	; 0x08
     bc6:	51 85       	ldd	r21, Z+9	; 0x09
     bc8:	8b 81       	ldd	r24, Y+3	; 0x03
     bca:	9c 81       	ldd	r25, Y+4	; 0x04
     bcc:	dc 01       	movw	r26, r24
     bce:	12 96       	adiw	r26, 0x02	; 2
     bd0:	ed 91       	ld	r30, X+
     bd2:	fc 91       	ld	r31, X
     bd4:	13 97       	sbiw	r26, 0x03	; 3
     bd6:	8b 81       	ldd	r24, Y+3	; 0x03
     bd8:	9c 81       	ldd	r25, Y+4	; 0x04
     bda:	dc 01       	movw	r26, r24
     bdc:	14 96       	adiw	r26, 0x04	; 4
     bde:	6d 91       	ld	r22, X+
     be0:	7c 91       	ld	r23, X
     be2:	15 97       	sbiw	r26, 0x05	; 5
     be4:	e6 9f       	mul	r30, r22
     be6:	c0 01       	movw	r24, r0
     be8:	e7 9f       	mul	r30, r23
     bea:	90 0d       	add	r25, r0
     bec:	f6 9f       	mul	r31, r22
     bee:	90 0d       	add	r25, r0
     bf0:	11 24       	eor	r1, r1
     bf2:	84 0f       	add	r24, r20
     bf4:	95 1f       	adc	r25, r21
     bf6:	28 17       	cp	r18, r24
     bf8:	39 07       	cpc	r19, r25
     bfa:	61 f4       	brne	.+24     	; 0xc14 <OSdeq+0xf8>
		q->head = q->start;
     bfc:	8b 81       	ldd	r24, Y+3	; 0x03
     bfe:	9c 81       	ldd	r25, Y+4	; 0x04
     c00:	fc 01       	movw	r30, r24
     c02:	20 85       	ldd	r18, Z+8	; 0x08
     c04:	31 85       	ldd	r19, Z+9	; 0x09
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	9c 81       	ldd	r25, Y+4	; 0x04
     c0a:	dc 01       	movw	r26, r24
     c0c:	1b 96       	adiw	r26, 0x0b	; 11
     c0e:	3c 93       	st	X, r19
     c10:	2e 93       	st	-X, r18
     c12:	1a 97       	sbiw	r26, 0x0a	; 10
	}
	
	q->num--;
     c14:	8b 81       	ldd	r24, Y+3	; 0x03
     c16:	9c 81       	ldd	r25, Y+4	; 0x04
     c18:	fc 01       	movw	r30, r24
     c1a:	82 81       	ldd	r24, Z+2	; 0x02
     c1c:	93 81       	ldd	r25, Z+3	; 0x03
     c1e:	9c 01       	movw	r18, r24
     c20:	21 50       	subi	r18, 0x01	; 1
     c22:	30 40       	sbci	r19, 0x00	; 0
     c24:	8b 81       	ldd	r24, Y+3	; 0x03
     c26:	9c 81       	ldd	r25, Y+4	; 0x04
     c28:	dc 01       	movw	r26, r24
     c2a:	13 96       	adiw	r26, 0x03	; 3
     c2c:	3c 93       	st	X, r19
     c2e:	2e 93       	st	-X, r18
     c30:	12 97       	sbiw	r26, 0x02	; 2
	
	// consumed one
	OSSemPost(q_sema_full);
     c32:	80 91 64 01 	lds	r24, 0x0164
     c36:	90 91 65 01 	lds	r25, 0x0165
     c3a:	0e 94 52 03 	call	0x6a4	; 0x6a4 <OSSemPost>
	
	leaveCritical();
     c3e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <leaveCritical>
	return res;
     c42:	89 81       	ldd	r24, Y+1	; 0x01
     c44:	9a 81       	ldd	r25, Y+2	; 0x02
}
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	0f 90       	pop	r0
     c4e:	cf 91       	pop	r28
     c50:	df 91       	pop	r29
     c52:	08 95       	ret

00000c54 <OSdestroyQ>:

// Destroys the queue
void *OSdestroyQ(OSSignal *q)
{
     c54:	df 93       	push	r29
     c56:	cf 93       	push	r28
     c58:	00 d0       	rcall	.+0      	; 0xc5a <OSdestroyQ+0x6>
     c5a:	cd b7       	in	r28, 0x3d	; 61
     c5c:	de b7       	in	r29, 0x3e	; 62
     c5e:	9a 83       	std	Y+2, r25	; 0x02
     c60:	89 83       	std	Y+1, r24	; 0x01
	enterCritical();
     c62:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <enterCritical>
	if(q != NULL){
     c66:	89 81       	ldd	r24, Y+1	; 0x01
     c68:	9a 81       	ldd	r25, Y+2	; 0x02
     c6a:	00 97       	sbiw	r24, 0x00	; 0
     c6c:	91 f0       	breq	.+36     	; 0xc92 <OSdestroyQ+0x3e>
		if(q->start != NULL)	free(q->start);
     c6e:	89 81       	ldd	r24, Y+1	; 0x01
     c70:	9a 81       	ldd	r25, Y+2	; 0x02
     c72:	fc 01       	movw	r30, r24
     c74:	80 85       	ldd	r24, Z+8	; 0x08
     c76:	91 85       	ldd	r25, Z+9	; 0x09
     c78:	00 97       	sbiw	r24, 0x00	; 0
     c7a:	39 f0       	breq	.+14     	; 0xc8a <OSdestroyQ+0x36>
     c7c:	89 81       	ldd	r24, Y+1	; 0x01
     c7e:	9a 81       	ldd	r25, Y+2	; 0x02
     c80:	fc 01       	movw	r30, r24
     c82:	80 85       	ldd	r24, Z+8	; 0x08
     c84:	91 85       	ldd	r25, Z+9	; 0x09
     c86:	0e 94 72 11 	call	0x22e4	; 0x22e4 <free>
		free(q);
     c8a:	89 81       	ldd	r24, Y+1	; 0x01
     c8c:	9a 81       	ldd	r25, Y+2	; 0x02
     c8e:	0e 94 72 11 	call	0x22e4	; 0x22e4 <free>
	}
	leaveCritical();
     c92:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <leaveCritical>
}
     c96:	0f 90       	pop	r0
     c98:	0f 90       	pop	r0
     c9a:	cf 91       	pop	r28
     c9c:	df 91       	pop	r29
     c9e:	08 95       	ret

00000ca0 <runTaskFirstTime>:
	"pop r0	\n\t"\
	"out __SREG__, r0\n\t"\
	"pop r0	\n\t": : "r" (pxCurrentTCB):\
	);

void runTaskFirstTime(int i){
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <runTaskFirstTime+0x6>
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	9a 83       	std	Y+2, r25	; 0x02
     cac:	89 83       	std	Y+1, r24	; 0x01
	cli();
     cae:	f8 94       	cli
	currentTask = i;
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	9a 81       	ldd	r25, Y+2	; 0x02
     cb4:	90 93 0b 01 	sts	0x010B, r25
     cb8:	80 93 0a 01 	sts	0x010A, r24
	taskTable[currentTask].runflag = 1;
     cbc:	40 91 0a 01 	lds	r20, 0x010A
     cc0:	50 91 0b 01 	lds	r21, 0x010B
     cc4:	2f e0       	ldi	r18, 0x0F	; 15
     cc6:	31 e0       	ldi	r19, 0x01	; 1
     cc8:	42 9f       	mul	r20, r18
     cca:	c0 01       	movw	r24, r0
     ccc:	43 9f       	mul	r20, r19
     cce:	90 0d       	add	r25, r0
     cd0:	52 9f       	mul	r21, r18
     cd2:	90 0d       	add	r25, r0
     cd4:	11 24       	eor	r1, r1
     cd6:	84 59       	subi	r24, 0x94	; 148
     cd8:	9e 4f       	sbci	r25, 0xFE	; 254
     cda:	21 e0       	ldi	r18, 0x01	; 1
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	fc 01       	movw	r30, r24
     ce0:	31 83       	std	Z+1, r19	; 0x01
     ce2:	20 83       	st	Z, r18
	taskTable[currentTask].skipedTimes = 0;
     ce4:	40 91 0a 01 	lds	r20, 0x010A
     ce8:	50 91 0b 01 	lds	r21, 0x010B
     cec:	2f e0       	ldi	r18, 0x0F	; 15
     cee:	31 e0       	ldi	r19, 0x01	; 1
     cf0:	42 9f       	mul	r20, r18
     cf2:	c0 01       	movw	r24, r0
     cf4:	43 9f       	mul	r20, r19
     cf6:	90 0d       	add	r25, r0
     cf8:	52 9f       	mul	r21, r18
     cfa:	90 0d       	add	r25, r0
     cfc:	11 24       	eor	r1, r1
     cfe:	89 58       	subi	r24, 0x89	; 137
     d00:	9d 4f       	sbci	r25, 0xFD	; 253
     d02:	fc 01       	movw	r30, r24
     d04:	11 82       	std	Z+1, r1	; 0x01
     d06:	10 82       	st	Z, r1
    
	pxCurrentTCB = (unsigned long)(taskTable[currentTask].stack + TASK_STACK_SIZE - 1);
     d08:	40 91 0a 01 	lds	r20, 0x010A
     d0c:	50 91 0b 01 	lds	r21, 0x010B
     d10:	2f e0       	ldi	r18, 0x0F	; 15
     d12:	31 e0       	ldi	r19, 0x01	; 1
     d14:	42 9f       	mul	r20, r18
     d16:	c0 01       	movw	r24, r0
     d18:	43 9f       	mul	r20, r19
     d1a:	90 0d       	add	r25, r0
     d1c:	52 9f       	mul	r21, r18
     d1e:	90 0d       	add	r25, r0
     d20:	11 24       	eor	r1, r1
     d22:	86 5f       	subi	r24, 0xF6	; 246
     d24:	9e 4f       	sbci	r25, 0xFE	; 254
     d26:	84 59       	subi	r24, 0x94	; 148
     d28:	9e 4f       	sbci	r25, 0xFE	; 254
     d2a:	aa 27       	eor	r26, r26
     d2c:	97 fd       	sbrc	r25, 7
     d2e:	a0 95       	com	r26
     d30:	ba 2f       	mov	r27, r26
     d32:	80 93 66 01 	sts	0x0166, r24
     d36:	90 93 67 01 	sts	0x0167, r25
     d3a:	a0 93 68 01 	sts	0x0168, r26
     d3e:	b0 93 69 01 	sts	0x0169, r27
	
    asm volatile ("\n\t"\
     d42:	a0 91 66 01 	lds	r26, 0x0166
     d46:	b0 91 67 01 	lds	r27, 0x0167
     d4a:	ad bf       	out	0x3d, r26	; 61
     d4c:	be bf       	out	0x3e, r27	; 62
                  "lds r26, pxCurrentTCB \n\t"\
                  "lds r27, pxCurrentTCB+1 \n\t"\
                  "out __SP_L__, r26 \n\t"\
                  "out __SP_H__, r27 \n\t"\
                  );
	sei();
     d4e:	78 94       	sei
    taskTable[currentTask].fptr(taskTable[currentTask].arg);
     d50:	40 91 0a 01 	lds	r20, 0x010A
     d54:	50 91 0b 01 	lds	r21, 0x010B
     d58:	2f e0       	ldi	r18, 0x0F	; 15
     d5a:	31 e0       	ldi	r19, 0x01	; 1
     d5c:	42 9f       	mul	r20, r18
     d5e:	c0 01       	movw	r24, r0
     d60:	43 9f       	mul	r20, r19
     d62:	90 0d       	add	r25, r0
     d64:	52 9f       	mul	r21, r18
     d66:	90 0d       	add	r25, r0
     d68:	11 24       	eor	r1, r1
     d6a:	80 59       	subi	r24, 0x90	; 144
     d6c:	9e 4f       	sbci	r25, 0xFE	; 254
     d6e:	fc 01       	movw	r30, r24
     d70:	20 81       	ld	r18, Z
     d72:	31 81       	ldd	r19, Z+1	; 0x01
     d74:	60 91 0a 01 	lds	r22, 0x010A
     d78:	70 91 0b 01 	lds	r23, 0x010B
     d7c:	4f e0       	ldi	r20, 0x0F	; 15
     d7e:	51 e0       	ldi	r21, 0x01	; 1
     d80:	64 9f       	mul	r22, r20
     d82:	c0 01       	movw	r24, r0
     d84:	65 9f       	mul	r22, r21
     d86:	90 0d       	add	r25, r0
     d88:	74 9f       	mul	r23, r20
     d8a:	90 0d       	add	r25, r0
     d8c:	11 24       	eor	r1, r1
     d8e:	8e 58       	subi	r24, 0x8E	; 142
     d90:	9e 4f       	sbci	r25, 0xFE	; 254
     d92:	fc 01       	movw	r30, r24
     d94:	80 81       	ld	r24, Z
     d96:	91 81       	ldd	r25, Z+1	; 0x01
     d98:	f9 01       	movw	r30, r18
     d9a:	09 95       	icall
}
     d9c:	0f 90       	pop	r0
     d9e:	0f 90       	pop	r0
     da0:	cf 91       	pop	r28
     da2:	df 91       	pop	r29
     da4:	08 95       	ret

00000da6 <OSMakeAtomic>:



void OSMakeAtomic()
{
     da6:	df 93       	push	r29
     da8:	cf 93       	push	r28
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
	// Disables interrupts to create an atomic section.
	cli();
     dae:	f8 94       	cli
}
     db0:	cf 91       	pop	r28
     db2:	df 91       	pop	r29
     db4:	08 95       	ret

00000db6 <OSLeaveAtomic>:

void OSLeaveAtomic()
{
     db6:	df 93       	push	r29
     db8:	cf 93       	push	r28
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
	// Leaves atomic section by re-enabling interrupts.
	sei();
     dbe:	78 94       	sei
}
     dc0:	cf 91       	pop	r28
     dc2:	df 91       	pop	r29
     dc4:	08 95       	ret

00000dc6 <findNextTask>:
// DO NOT modify this!
void OSSwapTask() __attribute__ ((naked));


int findNextTask()
{
     dc6:	df 93       	push	r29
     dc8:	cf 93       	push	r28
     dca:	cd b7       	in	r28, 0x3d	; 61
     dcc:	de b7       	in	r29, 0x3e	; 62
	// signal of current task overflow
	//if(currentTask > OS_NUM_TASKS || currentTask < -1)	PORTD |= 0b00010000;
     dce:	80 91 0a 01 	lds	r24, 0x010A
     dd2:	90 91 0b 01 	lds	r25, 0x010B
     dd6:	85 30       	cpi	r24, 0x05	; 5
     dd8:	91 05       	cpc	r25, r1
     dda:	44 f4       	brge	.+16     	; 0xdec <findNextTask+0x26>
     ddc:	80 91 0a 01 	lds	r24, 0x010A
     de0:	90 91 0b 01 	lds	r25, 0x010B
     de4:	2f ef       	ldi	r18, 0xFF	; 255
     de6:	8f 3f       	cpi	r24, 0xFF	; 255
     de8:	92 07       	cpc	r25, r18
     dea:	4c f4       	brge	.+18     	; 0xdfe <findNextTask+0x38>
     dec:	8b e2       	ldi	r24, 0x2B	; 43
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	2b e2       	ldi	r18, 0x2B	; 43
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	f9 01       	movw	r30, r18
     df6:	20 81       	ld	r18, Z
     df8:	20 61       	ori	r18, 0x10	; 16
     dfa:	fc 01       	movw	r30, r24
     dfc:	20 83       	st	Z, r18
	// Note that OS_NUM_TASKS in kernel.h is the MAXIMUM number of tasks that can be created, not the actual number
	// created. So OS_NUM_TASKS can be 10 although in actual fact only 4 tasks were created. You should pick only amongst
	// these 4 tasks.
	
	// find the one being skipped the most of the times
	maxVal = -1;tempTaskNum = -1;
     dfe:	8f ef       	ldi	r24, 0xFF	; 255
     e00:	9f ef       	ldi	r25, 0xFF	; 255
     e02:	90 93 1d 01 	sts	0x011D, r25
     e06:	80 93 1c 01 	sts	0x011C, r24
     e0a:	8f ef       	ldi	r24, 0xFF	; 255
     e0c:	9f ef       	ldi	r25, 0xFF	; 255
     e0e:	90 93 09 01 	sts	0x0109, r25
     e12:	80 93 08 01 	sts	0x0108, r24
	for(iter = 0; iter < task_counter; iter++){
     e16:	10 92 6b 01 	sts	0x016B, r1
     e1a:	10 92 6a 01 	sts	0x016A, r1
     e1e:	9c c0       	rjmp	.+312    	; 0xf58 <findNextTask+0x192>
		if(taskTable[iter].sem_counter){
     e20:	40 91 6a 01 	lds	r20, 0x016A
     e24:	50 91 6b 01 	lds	r21, 0x016B
     e28:	2f e0       	ldi	r18, 0x0F	; 15
     e2a:	31 e0       	ldi	r19, 0x01	; 1
     e2c:	42 9f       	mul	r20, r18
     e2e:	c0 01       	movw	r24, r0
     e30:	43 9f       	mul	r20, r19
     e32:	90 0d       	add	r25, r0
     e34:	52 9f       	mul	r21, r18
     e36:	90 0d       	add	r25, r0
     e38:	11 24       	eor	r1, r1
     e3a:	87 58       	subi	r24, 0x87	; 135
     e3c:	9d 4f       	sbci	r25, 0xFD	; 253
     e3e:	fc 01       	movw	r30, r24
     e40:	80 81       	ld	r24, Z
     e42:	91 81       	ldd	r25, Z+1	; 0x01
     e44:	00 97       	sbiw	r24, 0x00	; 0
     e46:	21 f1       	breq	.+72     	; 0xe90 <findNextTask+0xca>
			taskTable[iter].skipedTimes++;
     e48:	80 91 6a 01 	lds	r24, 0x016A
     e4c:	90 91 6b 01 	lds	r25, 0x016B
     e50:	4f e0       	ldi	r20, 0x0F	; 15
     e52:	51 e0       	ldi	r21, 0x01	; 1
     e54:	84 9f       	mul	r24, r20
     e56:	90 01       	movw	r18, r0
     e58:	85 9f       	mul	r24, r21
     e5a:	30 0d       	add	r19, r0
     e5c:	94 9f       	mul	r25, r20
     e5e:	30 0d       	add	r19, r0
     e60:	11 24       	eor	r1, r1
     e62:	29 58       	subi	r18, 0x89	; 137
     e64:	3d 4f       	sbci	r19, 0xFD	; 253
     e66:	f9 01       	movw	r30, r18
     e68:	20 81       	ld	r18, Z
     e6a:	31 81       	ldd	r19, Z+1	; 0x01
     e6c:	2f 5f       	subi	r18, 0xFF	; 255
     e6e:	3f 4f       	sbci	r19, 0xFF	; 255
     e70:	6f e0       	ldi	r22, 0x0F	; 15
     e72:	71 e0       	ldi	r23, 0x01	; 1
     e74:	86 9f       	mul	r24, r22
     e76:	a0 01       	movw	r20, r0
     e78:	87 9f       	mul	r24, r23
     e7a:	50 0d       	add	r21, r0
     e7c:	96 9f       	mul	r25, r22
     e7e:	50 0d       	add	r21, r0
     e80:	11 24       	eor	r1, r1
     e82:	ca 01       	movw	r24, r20
     e84:	89 58       	subi	r24, 0x89	; 137
     e86:	9d 4f       	sbci	r25, 0xFD	; 253
     e88:	fc 01       	movw	r30, r24
     e8a:	31 83       	std	Z+1, r19	; 0x01
     e8c:	20 83       	st	Z, r18
			continue;
     e8e:	5b c0       	rjmp	.+182    	; 0xf46 <findNextTask+0x180>
		} else if(taskTable[iter].skipedTimes > maxVal){
     e90:	40 91 6a 01 	lds	r20, 0x016A
     e94:	50 91 6b 01 	lds	r21, 0x016B
     e98:	2f e0       	ldi	r18, 0x0F	; 15
     e9a:	31 e0       	ldi	r19, 0x01	; 1
     e9c:	42 9f       	mul	r20, r18
     e9e:	c0 01       	movw	r24, r0
     ea0:	43 9f       	mul	r20, r19
     ea2:	90 0d       	add	r25, r0
     ea4:	52 9f       	mul	r21, r18
     ea6:	90 0d       	add	r25, r0
     ea8:	11 24       	eor	r1, r1
     eaa:	89 58       	subi	r24, 0x89	; 137
     eac:	9d 4f       	sbci	r25, 0xFD	; 253
     eae:	fc 01       	movw	r30, r24
     eb0:	20 81       	ld	r18, Z
     eb2:	31 81       	ldd	r19, Z+1	; 0x01
     eb4:	80 91 1c 01 	lds	r24, 0x011C
     eb8:	90 91 1d 01 	lds	r25, 0x011D
     ebc:	82 17       	cp	r24, r18
     ebe:	93 07       	cpc	r25, r19
     ec0:	fc f4       	brge	.+62     	; 0xf00 <findNextTask+0x13a>
			tempTaskNum = iter;
     ec2:	80 91 6a 01 	lds	r24, 0x016A
     ec6:	90 91 6b 01 	lds	r25, 0x016B
     eca:	90 93 09 01 	sts	0x0109, r25
     ece:	80 93 08 01 	sts	0x0108, r24
			maxVal = taskTable[iter].skipedTimes;
     ed2:	40 91 6a 01 	lds	r20, 0x016A
     ed6:	50 91 6b 01 	lds	r21, 0x016B
     eda:	2f e0       	ldi	r18, 0x0F	; 15
     edc:	31 e0       	ldi	r19, 0x01	; 1
     ede:	42 9f       	mul	r20, r18
     ee0:	c0 01       	movw	r24, r0
     ee2:	43 9f       	mul	r20, r19
     ee4:	90 0d       	add	r25, r0
     ee6:	52 9f       	mul	r21, r18
     ee8:	90 0d       	add	r25, r0
     eea:	11 24       	eor	r1, r1
     eec:	89 58       	subi	r24, 0x89	; 137
     eee:	9d 4f       	sbci	r25, 0xFD	; 253
     ef0:	fc 01       	movw	r30, r24
     ef2:	80 81       	ld	r24, Z
     ef4:	91 81       	ldd	r25, Z+1	; 0x01
     ef6:	90 93 1d 01 	sts	0x011D, r25
     efa:	80 93 1c 01 	sts	0x011C, r24
     efe:	23 c0       	rjmp	.+70     	; 0xf46 <findNextTask+0x180>
		} else{
			taskTable[iter].skipedTimes++;
     f00:	80 91 6a 01 	lds	r24, 0x016A
     f04:	90 91 6b 01 	lds	r25, 0x016B
     f08:	4f e0       	ldi	r20, 0x0F	; 15
     f0a:	51 e0       	ldi	r21, 0x01	; 1
     f0c:	84 9f       	mul	r24, r20
     f0e:	90 01       	movw	r18, r0
     f10:	85 9f       	mul	r24, r21
     f12:	30 0d       	add	r19, r0
     f14:	94 9f       	mul	r25, r20
     f16:	30 0d       	add	r19, r0
     f18:	11 24       	eor	r1, r1
     f1a:	29 58       	subi	r18, 0x89	; 137
     f1c:	3d 4f       	sbci	r19, 0xFD	; 253
     f1e:	f9 01       	movw	r30, r18
     f20:	20 81       	ld	r18, Z
     f22:	31 81       	ldd	r19, Z+1	; 0x01
     f24:	2f 5f       	subi	r18, 0xFF	; 255
     f26:	3f 4f       	sbci	r19, 0xFF	; 255
     f28:	6f e0       	ldi	r22, 0x0F	; 15
     f2a:	71 e0       	ldi	r23, 0x01	; 1
     f2c:	86 9f       	mul	r24, r22
     f2e:	a0 01       	movw	r20, r0
     f30:	87 9f       	mul	r24, r23
     f32:	50 0d       	add	r21, r0
     f34:	96 9f       	mul	r25, r22
     f36:	50 0d       	add	r21, r0
     f38:	11 24       	eor	r1, r1
     f3a:	ca 01       	movw	r24, r20
     f3c:	89 58       	subi	r24, 0x89	; 137
     f3e:	9d 4f       	sbci	r25, 0xFD	; 253
     f40:	fc 01       	movw	r30, r24
     f42:	31 83       	std	Z+1, r19	; 0x01
     f44:	20 83       	st	Z, r18
	// created. So OS_NUM_TASKS can be 10 although in actual fact only 4 tasks were created. You should pick only amongst
	// these 4 tasks.
	
	// find the one being skipped the most of the times
	maxVal = -1;tempTaskNum = -1;
	for(iter = 0; iter < task_counter; iter++){
     f46:	80 91 6a 01 	lds	r24, 0x016A
     f4a:	90 91 6b 01 	lds	r25, 0x016B
     f4e:	01 96       	adiw	r24, 0x01	; 1
     f50:	90 93 6b 01 	sts	0x016B, r25
     f54:	80 93 6a 01 	sts	0x016A, r24
     f58:	20 91 6a 01 	lds	r18, 0x016A
     f5c:	30 91 6b 01 	lds	r19, 0x016B
     f60:	80 91 1e 01 	lds	r24, 0x011E
     f64:	90 91 1f 01 	lds	r25, 0x011F
     f68:	28 17       	cp	r18, r24
     f6a:	39 07       	cpc	r19, r25
     f6c:	0c f4       	brge	.+2      	; 0xf70 <findNextTask+0x1aa>
     f6e:	58 cf       	rjmp	.-336    	; 0xe20 <findNextTask+0x5a>
		} else{
			taskTable[iter].skipedTimes++;
		}
	}
	
	return tempTaskNum;	// unsuccessful
     f70:	80 91 08 01 	lds	r24, 0x0108
     f74:	90 91 09 01 	lds	r25, 0x0109
}
     f78:	cf 91       	pop	r28
     f7a:	df 91       	pop	r29
     f7c:	08 95       	ret

00000f7e <OSSwapTask>:
 {
	// assumption: when this method is being called, there's always a running task; otherwise it would do nothing
	//if(currentTask < 0)	return;
	
	// assumption: when this method is being called, there's always a running task; otherwise it would do nothing
	if(currentTask > OS_NUM_TASKS || currentTask < -1){
     f7e:	80 91 0a 01 	lds	r24, 0x010A
     f82:	90 91 0b 01 	lds	r25, 0x010B
     f86:	85 30       	cpi	r24, 0x05	; 5
     f88:	91 05       	cpc	r25, r1
     f8a:	44 f4       	brge	.+16     	; 0xf9c <OSSwapTask+0x1e>
     f8c:	80 91 0a 01 	lds	r24, 0x010A
     f90:	90 91 0b 01 	lds	r25, 0x010B
     f94:	2f ef       	ldi	r18, 0xFF	; 255
     f96:	8f 3f       	cpi	r24, 0xFF	; 255
     f98:	92 07       	cpc	r25, r18
     f9a:	64 f4       	brge	.+24     	; 0xfb4 <OSSwapTask+0x36>
		// use this code to test overflow
		// value of current task over flow
		//PORTD ^= 0b00010000;
     f9c:	8b e2       	ldi	r24, 0x2B	; 43
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	2b e2       	ldi	r18, 0x2B	; 43
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	f9 01       	movw	r30, r18
     fa6:	30 81       	ld	r19, Z
     fa8:	20 e1       	ldi	r18, 0x10	; 16
     faa:	23 27       	eor	r18, r19
     fac:	fc 01       	movw	r30, r24
     fae:	20 83       	st	Z, r18
		asm("ret");
     fb0:	08 95       	ret
     fb2:	09 c0       	rjmp	.+18     	; 0xfc6 <OSSwapTask+0x48>
	} else if(currentTask == -1){
     fb4:	80 91 0a 01 	lds	r24, 0x010A
     fb8:	90 91 0b 01 	lds	r25, 0x010B
     fbc:	ff ef       	ldi	r31, 0xFF	; 255
     fbe:	8f 3f       	cpi	r24, 0xFF	; 255
     fc0:	9f 07       	cpc	r25, r31
     fc2:	09 f4       	brne	.+2      	; 0xfc6 <OSSwapTask+0x48>
		asm("ret");	// never got any task run
     fc4:	08 95       	ret
	}
	
	// Call findNextTask to decide which task to run next.
	tempTaskNum = findNextTask();
     fc6:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <findNextTask>
     fca:	90 93 09 01 	sts	0x0109, r25
     fce:	80 93 08 01 	sts	0x0108, r24
	if(tempTaskNum < 0)	asm("ret");	// no task to swap
     fd2:	80 91 08 01 	lds	r24, 0x0108
     fd6:	90 91 09 01 	lds	r25, 0x0109
     fda:	99 23       	and	r25, r25
     fdc:	0c f4       	brge	.+2      	; 0xfe0 <OSSwapTask+0x62>
     fde:	08 95       	ret
	cli();
     fe0:	f8 94       	cli
	// Save the context of the current task, and copy the task stack pointer to the task's entry in the Task Control Block (tcb).
	portSAVE_CONTEXT();
     fe2:	0f 92       	push	r0
     fe4:	0f b6       	in	r0, 0x3f	; 63
     fe6:	0f 92       	push	r0
     fe8:	1f 92       	push	r1
     fea:	11 24       	eor	r1, r1
     fec:	2f 92       	push	r2
     fee:	3f 92       	push	r3
     ff0:	4f 92       	push	r4
     ff2:	5f 92       	push	r5
     ff4:	6f 92       	push	r6
     ff6:	7f 92       	push	r7
     ff8:	8f 92       	push	r8
     ffa:	9f 92       	push	r9
     ffc:	af 92       	push	r10
     ffe:	bf 92       	push	r11
    1000:	cf 92       	push	r12
    1002:	df 92       	push	r13
    1004:	ef 92       	push	r14
    1006:	ff 92       	push	r15
    1008:	0f 93       	push	r16
    100a:	1f 93       	push	r17
    100c:	2f 93       	push	r18
    100e:	3f 93       	push	r19
    1010:	4f 93       	push	r20
    1012:	5f 93       	push	r21
    1014:	6f 93       	push	r22
    1016:	7f 93       	push	r23
    1018:	8f 93       	push	r24
    101a:	9f 93       	push	r25
    101c:	af 93       	push	r26
    101e:	bf 93       	push	r27
    1020:	cf 93       	push	r28
    1022:	df 93       	push	r29
    1024:	ef 93       	push	r30
    1026:	ff 93       	push	r31
    1028:	ad b7       	in	r26, 0x3d	; 61
    102a:	be b7       	in	r27, 0x3e	; 62
    102c:	b0 93 67 01 	sts	0x0167, r27
    1030:	a0 93 66 01 	sts	0x0166, r26
	
	// save the current stack pointer
	taskTable[currentTask].stack_ptr = pxCurrentTCB;
    1034:	60 91 0a 01 	lds	r22, 0x010A
    1038:	70 91 0b 01 	lds	r23, 0x010B
    103c:	80 91 66 01 	lds	r24, 0x0166
    1040:	90 91 67 01 	lds	r25, 0x0167
    1044:	a0 91 68 01 	lds	r26, 0x0168
    1048:	b0 91 69 01 	lds	r27, 0x0169
    104c:	4f e0       	ldi	r20, 0x0F	; 15
    104e:	51 e0       	ldi	r21, 0x01	; 1
    1050:	64 9f       	mul	r22, r20
    1052:	90 01       	movw	r18, r0
    1054:	65 9f       	mul	r22, r21
    1056:	30 0d       	add	r19, r0
    1058:	74 9f       	mul	r23, r20
    105a:	30 0d       	add	r19, r0
    105c:	11 24       	eor	r1, r1
    105e:	2c 58       	subi	r18, 0x8C	; 140
    1060:	3e 4f       	sbci	r19, 0xFE	; 254
    1062:	f9 01       	movw	r30, r18
    1064:	80 83       	st	Z, r24
    1066:	91 83       	std	Z+1, r25	; 0x01
    1068:	a2 83       	std	Z+2, r26	; 0x02
    106a:	b3 83       	std	Z+3, r27	; 0x03
	
	// update the "currentTask" to be the next task to run
	currentTask = tempTaskNum;
    106c:	80 91 08 01 	lds	r24, 0x0108
    1070:	90 91 09 01 	lds	r25, 0x0109
    1074:	90 93 0b 01 	sts	0x010B, r25
    1078:	80 93 0a 01 	sts	0x010A, r24
	
	TTaskBlock *t = &taskTable[currentTask];
    107c:	80 91 0a 01 	lds	r24, 0x010A
    1080:	90 91 0b 01 	lds	r25, 0x010B
    1084:	ac 01       	movw	r20, r24
    1086:	2f e0       	ldi	r18, 0x0F	; 15
    1088:	31 e0       	ldi	r19, 0x01	; 1
    108a:	42 9f       	mul	r20, r18
    108c:	c0 01       	movw	r24, r0
    108e:	43 9f       	mul	r20, r19
    1090:	90 0d       	add	r25, r0
    1092:	52 9f       	mul	r21, r18
    1094:	90 0d       	add	r25, r0
    1096:	11 24       	eor	r1, r1
    1098:	84 59       	subi	r24, 0x94	; 148
    109a:	9e 4f       	sbci	r25, 0xFE	; 254
    109c:	9a 83       	std	Y+2, r25	; 0x02
    109e:	89 83       	std	Y+1, r24	; 0x01
	
	if(t->runflag){	// has been run
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	9a 81       	ldd	r25, Y+2	; 0x02
    10a4:	fc 01       	movw	r30, r24
    10a6:	80 81       	ld	r24, Z
    10a8:	91 81       	ldd	r25, Z+1	; 0x01
    10aa:	00 97       	sbiw	r24, 0x00	; 0
    10ac:	09 f4       	brne	.+2      	; 0x10b0 <OSSwapTask+0x132>
    10ae:	51 c0       	rjmp	.+162    	; 0x1152 <OSSwapTask+0x1d4>
		// reset the skiped times flag
		t->skipedTimes = 0;
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
    10b2:	9a 81       	ldd	r25, Y+2	; 0x02
    10b4:	85 5f       	subi	r24, 0xF5	; 245
    10b6:	9e 4f       	sbci	r25, 0xFE	; 254
    10b8:	fc 01       	movw	r30, r24
    10ba:	11 82       	std	Z+1, r1	; 0x01
    10bc:	10 82       	st	Z, r1
		
		// get the stack pointer saved
		pxCurrentTCB = taskTable[currentTask].stack_ptr;
    10be:	40 91 0a 01 	lds	r20, 0x010A
    10c2:	50 91 0b 01 	lds	r21, 0x010B
    10c6:	2f e0       	ldi	r18, 0x0F	; 15
    10c8:	31 e0       	ldi	r19, 0x01	; 1
    10ca:	42 9f       	mul	r20, r18
    10cc:	c0 01       	movw	r24, r0
    10ce:	43 9f       	mul	r20, r19
    10d0:	90 0d       	add	r25, r0
    10d2:	52 9f       	mul	r21, r18
    10d4:	90 0d       	add	r25, r0
    10d6:	11 24       	eor	r1, r1
    10d8:	8c 58       	subi	r24, 0x8C	; 140
    10da:	9e 4f       	sbci	r25, 0xFE	; 254
    10dc:	fc 01       	movw	r30, r24
    10de:	80 81       	ld	r24, Z
    10e0:	91 81       	ldd	r25, Z+1	; 0x01
    10e2:	a2 81       	ldd	r26, Z+2	; 0x02
    10e4:	b3 81       	ldd	r27, Z+3	; 0x03
    10e6:	80 93 66 01 	sts	0x0166, r24
    10ea:	90 93 67 01 	sts	0x0167, r25
    10ee:	a0 93 68 01 	sts	0x0168, r26
    10f2:	b0 93 69 01 	sts	0x0169, r27
		portRESTORE_CONTEXT();
    10f6:	80 91 66 01 	lds	r24, 0x0166
    10fa:	90 91 67 01 	lds	r25, 0x0167
    10fe:	a0 91 68 01 	lds	r26, 0x0168
    1102:	b0 91 69 01 	lds	r27, 0x0169
    1106:	8d bf       	out	0x3d, r24	; 61
    1108:	9e bf       	out	0x3e, r25	; 62
    110a:	ff 91       	pop	r31
    110c:	ef 91       	pop	r30
    110e:	df 91       	pop	r29
    1110:	cf 91       	pop	r28
    1112:	bf 91       	pop	r27
    1114:	af 91       	pop	r26
    1116:	9f 91       	pop	r25
    1118:	8f 91       	pop	r24
    111a:	7f 91       	pop	r23
    111c:	6f 91       	pop	r22
    111e:	5f 91       	pop	r21
    1120:	4f 91       	pop	r20
    1122:	3f 91       	pop	r19
    1124:	2f 91       	pop	r18
    1126:	1f 91       	pop	r17
    1128:	0f 91       	pop	r16
    112a:	ff 90       	pop	r15
    112c:	ef 90       	pop	r14
    112e:	df 90       	pop	r13
    1130:	cf 90       	pop	r12
    1132:	bf 90       	pop	r11
    1134:	af 90       	pop	r10
    1136:	9f 90       	pop	r9
    1138:	8f 90       	pop	r8
    113a:	7f 90       	pop	r7
    113c:	6f 90       	pop	r6
    113e:	5f 90       	pop	r5
    1140:	4f 90       	pop	r4
    1142:	3f 90       	pop	r3
    1144:	2f 90       	pop	r2
    1146:	1f 90       	pop	r1
    1148:	0f 90       	pop	r0
    114a:	0f be       	out	0x3f, r0	; 63
    114c:	0f 90       	pop	r0
		sei();
    114e:	78 94       	sei
    1150:	06 c0       	rjmp	.+12     	; 0x115e <OSSwapTask+0x1e0>
	}else{	// never run -> then run
		runTaskFirstTime(currentTask);
    1152:	80 91 0a 01 	lds	r24, 0x010A
    1156:	90 91 0b 01 	lds	r25, 0x010B
    115a:	0e 94 50 06 	call	0xca0	; 0xca0 <runTaskFirstTime>
	}
	
	// Do not modify the line below!	
	asm("ret");
    115e:	08 95       	ret

00001160 <__vector_14>:
// ISR for the timer. IMPLEMENT ONLY IN PART 2!


ISR(TIMER0_COMPA_vect, ISR_NAKED)
{
	cli();
    1160:	f8 94       	cli
	
	OSSwapTask();
    1162:	0e 94 bf 07 	call	0xf7e	; 0xf7e <OSSwapTask>
	
	// Do not change this!
	asm("reti");
    1166:	18 95       	reti

00001168 <OSInit>:
}

void OSInit()
{ 
    1168:	df 93       	push	r29
    116a:	cf 93       	push	r28
    116c:	cd b7       	in	r28, 0x3d	; 61
    116e:	de b7       	in	r29, 0x3e	; 62
	// Initialize all OS state variables, hardware used DIRECTLY by the OS, etc etc. Do not initialize variables or hardware
	// used by the application. Only those used by the OS.
	int i;
	
	// initialize timer 0
	TCNT0 = 0; OCR0A = 100;
    1170:	86 e4       	ldi	r24, 0x46	; 70
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	fc 01       	movw	r30, r24
    1176:	10 82       	st	Z, r1
    1178:	87 e4       	ldi	r24, 0x47	; 71
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	24 e6       	ldi	r18, 0x64	; 100
    117e:	fc 01       	movw	r30, r24
    1180:	20 83       	st	Z, r18
	TCCR0A = 0b00000010;
    1182:	84 e4       	ldi	r24, 0x44	; 68
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	22 e0       	ldi	r18, 0x02	; 2
    1188:	fc 01       	movw	r30, r24
    118a:	20 83       	st	Z, r18
	TCCR0B = 0b00000101;
    118c:	85 e4       	ldi	r24, 0x45	; 69
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	25 e0       	ldi	r18, 0x05	; 5
    1192:	fc 01       	movw	r30, r24
    1194:	20 83       	st	Z, r18
}
    1196:	cf 91       	pop	r28
    1198:	df 91       	pop	r29
    119a:	08 95       	ret

0000119c <OSAddTask>:
// First argument is a pointer to the task's function code, the second is a priority number (0=highest priority)
// and the 3rd argument is an argument that will be passed to the task function the first time it is run.
// E.g. OSAddTask(task1, 0, (void *) 5) causes a task called task1 to be created with priority 0, and the integer
// 5 is passed to task1 when it is first called. See app.c to fully understand how OSAddTask is used.
int OSAddTask(void (*taskptr)(void *), int prio, void* arg)
{
    119c:	df 93       	push	r29
    119e:	cf 93       	push	r28
    11a0:	cd b7       	in	r28, 0x3d	; 61
    11a2:	de b7       	in	r29, 0x3e	; 62
    11a4:	28 97       	sbiw	r28, 0x08	; 8
    11a6:	0f b6       	in	r0, 0x3f	; 63
    11a8:	f8 94       	cli
    11aa:	de bf       	out	0x3e, r29	; 62
    11ac:	0f be       	out	0x3f, r0	; 63
    11ae:	cd bf       	out	0x3d, r28	; 61
    11b0:	9c 83       	std	Y+4, r25	; 0x04
    11b2:	8b 83       	std	Y+3, r24	; 0x03
    11b4:	7e 83       	std	Y+6, r23	; 0x06
    11b6:	6d 83       	std	Y+5, r22	; 0x05
    11b8:	58 87       	std	Y+8, r21	; 0x08
    11ba:	4f 83       	std	Y+7, r20	; 0x07
	// Adds a new entry to the TCB. Returns a -1 if # of tasks > OS_NUM_TASKS. Note that OS_NUM_TASKS is the MAXIMUM
	// number of tasks that can be created, not the actual number.
	if(task_counter >= OS_NUM_TASKS)	return -1;
    11bc:	80 91 1e 01 	lds	r24, 0x011E
    11c0:	90 91 1f 01 	lds	r25, 0x011F
    11c4:	84 30       	cpi	r24, 0x04	; 4
    11c6:	91 05       	cpc	r25, r1
    11c8:	1c f0       	brlt	.+6      	; 0x11d0 <OSAddTask+0x34>
    11ca:	8f ef       	ldi	r24, 0xFF	; 255
    11cc:	9f ef       	ldi	r25, 0xFF	; 255
    11ce:	3a c0       	rjmp	.+116    	; 0x1244 <OSAddTask+0xa8>
	TTaskBlock *t = &taskTable[task_counter++];
    11d0:	80 91 1e 01 	lds	r24, 0x011E
    11d4:	90 91 1f 01 	lds	r25, 0x011F
    11d8:	bc 01       	movw	r22, r24
    11da:	4f e0       	ldi	r20, 0x0F	; 15
    11dc:	51 e0       	ldi	r21, 0x01	; 1
    11de:	64 9f       	mul	r22, r20
    11e0:	90 01       	movw	r18, r0
    11e2:	65 9f       	mul	r22, r21
    11e4:	30 0d       	add	r19, r0
    11e6:	74 9f       	mul	r23, r20
    11e8:	30 0d       	add	r19, r0
    11ea:	11 24       	eor	r1, r1
    11ec:	24 59       	subi	r18, 0x94	; 148
    11ee:	3e 4f       	sbci	r19, 0xFE	; 254
    11f0:	3a 83       	std	Y+2, r19	; 0x02
    11f2:	29 83       	std	Y+1, r18	; 0x01
    11f4:	01 96       	adiw	r24, 0x01	; 1
    11f6:	90 93 1f 01 	sts	0x011F, r25
    11fa:	80 93 1e 01 	sts	0x011E, r24
	t->fptr = taskptr;
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	9a 81       	ldd	r25, Y+2	; 0x02
    1202:	2b 81       	ldd	r18, Y+3	; 0x03
    1204:	3c 81       	ldd	r19, Y+4	; 0x04
    1206:	fc 01       	movw	r30, r24
    1208:	35 83       	std	Z+5, r19	; 0x05
    120a:	24 83       	std	Z+4, r18	; 0x04
	t->prio = prio;
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	9a 81       	ldd	r25, Y+2	; 0x02
    1210:	2d 81       	ldd	r18, Y+5	; 0x05
    1212:	3e 81       	ldd	r19, Y+6	; 0x06
    1214:	fc 01       	movw	r30, r24
    1216:	33 83       	std	Z+3, r19	; 0x03
    1218:	22 83       	std	Z+2, r18	; 0x02
	t->arg = arg;
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	9a 81       	ldd	r25, Y+2	; 0x02
    121e:	2f 81       	ldd	r18, Y+7	; 0x07
    1220:	38 85       	ldd	r19, Y+8	; 0x08
    1222:	fc 01       	movw	r30, r24
    1224:	37 83       	std	Z+7, r19	; 0x07
    1226:	26 83       	std	Z+6, r18	; 0x06
	t->runflag = 0;
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	9a 81       	ldd	r25, Y+2	; 0x02
    122c:	fc 01       	movw	r30, r24
    122e:	11 82       	std	Z+1, r1	; 0x01
    1230:	10 82       	st	Z, r1
	t->sem_counter = 0;
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	9a 81       	ldd	r25, Y+2	; 0x02
    1236:	83 5f       	subi	r24, 0xF3	; 243
    1238:	9e 4f       	sbci	r25, 0xFE	; 254
    123a:	fc 01       	movw	r30, r24
    123c:	11 82       	std	Z+1, r1	; 0x01
    123e:	10 82       	st	Z, r1
	
	return 0;
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	90 e0       	ldi	r25, 0x00	; 0
}
    1244:	28 96       	adiw	r28, 0x08	; 8
    1246:	0f b6       	in	r0, 0x3f	; 63
    1248:	f8 94       	cli
    124a:	de bf       	out	0x3e, r29	; 62
    124c:	0f be       	out	0x3f, r0	; 63
    124e:	cd bf       	out	0x3d, r28	; 61
    1250:	cf 91       	pop	r28
    1252:	df 91       	pop	r29
    1254:	08 95       	ret

00001256 <OSRun>:

void OSRun()
{
    1256:	df 93       	push	r29
    1258:	cf 93       	push	r28
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
	// start timer 0
	TIMSK0 |= 0b10;
    125e:	8e e6       	ldi	r24, 0x6E	; 110
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	2e e6       	ldi	r18, 0x6E	; 110
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	f9 01       	movw	r30, r18
    1268:	20 81       	ld	r18, Z
    126a:	22 60       	ori	r18, 0x02	; 2
    126c:	fc 01       	movw	r30, r24
    126e:	20 83       	st	Z, r18
	// enable global interrupt
	sei();
    1270:	78 94       	sei
	
	// Starts by executing the first task
	currentTask = 0;
    1272:	10 92 0b 01 	sts	0x010B, r1
    1276:	10 92 0a 01 	sts	0x010A, r1
	runTaskFirstTime(currentTask);
    127a:	80 91 0a 01 	lds	r24, 0x010A
    127e:	90 91 0b 01 	lds	r25, 0x010B
    1282:	0e 94 50 06 	call	0xca0	; 0xca0 <runTaskFirstTime>
    1286:	cf 91       	pop	r28
    1288:	df 91       	pop	r29
    128a:	08 95       	ret

0000128c <setupSerial>:
#define enter_atomic() cli()
#define leave_atomic() sei()

// Set up for 9600 8N1
void setupSerial()
{
    128c:	df 93       	push	r29
    128e:	cf 93       	push	r28
    1290:	cd b7       	in	r28, 0x3d	; 61
    1292:	de b7       	in	r29, 0x3e	; 62
	enter_atomic();
    1294:	f8 94       	cli
	qcount=0;
    1296:	10 92 f3 05 	sts	0x05F3, r1
    129a:	10 92 f2 05 	sts	0x05F2, r1
	qhead=0;
    129e:	10 92 37 06 	sts	0x0637, r1
    12a2:	10 92 36 06 	sts	0x0636, r1
	qtail=0;
    12a6:	10 92 f5 05 	sts	0x05F5, r1
    12aa:	10 92 f4 05 	sts	0x05F4, r1
	lqhead=0;
    12ae:	10 92 ef 05 	sts	0x05EF, r1
    12b2:	10 92 ee 05 	sts	0x05EE, r1
	lqtail=0;
    12b6:	10 92 f1 05 	sts	0x05F1, r1
    12ba:	10 92 f0 05 	sts	0x05F0, r1
	lqcount=0;
    12be:	10 92 ed 05 	sts	0x05ED, r1
    12c2:	10 92 ec 05 	sts	0x05EC, r1

	// Set up baud rate generator. UBBR=16000000/(16*9600)-1 = 103
	UBRR0L=103;
    12c6:	84 ec       	ldi	r24, 0xC4	; 196
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	27 e6       	ldi	r18, 0x67	; 103
    12cc:	fc 01       	movw	r30, r24
    12ce:	20 83       	st	Z, r18
	UBRR0H=0;
    12d0:	85 ec       	ldi	r24, 0xC5	; 197
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	fc 01       	movw	r30, r24
    12d6:	10 82       	st	Z, r1
	
	// Set up 8N1
	UCSR0C=0b110;
    12d8:	82 ec       	ldi	r24, 0xC2	; 194
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	26 e0       	ldi	r18, 0x06	; 6
    12de:	fc 01       	movw	r30, r24
    12e0:	20 83       	st	Z, r18
	
	// Enable RX and TX.
	UCSR0B=0b10011000;
    12e2:	81 ec       	ldi	r24, 0xC1	; 193
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	28 e9       	ldi	r18, 0x98	; 152
    12e8:	fc 01       	movw	r30, r24
    12ea:	20 83       	st	Z, r18
	UCSR0A=0;
    12ec:	80 ec       	ldi	r24, 0xC0	; 192
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	fc 01       	movw	r30, r24
    12f2:	10 82       	st	Z, r1
	leave_atomic();
    12f4:	78 94       	sei
}
    12f6:	cf 91       	pop	r28
    12f8:	df 91       	pop	r29
    12fa:	08 95       	ret

000012fc <__vector_20>:

// ISR for transmit end.
ISR(USART_TX_vect)
{
    12fc:	1f 92       	push	r1
    12fe:	0f 92       	push	r0
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	0f 92       	push	r0
    1304:	11 24       	eor	r1, r1
    1306:	2f 93       	push	r18
    1308:	3f 93       	push	r19
    130a:	5f 93       	push	r21
    130c:	6f 93       	push	r22
    130e:	7f 93       	push	r23
    1310:	8f 93       	push	r24
    1312:	9f 93       	push	r25
    1314:	af 93       	push	r26
    1316:	bf 93       	push	r27
    1318:	ef 93       	push	r30
    131a:	ff 93       	push	r31
    131c:	df 93       	push	r29
    131e:	cf 93       	push	r28
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62

	enter_atomic();
    1324:	f8 94       	cli
	// Disable interrupts. 
	if(qcount==0)
    1326:	80 91 f2 05 	lds	r24, 0x05F2
    132a:	90 91 f3 05 	lds	r25, 0x05F3
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	51 f4       	brne	.+20     	; 0x1346 <__vector_20+0x4a>
		UCSR0B&=0b10111111;
    1332:	81 ec       	ldi	r24, 0xC1	; 193
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	21 ec       	ldi	r18, 0xC1	; 193
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	f9 01       	movw	r30, r18
    133c:	20 81       	ld	r18, Z
    133e:	2f 7b       	andi	r18, 0xBF	; 191
    1340:	fc 01       	movw	r30, r24
    1342:	20 83       	st	Z, r18
    1344:	23 c0       	rjmp	.+70     	; 0x138c <__vector_20+0x90>
	else
	{
		UDR0=q[qtail];
    1346:	86 ec       	ldi	r24, 0xC6	; 198
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	20 91 f4 05 	lds	r18, 0x05F4
    134e:	30 91 f5 05 	lds	r19, 0x05F5
    1352:	2a 50       	subi	r18, 0x0A	; 10
    1354:	3a 4f       	sbci	r19, 0xFA	; 250
    1356:	f9 01       	movw	r30, r18
    1358:	20 81       	ld	r18, Z
    135a:	fc 01       	movw	r30, r24
    135c:	20 83       	st	Z, r18
		qtail=(qtail+1)%QLEN;
    135e:	80 91 f4 05 	lds	r24, 0x05F4
    1362:	90 91 f5 05 	lds	r25, 0x05F5
    1366:	01 96       	adiw	r24, 0x01	; 1
    1368:	20 e4       	ldi	r18, 0x40	; 64
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	b9 01       	movw	r22, r18
    136e:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__divmodhi4>
    1372:	90 93 f5 05 	sts	0x05F5, r25
    1376:	80 93 f4 05 	sts	0x05F4, r24
		qcount--;
    137a:	80 91 f2 05 	lds	r24, 0x05F2
    137e:	90 91 f3 05 	lds	r25, 0x05F3
    1382:	01 97       	sbiw	r24, 0x01	; 1
    1384:	90 93 f3 05 	sts	0x05F3, r25
    1388:	80 93 f2 05 	sts	0x05F2, r24
	}	
	leave_atomic();
    138c:	78 94       	sei
}
    138e:	cf 91       	pop	r28
    1390:	df 91       	pop	r29
    1392:	ff 91       	pop	r31
    1394:	ef 91       	pop	r30
    1396:	bf 91       	pop	r27
    1398:	af 91       	pop	r26
    139a:	9f 91       	pop	r25
    139c:	8f 91       	pop	r24
    139e:	7f 91       	pop	r23
    13a0:	6f 91       	pop	r22
    13a2:	5f 91       	pop	r21
    13a4:	3f 91       	pop	r19
    13a6:	2f 91       	pop	r18
    13a8:	0f 90       	pop	r0
    13aa:	0f be       	out	0x3f, r0	; 63
    13ac:	0f 90       	pop	r0
    13ae:	1f 90       	pop	r1
    13b0:	18 95       	reti

000013b2 <__vector_18>:

// Listener
ISR(USART_RX_vect)
{
    13b2:	1f 92       	push	r1
    13b4:	0f 92       	push	r0
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	0f 92       	push	r0
    13ba:	11 24       	eor	r1, r1
    13bc:	2f 93       	push	r18
    13be:	3f 93       	push	r19
    13c0:	5f 93       	push	r21
    13c2:	6f 93       	push	r22
    13c4:	7f 93       	push	r23
    13c6:	8f 93       	push	r24
    13c8:	9f 93       	push	r25
    13ca:	af 93       	push	r26
    13cc:	bf 93       	push	r27
    13ce:	ef 93       	push	r30
    13d0:	ff 93       	push	r31
    13d2:	df 93       	push	r29
    13d4:	cf 93       	push	r28
    13d6:	0f 92       	push	r0
    13d8:	cd b7       	in	r28, 0x3d	; 61
    13da:	de b7       	in	r29, 0x3e	; 62
	// Guarantee atomicity
	enter_atomic();
    13dc:	f8 94       	cli
		
	// Get the character
	char ch=UDR0;
    13de:	86 ec       	ldi	r24, 0xC6	; 198
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	fc 01       	movw	r30, r24
    13e4:	80 81       	ld	r24, Z
    13e6:	89 83       	std	Y+1, r24	; 0x01
	if(lqcount<LQLEN)
    13e8:	80 91 ec 05 	lds	r24, 0x05EC
    13ec:	90 91 ed 05 	lds	r25, 0x05ED
    13f0:	80 38       	cpi	r24, 0x80	; 128
    13f2:	91 05       	cpc	r25, r1
    13f4:	04 f5       	brge	.+64     	; 0x1436 <__vector_18+0x84>
	{
		lq[lqhead]=ch;
    13f6:	80 91 ee 05 	lds	r24, 0x05EE
    13fa:	90 91 ef 05 	lds	r25, 0x05EF
    13fe:	84 55       	subi	r24, 0x54	; 84
    1400:	9a 4f       	sbci	r25, 0xFA	; 250
    1402:	29 81       	ldd	r18, Y+1	; 0x01
    1404:	fc 01       	movw	r30, r24
    1406:	20 83       	st	Z, r18
		lqhead=(lqhead+1)%LQLEN;
    1408:	80 91 ee 05 	lds	r24, 0x05EE
    140c:	90 91 ef 05 	lds	r25, 0x05EF
    1410:	01 96       	adiw	r24, 0x01	; 1
    1412:	20 e8       	ldi	r18, 0x80	; 128
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	b9 01       	movw	r22, r18
    1418:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__divmodhi4>
    141c:	90 93 ef 05 	sts	0x05EF, r25
    1420:	80 93 ee 05 	sts	0x05EE, r24
		lqcount++;
    1424:	80 91 ec 05 	lds	r24, 0x05EC
    1428:	90 91 ed 05 	lds	r25, 0x05ED
    142c:	01 96       	adiw	r24, 0x01	; 1
    142e:	90 93 ed 05 	sts	0x05ED, r25
    1432:	80 93 ec 05 	sts	0x05EC, r24
	}	
	
	leave_atomic();
    1436:	78 94       	sei
}
    1438:	0f 90       	pop	r0
    143a:	cf 91       	pop	r28
    143c:	df 91       	pop	r29
    143e:	ff 91       	pop	r31
    1440:	ef 91       	pop	r30
    1442:	bf 91       	pop	r27
    1444:	af 91       	pop	r26
    1446:	9f 91       	pop	r25
    1448:	8f 91       	pop	r24
    144a:	7f 91       	pop	r23
    144c:	6f 91       	pop	r22
    144e:	5f 91       	pop	r21
    1450:	3f 91       	pop	r19
    1452:	2f 91       	pop	r18
    1454:	0f 90       	pop	r0
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	0f 90       	pop	r0
    145a:	1f 90       	pop	r1
    145c:	18 95       	reti

0000145e <hear>:

void hear(char *str, int *len)
{
    145e:	df 93       	push	r29
    1460:	cf 93       	push	r28
    1462:	00 d0       	rcall	.+0      	; 0x1464 <hear+0x6>
    1464:	00 d0       	rcall	.+0      	; 0x1466 <hear+0x8>
    1466:	00 d0       	rcall	.+0      	; 0x1468 <hear+0xa>
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
    146c:	9c 83       	std	Y+4, r25	; 0x04
    146e:	8b 83       	std	Y+3, r24	; 0x03
    1470:	7e 83       	std	Y+6, r23	; 0x06
    1472:	6d 83       	std	Y+5, r22	; 0x05
	int i;
	
	enter_atomic();
    1474:	f8 94       	cli
	for(i=0; i<lqcount; i++)
    1476:	1a 82       	std	Y+2, r1	; 0x02
    1478:	19 82       	std	Y+1, r1	; 0x01
    147a:	23 c0       	rjmp	.+70     	; 0x14c2 <hear+0x64>
	{
		str[i]=lq[lqtail];
    147c:	89 81       	ldd	r24, Y+1	; 0x01
    147e:	9a 81       	ldd	r25, Y+2	; 0x02
    1480:	2b 81       	ldd	r18, Y+3	; 0x03
    1482:	3c 81       	ldd	r19, Y+4	; 0x04
    1484:	82 0f       	add	r24, r18
    1486:	93 1f       	adc	r25, r19
    1488:	20 91 f0 05 	lds	r18, 0x05F0
    148c:	30 91 f1 05 	lds	r19, 0x05F1
    1490:	24 55       	subi	r18, 0x54	; 84
    1492:	3a 4f       	sbci	r19, 0xFA	; 250
    1494:	f9 01       	movw	r30, r18
    1496:	20 81       	ld	r18, Z
    1498:	fc 01       	movw	r30, r24
    149a:	20 83       	st	Z, r18
		lqtail=(lqtail+1)%LQLEN;
    149c:	80 91 f0 05 	lds	r24, 0x05F0
    14a0:	90 91 f1 05 	lds	r25, 0x05F1
    14a4:	01 96       	adiw	r24, 0x01	; 1
    14a6:	20 e8       	ldi	r18, 0x80	; 128
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	b9 01       	movw	r22, r18
    14ac:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__divmodhi4>
    14b0:	90 93 f1 05 	sts	0x05F1, r25
    14b4:	80 93 f0 05 	sts	0x05F0, r24
void hear(char *str, int *len)
{
	int i;
	
	enter_atomic();
	for(i=0; i<lqcount; i++)
    14b8:	89 81       	ldd	r24, Y+1	; 0x01
    14ba:	9a 81       	ldd	r25, Y+2	; 0x02
    14bc:	01 96       	adiw	r24, 0x01	; 1
    14be:	9a 83       	std	Y+2, r25	; 0x02
    14c0:	89 83       	std	Y+1, r24	; 0x01
    14c2:	80 91 ec 05 	lds	r24, 0x05EC
    14c6:	90 91 ed 05 	lds	r25, 0x05ED
    14ca:	29 81       	ldd	r18, Y+1	; 0x01
    14cc:	3a 81       	ldd	r19, Y+2	; 0x02
    14ce:	28 17       	cp	r18, r24
    14d0:	39 07       	cpc	r19, r25
    14d2:	a4 f2       	brlt	.-88     	; 0x147c <hear+0x1e>
	{
		str[i]=lq[lqtail];
		lqtail=(lqtail+1)%LQLEN;
	}	
	
	str[lqtail]=0;
    14d4:	80 91 f0 05 	lds	r24, 0x05F0
    14d8:	90 91 f1 05 	lds	r25, 0x05F1
    14dc:	2b 81       	ldd	r18, Y+3	; 0x03
    14de:	3c 81       	ldd	r19, Y+4	; 0x04
    14e0:	82 0f       	add	r24, r18
    14e2:	93 1f       	adc	r25, r19
    14e4:	fc 01       	movw	r30, r24
    14e6:	10 82       	st	Z, r1
	
	*len=lqcount;
    14e8:	20 91 ec 05 	lds	r18, 0x05EC
    14ec:	30 91 ed 05 	lds	r19, 0x05ED
    14f0:	8d 81       	ldd	r24, Y+5	; 0x05
    14f2:	9e 81       	ldd	r25, Y+6	; 0x06
    14f4:	fc 01       	movw	r30, r24
    14f6:	31 83       	std	Z+1, r19	; 0x01
    14f8:	20 83       	st	Z, r18
	lqcount=0;
    14fa:	10 92 ed 05 	sts	0x05ED, r1
    14fe:	10 92 ec 05 	sts	0x05EC, r1
	
	leave_atomic();
    1502:	78 94       	sei
}
    1504:	26 96       	adiw	r28, 0x06	; 6
    1506:	0f b6       	in	r0, 0x3f	; 63
    1508:	f8 94       	cli
    150a:	de bf       	out	0x3e, r29	; 62
    150c:	0f be       	out	0x3f, r0	; 63
    150e:	cd bf       	out	0x3d, r28	; 61
    1510:	cf 91       	pop	r28
    1512:	df 91       	pop	r29
    1514:	08 95       	ret

00001516 <say>:

void say(char *str)
{
    1516:	0f 93       	push	r16
    1518:	1f 93       	push	r17
    151a:	df 93       	push	r29
    151c:	cf 93       	push	r28
    151e:	00 d0       	rcall	.+0      	; 0x1520 <say+0xa>
    1520:	00 d0       	rcall	.+0      	; 0x1522 <say+0xc>
    1522:	cd b7       	in	r28, 0x3d	; 61
    1524:	de b7       	in	r29, 0x3e	; 62
    1526:	9c 83       	std	Y+4, r25	; 0x04
    1528:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	
	// Guarantee atomicity
	enter_atomic();
    152a:	f8 94       	cli
	for(i=0; i<strlen(str) && qcount < QLEN; i++)
    152c:	1a 82       	std	Y+2, r1	; 0x02
    152e:	19 82       	std	Y+1, r1	; 0x01
    1530:	62 c0       	rjmp	.+196    	; 0x15f6 <say+0xe0>
	{
		q[qhead]=str[i];
    1532:	80 91 36 06 	lds	r24, 0x0636
    1536:	90 91 37 06 	lds	r25, 0x0637
    153a:	29 81       	ldd	r18, Y+1	; 0x01
    153c:	3a 81       	ldd	r19, Y+2	; 0x02
    153e:	4b 81       	ldd	r20, Y+3	; 0x03
    1540:	5c 81       	ldd	r21, Y+4	; 0x04
    1542:	24 0f       	add	r18, r20
    1544:	35 1f       	adc	r19, r21
    1546:	f9 01       	movw	r30, r18
    1548:	20 81       	ld	r18, Z
    154a:	8a 50       	subi	r24, 0x0A	; 10
    154c:	9a 4f       	sbci	r25, 0xFA	; 250
    154e:	fc 01       	movw	r30, r24
    1550:	20 83       	st	Z, r18
		qhead=(qhead+1) %QLEN;
    1552:	80 91 36 06 	lds	r24, 0x0636
    1556:	90 91 37 06 	lds	r25, 0x0637
    155a:	01 96       	adiw	r24, 0x01	; 1
    155c:	20 e4       	ldi	r18, 0x40	; 64
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	b9 01       	movw	r22, r18
    1562:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__divmodhi4>
    1566:	90 93 37 06 	sts	0x0637, r25
    156a:	80 93 36 06 	sts	0x0636, r24
		qcount++;			
    156e:	80 91 f2 05 	lds	r24, 0x05F2
    1572:	90 91 f3 05 	lds	r25, 0x05F3
    1576:	01 96       	adiw	r24, 0x01	; 1
    1578:	90 93 f3 05 	sts	0x05F3, r25
    157c:	80 93 f2 05 	sts	0x05F2, r24
	
		if(!(UCSR0B & 0b01000000))
    1580:	81 ec       	ldi	r24, 0xC1	; 193
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	fc 01       	movw	r30, r24
    1586:	80 81       	ld	r24, Z
    1588:	88 2f       	mov	r24, r24
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	80 74       	andi	r24, 0x40	; 64
    158e:	90 70       	andi	r25, 0x00	; 0
    1590:	00 97       	sbiw	r24, 0x00	; 0
    1592:	61 f5       	brne	.+88     	; 0x15ec <say+0xd6>
		{
			UDR0=q[qtail];
    1594:	86 ec       	ldi	r24, 0xC6	; 198
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	20 91 f4 05 	lds	r18, 0x05F4
    159c:	30 91 f5 05 	lds	r19, 0x05F5
    15a0:	2a 50       	subi	r18, 0x0A	; 10
    15a2:	3a 4f       	sbci	r19, 0xFA	; 250
    15a4:	f9 01       	movw	r30, r18
    15a6:	20 81       	ld	r18, Z
    15a8:	fc 01       	movw	r30, r24
    15aa:	20 83       	st	Z, r18
			qtail=(qtail+1)%QLEN;
    15ac:	80 91 f4 05 	lds	r24, 0x05F4
    15b0:	90 91 f5 05 	lds	r25, 0x05F5
    15b4:	01 96       	adiw	r24, 0x01	; 1
    15b6:	20 e4       	ldi	r18, 0x40	; 64
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	b9 01       	movw	r22, r18
    15bc:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__divmodhi4>
    15c0:	90 93 f5 05 	sts	0x05F5, r25
    15c4:	80 93 f4 05 	sts	0x05F4, r24
			qcount--;
    15c8:	80 91 f2 05 	lds	r24, 0x05F2
    15cc:	90 91 f3 05 	lds	r25, 0x05F3
    15d0:	01 97       	sbiw	r24, 0x01	; 1
    15d2:	90 93 f3 05 	sts	0x05F3, r25
    15d6:	80 93 f2 05 	sts	0x05F2, r24
			UCSR0B|=0b01000000;
    15da:	81 ec       	ldi	r24, 0xC1	; 193
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	21 ec       	ldi	r18, 0xC1	; 193
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	f9 01       	movw	r30, r18
    15e4:	20 81       	ld	r18, Z
    15e6:	20 64       	ori	r18, 0x40	; 64
    15e8:	fc 01       	movw	r30, r24
    15ea:	20 83       	st	Z, r18
{
	int i;
	
	// Guarantee atomicity
	enter_atomic();
	for(i=0; i<strlen(str) && qcount < QLEN; i++)
    15ec:	89 81       	ldd	r24, Y+1	; 0x01
    15ee:	9a 81       	ldd	r25, Y+2	; 0x02
    15f0:	01 96       	adiw	r24, 0x01	; 1
    15f2:	9a 83       	std	Y+2, r25	; 0x02
    15f4:	89 83       	std	Y+1, r24	; 0x01
    15f6:	09 81       	ldd	r16, Y+1	; 0x01
    15f8:	1a 81       	ldd	r17, Y+2	; 0x02
    15fa:	8b 81       	ldd	r24, Y+3	; 0x03
    15fc:	9c 81       	ldd	r25, Y+4	; 0x04
    15fe:	0e 94 12 12 	call	0x2424	; 0x2424 <strlen>
    1602:	08 17       	cp	r16, r24
    1604:	19 07       	cpc	r17, r25
    1606:	40 f4       	brcc	.+16     	; 0x1618 <say+0x102>
    1608:	80 91 f2 05 	lds	r24, 0x05F2
    160c:	90 91 f3 05 	lds	r25, 0x05F3
    1610:	80 34       	cpi	r24, 0x40	; 64
    1612:	91 05       	cpc	r25, r1
    1614:	0c f4       	brge	.+2      	; 0x1618 <say+0x102>
    1616:	8d cf       	rjmp	.-230    	; 0x1532 <say+0x1c>
			qtail=(qtail+1)%QLEN;
			qcount--;
			UCSR0B|=0b01000000;
		}
	}
	leave_atomic();
    1618:	78 94       	sei
}
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
    1622:	cf 91       	pop	r28
    1624:	df 91       	pop	r29
    1626:	1f 91       	pop	r17
    1628:	0f 91       	pop	r16
    162a:	08 95       	ret

0000162c <__fixunssfsi>:
    162c:	ef 92       	push	r14
    162e:	ff 92       	push	r15
    1630:	0f 93       	push	r16
    1632:	1f 93       	push	r17
    1634:	7b 01       	movw	r14, r22
    1636:	8c 01       	movw	r16, r24
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	40 e0       	ldi	r20, 0x00	; 0
    163e:	5f e4       	ldi	r21, 0x4F	; 79
    1640:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <__gesf2>
    1644:	87 fd       	sbrc	r24, 7
    1646:	11 c0       	rjmp	.+34     	; 0x166a <__fixunssfsi+0x3e>
    1648:	c8 01       	movw	r24, r16
    164a:	b7 01       	movw	r22, r14
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	40 e0       	ldi	r20, 0x00	; 0
    1652:	5f e4       	ldi	r21, 0x4F	; 79
    1654:	0e 94 b9 0c 	call	0x1972	; 0x1972 <__subsf3>
    1658:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__fixsfsi>
    165c:	9b 01       	movw	r18, r22
    165e:	ac 01       	movw	r20, r24
    1660:	20 50       	subi	r18, 0x00	; 0
    1662:	30 40       	sbci	r19, 0x00	; 0
    1664:	40 40       	sbci	r20, 0x00	; 0
    1666:	50 48       	sbci	r21, 0x80	; 128
    1668:	06 c0       	rjmp	.+12     	; 0x1676 <__fixunssfsi+0x4a>
    166a:	c8 01       	movw	r24, r16
    166c:	b7 01       	movw	r22, r14
    166e:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <__fixsfsi>
    1672:	9b 01       	movw	r18, r22
    1674:	ac 01       	movw	r20, r24
    1676:	b9 01       	movw	r22, r18
    1678:	ca 01       	movw	r24, r20
    167a:	1f 91       	pop	r17
    167c:	0f 91       	pop	r16
    167e:	ff 90       	pop	r15
    1680:	ef 90       	pop	r14
    1682:	08 95       	ret

00001684 <_fpadd_parts>:
    1684:	a0 e0       	ldi	r26, 0x00	; 0
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	e8 e4       	ldi	r30, 0x48	; 72
    168a:	fb e0       	ldi	r31, 0x0B	; 11
    168c:	0c 94 81 10 	jmp	0x2102	; 0x2102 <__prologue_saves__+0x8>
    1690:	fc 01       	movw	r30, r24
    1692:	ea 01       	movw	r28, r20
    1694:	80 81       	ld	r24, Z
    1696:	82 30       	cpi	r24, 0x02	; 2
    1698:	08 f4       	brcc	.+2      	; 0x169c <_fpadd_parts+0x18>
    169a:	38 c1       	rjmp	.+624    	; 0x190c <_fpadd_parts+0x288>
    169c:	db 01       	movw	r26, r22
    169e:	9c 91       	ld	r25, X
    16a0:	92 30       	cpi	r25, 0x02	; 2
    16a2:	08 f4       	brcc	.+2      	; 0x16a6 <_fpadd_parts+0x22>
    16a4:	30 c1       	rjmp	.+608    	; 0x1906 <_fpadd_parts+0x282>
    16a6:	84 30       	cpi	r24, 0x04	; 4
    16a8:	59 f4       	brne	.+22     	; 0x16c0 <_fpadd_parts+0x3c>
    16aa:	94 30       	cpi	r25, 0x04	; 4
    16ac:	09 f0       	breq	.+2      	; 0x16b0 <_fpadd_parts+0x2c>
    16ae:	2e c1       	rjmp	.+604    	; 0x190c <_fpadd_parts+0x288>
    16b0:	91 81       	ldd	r25, Z+1	; 0x01
    16b2:	11 96       	adiw	r26, 0x01	; 1
    16b4:	8c 91       	ld	r24, X
    16b6:	11 97       	sbiw	r26, 0x01	; 1
    16b8:	98 17       	cp	r25, r24
    16ba:	09 f0       	breq	.+2      	; 0x16be <_fpadd_parts+0x3a>
    16bc:	21 c1       	rjmp	.+578    	; 0x1900 <_fpadd_parts+0x27c>
    16be:	26 c1       	rjmp	.+588    	; 0x190c <_fpadd_parts+0x288>
    16c0:	94 30       	cpi	r25, 0x04	; 4
    16c2:	09 f4       	brne	.+2      	; 0x16c6 <_fpadd_parts+0x42>
    16c4:	20 c1       	rjmp	.+576    	; 0x1906 <_fpadd_parts+0x282>
    16c6:	92 30       	cpi	r25, 0x02	; 2
    16c8:	b1 f4       	brne	.+44     	; 0x16f6 <_fpadd_parts+0x72>
    16ca:	82 30       	cpi	r24, 0x02	; 2
    16cc:	09 f0       	breq	.+2      	; 0x16d0 <_fpadd_parts+0x4c>
    16ce:	1e c1       	rjmp	.+572    	; 0x190c <_fpadd_parts+0x288>
    16d0:	ca 01       	movw	r24, r20
    16d2:	af 01       	movw	r20, r30
    16d4:	28 e0       	ldi	r18, 0x08	; 8
    16d6:	da 01       	movw	r26, r20
    16d8:	0d 90       	ld	r0, X+
    16da:	ad 01       	movw	r20, r26
    16dc:	dc 01       	movw	r26, r24
    16de:	0d 92       	st	X+, r0
    16e0:	cd 01       	movw	r24, r26
    16e2:	21 50       	subi	r18, 0x01	; 1
    16e4:	c1 f7       	brne	.-16     	; 0x16d6 <_fpadd_parts+0x52>
    16e6:	db 01       	movw	r26, r22
    16e8:	11 96       	adiw	r26, 0x01	; 1
    16ea:	8c 91       	ld	r24, X
    16ec:	11 97       	sbiw	r26, 0x01	; 1
    16ee:	91 81       	ldd	r25, Z+1	; 0x01
    16f0:	89 23       	and	r24, r25
    16f2:	89 83       	std	Y+1, r24	; 0x01
    16f4:	0a c1       	rjmp	.+532    	; 0x190a <_fpadd_parts+0x286>
    16f6:	82 30       	cpi	r24, 0x02	; 2
    16f8:	09 f4       	brne	.+2      	; 0x16fc <_fpadd_parts+0x78>
    16fa:	05 c1       	rjmp	.+522    	; 0x1906 <_fpadd_parts+0x282>
    16fc:	c2 80       	ldd	r12, Z+2	; 0x02
    16fe:	d3 80       	ldd	r13, Z+3	; 0x03
    1700:	db 01       	movw	r26, r22
    1702:	12 96       	adiw	r26, 0x02	; 2
    1704:	6d 90       	ld	r6, X+
    1706:	7c 90       	ld	r7, X
    1708:	13 97       	sbiw	r26, 0x03	; 3
    170a:	24 81       	ldd	r18, Z+4	; 0x04
    170c:	35 81       	ldd	r19, Z+5	; 0x05
    170e:	46 81       	ldd	r20, Z+6	; 0x06
    1710:	57 81       	ldd	r21, Z+7	; 0x07
    1712:	14 96       	adiw	r26, 0x04	; 4
    1714:	ed 90       	ld	r14, X+
    1716:	fd 90       	ld	r15, X+
    1718:	0d 91       	ld	r16, X+
    171a:	1c 91       	ld	r17, X
    171c:	17 97       	sbiw	r26, 0x07	; 7
    171e:	c6 01       	movw	r24, r12
    1720:	86 19       	sub	r24, r6
    1722:	97 09       	sbc	r25, r7
    1724:	5c 01       	movw	r10, r24
    1726:	97 ff       	sbrs	r25, 7
    1728:	04 c0       	rjmp	.+8      	; 0x1732 <_fpadd_parts+0xae>
    172a:	aa 24       	eor	r10, r10
    172c:	bb 24       	eor	r11, r11
    172e:	a8 1a       	sub	r10, r24
    1730:	b9 0a       	sbc	r11, r25
    1732:	b0 e2       	ldi	r27, 0x20	; 32
    1734:	ab 16       	cp	r10, r27
    1736:	b1 04       	cpc	r11, r1
    1738:	0c f0       	brlt	.+2      	; 0x173c <_fpadd_parts+0xb8>
    173a:	61 c0       	rjmp	.+194    	; 0x17fe <_fpadd_parts+0x17a>
    173c:	18 16       	cp	r1, r24
    173e:	19 06       	cpc	r1, r25
    1740:	6c f5       	brge	.+90     	; 0x179c <_fpadd_parts+0x118>
    1742:	37 01       	movw	r6, r14
    1744:	48 01       	movw	r8, r16
    1746:	0a 2c       	mov	r0, r10
    1748:	04 c0       	rjmp	.+8      	; 0x1752 <_fpadd_parts+0xce>
    174a:	96 94       	lsr	r9
    174c:	87 94       	ror	r8
    174e:	77 94       	ror	r7
    1750:	67 94       	ror	r6
    1752:	0a 94       	dec	r0
    1754:	d2 f7       	brpl	.-12     	; 0x174a <_fpadd_parts+0xc6>
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	a0 e0       	ldi	r26, 0x00	; 0
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	0a 2c       	mov	r0, r10
    1760:	04 c0       	rjmp	.+8      	; 0x176a <_fpadd_parts+0xe6>
    1762:	88 0f       	add	r24, r24
    1764:	99 1f       	adc	r25, r25
    1766:	aa 1f       	adc	r26, r26
    1768:	bb 1f       	adc	r27, r27
    176a:	0a 94       	dec	r0
    176c:	d2 f7       	brpl	.-12     	; 0x1762 <_fpadd_parts+0xde>
    176e:	01 97       	sbiw	r24, 0x01	; 1
    1770:	a1 09       	sbc	r26, r1
    1772:	b1 09       	sbc	r27, r1
    1774:	8e 21       	and	r24, r14
    1776:	9f 21       	and	r25, r15
    1778:	a0 23       	and	r26, r16
    177a:	b1 23       	and	r27, r17
    177c:	ee 24       	eor	r14, r14
    177e:	ff 24       	eor	r15, r15
    1780:	87 01       	movw	r16, r14
    1782:	e3 94       	inc	r14
    1784:	00 97       	sbiw	r24, 0x00	; 0
    1786:	a1 05       	cpc	r26, r1
    1788:	b1 05       	cpc	r27, r1
    178a:	19 f4       	brne	.+6      	; 0x1792 <_fpadd_parts+0x10e>
    178c:	ee 24       	eor	r14, r14
    178e:	ff 24       	eor	r15, r15
    1790:	87 01       	movw	r16, r14
    1792:	e6 28       	or	r14, r6
    1794:	f7 28       	or	r15, r7
    1796:	08 29       	or	r16, r8
    1798:	19 29       	or	r17, r9
    179a:	3c c0       	rjmp	.+120    	; 0x1814 <_fpadd_parts+0x190>
    179c:	00 97       	sbiw	r24, 0x00	; 0
    179e:	d1 f1       	breq	.+116    	; 0x1814 <_fpadd_parts+0x190>
    17a0:	ca 0c       	add	r12, r10
    17a2:	db 1c       	adc	r13, r11
    17a4:	39 01       	movw	r6, r18
    17a6:	4a 01       	movw	r8, r20
    17a8:	0a 2c       	mov	r0, r10
    17aa:	04 c0       	rjmp	.+8      	; 0x17b4 <_fpadd_parts+0x130>
    17ac:	96 94       	lsr	r9
    17ae:	87 94       	ror	r8
    17b0:	77 94       	ror	r7
    17b2:	67 94       	ror	r6
    17b4:	0a 94       	dec	r0
    17b6:	d2 f7       	brpl	.-12     	; 0x17ac <_fpadd_parts+0x128>
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	a0 e0       	ldi	r26, 0x00	; 0
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	0a 2c       	mov	r0, r10
    17c2:	04 c0       	rjmp	.+8      	; 0x17cc <_fpadd_parts+0x148>
    17c4:	88 0f       	add	r24, r24
    17c6:	99 1f       	adc	r25, r25
    17c8:	aa 1f       	adc	r26, r26
    17ca:	bb 1f       	adc	r27, r27
    17cc:	0a 94       	dec	r0
    17ce:	d2 f7       	brpl	.-12     	; 0x17c4 <_fpadd_parts+0x140>
    17d0:	01 97       	sbiw	r24, 0x01	; 1
    17d2:	a1 09       	sbc	r26, r1
    17d4:	b1 09       	sbc	r27, r1
    17d6:	82 23       	and	r24, r18
    17d8:	93 23       	and	r25, r19
    17da:	a4 23       	and	r26, r20
    17dc:	b5 23       	and	r27, r21
    17de:	21 e0       	ldi	r18, 0x01	; 1
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	40 e0       	ldi	r20, 0x00	; 0
    17e4:	50 e0       	ldi	r21, 0x00	; 0
    17e6:	00 97       	sbiw	r24, 0x00	; 0
    17e8:	a1 05       	cpc	r26, r1
    17ea:	b1 05       	cpc	r27, r1
    17ec:	19 f4       	brne	.+6      	; 0x17f4 <_fpadd_parts+0x170>
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	a9 01       	movw	r20, r18
    17f4:	26 29       	or	r18, r6
    17f6:	37 29       	or	r19, r7
    17f8:	48 29       	or	r20, r8
    17fa:	59 29       	or	r21, r9
    17fc:	0b c0       	rjmp	.+22     	; 0x1814 <_fpadd_parts+0x190>
    17fe:	6c 14       	cp	r6, r12
    1800:	7d 04       	cpc	r7, r13
    1802:	24 f4       	brge	.+8      	; 0x180c <_fpadd_parts+0x188>
    1804:	ee 24       	eor	r14, r14
    1806:	ff 24       	eor	r15, r15
    1808:	87 01       	movw	r16, r14
    180a:	04 c0       	rjmp	.+8      	; 0x1814 <_fpadd_parts+0x190>
    180c:	63 01       	movw	r12, r6
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	a9 01       	movw	r20, r18
    1814:	81 81       	ldd	r24, Z+1	; 0x01
    1816:	fb 01       	movw	r30, r22
    1818:	91 81       	ldd	r25, Z+1	; 0x01
    181a:	89 17       	cp	r24, r25
    181c:	09 f4       	brne	.+2      	; 0x1820 <_fpadd_parts+0x19c>
    181e:	45 c0       	rjmp	.+138    	; 0x18aa <_fpadd_parts+0x226>
    1820:	88 23       	and	r24, r24
    1822:	49 f0       	breq	.+18     	; 0x1836 <_fpadd_parts+0x1b2>
    1824:	d8 01       	movw	r26, r16
    1826:	c7 01       	movw	r24, r14
    1828:	82 1b       	sub	r24, r18
    182a:	93 0b       	sbc	r25, r19
    182c:	a4 0b       	sbc	r26, r20
    182e:	b5 0b       	sbc	r27, r21
    1830:	9c 01       	movw	r18, r24
    1832:	ad 01       	movw	r20, r26
    1834:	04 c0       	rjmp	.+8      	; 0x183e <_fpadd_parts+0x1ba>
    1836:	2e 19       	sub	r18, r14
    1838:	3f 09       	sbc	r19, r15
    183a:	40 0b       	sbc	r20, r16
    183c:	51 0b       	sbc	r21, r17
    183e:	57 fd       	sbrc	r21, 7
    1840:	04 c0       	rjmp	.+8      	; 0x184a <_fpadd_parts+0x1c6>
    1842:	19 82       	std	Y+1, r1	; 0x01
    1844:	db 82       	std	Y+3, r13	; 0x03
    1846:	ca 82       	std	Y+2, r12	; 0x02
    1848:	0b c0       	rjmp	.+22     	; 0x1860 <_fpadd_parts+0x1dc>
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	89 83       	std	Y+1, r24	; 0x01
    184e:	db 82       	std	Y+3, r13	; 0x03
    1850:	ca 82       	std	Y+2, r12	; 0x02
    1852:	50 95       	com	r21
    1854:	40 95       	com	r20
    1856:	30 95       	com	r19
    1858:	21 95       	neg	r18
    185a:	3f 4f       	sbci	r19, 0xFF	; 255
    185c:	4f 4f       	sbci	r20, 0xFF	; 255
    185e:	5f 4f       	sbci	r21, 0xFF	; 255
    1860:	2c 83       	std	Y+4, r18	; 0x04
    1862:	3d 83       	std	Y+5, r19	; 0x05
    1864:	4e 83       	std	Y+6, r20	; 0x06
    1866:	5f 83       	std	Y+7, r21	; 0x07
    1868:	0d c0       	rjmp	.+26     	; 0x1884 <_fpadd_parts+0x200>
    186a:	88 0f       	add	r24, r24
    186c:	99 1f       	adc	r25, r25
    186e:	aa 1f       	adc	r26, r26
    1870:	bb 1f       	adc	r27, r27
    1872:	8c 83       	std	Y+4, r24	; 0x04
    1874:	9d 83       	std	Y+5, r25	; 0x05
    1876:	ae 83       	std	Y+6, r26	; 0x06
    1878:	bf 83       	std	Y+7, r27	; 0x07
    187a:	8a 81       	ldd	r24, Y+2	; 0x02
    187c:	9b 81       	ldd	r25, Y+3	; 0x03
    187e:	01 97       	sbiw	r24, 0x01	; 1
    1880:	9b 83       	std	Y+3, r25	; 0x03
    1882:	8a 83       	std	Y+2, r24	; 0x02
    1884:	8c 81       	ldd	r24, Y+4	; 0x04
    1886:	9d 81       	ldd	r25, Y+5	; 0x05
    1888:	ae 81       	ldd	r26, Y+6	; 0x06
    188a:	bf 81       	ldd	r27, Y+7	; 0x07
    188c:	9c 01       	movw	r18, r24
    188e:	ad 01       	movw	r20, r26
    1890:	21 50       	subi	r18, 0x01	; 1
    1892:	30 40       	sbci	r19, 0x00	; 0
    1894:	40 40       	sbci	r20, 0x00	; 0
    1896:	50 40       	sbci	r21, 0x00	; 0
    1898:	2f 3f       	cpi	r18, 0xFF	; 255
    189a:	ef ef       	ldi	r30, 0xFF	; 255
    189c:	3e 07       	cpc	r19, r30
    189e:	ef ef       	ldi	r30, 0xFF	; 255
    18a0:	4e 07       	cpc	r20, r30
    18a2:	ef e3       	ldi	r30, 0x3F	; 63
    18a4:	5e 07       	cpc	r21, r30
    18a6:	08 f3       	brcs	.-62     	; 0x186a <_fpadd_parts+0x1e6>
    18a8:	0b c0       	rjmp	.+22     	; 0x18c0 <_fpadd_parts+0x23c>
    18aa:	89 83       	std	Y+1, r24	; 0x01
    18ac:	db 82       	std	Y+3, r13	; 0x03
    18ae:	ca 82       	std	Y+2, r12	; 0x02
    18b0:	2e 0d       	add	r18, r14
    18b2:	3f 1d       	adc	r19, r15
    18b4:	40 1f       	adc	r20, r16
    18b6:	51 1f       	adc	r21, r17
    18b8:	2c 83       	std	Y+4, r18	; 0x04
    18ba:	3d 83       	std	Y+5, r19	; 0x05
    18bc:	4e 83       	std	Y+6, r20	; 0x06
    18be:	5f 83       	std	Y+7, r21	; 0x07
    18c0:	83 e0       	ldi	r24, 0x03	; 3
    18c2:	88 83       	st	Y, r24
    18c4:	2c 81       	ldd	r18, Y+4	; 0x04
    18c6:	3d 81       	ldd	r19, Y+5	; 0x05
    18c8:	4e 81       	ldd	r20, Y+6	; 0x06
    18ca:	5f 81       	ldd	r21, Y+7	; 0x07
    18cc:	57 ff       	sbrs	r21, 7
    18ce:	1d c0       	rjmp	.+58     	; 0x190a <_fpadd_parts+0x286>
    18d0:	da 01       	movw	r26, r20
    18d2:	c9 01       	movw	r24, r18
    18d4:	81 70       	andi	r24, 0x01	; 1
    18d6:	90 70       	andi	r25, 0x00	; 0
    18d8:	a0 70       	andi	r26, 0x00	; 0
    18da:	b0 70       	andi	r27, 0x00	; 0
    18dc:	56 95       	lsr	r21
    18de:	47 95       	ror	r20
    18e0:	37 95       	ror	r19
    18e2:	27 95       	ror	r18
    18e4:	82 2b       	or	r24, r18
    18e6:	93 2b       	or	r25, r19
    18e8:	a4 2b       	or	r26, r20
    18ea:	b5 2b       	or	r27, r21
    18ec:	8c 83       	std	Y+4, r24	; 0x04
    18ee:	9d 83       	std	Y+5, r25	; 0x05
    18f0:	ae 83       	std	Y+6, r26	; 0x06
    18f2:	bf 83       	std	Y+7, r27	; 0x07
    18f4:	8a 81       	ldd	r24, Y+2	; 0x02
    18f6:	9b 81       	ldd	r25, Y+3	; 0x03
    18f8:	01 96       	adiw	r24, 0x01	; 1
    18fa:	9b 83       	std	Y+3, r25	; 0x03
    18fc:	8a 83       	std	Y+2, r24	; 0x02
    18fe:	05 c0       	rjmp	.+10     	; 0x190a <_fpadd_parts+0x286>
    1900:	ec e0       	ldi	r30, 0x0C	; 12
    1902:	f1 e0       	ldi	r31, 0x01	; 1
    1904:	03 c0       	rjmp	.+6      	; 0x190c <_fpadd_parts+0x288>
    1906:	fb 01       	movw	r30, r22
    1908:	01 c0       	rjmp	.+2      	; 0x190c <_fpadd_parts+0x288>
    190a:	fe 01       	movw	r30, r28
    190c:	cf 01       	movw	r24, r30
    190e:	cd b7       	in	r28, 0x3d	; 61
    1910:	de b7       	in	r29, 0x3e	; 62
    1912:	ee e0       	ldi	r30, 0x0E	; 14
    1914:	0c 94 9d 10 	jmp	0x213a	; 0x213a <__epilogue_restores__+0x8>

00001918 <__addsf3>:
    1918:	a0 e2       	ldi	r26, 0x20	; 32
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	e2 e9       	ldi	r30, 0x92	; 146
    191e:	fc e0       	ldi	r31, 0x0C	; 12
    1920:	0c 94 89 10 	jmp	0x2112	; 0x2112 <__prologue_saves__+0x18>
    1924:	69 83       	std	Y+1, r22	; 0x01
    1926:	7a 83       	std	Y+2, r23	; 0x02
    1928:	8b 83       	std	Y+3, r24	; 0x03
    192a:	9c 83       	std	Y+4, r25	; 0x04
    192c:	2d 83       	std	Y+5, r18	; 0x05
    192e:	3e 83       	std	Y+6, r19	; 0x06
    1930:	4f 83       	std	Y+7, r20	; 0x07
    1932:	58 87       	std	Y+8, r21	; 0x08
    1934:	89 e0       	ldi	r24, 0x09	; 9
    1936:	e8 2e       	mov	r14, r24
    1938:	f1 2c       	mov	r15, r1
    193a:	ec 0e       	add	r14, r28
    193c:	fd 1e       	adc	r15, r29
    193e:	ce 01       	movw	r24, r28
    1940:	01 96       	adiw	r24, 0x01	; 1
    1942:	b7 01       	movw	r22, r14
    1944:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__unpack_f>
    1948:	8e 01       	movw	r16, r28
    194a:	0f 5e       	subi	r16, 0xEF	; 239
    194c:	1f 4f       	sbci	r17, 0xFF	; 255
    194e:	ce 01       	movw	r24, r28
    1950:	05 96       	adiw	r24, 0x05	; 5
    1952:	b8 01       	movw	r22, r16
    1954:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__unpack_f>
    1958:	c7 01       	movw	r24, r14
    195a:	b8 01       	movw	r22, r16
    195c:	ae 01       	movw	r20, r28
    195e:	47 5e       	subi	r20, 0xE7	; 231
    1960:	5f 4f       	sbci	r21, 0xFF	; 255
    1962:	0e 94 42 0b 	call	0x1684	; 0x1684 <_fpadd_parts>
    1966:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <__pack_f>
    196a:	a0 96       	adiw	r28, 0x20	; 32
    196c:	e6 e0       	ldi	r30, 0x06	; 6
    196e:	0c 94 a5 10 	jmp	0x214a	; 0x214a <__epilogue_restores__+0x18>

00001972 <__subsf3>:
    1972:	a0 e2       	ldi	r26, 0x20	; 32
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	ef eb       	ldi	r30, 0xBF	; 191
    1978:	fc e0       	ldi	r31, 0x0C	; 12
    197a:	0c 94 89 10 	jmp	0x2112	; 0x2112 <__prologue_saves__+0x18>
    197e:	69 83       	std	Y+1, r22	; 0x01
    1980:	7a 83       	std	Y+2, r23	; 0x02
    1982:	8b 83       	std	Y+3, r24	; 0x03
    1984:	9c 83       	std	Y+4, r25	; 0x04
    1986:	2d 83       	std	Y+5, r18	; 0x05
    1988:	3e 83       	std	Y+6, r19	; 0x06
    198a:	4f 83       	std	Y+7, r20	; 0x07
    198c:	58 87       	std	Y+8, r21	; 0x08
    198e:	8e 01       	movw	r16, r28
    1990:	07 5f       	subi	r16, 0xF7	; 247
    1992:	1f 4f       	sbci	r17, 0xFF	; 255
    1994:	ce 01       	movw	r24, r28
    1996:	01 96       	adiw	r24, 0x01	; 1
    1998:	b8 01       	movw	r22, r16
    199a:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__unpack_f>
    199e:	91 e1       	ldi	r25, 0x11	; 17
    19a0:	e9 2e       	mov	r14, r25
    19a2:	f1 2c       	mov	r15, r1
    19a4:	ec 0e       	add	r14, r28
    19a6:	fd 1e       	adc	r15, r29
    19a8:	ce 01       	movw	r24, r28
    19aa:	05 96       	adiw	r24, 0x05	; 5
    19ac:	b7 01       	movw	r22, r14
    19ae:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__unpack_f>
    19b2:	8a 89       	ldd	r24, Y+18	; 0x12
    19b4:	91 e0       	ldi	r25, 0x01	; 1
    19b6:	89 27       	eor	r24, r25
    19b8:	8a 8b       	std	Y+18, r24	; 0x12
    19ba:	c8 01       	movw	r24, r16
    19bc:	b7 01       	movw	r22, r14
    19be:	ae 01       	movw	r20, r28
    19c0:	47 5e       	subi	r20, 0xE7	; 231
    19c2:	5f 4f       	sbci	r21, 0xFF	; 255
    19c4:	0e 94 42 0b 	call	0x1684	; 0x1684 <_fpadd_parts>
    19c8:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <__pack_f>
    19cc:	a0 96       	adiw	r28, 0x20	; 32
    19ce:	e6 e0       	ldi	r30, 0x06	; 6
    19d0:	0c 94 a5 10 	jmp	0x214a	; 0x214a <__epilogue_restores__+0x18>

000019d4 <__mulsf3>:
    19d4:	a0 e2       	ldi	r26, 0x20	; 32
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	e0 ef       	ldi	r30, 0xF0	; 240
    19da:	fc e0       	ldi	r31, 0x0C	; 12
    19dc:	0c 94 7d 10 	jmp	0x20fa	; 0x20fa <__prologue_saves__>
    19e0:	69 83       	std	Y+1, r22	; 0x01
    19e2:	7a 83       	std	Y+2, r23	; 0x02
    19e4:	8b 83       	std	Y+3, r24	; 0x03
    19e6:	9c 83       	std	Y+4, r25	; 0x04
    19e8:	2d 83       	std	Y+5, r18	; 0x05
    19ea:	3e 83       	std	Y+6, r19	; 0x06
    19ec:	4f 83       	std	Y+7, r20	; 0x07
    19ee:	58 87       	std	Y+8, r21	; 0x08
    19f0:	ce 01       	movw	r24, r28
    19f2:	01 96       	adiw	r24, 0x01	; 1
    19f4:	be 01       	movw	r22, r28
    19f6:	67 5f       	subi	r22, 0xF7	; 247
    19f8:	7f 4f       	sbci	r23, 0xFF	; 255
    19fa:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__unpack_f>
    19fe:	ce 01       	movw	r24, r28
    1a00:	05 96       	adiw	r24, 0x05	; 5
    1a02:	be 01       	movw	r22, r28
    1a04:	6f 5e       	subi	r22, 0xEF	; 239
    1a06:	7f 4f       	sbci	r23, 0xFF	; 255
    1a08:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__unpack_f>
    1a0c:	99 85       	ldd	r25, Y+9	; 0x09
    1a0e:	92 30       	cpi	r25, 0x02	; 2
    1a10:	78 f0       	brcs	.+30     	; 0x1a30 <__mulsf3+0x5c>
    1a12:	89 89       	ldd	r24, Y+17	; 0x11
    1a14:	82 30       	cpi	r24, 0x02	; 2
    1a16:	c0 f0       	brcs	.+48     	; 0x1a48 <__mulsf3+0x74>
    1a18:	94 30       	cpi	r25, 0x04	; 4
    1a1a:	19 f4       	brne	.+6      	; 0x1a22 <__mulsf3+0x4e>
    1a1c:	82 30       	cpi	r24, 0x02	; 2
    1a1e:	41 f4       	brne	.+16     	; 0x1a30 <__mulsf3+0x5c>
    1a20:	cb c0       	rjmp	.+406    	; 0x1bb8 <__mulsf3+0x1e4>
    1a22:	84 30       	cpi	r24, 0x04	; 4
    1a24:	19 f4       	brne	.+6      	; 0x1a2c <__mulsf3+0x58>
    1a26:	92 30       	cpi	r25, 0x02	; 2
    1a28:	79 f4       	brne	.+30     	; 0x1a48 <__mulsf3+0x74>
    1a2a:	c6 c0       	rjmp	.+396    	; 0x1bb8 <__mulsf3+0x1e4>
    1a2c:	92 30       	cpi	r25, 0x02	; 2
    1a2e:	51 f4       	brne	.+20     	; 0x1a44 <__mulsf3+0x70>
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a34:	9a 89       	ldd	r25, Y+18	; 0x12
    1a36:	29 17       	cp	r18, r25
    1a38:	09 f4       	brne	.+2      	; 0x1a3c <__mulsf3+0x68>
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	8a 87       	std	Y+10, r24	; 0x0a
    1a3e:	ce 01       	movw	r24, r28
    1a40:	09 96       	adiw	r24, 0x09	; 9
    1a42:	bc c0       	rjmp	.+376    	; 0x1bbc <__mulsf3+0x1e8>
    1a44:	82 30       	cpi	r24, 0x02	; 2
    1a46:	51 f4       	brne	.+20     	; 0x1a5c <__mulsf3+0x88>
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a4c:	9a 89       	ldd	r25, Y+18	; 0x12
    1a4e:	29 17       	cp	r18, r25
    1a50:	09 f4       	brne	.+2      	; 0x1a54 <__mulsf3+0x80>
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	8a 8b       	std	Y+18, r24	; 0x12
    1a56:	ce 01       	movw	r24, r28
    1a58:	41 96       	adiw	r24, 0x11	; 17
    1a5a:	b0 c0       	rjmp	.+352    	; 0x1bbc <__mulsf3+0x1e8>
    1a5c:	6d 84       	ldd	r6, Y+13	; 0x0d
    1a5e:	7e 84       	ldd	r7, Y+14	; 0x0e
    1a60:	8f 84       	ldd	r8, Y+15	; 0x0f
    1a62:	98 88       	ldd	r9, Y+16	; 0x10
    1a64:	ed 88       	ldd	r14, Y+21	; 0x15
    1a66:	fe 88       	ldd	r15, Y+22	; 0x16
    1a68:	0f 89       	ldd	r16, Y+23	; 0x17
    1a6a:	18 8d       	ldd	r17, Y+24	; 0x18
    1a6c:	e0 e2       	ldi	r30, 0x20	; 32
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 e0       	ldi	r24, 0x00	; 0
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	dc 01       	movw	r26, r24
    1a76:	aa 24       	eor	r10, r10
    1a78:	bb 24       	eor	r11, r11
    1a7a:	65 01       	movw	r12, r10
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	a9 01       	movw	r20, r18
    1a82:	b3 01       	movw	r22, r6
    1a84:	61 70       	andi	r22, 0x01	; 1
    1a86:	70 70       	andi	r23, 0x00	; 0
    1a88:	61 15       	cp	r22, r1
    1a8a:	71 05       	cpc	r23, r1
    1a8c:	d1 f0       	breq	.+52     	; 0x1ac2 <__mulsf3+0xee>
    1a8e:	2e 0d       	add	r18, r14
    1a90:	3f 1d       	adc	r19, r15
    1a92:	40 1f       	adc	r20, r16
    1a94:	51 1f       	adc	r21, r17
    1a96:	15 01       	movw	r2, r10
    1a98:	26 01       	movw	r4, r12
    1a9a:	28 0e       	add	r2, r24
    1a9c:	39 1e       	adc	r3, r25
    1a9e:	4a 1e       	adc	r4, r26
    1aa0:	5b 1e       	adc	r5, r27
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	a0 e0       	ldi	r26, 0x00	; 0
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	2e 15       	cp	r18, r14
    1aac:	3f 05       	cpc	r19, r15
    1aae:	40 07       	cpc	r20, r16
    1ab0:	51 07       	cpc	r21, r17
    1ab2:	18 f0       	brcs	.+6      	; 0x1aba <__mulsf3+0xe6>
    1ab4:	80 e0       	ldi	r24, 0x00	; 0
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	dc 01       	movw	r26, r24
    1aba:	82 0d       	add	r24, r2
    1abc:	93 1d       	adc	r25, r3
    1abe:	a4 1d       	adc	r26, r4
    1ac0:	b5 1d       	adc	r27, r5
    1ac2:	aa 0c       	add	r10, r10
    1ac4:	bb 1c       	adc	r11, r11
    1ac6:	cc 1c       	adc	r12, r12
    1ac8:	dd 1c       	adc	r13, r13
    1aca:	17 ff       	sbrs	r17, 7
    1acc:	09 c0       	rjmp	.+18     	; 0x1ae0 <__mulsf3+0x10c>
    1ace:	61 e0       	ldi	r22, 0x01	; 1
    1ad0:	26 2e       	mov	r2, r22
    1ad2:	31 2c       	mov	r3, r1
    1ad4:	41 2c       	mov	r4, r1
    1ad6:	51 2c       	mov	r5, r1
    1ad8:	a2 28       	or	r10, r2
    1ada:	b3 28       	or	r11, r3
    1adc:	c4 28       	or	r12, r4
    1ade:	d5 28       	or	r13, r5
    1ae0:	31 97       	sbiw	r30, 0x01	; 1
    1ae2:	49 f0       	breq	.+18     	; 0x1af6 <__mulsf3+0x122>
    1ae4:	ee 0c       	add	r14, r14
    1ae6:	ff 1c       	adc	r15, r15
    1ae8:	00 1f       	adc	r16, r16
    1aea:	11 1f       	adc	r17, r17
    1aec:	96 94       	lsr	r9
    1aee:	87 94       	ror	r8
    1af0:	77 94       	ror	r7
    1af2:	67 94       	ror	r6
    1af4:	c6 cf       	rjmp	.-116    	; 0x1a82 <__mulsf3+0xae>
    1af6:	6b 89       	ldd	r22, Y+19	; 0x13
    1af8:	7c 89       	ldd	r23, Y+20	; 0x14
    1afa:	eb 85       	ldd	r30, Y+11	; 0x0b
    1afc:	fc 85       	ldd	r31, Y+12	; 0x0c
    1afe:	6e 0f       	add	r22, r30
    1b00:	7f 1f       	adc	r23, r31
    1b02:	6e 5f       	subi	r22, 0xFE	; 254
    1b04:	7f 4f       	sbci	r23, 0xFF	; 255
    1b06:	7c 8f       	std	Y+28, r23	; 0x1c
    1b08:	6b 8f       	std	Y+27, r22	; 0x1b
    1b0a:	61 e0       	ldi	r22, 0x01	; 1
    1b0c:	ea 85       	ldd	r30, Y+10	; 0x0a
    1b0e:	7a 89       	ldd	r23, Y+18	; 0x12
    1b10:	e7 17       	cp	r30, r23
    1b12:	09 f4       	brne	.+2      	; 0x1b16 <__mulsf3+0x142>
    1b14:	60 e0       	ldi	r22, 0x00	; 0
    1b16:	6a 8f       	std	Y+26, r22	; 0x1a
    1b18:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1b1a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1b1c:	10 c0       	rjmp	.+32     	; 0x1b3e <__mulsf3+0x16a>
    1b1e:	fc 01       	movw	r30, r24
    1b20:	e1 70       	andi	r30, 0x01	; 1
    1b22:	f0 70       	andi	r31, 0x00	; 0
    1b24:	30 97       	sbiw	r30, 0x00	; 0
    1b26:	29 f0       	breq	.+10     	; 0x1b32 <__mulsf3+0x15e>
    1b28:	56 95       	lsr	r21
    1b2a:	47 95       	ror	r20
    1b2c:	37 95       	ror	r19
    1b2e:	27 95       	ror	r18
    1b30:	50 68       	ori	r21, 0x80	; 128
    1b32:	b6 95       	lsr	r27
    1b34:	a7 95       	ror	r26
    1b36:	97 95       	ror	r25
    1b38:	87 95       	ror	r24
    1b3a:	6f 5f       	subi	r22, 0xFF	; 255
    1b3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b3e:	b7 fd       	sbrc	r27, 7
    1b40:	ee cf       	rjmp	.-36     	; 0x1b1e <__mulsf3+0x14a>
    1b42:	0c c0       	rjmp	.+24     	; 0x1b5c <__mulsf3+0x188>
    1b44:	88 0f       	add	r24, r24
    1b46:	99 1f       	adc	r25, r25
    1b48:	aa 1f       	adc	r26, r26
    1b4a:	bb 1f       	adc	r27, r27
    1b4c:	57 fd       	sbrc	r21, 7
    1b4e:	81 60       	ori	r24, 0x01	; 1
    1b50:	22 0f       	add	r18, r18
    1b52:	33 1f       	adc	r19, r19
    1b54:	44 1f       	adc	r20, r20
    1b56:	55 1f       	adc	r21, r21
    1b58:	61 50       	subi	r22, 0x01	; 1
    1b5a:	70 40       	sbci	r23, 0x00	; 0
    1b5c:	80 30       	cpi	r24, 0x00	; 0
    1b5e:	e0 e0       	ldi	r30, 0x00	; 0
    1b60:	9e 07       	cpc	r25, r30
    1b62:	e0 e0       	ldi	r30, 0x00	; 0
    1b64:	ae 07       	cpc	r26, r30
    1b66:	e0 e4       	ldi	r30, 0x40	; 64
    1b68:	be 07       	cpc	r27, r30
    1b6a:	60 f3       	brcs	.-40     	; 0x1b44 <__mulsf3+0x170>
    1b6c:	6b 8f       	std	Y+27, r22	; 0x1b
    1b6e:	7c 8f       	std	Y+28, r23	; 0x1c
    1b70:	6f e7       	ldi	r22, 0x7F	; 127
    1b72:	e6 2e       	mov	r14, r22
    1b74:	f1 2c       	mov	r15, r1
    1b76:	01 2d       	mov	r16, r1
    1b78:	11 2d       	mov	r17, r1
    1b7a:	e8 22       	and	r14, r24
    1b7c:	f9 22       	and	r15, r25
    1b7e:	0a 23       	and	r16, r26
    1b80:	1b 23       	and	r17, r27
    1b82:	60 e4       	ldi	r22, 0x40	; 64
    1b84:	e6 16       	cp	r14, r22
    1b86:	f1 04       	cpc	r15, r1
    1b88:	01 05       	cpc	r16, r1
    1b8a:	11 05       	cpc	r17, r1
    1b8c:	61 f4       	brne	.+24     	; 0x1ba6 <__mulsf3+0x1d2>
    1b8e:	87 fd       	sbrc	r24, 7
    1b90:	0a c0       	rjmp	.+20     	; 0x1ba6 <__mulsf3+0x1d2>
    1b92:	21 15       	cp	r18, r1
    1b94:	31 05       	cpc	r19, r1
    1b96:	41 05       	cpc	r20, r1
    1b98:	51 05       	cpc	r21, r1
    1b9a:	29 f0       	breq	.+10     	; 0x1ba6 <__mulsf3+0x1d2>
    1b9c:	80 5c       	subi	r24, 0xC0	; 192
    1b9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba0:	af 4f       	sbci	r26, 0xFF	; 255
    1ba2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ba4:	80 78       	andi	r24, 0x80	; 128
    1ba6:	8d 8f       	std	Y+29, r24	; 0x1d
    1ba8:	9e 8f       	std	Y+30, r25	; 0x1e
    1baa:	af 8f       	std	Y+31, r26	; 0x1f
    1bac:	b8 a3       	std	Y+32, r27	; 0x20
    1bae:	83 e0       	ldi	r24, 0x03	; 3
    1bb0:	89 8f       	std	Y+25, r24	; 0x19
    1bb2:	ce 01       	movw	r24, r28
    1bb4:	49 96       	adiw	r24, 0x19	; 25
    1bb6:	02 c0       	rjmp	.+4      	; 0x1bbc <__mulsf3+0x1e8>
    1bb8:	8c e0       	ldi	r24, 0x0C	; 12
    1bba:	91 e0       	ldi	r25, 0x01	; 1
    1bbc:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <__pack_f>
    1bc0:	a0 96       	adiw	r28, 0x20	; 32
    1bc2:	e2 e1       	ldi	r30, 0x12	; 18
    1bc4:	0c 94 99 10 	jmp	0x2132	; 0x2132 <__epilogue_restores__>

00001bc8 <__gtsf2>:
    1bc8:	a8 e1       	ldi	r26, 0x18	; 24
    1bca:	b0 e0       	ldi	r27, 0x00	; 0
    1bcc:	ea ee       	ldi	r30, 0xEA	; 234
    1bce:	fd e0       	ldi	r31, 0x0D	; 13
    1bd0:	0c 94 89 10 	jmp	0x2112	; 0x2112 <__prologue_saves__+0x18>
    1bd4:	69 83       	std	Y+1, r22	; 0x01
    1bd6:	7a 83       	std	Y+2, r23	; 0x02
    1bd8:	8b 83       	std	Y+3, r24	; 0x03
    1bda:	9c 83       	std	Y+4, r25	; 0x04
    1bdc:	2d 83       	std	Y+5, r18	; 0x05
    1bde:	3e 83       	std	Y+6, r19	; 0x06
    1be0:	4f 83       	std	Y+7, r20	; 0x07
    1be2:	58 87       	std	Y+8, r21	; 0x08
    1be4:	8e 01       	movw	r16, r28
    1be6:	07 5f       	subi	r16, 0xF7	; 247
    1be8:	1f 4f       	sbci	r17, 0xFF	; 255
    1bea:	ce 01       	movw	r24, r28
    1bec:	01 96       	adiw	r24, 0x01	; 1
    1bee:	b8 01       	movw	r22, r16
    1bf0:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__unpack_f>
    1bf4:	81 e1       	ldi	r24, 0x11	; 17
    1bf6:	e8 2e       	mov	r14, r24
    1bf8:	f1 2c       	mov	r15, r1
    1bfa:	ec 0e       	add	r14, r28
    1bfc:	fd 1e       	adc	r15, r29
    1bfe:	ce 01       	movw	r24, r28
    1c00:	05 96       	adiw	r24, 0x05	; 5
    1c02:	b7 01       	movw	r22, r14
    1c04:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__unpack_f>
    1c08:	89 85       	ldd	r24, Y+9	; 0x09
    1c0a:	82 30       	cpi	r24, 0x02	; 2
    1c0c:	40 f0       	brcs	.+16     	; 0x1c1e <__gtsf2+0x56>
    1c0e:	89 89       	ldd	r24, Y+17	; 0x11
    1c10:	82 30       	cpi	r24, 0x02	; 2
    1c12:	28 f0       	brcs	.+10     	; 0x1c1e <__gtsf2+0x56>
    1c14:	c8 01       	movw	r24, r16
    1c16:	b7 01       	movw	r22, r14
    1c18:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <__fpcmp_parts_f>
    1c1c:	01 c0       	rjmp	.+2      	; 0x1c20 <__gtsf2+0x58>
    1c1e:	8f ef       	ldi	r24, 0xFF	; 255
    1c20:	68 96       	adiw	r28, 0x18	; 24
    1c22:	e6 e0       	ldi	r30, 0x06	; 6
    1c24:	0c 94 a5 10 	jmp	0x214a	; 0x214a <__epilogue_restores__+0x18>

00001c28 <__gesf2>:
    1c28:	a8 e1       	ldi	r26, 0x18	; 24
    1c2a:	b0 e0       	ldi	r27, 0x00	; 0
    1c2c:	ea e1       	ldi	r30, 0x1A	; 26
    1c2e:	fe e0       	ldi	r31, 0x0E	; 14
    1c30:	0c 94 89 10 	jmp	0x2112	; 0x2112 <__prologue_saves__+0x18>
    1c34:	69 83       	std	Y+1, r22	; 0x01
    1c36:	7a 83       	std	Y+2, r23	; 0x02
    1c38:	8b 83       	std	Y+3, r24	; 0x03
    1c3a:	9c 83       	std	Y+4, r25	; 0x04
    1c3c:	2d 83       	std	Y+5, r18	; 0x05
    1c3e:	3e 83       	std	Y+6, r19	; 0x06
    1c40:	4f 83       	std	Y+7, r20	; 0x07
    1c42:	58 87       	std	Y+8, r21	; 0x08
    1c44:	8e 01       	movw	r16, r28
    1c46:	07 5f       	subi	r16, 0xF7	; 247
    1c48:	1f 4f       	sbci	r17, 0xFF	; 255
    1c4a:	ce 01       	movw	r24, r28
    1c4c:	01 96       	adiw	r24, 0x01	; 1
    1c4e:	b8 01       	movw	r22, r16
    1c50:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__unpack_f>
    1c54:	81 e1       	ldi	r24, 0x11	; 17
    1c56:	e8 2e       	mov	r14, r24
    1c58:	f1 2c       	mov	r15, r1
    1c5a:	ec 0e       	add	r14, r28
    1c5c:	fd 1e       	adc	r15, r29
    1c5e:	ce 01       	movw	r24, r28
    1c60:	05 96       	adiw	r24, 0x05	; 5
    1c62:	b7 01       	movw	r22, r14
    1c64:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__unpack_f>
    1c68:	89 85       	ldd	r24, Y+9	; 0x09
    1c6a:	82 30       	cpi	r24, 0x02	; 2
    1c6c:	40 f0       	brcs	.+16     	; 0x1c7e <__gesf2+0x56>
    1c6e:	89 89       	ldd	r24, Y+17	; 0x11
    1c70:	82 30       	cpi	r24, 0x02	; 2
    1c72:	28 f0       	brcs	.+10     	; 0x1c7e <__gesf2+0x56>
    1c74:	c8 01       	movw	r24, r16
    1c76:	b7 01       	movw	r22, r14
    1c78:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <__fpcmp_parts_f>
    1c7c:	01 c0       	rjmp	.+2      	; 0x1c80 <__gesf2+0x58>
    1c7e:	8f ef       	ldi	r24, 0xFF	; 255
    1c80:	68 96       	adiw	r28, 0x18	; 24
    1c82:	e6 e0       	ldi	r30, 0x06	; 6
    1c84:	0c 94 a5 10 	jmp	0x214a	; 0x214a <__epilogue_restores__+0x18>

00001c88 <__ltsf2>:
    1c88:	a8 e1       	ldi	r26, 0x18	; 24
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	ea e4       	ldi	r30, 0x4A	; 74
    1c8e:	fe e0       	ldi	r31, 0x0E	; 14
    1c90:	0c 94 89 10 	jmp	0x2112	; 0x2112 <__prologue_saves__+0x18>
    1c94:	69 83       	std	Y+1, r22	; 0x01
    1c96:	7a 83       	std	Y+2, r23	; 0x02
    1c98:	8b 83       	std	Y+3, r24	; 0x03
    1c9a:	9c 83       	std	Y+4, r25	; 0x04
    1c9c:	2d 83       	std	Y+5, r18	; 0x05
    1c9e:	3e 83       	std	Y+6, r19	; 0x06
    1ca0:	4f 83       	std	Y+7, r20	; 0x07
    1ca2:	58 87       	std	Y+8, r21	; 0x08
    1ca4:	8e 01       	movw	r16, r28
    1ca6:	07 5f       	subi	r16, 0xF7	; 247
    1ca8:	1f 4f       	sbci	r17, 0xFF	; 255
    1caa:	ce 01       	movw	r24, r28
    1cac:	01 96       	adiw	r24, 0x01	; 1
    1cae:	b8 01       	movw	r22, r16
    1cb0:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__unpack_f>
    1cb4:	81 e1       	ldi	r24, 0x11	; 17
    1cb6:	e8 2e       	mov	r14, r24
    1cb8:	f1 2c       	mov	r15, r1
    1cba:	ec 0e       	add	r14, r28
    1cbc:	fd 1e       	adc	r15, r29
    1cbe:	ce 01       	movw	r24, r28
    1cc0:	05 96       	adiw	r24, 0x05	; 5
    1cc2:	b7 01       	movw	r22, r14
    1cc4:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__unpack_f>
    1cc8:	89 85       	ldd	r24, Y+9	; 0x09
    1cca:	82 30       	cpi	r24, 0x02	; 2
    1ccc:	40 f0       	brcs	.+16     	; 0x1cde <__ltsf2+0x56>
    1cce:	89 89       	ldd	r24, Y+17	; 0x11
    1cd0:	82 30       	cpi	r24, 0x02	; 2
    1cd2:	28 f0       	brcs	.+10     	; 0x1cde <__ltsf2+0x56>
    1cd4:	c8 01       	movw	r24, r16
    1cd6:	b7 01       	movw	r22, r14
    1cd8:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <__fpcmp_parts_f>
    1cdc:	01 c0       	rjmp	.+2      	; 0x1ce0 <__ltsf2+0x58>
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	68 96       	adiw	r28, 0x18	; 24
    1ce2:	e6 e0       	ldi	r30, 0x06	; 6
    1ce4:	0c 94 a5 10 	jmp	0x214a	; 0x214a <__epilogue_restores__+0x18>

00001ce8 <__fixsfsi>:
    1ce8:	ac e0       	ldi	r26, 0x0C	; 12
    1cea:	b0 e0       	ldi	r27, 0x00	; 0
    1cec:	ea e7       	ldi	r30, 0x7A	; 122
    1cee:	fe e0       	ldi	r31, 0x0E	; 14
    1cf0:	0c 94 8d 10 	jmp	0x211a	; 0x211a <__prologue_saves__+0x20>
    1cf4:	69 83       	std	Y+1, r22	; 0x01
    1cf6:	7a 83       	std	Y+2, r23	; 0x02
    1cf8:	8b 83       	std	Y+3, r24	; 0x03
    1cfa:	9c 83       	std	Y+4, r25	; 0x04
    1cfc:	ce 01       	movw	r24, r28
    1cfe:	01 96       	adiw	r24, 0x01	; 1
    1d00:	be 01       	movw	r22, r28
    1d02:	6b 5f       	subi	r22, 0xFB	; 251
    1d04:	7f 4f       	sbci	r23, 0xFF	; 255
    1d06:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__unpack_f>
    1d0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0c:	82 30       	cpi	r24, 0x02	; 2
    1d0e:	81 f1       	breq	.+96     	; 0x1d70 <__fixsfsi+0x88>
    1d10:	82 30       	cpi	r24, 0x02	; 2
    1d12:	70 f1       	brcs	.+92     	; 0x1d70 <__fixsfsi+0x88>
    1d14:	84 30       	cpi	r24, 0x04	; 4
    1d16:	21 f4       	brne	.+8      	; 0x1d20 <__fixsfsi+0x38>
    1d18:	8e 81       	ldd	r24, Y+6	; 0x06
    1d1a:	88 23       	and	r24, r24
    1d1c:	69 f1       	breq	.+90     	; 0x1d78 <__fixsfsi+0x90>
    1d1e:	0a c0       	rjmp	.+20     	; 0x1d34 <__fixsfsi+0x4c>
    1d20:	2f 81       	ldd	r18, Y+7	; 0x07
    1d22:	38 85       	ldd	r19, Y+8	; 0x08
    1d24:	37 fd       	sbrc	r19, 7
    1d26:	24 c0       	rjmp	.+72     	; 0x1d70 <__fixsfsi+0x88>
    1d28:	6e 81       	ldd	r22, Y+6	; 0x06
    1d2a:	2f 31       	cpi	r18, 0x1F	; 31
    1d2c:	31 05       	cpc	r19, r1
    1d2e:	3c f0       	brlt	.+14     	; 0x1d3e <__fixsfsi+0x56>
    1d30:	66 23       	and	r22, r22
    1d32:	11 f1       	breq	.+68     	; 0x1d78 <__fixsfsi+0x90>
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	40 e0       	ldi	r20, 0x00	; 0
    1d3a:	50 e8       	ldi	r21, 0x80	; 128
    1d3c:	21 c0       	rjmp	.+66     	; 0x1d80 <__fixsfsi+0x98>
    1d3e:	8e e1       	ldi	r24, 0x1E	; 30
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	82 1b       	sub	r24, r18
    1d44:	93 0b       	sbc	r25, r19
    1d46:	29 85       	ldd	r18, Y+9	; 0x09
    1d48:	3a 85       	ldd	r19, Y+10	; 0x0a
    1d4a:	4b 85       	ldd	r20, Y+11	; 0x0b
    1d4c:	5c 85       	ldd	r21, Y+12	; 0x0c
    1d4e:	04 c0       	rjmp	.+8      	; 0x1d58 <__fixsfsi+0x70>
    1d50:	56 95       	lsr	r21
    1d52:	47 95       	ror	r20
    1d54:	37 95       	ror	r19
    1d56:	27 95       	ror	r18
    1d58:	8a 95       	dec	r24
    1d5a:	d2 f7       	brpl	.-12     	; 0x1d50 <__fixsfsi+0x68>
    1d5c:	66 23       	and	r22, r22
    1d5e:	81 f0       	breq	.+32     	; 0x1d80 <__fixsfsi+0x98>
    1d60:	50 95       	com	r21
    1d62:	40 95       	com	r20
    1d64:	30 95       	com	r19
    1d66:	21 95       	neg	r18
    1d68:	3f 4f       	sbci	r19, 0xFF	; 255
    1d6a:	4f 4f       	sbci	r20, 0xFF	; 255
    1d6c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d6e:	08 c0       	rjmp	.+16     	; 0x1d80 <__fixsfsi+0x98>
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	a9 01       	movw	r20, r18
    1d76:	04 c0       	rjmp	.+8      	; 0x1d80 <__fixsfsi+0x98>
    1d78:	2f ef       	ldi	r18, 0xFF	; 255
    1d7a:	3f ef       	ldi	r19, 0xFF	; 255
    1d7c:	4f ef       	ldi	r20, 0xFF	; 255
    1d7e:	5f e7       	ldi	r21, 0x7F	; 127
    1d80:	b9 01       	movw	r22, r18
    1d82:	ca 01       	movw	r24, r20
    1d84:	2c 96       	adiw	r28, 0x0c	; 12
    1d86:	e2 e0       	ldi	r30, 0x02	; 2
    1d88:	0c 94 a9 10 	jmp	0x2152	; 0x2152 <__epilogue_restores__+0x20>

00001d8c <__pack_f>:
    1d8c:	ef 92       	push	r14
    1d8e:	ff 92       	push	r15
    1d90:	0f 93       	push	r16
    1d92:	1f 93       	push	r17
    1d94:	cf 93       	push	r28
    1d96:	df 93       	push	r29
    1d98:	fc 01       	movw	r30, r24
    1d9a:	24 81       	ldd	r18, Z+4	; 0x04
    1d9c:	35 81       	ldd	r19, Z+5	; 0x05
    1d9e:	46 81       	ldd	r20, Z+6	; 0x06
    1da0:	57 81       	ldd	r21, Z+7	; 0x07
    1da2:	61 81       	ldd	r22, Z+1	; 0x01
    1da4:	80 81       	ld	r24, Z
    1da6:	82 30       	cpi	r24, 0x02	; 2
    1da8:	20 f4       	brcc	.+8      	; 0x1db2 <__pack_f+0x26>
    1daa:	40 61       	ori	r20, 0x10	; 16
    1dac:	ef ef       	ldi	r30, 0xFF	; 255
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	a3 c0       	rjmp	.+326    	; 0x1ef8 <__pack_f+0x16c>
    1db2:	84 30       	cpi	r24, 0x04	; 4
    1db4:	09 f4       	brne	.+2      	; 0x1db8 <__pack_f+0x2c>
    1db6:	9b c0       	rjmp	.+310    	; 0x1eee <__pack_f+0x162>
    1db8:	82 30       	cpi	r24, 0x02	; 2
    1dba:	09 f4       	brne	.+2      	; 0x1dbe <__pack_f+0x32>
    1dbc:	92 c0       	rjmp	.+292    	; 0x1ee2 <__pack_f+0x156>
    1dbe:	21 15       	cp	r18, r1
    1dc0:	31 05       	cpc	r19, r1
    1dc2:	41 05       	cpc	r20, r1
    1dc4:	51 05       	cpc	r21, r1
    1dc6:	09 f4       	brne	.+2      	; 0x1dca <__pack_f+0x3e>
    1dc8:	8f c0       	rjmp	.+286    	; 0x1ee8 <__pack_f+0x15c>
    1dca:	02 80       	ldd	r0, Z+2	; 0x02
    1dcc:	f3 81       	ldd	r31, Z+3	; 0x03
    1dce:	e0 2d       	mov	r30, r0
    1dd0:	8f ef       	ldi	r24, 0xFF	; 255
    1dd2:	e2 38       	cpi	r30, 0x82	; 130
    1dd4:	f8 07       	cpc	r31, r24
    1dd6:	0c f0       	brlt	.+2      	; 0x1dda <__pack_f+0x4e>
    1dd8:	5a c0       	rjmp	.+180    	; 0x1e8e <__pack_f+0x102>
    1dda:	c2 e8       	ldi	r28, 0x82	; 130
    1ddc:	df ef       	ldi	r29, 0xFF	; 255
    1dde:	ce 1b       	sub	r28, r30
    1de0:	df 0b       	sbc	r29, r31
    1de2:	ca 31       	cpi	r28, 0x1A	; 26
    1de4:	d1 05       	cpc	r29, r1
    1de6:	6c f5       	brge	.+90     	; 0x1e42 <__pack_f+0xb6>
    1de8:	79 01       	movw	r14, r18
    1dea:	8a 01       	movw	r16, r20
    1dec:	0c 2e       	mov	r0, r28
    1dee:	04 c0       	rjmp	.+8      	; 0x1df8 <__pack_f+0x6c>
    1df0:	16 95       	lsr	r17
    1df2:	07 95       	ror	r16
    1df4:	f7 94       	ror	r15
    1df6:	e7 94       	ror	r14
    1df8:	0a 94       	dec	r0
    1dfa:	d2 f7       	brpl	.-12     	; 0x1df0 <__pack_f+0x64>
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	a0 e0       	ldi	r26, 0x00	; 0
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	0c 2e       	mov	r0, r28
    1e06:	04 c0       	rjmp	.+8      	; 0x1e10 <__pack_f+0x84>
    1e08:	88 0f       	add	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	aa 1f       	adc	r26, r26
    1e0e:	bb 1f       	adc	r27, r27
    1e10:	0a 94       	dec	r0
    1e12:	d2 f7       	brpl	.-12     	; 0x1e08 <__pack_f+0x7c>
    1e14:	01 97       	sbiw	r24, 0x01	; 1
    1e16:	a1 09       	sbc	r26, r1
    1e18:	b1 09       	sbc	r27, r1
    1e1a:	82 23       	and	r24, r18
    1e1c:	93 23       	and	r25, r19
    1e1e:	a4 23       	and	r26, r20
    1e20:	b5 23       	and	r27, r21
    1e22:	21 e0       	ldi	r18, 0x01	; 1
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	40 e0       	ldi	r20, 0x00	; 0
    1e28:	50 e0       	ldi	r21, 0x00	; 0
    1e2a:	00 97       	sbiw	r24, 0x00	; 0
    1e2c:	a1 05       	cpc	r26, r1
    1e2e:	b1 05       	cpc	r27, r1
    1e30:	19 f4       	brne	.+6      	; 0x1e38 <__pack_f+0xac>
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	a9 01       	movw	r20, r18
    1e38:	2e 29       	or	r18, r14
    1e3a:	3f 29       	or	r19, r15
    1e3c:	40 2b       	or	r20, r16
    1e3e:	51 2b       	or	r21, r17
    1e40:	03 c0       	rjmp	.+6      	; 0x1e48 <__pack_f+0xbc>
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	a9 01       	movw	r20, r18
    1e48:	da 01       	movw	r26, r20
    1e4a:	c9 01       	movw	r24, r18
    1e4c:	8f 77       	andi	r24, 0x7F	; 127
    1e4e:	90 70       	andi	r25, 0x00	; 0
    1e50:	a0 70       	andi	r26, 0x00	; 0
    1e52:	b0 70       	andi	r27, 0x00	; 0
    1e54:	80 34       	cpi	r24, 0x40	; 64
    1e56:	91 05       	cpc	r25, r1
    1e58:	a1 05       	cpc	r26, r1
    1e5a:	b1 05       	cpc	r27, r1
    1e5c:	39 f4       	brne	.+14     	; 0x1e6c <__pack_f+0xe0>
    1e5e:	27 ff       	sbrs	r18, 7
    1e60:	09 c0       	rjmp	.+18     	; 0x1e74 <__pack_f+0xe8>
    1e62:	20 5c       	subi	r18, 0xC0	; 192
    1e64:	3f 4f       	sbci	r19, 0xFF	; 255
    1e66:	4f 4f       	sbci	r20, 0xFF	; 255
    1e68:	5f 4f       	sbci	r21, 0xFF	; 255
    1e6a:	04 c0       	rjmp	.+8      	; 0x1e74 <__pack_f+0xe8>
    1e6c:	21 5c       	subi	r18, 0xC1	; 193
    1e6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e70:	4f 4f       	sbci	r20, 0xFF	; 255
    1e72:	5f 4f       	sbci	r21, 0xFF	; 255
    1e74:	e1 e0       	ldi	r30, 0x01	; 1
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	20 30       	cpi	r18, 0x00	; 0
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	38 07       	cpc	r19, r24
    1e7e:	80 e0       	ldi	r24, 0x00	; 0
    1e80:	48 07       	cpc	r20, r24
    1e82:	80 e4       	ldi	r24, 0x40	; 64
    1e84:	58 07       	cpc	r21, r24
    1e86:	28 f5       	brcc	.+74     	; 0x1ed2 <__pack_f+0x146>
    1e88:	e0 e0       	ldi	r30, 0x00	; 0
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	22 c0       	rjmp	.+68     	; 0x1ed2 <__pack_f+0x146>
    1e8e:	e0 38       	cpi	r30, 0x80	; 128
    1e90:	f1 05       	cpc	r31, r1
    1e92:	6c f5       	brge	.+90     	; 0x1eee <__pack_f+0x162>
    1e94:	e1 58       	subi	r30, 0x81	; 129
    1e96:	ff 4f       	sbci	r31, 0xFF	; 255
    1e98:	da 01       	movw	r26, r20
    1e9a:	c9 01       	movw	r24, r18
    1e9c:	8f 77       	andi	r24, 0x7F	; 127
    1e9e:	90 70       	andi	r25, 0x00	; 0
    1ea0:	a0 70       	andi	r26, 0x00	; 0
    1ea2:	b0 70       	andi	r27, 0x00	; 0
    1ea4:	80 34       	cpi	r24, 0x40	; 64
    1ea6:	91 05       	cpc	r25, r1
    1ea8:	a1 05       	cpc	r26, r1
    1eaa:	b1 05       	cpc	r27, r1
    1eac:	39 f4       	brne	.+14     	; 0x1ebc <__pack_f+0x130>
    1eae:	27 ff       	sbrs	r18, 7
    1eb0:	09 c0       	rjmp	.+18     	; 0x1ec4 <__pack_f+0x138>
    1eb2:	20 5c       	subi	r18, 0xC0	; 192
    1eb4:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb6:	4f 4f       	sbci	r20, 0xFF	; 255
    1eb8:	5f 4f       	sbci	r21, 0xFF	; 255
    1eba:	04 c0       	rjmp	.+8      	; 0x1ec4 <__pack_f+0x138>
    1ebc:	21 5c       	subi	r18, 0xC1	; 193
    1ebe:	3f 4f       	sbci	r19, 0xFF	; 255
    1ec0:	4f 4f       	sbci	r20, 0xFF	; 255
    1ec2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ec4:	57 ff       	sbrs	r21, 7
    1ec6:	05 c0       	rjmp	.+10     	; 0x1ed2 <__pack_f+0x146>
    1ec8:	56 95       	lsr	r21
    1eca:	47 95       	ror	r20
    1ecc:	37 95       	ror	r19
    1ece:	27 95       	ror	r18
    1ed0:	31 96       	adiw	r30, 0x01	; 1
    1ed2:	87 e0       	ldi	r24, 0x07	; 7
    1ed4:	56 95       	lsr	r21
    1ed6:	47 95       	ror	r20
    1ed8:	37 95       	ror	r19
    1eda:	27 95       	ror	r18
    1edc:	8a 95       	dec	r24
    1ede:	d1 f7       	brne	.-12     	; 0x1ed4 <__pack_f+0x148>
    1ee0:	0b c0       	rjmp	.+22     	; 0x1ef8 <__pack_f+0x16c>
    1ee2:	e0 e0       	ldi	r30, 0x00	; 0
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	05 c0       	rjmp	.+10     	; 0x1ef2 <__pack_f+0x166>
    1ee8:	e0 e0       	ldi	r30, 0x00	; 0
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	05 c0       	rjmp	.+10     	; 0x1ef8 <__pack_f+0x16c>
    1eee:	ef ef       	ldi	r30, 0xFF	; 255
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	a9 01       	movw	r20, r18
    1ef8:	8e 2f       	mov	r24, r30
    1efa:	87 95       	ror	r24
    1efc:	88 27       	eor	r24, r24
    1efe:	87 95       	ror	r24
    1f00:	94 2f       	mov	r25, r20
    1f02:	9f 77       	andi	r25, 0x7F	; 127
    1f04:	67 95       	ror	r22
    1f06:	66 27       	eor	r22, r22
    1f08:	67 95       	ror	r22
    1f0a:	e6 95       	lsr	r30
    1f0c:	e2 2e       	mov	r14, r18
    1f0e:	a9 2f       	mov	r26, r25
    1f10:	a8 2b       	or	r26, r24
    1f12:	fe 2f       	mov	r31, r30
    1f14:	f6 2b       	or	r31, r22
    1f16:	62 2f       	mov	r22, r18
    1f18:	73 2f       	mov	r23, r19
    1f1a:	8a 2f       	mov	r24, r26
    1f1c:	9f 2f       	mov	r25, r31
    1f1e:	cd b7       	in	r28, 0x3d	; 61
    1f20:	de b7       	in	r29, 0x3e	; 62
    1f22:	e6 e0       	ldi	r30, 0x06	; 6
    1f24:	0c 94 a5 10 	jmp	0x214a	; 0x214a <__epilogue_restores__+0x18>

00001f28 <__unpack_f>:
    1f28:	dc 01       	movw	r26, r24
    1f2a:	fb 01       	movw	r30, r22
    1f2c:	2c 91       	ld	r18, X
    1f2e:	11 96       	adiw	r26, 0x01	; 1
    1f30:	3c 91       	ld	r19, X
    1f32:	11 97       	sbiw	r26, 0x01	; 1
    1f34:	12 96       	adiw	r26, 0x02	; 2
    1f36:	8c 91       	ld	r24, X
    1f38:	12 97       	sbiw	r26, 0x02	; 2
    1f3a:	48 2f       	mov	r20, r24
    1f3c:	4f 77       	andi	r20, 0x7F	; 127
    1f3e:	50 e0       	ldi	r21, 0x00	; 0
    1f40:	98 2f       	mov	r25, r24
    1f42:	99 1f       	adc	r25, r25
    1f44:	99 27       	eor	r25, r25
    1f46:	99 1f       	adc	r25, r25
    1f48:	13 96       	adiw	r26, 0x03	; 3
    1f4a:	6c 91       	ld	r22, X
    1f4c:	13 97       	sbiw	r26, 0x03	; 3
    1f4e:	86 2f       	mov	r24, r22
    1f50:	88 0f       	add	r24, r24
    1f52:	89 2b       	or	r24, r25
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	66 1f       	adc	r22, r22
    1f58:	66 27       	eor	r22, r22
    1f5a:	66 1f       	adc	r22, r22
    1f5c:	61 83       	std	Z+1, r22	; 0x01
    1f5e:	00 97       	sbiw	r24, 0x00	; 0
    1f60:	39 f5       	brne	.+78     	; 0x1fb0 <__unpack_f+0x88>
    1f62:	21 15       	cp	r18, r1
    1f64:	31 05       	cpc	r19, r1
    1f66:	41 05       	cpc	r20, r1
    1f68:	51 05       	cpc	r21, r1
    1f6a:	11 f4       	brne	.+4      	; 0x1f70 <__unpack_f+0x48>
    1f6c:	82 e0       	ldi	r24, 0x02	; 2
    1f6e:	29 c0       	rjmp	.+82     	; 0x1fc2 <__unpack_f+0x9a>
    1f70:	82 e8       	ldi	r24, 0x82	; 130
    1f72:	9f ef       	ldi	r25, 0xFF	; 255
    1f74:	93 83       	std	Z+3, r25	; 0x03
    1f76:	82 83       	std	Z+2, r24	; 0x02
    1f78:	67 e0       	ldi	r22, 0x07	; 7
    1f7a:	22 0f       	add	r18, r18
    1f7c:	33 1f       	adc	r19, r19
    1f7e:	44 1f       	adc	r20, r20
    1f80:	55 1f       	adc	r21, r21
    1f82:	6a 95       	dec	r22
    1f84:	d1 f7       	brne	.-12     	; 0x1f7a <__unpack_f+0x52>
    1f86:	83 e0       	ldi	r24, 0x03	; 3
    1f88:	80 83       	st	Z, r24
    1f8a:	09 c0       	rjmp	.+18     	; 0x1f9e <__unpack_f+0x76>
    1f8c:	22 0f       	add	r18, r18
    1f8e:	33 1f       	adc	r19, r19
    1f90:	44 1f       	adc	r20, r20
    1f92:	55 1f       	adc	r21, r21
    1f94:	82 81       	ldd	r24, Z+2	; 0x02
    1f96:	93 81       	ldd	r25, Z+3	; 0x03
    1f98:	01 97       	sbiw	r24, 0x01	; 1
    1f9a:	93 83       	std	Z+3, r25	; 0x03
    1f9c:	82 83       	std	Z+2, r24	; 0x02
    1f9e:	20 30       	cpi	r18, 0x00	; 0
    1fa0:	80 e0       	ldi	r24, 0x00	; 0
    1fa2:	38 07       	cpc	r19, r24
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	48 07       	cpc	r20, r24
    1fa8:	80 e4       	ldi	r24, 0x40	; 64
    1faa:	58 07       	cpc	r21, r24
    1fac:	78 f3       	brcs	.-34     	; 0x1f8c <__unpack_f+0x64>
    1fae:	20 c0       	rjmp	.+64     	; 0x1ff0 <__unpack_f+0xc8>
    1fb0:	8f 3f       	cpi	r24, 0xFF	; 255
    1fb2:	91 05       	cpc	r25, r1
    1fb4:	79 f4       	brne	.+30     	; 0x1fd4 <__unpack_f+0xac>
    1fb6:	21 15       	cp	r18, r1
    1fb8:	31 05       	cpc	r19, r1
    1fba:	41 05       	cpc	r20, r1
    1fbc:	51 05       	cpc	r21, r1
    1fbe:	19 f4       	brne	.+6      	; 0x1fc6 <__unpack_f+0x9e>
    1fc0:	84 e0       	ldi	r24, 0x04	; 4
    1fc2:	80 83       	st	Z, r24
    1fc4:	08 95       	ret
    1fc6:	44 ff       	sbrs	r20, 4
    1fc8:	03 c0       	rjmp	.+6      	; 0x1fd0 <__unpack_f+0xa8>
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	80 83       	st	Z, r24
    1fce:	10 c0       	rjmp	.+32     	; 0x1ff0 <__unpack_f+0xc8>
    1fd0:	10 82       	st	Z, r1
    1fd2:	0e c0       	rjmp	.+28     	; 0x1ff0 <__unpack_f+0xc8>
    1fd4:	8f 57       	subi	r24, 0x7F	; 127
    1fd6:	90 40       	sbci	r25, 0x00	; 0
    1fd8:	93 83       	std	Z+3, r25	; 0x03
    1fda:	82 83       	std	Z+2, r24	; 0x02
    1fdc:	83 e0       	ldi	r24, 0x03	; 3
    1fde:	80 83       	st	Z, r24
    1fe0:	87 e0       	ldi	r24, 0x07	; 7
    1fe2:	22 0f       	add	r18, r18
    1fe4:	33 1f       	adc	r19, r19
    1fe6:	44 1f       	adc	r20, r20
    1fe8:	55 1f       	adc	r21, r21
    1fea:	8a 95       	dec	r24
    1fec:	d1 f7       	brne	.-12     	; 0x1fe2 <__unpack_f+0xba>
    1fee:	50 64       	ori	r21, 0x40	; 64
    1ff0:	24 83       	std	Z+4, r18	; 0x04
    1ff2:	35 83       	std	Z+5, r19	; 0x05
    1ff4:	46 83       	std	Z+6, r20	; 0x06
    1ff6:	57 83       	std	Z+7, r21	; 0x07
    1ff8:	08 95       	ret

00001ffa <__fpcmp_parts_f>:
    1ffa:	fc 01       	movw	r30, r24
    1ffc:	db 01       	movw	r26, r22
    1ffe:	90 81       	ld	r25, Z
    2000:	92 30       	cpi	r25, 0x02	; 2
    2002:	08 f4       	brcc	.+2      	; 0x2006 <__fpcmp_parts_f+0xc>
    2004:	49 c0       	rjmp	.+146    	; 0x2098 <__fpcmp_parts_f+0x9e>
    2006:	8c 91       	ld	r24, X
    2008:	82 30       	cpi	r24, 0x02	; 2
    200a:	08 f4       	brcc	.+2      	; 0x200e <__fpcmp_parts_f+0x14>
    200c:	45 c0       	rjmp	.+138    	; 0x2098 <__fpcmp_parts_f+0x9e>
    200e:	94 30       	cpi	r25, 0x04	; 4
    2010:	51 f4       	brne	.+20     	; 0x2026 <__fpcmp_parts_f+0x2c>
    2012:	61 81       	ldd	r22, Z+1	; 0x01
    2014:	84 30       	cpi	r24, 0x04	; 4
    2016:	b1 f5       	brne	.+108    	; 0x2084 <__fpcmp_parts_f+0x8a>
    2018:	11 96       	adiw	r26, 0x01	; 1
    201a:	2c 91       	ld	r18, X
    201c:	11 97       	sbiw	r26, 0x01	; 1
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	26 1b       	sub	r18, r22
    2022:	31 09       	sbc	r19, r1
    2024:	41 c0       	rjmp	.+130    	; 0x20a8 <__fpcmp_parts_f+0xae>
    2026:	84 30       	cpi	r24, 0x04	; 4
    2028:	21 f0       	breq	.+8      	; 0x2032 <__fpcmp_parts_f+0x38>
    202a:	92 30       	cpi	r25, 0x02	; 2
    202c:	41 f4       	brne	.+16     	; 0x203e <__fpcmp_parts_f+0x44>
    202e:	82 30       	cpi	r24, 0x02	; 2
    2030:	b1 f1       	breq	.+108    	; 0x209e <__fpcmp_parts_f+0xa4>
    2032:	11 96       	adiw	r26, 0x01	; 1
    2034:	8c 91       	ld	r24, X
    2036:	11 97       	sbiw	r26, 0x01	; 1
    2038:	88 23       	and	r24, r24
    203a:	a1 f1       	breq	.+104    	; 0x20a4 <__fpcmp_parts_f+0xaa>
    203c:	2d c0       	rjmp	.+90     	; 0x2098 <__fpcmp_parts_f+0x9e>
    203e:	61 81       	ldd	r22, Z+1	; 0x01
    2040:	82 30       	cpi	r24, 0x02	; 2
    2042:	01 f1       	breq	.+64     	; 0x2084 <__fpcmp_parts_f+0x8a>
    2044:	11 96       	adiw	r26, 0x01	; 1
    2046:	8c 91       	ld	r24, X
    2048:	11 97       	sbiw	r26, 0x01	; 1
    204a:	68 17       	cp	r22, r24
    204c:	d9 f4       	brne	.+54     	; 0x2084 <__fpcmp_parts_f+0x8a>
    204e:	22 81       	ldd	r18, Z+2	; 0x02
    2050:	33 81       	ldd	r19, Z+3	; 0x03
    2052:	12 96       	adiw	r26, 0x02	; 2
    2054:	8d 91       	ld	r24, X+
    2056:	9c 91       	ld	r25, X
    2058:	13 97       	sbiw	r26, 0x03	; 3
    205a:	82 17       	cp	r24, r18
    205c:	93 07       	cpc	r25, r19
    205e:	94 f0       	brlt	.+36     	; 0x2084 <__fpcmp_parts_f+0x8a>
    2060:	28 17       	cp	r18, r24
    2062:	39 07       	cpc	r19, r25
    2064:	bc f0       	brlt	.+46     	; 0x2094 <__fpcmp_parts_f+0x9a>
    2066:	24 81       	ldd	r18, Z+4	; 0x04
    2068:	35 81       	ldd	r19, Z+5	; 0x05
    206a:	46 81       	ldd	r20, Z+6	; 0x06
    206c:	57 81       	ldd	r21, Z+7	; 0x07
    206e:	14 96       	adiw	r26, 0x04	; 4
    2070:	8d 91       	ld	r24, X+
    2072:	9d 91       	ld	r25, X+
    2074:	0d 90       	ld	r0, X+
    2076:	bc 91       	ld	r27, X
    2078:	a0 2d       	mov	r26, r0
    207a:	82 17       	cp	r24, r18
    207c:	93 07       	cpc	r25, r19
    207e:	a4 07       	cpc	r26, r20
    2080:	b5 07       	cpc	r27, r21
    2082:	18 f4       	brcc	.+6      	; 0x208a <__fpcmp_parts_f+0x90>
    2084:	66 23       	and	r22, r22
    2086:	41 f0       	breq	.+16     	; 0x2098 <__fpcmp_parts_f+0x9e>
    2088:	0d c0       	rjmp	.+26     	; 0x20a4 <__fpcmp_parts_f+0xaa>
    208a:	28 17       	cp	r18, r24
    208c:	39 07       	cpc	r19, r25
    208e:	4a 07       	cpc	r20, r26
    2090:	5b 07       	cpc	r21, r27
    2092:	28 f4       	brcc	.+10     	; 0x209e <__fpcmp_parts_f+0xa4>
    2094:	66 23       	and	r22, r22
    2096:	31 f0       	breq	.+12     	; 0x20a4 <__fpcmp_parts_f+0xaa>
    2098:	21 e0       	ldi	r18, 0x01	; 1
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	05 c0       	rjmp	.+10     	; 0x20a8 <__fpcmp_parts_f+0xae>
    209e:	20 e0       	ldi	r18, 0x00	; 0
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	02 c0       	rjmp	.+4      	; 0x20a8 <__fpcmp_parts_f+0xae>
    20a4:	2f ef       	ldi	r18, 0xFF	; 255
    20a6:	3f ef       	ldi	r19, 0xFF	; 255
    20a8:	c9 01       	movw	r24, r18
    20aa:	08 95       	ret

000020ac <__udivmodhi4>:
    20ac:	aa 1b       	sub	r26, r26
    20ae:	bb 1b       	sub	r27, r27
    20b0:	51 e1       	ldi	r21, 0x11	; 17
    20b2:	07 c0       	rjmp	.+14     	; 0x20c2 <__udivmodhi4_ep>

000020b4 <__udivmodhi4_loop>:
    20b4:	aa 1f       	adc	r26, r26
    20b6:	bb 1f       	adc	r27, r27
    20b8:	a6 17       	cp	r26, r22
    20ba:	b7 07       	cpc	r27, r23
    20bc:	10 f0       	brcs	.+4      	; 0x20c2 <__udivmodhi4_ep>
    20be:	a6 1b       	sub	r26, r22
    20c0:	b7 0b       	sbc	r27, r23

000020c2 <__udivmodhi4_ep>:
    20c2:	88 1f       	adc	r24, r24
    20c4:	99 1f       	adc	r25, r25
    20c6:	5a 95       	dec	r21
    20c8:	a9 f7       	brne	.-22     	; 0x20b4 <__udivmodhi4_loop>
    20ca:	80 95       	com	r24
    20cc:	90 95       	com	r25
    20ce:	bc 01       	movw	r22, r24
    20d0:	cd 01       	movw	r24, r26
    20d2:	08 95       	ret

000020d4 <__divmodhi4>:
    20d4:	97 fb       	bst	r25, 7
    20d6:	09 2e       	mov	r0, r25
    20d8:	07 26       	eor	r0, r23
    20da:	0a d0       	rcall	.+20     	; 0x20f0 <__divmodhi4_neg1>
    20dc:	77 fd       	sbrc	r23, 7
    20de:	04 d0       	rcall	.+8      	; 0x20e8 <__divmodhi4_neg2>
    20e0:	e5 df       	rcall	.-54     	; 0x20ac <__udivmodhi4>
    20e2:	06 d0       	rcall	.+12     	; 0x20f0 <__divmodhi4_neg1>
    20e4:	00 20       	and	r0, r0
    20e6:	1a f4       	brpl	.+6      	; 0x20ee <__divmodhi4_exit>

000020e8 <__divmodhi4_neg2>:
    20e8:	70 95       	com	r23
    20ea:	61 95       	neg	r22
    20ec:	7f 4f       	sbci	r23, 0xFF	; 255

000020ee <__divmodhi4_exit>:
    20ee:	08 95       	ret

000020f0 <__divmodhi4_neg1>:
    20f0:	f6 f7       	brtc	.-4      	; 0x20ee <__divmodhi4_exit>
    20f2:	90 95       	com	r25
    20f4:	81 95       	neg	r24
    20f6:	9f 4f       	sbci	r25, 0xFF	; 255
    20f8:	08 95       	ret

000020fa <__prologue_saves__>:
    20fa:	2f 92       	push	r2
    20fc:	3f 92       	push	r3
    20fe:	4f 92       	push	r4
    2100:	5f 92       	push	r5
    2102:	6f 92       	push	r6
    2104:	7f 92       	push	r7
    2106:	8f 92       	push	r8
    2108:	9f 92       	push	r9
    210a:	af 92       	push	r10
    210c:	bf 92       	push	r11
    210e:	cf 92       	push	r12
    2110:	df 92       	push	r13
    2112:	ef 92       	push	r14
    2114:	ff 92       	push	r15
    2116:	0f 93       	push	r16
    2118:	1f 93       	push	r17
    211a:	cf 93       	push	r28
    211c:	df 93       	push	r29
    211e:	cd b7       	in	r28, 0x3d	; 61
    2120:	de b7       	in	r29, 0x3e	; 62
    2122:	ca 1b       	sub	r28, r26
    2124:	db 0b       	sbc	r29, r27
    2126:	0f b6       	in	r0, 0x3f	; 63
    2128:	f8 94       	cli
    212a:	de bf       	out	0x3e, r29	; 62
    212c:	0f be       	out	0x3f, r0	; 63
    212e:	cd bf       	out	0x3d, r28	; 61
    2130:	09 94       	ijmp

00002132 <__epilogue_restores__>:
    2132:	2a 88       	ldd	r2, Y+18	; 0x12
    2134:	39 88       	ldd	r3, Y+17	; 0x11
    2136:	48 88       	ldd	r4, Y+16	; 0x10
    2138:	5f 84       	ldd	r5, Y+15	; 0x0f
    213a:	6e 84       	ldd	r6, Y+14	; 0x0e
    213c:	7d 84       	ldd	r7, Y+13	; 0x0d
    213e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2140:	9b 84       	ldd	r9, Y+11	; 0x0b
    2142:	aa 84       	ldd	r10, Y+10	; 0x0a
    2144:	b9 84       	ldd	r11, Y+9	; 0x09
    2146:	c8 84       	ldd	r12, Y+8	; 0x08
    2148:	df 80       	ldd	r13, Y+7	; 0x07
    214a:	ee 80       	ldd	r14, Y+6	; 0x06
    214c:	fd 80       	ldd	r15, Y+5	; 0x05
    214e:	0c 81       	ldd	r16, Y+4	; 0x04
    2150:	1b 81       	ldd	r17, Y+3	; 0x03
    2152:	aa 81       	ldd	r26, Y+2	; 0x02
    2154:	b9 81       	ldd	r27, Y+1	; 0x01
    2156:	ce 0f       	add	r28, r30
    2158:	d1 1d       	adc	r29, r1
    215a:	0f b6       	in	r0, 0x3f	; 63
    215c:	f8 94       	cli
    215e:	de bf       	out	0x3e, r29	; 62
    2160:	0f be       	out	0x3f, r0	; 63
    2162:	cd bf       	out	0x3d, r28	; 61
    2164:	ed 01       	movw	r28, r26
    2166:	08 95       	ret

00002168 <calloc>:
    2168:	ef 92       	push	r14
    216a:	ff 92       	push	r15
    216c:	0f 93       	push	r16
    216e:	1f 93       	push	r17
    2170:	cf 93       	push	r28
    2172:	df 93       	push	r29
    2174:	68 9f       	mul	r22, r24
    2176:	80 01       	movw	r16, r0
    2178:	69 9f       	mul	r22, r25
    217a:	10 0d       	add	r17, r0
    217c:	78 9f       	mul	r23, r24
    217e:	10 0d       	add	r17, r0
    2180:	11 24       	eor	r1, r1
    2182:	c8 01       	movw	r24, r16
    2184:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <malloc>
    2188:	e8 2e       	mov	r14, r24
    218a:	e7 01       	movw	r28, r14
    218c:	7e 01       	movw	r14, r28
    218e:	f9 2e       	mov	r15, r25
    2190:	e7 01       	movw	r28, r14
    2192:	20 97       	sbiw	r28, 0x00	; 0
    2194:	31 f0       	breq	.+12     	; 0x21a2 <calloc+0x3a>
    2196:	8e 2d       	mov	r24, r14
    2198:	60 e0       	ldi	r22, 0x00	; 0
    219a:	70 e0       	ldi	r23, 0x00	; 0
    219c:	a8 01       	movw	r20, r16
    219e:	0e 94 0b 12 	call	0x2416	; 0x2416 <memset>
    21a2:	7e 01       	movw	r14, r28
    21a4:	ce 01       	movw	r24, r28
    21a6:	cd b7       	in	r28, 0x3d	; 61
    21a8:	de b7       	in	r29, 0x3e	; 62
    21aa:	e6 e0       	ldi	r30, 0x06	; 6
    21ac:	0c 94 a5 10 	jmp	0x214a	; 0x214a <__epilogue_restores__+0x18>

000021b0 <malloc>:
    21b0:	cf 93       	push	r28
    21b2:	df 93       	push	r29
    21b4:	82 30       	cpi	r24, 0x02	; 2
    21b6:	91 05       	cpc	r25, r1
    21b8:	10 f4       	brcc	.+4      	; 0x21be <malloc+0xe>
    21ba:	82 e0       	ldi	r24, 0x02	; 2
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	e0 91 3a 06 	lds	r30, 0x063A
    21c2:	f0 91 3b 06 	lds	r31, 0x063B
    21c6:	40 e0       	ldi	r20, 0x00	; 0
    21c8:	50 e0       	ldi	r21, 0x00	; 0
    21ca:	20 e0       	ldi	r18, 0x00	; 0
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	26 c0       	rjmp	.+76     	; 0x221c <malloc+0x6c>
    21d0:	60 81       	ld	r22, Z
    21d2:	71 81       	ldd	r23, Z+1	; 0x01
    21d4:	68 17       	cp	r22, r24
    21d6:	79 07       	cpc	r23, r25
    21d8:	e0 f0       	brcs	.+56     	; 0x2212 <malloc+0x62>
    21da:	68 17       	cp	r22, r24
    21dc:	79 07       	cpc	r23, r25
    21de:	81 f4       	brne	.+32     	; 0x2200 <malloc+0x50>
    21e0:	82 81       	ldd	r24, Z+2	; 0x02
    21e2:	93 81       	ldd	r25, Z+3	; 0x03
    21e4:	21 15       	cp	r18, r1
    21e6:	31 05       	cpc	r19, r1
    21e8:	31 f0       	breq	.+12     	; 0x21f6 <malloc+0x46>
    21ea:	d9 01       	movw	r26, r18
    21ec:	13 96       	adiw	r26, 0x03	; 3
    21ee:	9c 93       	st	X, r25
    21f0:	8e 93       	st	-X, r24
    21f2:	12 97       	sbiw	r26, 0x02	; 2
    21f4:	2b c0       	rjmp	.+86     	; 0x224c <malloc+0x9c>
    21f6:	90 93 3b 06 	sts	0x063B, r25
    21fa:	80 93 3a 06 	sts	0x063A, r24
    21fe:	26 c0       	rjmp	.+76     	; 0x224c <malloc+0x9c>
    2200:	41 15       	cp	r20, r1
    2202:	51 05       	cpc	r21, r1
    2204:	19 f0       	breq	.+6      	; 0x220c <malloc+0x5c>
    2206:	64 17       	cp	r22, r20
    2208:	75 07       	cpc	r23, r21
    220a:	18 f4       	brcc	.+6      	; 0x2212 <malloc+0x62>
    220c:	ab 01       	movw	r20, r22
    220e:	e9 01       	movw	r28, r18
    2210:	df 01       	movw	r26, r30
    2212:	9f 01       	movw	r18, r30
    2214:	72 81       	ldd	r23, Z+2	; 0x02
    2216:	63 81       	ldd	r22, Z+3	; 0x03
    2218:	e7 2f       	mov	r30, r23
    221a:	f6 2f       	mov	r31, r22
    221c:	30 97       	sbiw	r30, 0x00	; 0
    221e:	c1 f6       	brne	.-80     	; 0x21d0 <malloc+0x20>
    2220:	41 15       	cp	r20, r1
    2222:	51 05       	cpc	r21, r1
    2224:	01 f1       	breq	.+64     	; 0x2266 <malloc+0xb6>
    2226:	48 1b       	sub	r20, r24
    2228:	59 0b       	sbc	r21, r25
    222a:	44 30       	cpi	r20, 0x04	; 4
    222c:	51 05       	cpc	r21, r1
    222e:	80 f4       	brcc	.+32     	; 0x2250 <malloc+0xa0>
    2230:	12 96       	adiw	r26, 0x02	; 2
    2232:	8d 91       	ld	r24, X+
    2234:	9c 91       	ld	r25, X
    2236:	13 97       	sbiw	r26, 0x03	; 3
    2238:	20 97       	sbiw	r28, 0x00	; 0
    223a:	19 f0       	breq	.+6      	; 0x2242 <malloc+0x92>
    223c:	9b 83       	std	Y+3, r25	; 0x03
    223e:	8a 83       	std	Y+2, r24	; 0x02
    2240:	04 c0       	rjmp	.+8      	; 0x224a <malloc+0x9a>
    2242:	90 93 3b 06 	sts	0x063B, r25
    2246:	80 93 3a 06 	sts	0x063A, r24
    224a:	fd 01       	movw	r30, r26
    224c:	32 96       	adiw	r30, 0x02	; 2
    224e:	46 c0       	rjmp	.+140    	; 0x22dc <malloc+0x12c>
    2250:	fd 01       	movw	r30, r26
    2252:	e4 0f       	add	r30, r20
    2254:	f5 1f       	adc	r31, r21
    2256:	81 93       	st	Z+, r24
    2258:	91 93       	st	Z+, r25
    225a:	42 50       	subi	r20, 0x02	; 2
    225c:	50 40       	sbci	r21, 0x00	; 0
    225e:	11 96       	adiw	r26, 0x01	; 1
    2260:	5c 93       	st	X, r21
    2262:	4e 93       	st	-X, r20
    2264:	3b c0       	rjmp	.+118    	; 0x22dc <malloc+0x12c>
    2266:	20 91 38 06 	lds	r18, 0x0638
    226a:	30 91 39 06 	lds	r19, 0x0639
    226e:	21 15       	cp	r18, r1
    2270:	31 05       	cpc	r19, r1
    2272:	41 f4       	brne	.+16     	; 0x2284 <malloc+0xd4>
    2274:	20 91 16 01 	lds	r18, 0x0116
    2278:	30 91 17 01 	lds	r19, 0x0117
    227c:	30 93 39 06 	sts	0x0639, r19
    2280:	20 93 38 06 	sts	0x0638, r18
    2284:	20 91 18 01 	lds	r18, 0x0118
    2288:	30 91 19 01 	lds	r19, 0x0119
    228c:	21 15       	cp	r18, r1
    228e:	31 05       	cpc	r19, r1
    2290:	41 f4       	brne	.+16     	; 0x22a2 <malloc+0xf2>
    2292:	2d b7       	in	r18, 0x3d	; 61
    2294:	3e b7       	in	r19, 0x3e	; 62
    2296:	40 91 14 01 	lds	r20, 0x0114
    229a:	50 91 15 01 	lds	r21, 0x0115
    229e:	24 1b       	sub	r18, r20
    22a0:	35 0b       	sbc	r19, r21
    22a2:	e0 91 38 06 	lds	r30, 0x0638
    22a6:	f0 91 39 06 	lds	r31, 0x0639
    22aa:	e2 17       	cp	r30, r18
    22ac:	f3 07       	cpc	r31, r19
    22ae:	a0 f4       	brcc	.+40     	; 0x22d8 <malloc+0x128>
    22b0:	2e 1b       	sub	r18, r30
    22b2:	3f 0b       	sbc	r19, r31
    22b4:	28 17       	cp	r18, r24
    22b6:	39 07       	cpc	r19, r25
    22b8:	78 f0       	brcs	.+30     	; 0x22d8 <malloc+0x128>
    22ba:	ac 01       	movw	r20, r24
    22bc:	4e 5f       	subi	r20, 0xFE	; 254
    22be:	5f 4f       	sbci	r21, 0xFF	; 255
    22c0:	24 17       	cp	r18, r20
    22c2:	35 07       	cpc	r19, r21
    22c4:	48 f0       	brcs	.+18     	; 0x22d8 <malloc+0x128>
    22c6:	4e 0f       	add	r20, r30
    22c8:	5f 1f       	adc	r21, r31
    22ca:	50 93 39 06 	sts	0x0639, r21
    22ce:	40 93 38 06 	sts	0x0638, r20
    22d2:	81 93       	st	Z+, r24
    22d4:	91 93       	st	Z+, r25
    22d6:	02 c0       	rjmp	.+4      	; 0x22dc <malloc+0x12c>
    22d8:	e0 e0       	ldi	r30, 0x00	; 0
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	cf 01       	movw	r24, r30
    22de:	df 91       	pop	r29
    22e0:	cf 91       	pop	r28
    22e2:	08 95       	ret

000022e4 <free>:
    22e4:	cf 93       	push	r28
    22e6:	df 93       	push	r29
    22e8:	00 97       	sbiw	r24, 0x00	; 0
    22ea:	09 f4       	brne	.+2      	; 0x22ee <free+0xa>
    22ec:	91 c0       	rjmp	.+290    	; 0x2410 <free+0x12c>
    22ee:	fc 01       	movw	r30, r24
    22f0:	32 97       	sbiw	r30, 0x02	; 2
    22f2:	13 82       	std	Z+3, r1	; 0x03
    22f4:	12 82       	std	Z+2, r1	; 0x02
    22f6:	60 91 3a 06 	lds	r22, 0x063A
    22fa:	70 91 3b 06 	lds	r23, 0x063B
    22fe:	61 15       	cp	r22, r1
    2300:	71 05       	cpc	r23, r1
    2302:	81 f4       	brne	.+32     	; 0x2324 <free+0x40>
    2304:	20 81       	ld	r18, Z
    2306:	31 81       	ldd	r19, Z+1	; 0x01
    2308:	28 0f       	add	r18, r24
    230a:	39 1f       	adc	r19, r25
    230c:	80 91 38 06 	lds	r24, 0x0638
    2310:	90 91 39 06 	lds	r25, 0x0639
    2314:	82 17       	cp	r24, r18
    2316:	93 07       	cpc	r25, r19
    2318:	99 f5       	brne	.+102    	; 0x2380 <free+0x9c>
    231a:	f0 93 39 06 	sts	0x0639, r31
    231e:	e0 93 38 06 	sts	0x0638, r30
    2322:	76 c0       	rjmp	.+236    	; 0x2410 <free+0x12c>
    2324:	db 01       	movw	r26, r22
    2326:	80 e0       	ldi	r24, 0x00	; 0
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	02 c0       	rjmp	.+4      	; 0x2330 <free+0x4c>
    232c:	cd 01       	movw	r24, r26
    232e:	d9 01       	movw	r26, r18
    2330:	ae 17       	cp	r26, r30
    2332:	bf 07       	cpc	r27, r31
    2334:	48 f4       	brcc	.+18     	; 0x2348 <free+0x64>
    2336:	12 96       	adiw	r26, 0x02	; 2
    2338:	2d 91       	ld	r18, X+
    233a:	3c 91       	ld	r19, X
    233c:	13 97       	sbiw	r26, 0x03	; 3
    233e:	21 15       	cp	r18, r1
    2340:	31 05       	cpc	r19, r1
    2342:	a1 f7       	brne	.-24     	; 0x232c <free+0x48>
    2344:	cd 01       	movw	r24, r26
    2346:	21 c0       	rjmp	.+66     	; 0x238a <free+0xa6>
    2348:	b3 83       	std	Z+3, r27	; 0x03
    234a:	a2 83       	std	Z+2, r26	; 0x02
    234c:	ef 01       	movw	r28, r30
    234e:	49 91       	ld	r20, Y+
    2350:	59 91       	ld	r21, Y+
    2352:	9e 01       	movw	r18, r28
    2354:	24 0f       	add	r18, r20
    2356:	35 1f       	adc	r19, r21
    2358:	a2 17       	cp	r26, r18
    235a:	b3 07       	cpc	r27, r19
    235c:	79 f4       	brne	.+30     	; 0x237c <free+0x98>
    235e:	2d 91       	ld	r18, X+
    2360:	3c 91       	ld	r19, X
    2362:	11 97       	sbiw	r26, 0x01	; 1
    2364:	24 0f       	add	r18, r20
    2366:	35 1f       	adc	r19, r21
    2368:	2e 5f       	subi	r18, 0xFE	; 254
    236a:	3f 4f       	sbci	r19, 0xFF	; 255
    236c:	31 83       	std	Z+1, r19	; 0x01
    236e:	20 83       	st	Z, r18
    2370:	12 96       	adiw	r26, 0x02	; 2
    2372:	2d 91       	ld	r18, X+
    2374:	3c 91       	ld	r19, X
    2376:	13 97       	sbiw	r26, 0x03	; 3
    2378:	33 83       	std	Z+3, r19	; 0x03
    237a:	22 83       	std	Z+2, r18	; 0x02
    237c:	00 97       	sbiw	r24, 0x00	; 0
    237e:	29 f4       	brne	.+10     	; 0x238a <free+0xa6>
    2380:	f0 93 3b 06 	sts	0x063B, r31
    2384:	e0 93 3a 06 	sts	0x063A, r30
    2388:	43 c0       	rjmp	.+134    	; 0x2410 <free+0x12c>
    238a:	dc 01       	movw	r26, r24
    238c:	13 96       	adiw	r26, 0x03	; 3
    238e:	fc 93       	st	X, r31
    2390:	ee 93       	st	-X, r30
    2392:	12 97       	sbiw	r26, 0x02	; 2
    2394:	4d 91       	ld	r20, X+
    2396:	5d 91       	ld	r21, X+
    2398:	a4 0f       	add	r26, r20
    239a:	b5 1f       	adc	r27, r21
    239c:	ea 17       	cp	r30, r26
    239e:	fb 07       	cpc	r31, r27
    23a0:	69 f4       	brne	.+26     	; 0x23bc <free+0xd8>
    23a2:	20 81       	ld	r18, Z
    23a4:	31 81       	ldd	r19, Z+1	; 0x01
    23a6:	24 0f       	add	r18, r20
    23a8:	35 1f       	adc	r19, r21
    23aa:	2e 5f       	subi	r18, 0xFE	; 254
    23ac:	3f 4f       	sbci	r19, 0xFF	; 255
    23ae:	ec 01       	movw	r28, r24
    23b0:	39 83       	std	Y+1, r19	; 0x01
    23b2:	28 83       	st	Y, r18
    23b4:	22 81       	ldd	r18, Z+2	; 0x02
    23b6:	33 81       	ldd	r19, Z+3	; 0x03
    23b8:	3b 83       	std	Y+3, r19	; 0x03
    23ba:	2a 83       	std	Y+2, r18	; 0x02
    23bc:	e0 e0       	ldi	r30, 0x00	; 0
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	02 c0       	rjmp	.+4      	; 0x23c6 <free+0xe2>
    23c2:	fb 01       	movw	r30, r22
    23c4:	bc 01       	movw	r22, r24
    23c6:	db 01       	movw	r26, r22
    23c8:	12 96       	adiw	r26, 0x02	; 2
    23ca:	8d 91       	ld	r24, X+
    23cc:	9c 91       	ld	r25, X
    23ce:	13 97       	sbiw	r26, 0x03	; 3
    23d0:	00 97       	sbiw	r24, 0x00	; 0
    23d2:	b9 f7       	brne	.-18     	; 0x23c2 <free+0xde>
    23d4:	9b 01       	movw	r18, r22
    23d6:	2e 5f       	subi	r18, 0xFE	; 254
    23d8:	3f 4f       	sbci	r19, 0xFF	; 255
    23da:	8d 91       	ld	r24, X+
    23dc:	9c 91       	ld	r25, X
    23de:	11 97       	sbiw	r26, 0x01	; 1
    23e0:	82 0f       	add	r24, r18
    23e2:	93 1f       	adc	r25, r19
    23e4:	40 91 38 06 	lds	r20, 0x0638
    23e8:	50 91 39 06 	lds	r21, 0x0639
    23ec:	48 17       	cp	r20, r24
    23ee:	59 07       	cpc	r21, r25
    23f0:	79 f4       	brne	.+30     	; 0x2410 <free+0x12c>
    23f2:	30 97       	sbiw	r30, 0x00	; 0
    23f4:	29 f4       	brne	.+10     	; 0x2400 <free+0x11c>
    23f6:	10 92 3b 06 	sts	0x063B, r1
    23fa:	10 92 3a 06 	sts	0x063A, r1
    23fe:	02 c0       	rjmp	.+4      	; 0x2404 <free+0x120>
    2400:	13 82       	std	Z+3, r1	; 0x03
    2402:	12 82       	std	Z+2, r1	; 0x02
    2404:	22 50       	subi	r18, 0x02	; 2
    2406:	30 40       	sbci	r19, 0x00	; 0
    2408:	30 93 39 06 	sts	0x0639, r19
    240c:	20 93 38 06 	sts	0x0638, r18
    2410:	df 91       	pop	r29
    2412:	cf 91       	pop	r28
    2414:	08 95       	ret

00002416 <memset>:
    2416:	dc 01       	movw	r26, r24
    2418:	01 c0       	rjmp	.+2      	; 0x241c <memset+0x6>
    241a:	6d 93       	st	X+, r22
    241c:	41 50       	subi	r20, 0x01	; 1
    241e:	50 40       	sbci	r21, 0x00	; 0
    2420:	e0 f7       	brcc	.-8      	; 0x241a <memset+0x4>
    2422:	08 95       	ret

00002424 <strlen>:
    2424:	fc 01       	movw	r30, r24
    2426:	01 90       	ld	r0, Z+
    2428:	00 20       	and	r0, r0
    242a:	e9 f7       	brne	.-6      	; 0x2426 <strlen+0x2>
    242c:	80 95       	com	r24
    242e:	90 95       	com	r25
    2430:	8e 0f       	add	r24, r30
    2432:	9f 1f       	adc	r25, r31
    2434:	08 95       	ret

00002436 <sprintf>:
    2436:	ae e0       	ldi	r26, 0x0E	; 14
    2438:	b0 e0       	ldi	r27, 0x00	; 0
    243a:	e1 e2       	ldi	r30, 0x21	; 33
    243c:	f2 e1       	ldi	r31, 0x12	; 18
    243e:	0c 94 8b 10 	jmp	0x2116	; 0x2116 <__prologue_saves__+0x1c>
    2442:	0d 89       	ldd	r16, Y+21	; 0x15
    2444:	1e 89       	ldd	r17, Y+22	; 0x16
    2446:	86 e0       	ldi	r24, 0x06	; 6
    2448:	8c 83       	std	Y+4, r24	; 0x04
    244a:	1a 83       	std	Y+2, r17	; 0x02
    244c:	09 83       	std	Y+1, r16	; 0x01
    244e:	8f ef       	ldi	r24, 0xFF	; 255
    2450:	9f e7       	ldi	r25, 0x7F	; 127
    2452:	9e 83       	std	Y+6, r25	; 0x06
    2454:	8d 83       	std	Y+5, r24	; 0x05
    2456:	9e 01       	movw	r18, r28
    2458:	27 5e       	subi	r18, 0xE7	; 231
    245a:	3f 4f       	sbci	r19, 0xFF	; 255
    245c:	ce 01       	movw	r24, r28
    245e:	01 96       	adiw	r24, 0x01	; 1
    2460:	6f 89       	ldd	r22, Y+23	; 0x17
    2462:	78 8d       	ldd	r23, Y+24	; 0x18
    2464:	a9 01       	movw	r20, r18
    2466:	0e 94 3e 12 	call	0x247c	; 0x247c <vfprintf>
    246a:	ef 81       	ldd	r30, Y+7	; 0x07
    246c:	f8 85       	ldd	r31, Y+8	; 0x08
    246e:	e0 0f       	add	r30, r16
    2470:	f1 1f       	adc	r31, r17
    2472:	10 82       	st	Z, r1
    2474:	2e 96       	adiw	r28, 0x0e	; 14
    2476:	e4 e0       	ldi	r30, 0x04	; 4
    2478:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__epilogue_restores__+0x1c>

0000247c <vfprintf>:
    247c:	ac e0       	ldi	r26, 0x0C	; 12
    247e:	b0 e0       	ldi	r27, 0x00	; 0
    2480:	e4 e4       	ldi	r30, 0x44	; 68
    2482:	f2 e1       	ldi	r31, 0x12	; 18
    2484:	0c 94 7d 10 	jmp	0x20fa	; 0x20fa <__prologue_saves__>
    2488:	6c 01       	movw	r12, r24
    248a:	1b 01       	movw	r2, r22
    248c:	8a 01       	movw	r16, r20
    248e:	fc 01       	movw	r30, r24
    2490:	17 82       	std	Z+7, r1	; 0x07
    2492:	16 82       	std	Z+6, r1	; 0x06
    2494:	83 81       	ldd	r24, Z+3	; 0x03
    2496:	81 ff       	sbrs	r24, 1
    2498:	d1 c1       	rjmp	.+930    	; 0x283c <vfprintf+0x3c0>
    249a:	2e 01       	movw	r4, r28
    249c:	08 94       	sec
    249e:	41 1c       	adc	r4, r1
    24a0:	51 1c       	adc	r5, r1
    24a2:	f6 01       	movw	r30, r12
    24a4:	93 81       	ldd	r25, Z+3	; 0x03
    24a6:	f1 01       	movw	r30, r2
    24a8:	93 fd       	sbrc	r25, 3
    24aa:	85 91       	lpm	r24, Z+
    24ac:	93 ff       	sbrs	r25, 3
    24ae:	81 91       	ld	r24, Z+
    24b0:	1f 01       	movw	r2, r30
    24b2:	88 23       	and	r24, r24
    24b4:	09 f4       	brne	.+2      	; 0x24b8 <vfprintf+0x3c>
    24b6:	be c1       	rjmp	.+892    	; 0x2834 <vfprintf+0x3b8>
    24b8:	85 32       	cpi	r24, 0x25	; 37
    24ba:	39 f4       	brne	.+14     	; 0x24ca <vfprintf+0x4e>
    24bc:	93 fd       	sbrc	r25, 3
    24be:	85 91       	lpm	r24, Z+
    24c0:	93 ff       	sbrs	r25, 3
    24c2:	81 91       	ld	r24, Z+
    24c4:	1f 01       	movw	r2, r30
    24c6:	85 32       	cpi	r24, 0x25	; 37
    24c8:	29 f4       	brne	.+10     	; 0x24d4 <vfprintf+0x58>
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	b6 01       	movw	r22, r12
    24ce:	0e 94 3b 14 	call	0x2876	; 0x2876 <fputc>
    24d2:	e7 cf       	rjmp	.-50     	; 0x24a2 <vfprintf+0x26>
    24d4:	ee 24       	eor	r14, r14
    24d6:	ff 24       	eor	r15, r15
    24d8:	20 e0       	ldi	r18, 0x00	; 0
    24da:	20 32       	cpi	r18, 0x20	; 32
    24dc:	b0 f4       	brcc	.+44     	; 0x250a <vfprintf+0x8e>
    24de:	8b 32       	cpi	r24, 0x2B	; 43
    24e0:	69 f0       	breq	.+26     	; 0x24fc <vfprintf+0x80>
    24e2:	8c 32       	cpi	r24, 0x2C	; 44
    24e4:	28 f4       	brcc	.+10     	; 0x24f0 <vfprintf+0x74>
    24e6:	80 32       	cpi	r24, 0x20	; 32
    24e8:	51 f0       	breq	.+20     	; 0x24fe <vfprintf+0x82>
    24ea:	83 32       	cpi	r24, 0x23	; 35
    24ec:	71 f4       	brne	.+28     	; 0x250a <vfprintf+0x8e>
    24ee:	0b c0       	rjmp	.+22     	; 0x2506 <vfprintf+0x8a>
    24f0:	8d 32       	cpi	r24, 0x2D	; 45
    24f2:	39 f0       	breq	.+14     	; 0x2502 <vfprintf+0x86>
    24f4:	80 33       	cpi	r24, 0x30	; 48
    24f6:	49 f4       	brne	.+18     	; 0x250a <vfprintf+0x8e>
    24f8:	21 60       	ori	r18, 0x01	; 1
    24fa:	2c c0       	rjmp	.+88     	; 0x2554 <vfprintf+0xd8>
    24fc:	22 60       	ori	r18, 0x02	; 2
    24fe:	24 60       	ori	r18, 0x04	; 4
    2500:	29 c0       	rjmp	.+82     	; 0x2554 <vfprintf+0xd8>
    2502:	28 60       	ori	r18, 0x08	; 8
    2504:	27 c0       	rjmp	.+78     	; 0x2554 <vfprintf+0xd8>
    2506:	20 61       	ori	r18, 0x10	; 16
    2508:	25 c0       	rjmp	.+74     	; 0x2554 <vfprintf+0xd8>
    250a:	27 fd       	sbrc	r18, 7
    250c:	2c c0       	rjmp	.+88     	; 0x2566 <vfprintf+0xea>
    250e:	38 2f       	mov	r19, r24
    2510:	30 53       	subi	r19, 0x30	; 48
    2512:	3a 30       	cpi	r19, 0x0A	; 10
    2514:	98 f4       	brcc	.+38     	; 0x253c <vfprintf+0xc0>
    2516:	26 ff       	sbrs	r18, 6
    2518:	08 c0       	rjmp	.+16     	; 0x252a <vfprintf+0xae>
    251a:	8e 2d       	mov	r24, r14
    251c:	88 0f       	add	r24, r24
    251e:	e8 2e       	mov	r14, r24
    2520:	ee 0c       	add	r14, r14
    2522:	ee 0c       	add	r14, r14
    2524:	e8 0e       	add	r14, r24
    2526:	e3 0e       	add	r14, r19
    2528:	15 c0       	rjmp	.+42     	; 0x2554 <vfprintf+0xd8>
    252a:	8f 2d       	mov	r24, r15
    252c:	88 0f       	add	r24, r24
    252e:	f8 2e       	mov	r15, r24
    2530:	ff 0c       	add	r15, r15
    2532:	ff 0c       	add	r15, r15
    2534:	f8 0e       	add	r15, r24
    2536:	f3 0e       	add	r15, r19
    2538:	20 62       	ori	r18, 0x20	; 32
    253a:	0c c0       	rjmp	.+24     	; 0x2554 <vfprintf+0xd8>
    253c:	8e 32       	cpi	r24, 0x2E	; 46
    253e:	21 f4       	brne	.+8      	; 0x2548 <vfprintf+0xcc>
    2540:	26 fd       	sbrc	r18, 6
    2542:	78 c1       	rjmp	.+752    	; 0x2834 <vfprintf+0x3b8>
    2544:	20 64       	ori	r18, 0x40	; 64
    2546:	06 c0       	rjmp	.+12     	; 0x2554 <vfprintf+0xd8>
    2548:	8c 36       	cpi	r24, 0x6C	; 108
    254a:	11 f4       	brne	.+4      	; 0x2550 <vfprintf+0xd4>
    254c:	20 68       	ori	r18, 0x80	; 128
    254e:	02 c0       	rjmp	.+4      	; 0x2554 <vfprintf+0xd8>
    2550:	88 36       	cpi	r24, 0x68	; 104
    2552:	49 f4       	brne	.+18     	; 0x2566 <vfprintf+0xea>
    2554:	f1 01       	movw	r30, r2
    2556:	93 fd       	sbrc	r25, 3
    2558:	85 91       	lpm	r24, Z+
    255a:	93 ff       	sbrs	r25, 3
    255c:	81 91       	ld	r24, Z+
    255e:	1f 01       	movw	r2, r30
    2560:	88 23       	and	r24, r24
    2562:	09 f0       	breq	.+2      	; 0x2566 <vfprintf+0xea>
    2564:	ba cf       	rjmp	.-140    	; 0x24da <vfprintf+0x5e>
    2566:	98 2f       	mov	r25, r24
    2568:	95 54       	subi	r25, 0x45	; 69
    256a:	93 30       	cpi	r25, 0x03	; 3
    256c:	18 f0       	brcs	.+6      	; 0x2574 <vfprintf+0xf8>
    256e:	90 52       	subi	r25, 0x20	; 32
    2570:	93 30       	cpi	r25, 0x03	; 3
    2572:	28 f4       	brcc	.+10     	; 0x257e <vfprintf+0x102>
    2574:	0c 5f       	subi	r16, 0xFC	; 252
    2576:	1f 4f       	sbci	r17, 0xFF	; 255
    2578:	ff e3       	ldi	r31, 0x3F	; 63
    257a:	f9 83       	std	Y+1, r31	; 0x01
    257c:	0d c0       	rjmp	.+26     	; 0x2598 <vfprintf+0x11c>
    257e:	83 36       	cpi	r24, 0x63	; 99
    2580:	31 f0       	breq	.+12     	; 0x258e <vfprintf+0x112>
    2582:	83 37       	cpi	r24, 0x73	; 115
    2584:	71 f0       	breq	.+28     	; 0x25a2 <vfprintf+0x126>
    2586:	83 35       	cpi	r24, 0x53	; 83
    2588:	09 f0       	breq	.+2      	; 0x258c <vfprintf+0x110>
    258a:	60 c0       	rjmp	.+192    	; 0x264c <vfprintf+0x1d0>
    258c:	22 c0       	rjmp	.+68     	; 0x25d2 <vfprintf+0x156>
    258e:	f8 01       	movw	r30, r16
    2590:	80 81       	ld	r24, Z
    2592:	89 83       	std	Y+1, r24	; 0x01
    2594:	0e 5f       	subi	r16, 0xFE	; 254
    2596:	1f 4f       	sbci	r17, 0xFF	; 255
    2598:	42 01       	movw	r8, r4
    259a:	71 e0       	ldi	r23, 0x01	; 1
    259c:	a7 2e       	mov	r10, r23
    259e:	b1 2c       	mov	r11, r1
    25a0:	16 c0       	rjmp	.+44     	; 0x25ce <vfprintf+0x152>
    25a2:	62 e0       	ldi	r22, 0x02	; 2
    25a4:	66 2e       	mov	r6, r22
    25a6:	71 2c       	mov	r7, r1
    25a8:	60 0e       	add	r6, r16
    25aa:	71 1e       	adc	r7, r17
    25ac:	f8 01       	movw	r30, r16
    25ae:	80 80       	ld	r8, Z
    25b0:	91 80       	ldd	r9, Z+1	; 0x01
    25b2:	26 ff       	sbrs	r18, 6
    25b4:	03 c0       	rjmp	.+6      	; 0x25bc <vfprintf+0x140>
    25b6:	6e 2d       	mov	r22, r14
    25b8:	70 e0       	ldi	r23, 0x00	; 0
    25ba:	02 c0       	rjmp	.+4      	; 0x25c0 <vfprintf+0x144>
    25bc:	6f ef       	ldi	r22, 0xFF	; 255
    25be:	7f ef       	ldi	r23, 0xFF	; 255
    25c0:	c4 01       	movw	r24, r8
    25c2:	2c 87       	std	Y+12, r18	; 0x0c
    25c4:	0e 94 30 14 	call	0x2860	; 0x2860 <strnlen>
    25c8:	5c 01       	movw	r10, r24
    25ca:	83 01       	movw	r16, r6
    25cc:	2c 85       	ldd	r18, Y+12	; 0x0c
    25ce:	2f 77       	andi	r18, 0x7F	; 127
    25d0:	17 c0       	rjmp	.+46     	; 0x2600 <vfprintf+0x184>
    25d2:	52 e0       	ldi	r21, 0x02	; 2
    25d4:	65 2e       	mov	r6, r21
    25d6:	71 2c       	mov	r7, r1
    25d8:	60 0e       	add	r6, r16
    25da:	71 1e       	adc	r7, r17
    25dc:	f8 01       	movw	r30, r16
    25de:	80 80       	ld	r8, Z
    25e0:	91 80       	ldd	r9, Z+1	; 0x01
    25e2:	26 ff       	sbrs	r18, 6
    25e4:	03 c0       	rjmp	.+6      	; 0x25ec <vfprintf+0x170>
    25e6:	6e 2d       	mov	r22, r14
    25e8:	70 e0       	ldi	r23, 0x00	; 0
    25ea:	02 c0       	rjmp	.+4      	; 0x25f0 <vfprintf+0x174>
    25ec:	6f ef       	ldi	r22, 0xFF	; 255
    25ee:	7f ef       	ldi	r23, 0xFF	; 255
    25f0:	c4 01       	movw	r24, r8
    25f2:	2c 87       	std	Y+12, r18	; 0x0c
    25f4:	0e 94 25 14 	call	0x284a	; 0x284a <strnlen_P>
    25f8:	5c 01       	movw	r10, r24
    25fa:	2c 85       	ldd	r18, Y+12	; 0x0c
    25fc:	20 68       	ori	r18, 0x80	; 128
    25fe:	83 01       	movw	r16, r6
    2600:	23 fd       	sbrc	r18, 3
    2602:	20 c0       	rjmp	.+64     	; 0x2644 <vfprintf+0x1c8>
    2604:	08 c0       	rjmp	.+16     	; 0x2616 <vfprintf+0x19a>
    2606:	80 e2       	ldi	r24, 0x20	; 32
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	b6 01       	movw	r22, r12
    260c:	2c 87       	std	Y+12, r18	; 0x0c
    260e:	0e 94 3b 14 	call	0x2876	; 0x2876 <fputc>
    2612:	fa 94       	dec	r15
    2614:	2c 85       	ldd	r18, Y+12	; 0x0c
    2616:	8f 2d       	mov	r24, r15
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	a8 16       	cp	r10, r24
    261c:	b9 06       	cpc	r11, r25
    261e:	98 f3       	brcs	.-26     	; 0x2606 <vfprintf+0x18a>
    2620:	11 c0       	rjmp	.+34     	; 0x2644 <vfprintf+0x1c8>
    2622:	f4 01       	movw	r30, r8
    2624:	27 fd       	sbrc	r18, 7
    2626:	85 91       	lpm	r24, Z+
    2628:	27 ff       	sbrs	r18, 7
    262a:	81 91       	ld	r24, Z+
    262c:	4f 01       	movw	r8, r30
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	b6 01       	movw	r22, r12
    2632:	2c 87       	std	Y+12, r18	; 0x0c
    2634:	0e 94 3b 14 	call	0x2876	; 0x2876 <fputc>
    2638:	2c 85       	ldd	r18, Y+12	; 0x0c
    263a:	f1 10       	cpse	r15, r1
    263c:	fa 94       	dec	r15
    263e:	08 94       	sec
    2640:	a1 08       	sbc	r10, r1
    2642:	b1 08       	sbc	r11, r1
    2644:	a1 14       	cp	r10, r1
    2646:	b1 04       	cpc	r11, r1
    2648:	61 f7       	brne	.-40     	; 0x2622 <vfprintf+0x1a6>
    264a:	f1 c0       	rjmp	.+482    	; 0x282e <vfprintf+0x3b2>
    264c:	84 36       	cpi	r24, 0x64	; 100
    264e:	11 f0       	breq	.+4      	; 0x2654 <vfprintf+0x1d8>
    2650:	89 36       	cpi	r24, 0x69	; 105
    2652:	49 f5       	brne	.+82     	; 0x26a6 <vfprintf+0x22a>
    2654:	27 ff       	sbrs	r18, 7
    2656:	08 c0       	rjmp	.+16     	; 0x2668 <vfprintf+0x1ec>
    2658:	f8 01       	movw	r30, r16
    265a:	60 81       	ld	r22, Z
    265c:	71 81       	ldd	r23, Z+1	; 0x01
    265e:	82 81       	ldd	r24, Z+2	; 0x02
    2660:	93 81       	ldd	r25, Z+3	; 0x03
    2662:	0c 5f       	subi	r16, 0xFC	; 252
    2664:	1f 4f       	sbci	r17, 0xFF	; 255
    2666:	09 c0       	rjmp	.+18     	; 0x267a <vfprintf+0x1fe>
    2668:	f8 01       	movw	r30, r16
    266a:	60 81       	ld	r22, Z
    266c:	71 81       	ldd	r23, Z+1	; 0x01
    266e:	88 27       	eor	r24, r24
    2670:	77 fd       	sbrc	r23, 7
    2672:	80 95       	com	r24
    2674:	98 2f       	mov	r25, r24
    2676:	0e 5f       	subi	r16, 0xFE	; 254
    2678:	1f 4f       	sbci	r17, 0xFF	; 255
    267a:	4f e6       	ldi	r20, 0x6F	; 111
    267c:	b4 2e       	mov	r11, r20
    267e:	b2 22       	and	r11, r18
    2680:	97 ff       	sbrs	r25, 7
    2682:	09 c0       	rjmp	.+18     	; 0x2696 <vfprintf+0x21a>
    2684:	90 95       	com	r25
    2686:	80 95       	com	r24
    2688:	70 95       	com	r23
    268a:	61 95       	neg	r22
    268c:	7f 4f       	sbci	r23, 0xFF	; 255
    268e:	8f 4f       	sbci	r24, 0xFF	; 255
    2690:	9f 4f       	sbci	r25, 0xFF	; 255
    2692:	f0 e8       	ldi	r31, 0x80	; 128
    2694:	bf 2a       	or	r11, r31
    2696:	a2 01       	movw	r20, r4
    2698:	2a e0       	ldi	r18, 0x0A	; 10
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	0e 94 67 14 	call	0x28ce	; 0x28ce <__ultoa_invert>
    26a0:	78 2e       	mov	r7, r24
    26a2:	74 18       	sub	r7, r4
    26a4:	45 c0       	rjmp	.+138    	; 0x2730 <vfprintf+0x2b4>
    26a6:	85 37       	cpi	r24, 0x75	; 117
    26a8:	31 f4       	brne	.+12     	; 0x26b6 <vfprintf+0x23a>
    26aa:	3f ee       	ldi	r19, 0xEF	; 239
    26ac:	b3 2e       	mov	r11, r19
    26ae:	b2 22       	and	r11, r18
    26b0:	2a e0       	ldi	r18, 0x0A	; 10
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	25 c0       	rjmp	.+74     	; 0x2700 <vfprintf+0x284>
    26b6:	99 ef       	ldi	r25, 0xF9	; 249
    26b8:	b9 2e       	mov	r11, r25
    26ba:	b2 22       	and	r11, r18
    26bc:	8f 36       	cpi	r24, 0x6F	; 111
    26be:	c1 f0       	breq	.+48     	; 0x26f0 <vfprintf+0x274>
    26c0:	80 37       	cpi	r24, 0x70	; 112
    26c2:	20 f4       	brcc	.+8      	; 0x26cc <vfprintf+0x250>
    26c4:	88 35       	cpi	r24, 0x58	; 88
    26c6:	09 f0       	breq	.+2      	; 0x26ca <vfprintf+0x24e>
    26c8:	b5 c0       	rjmp	.+362    	; 0x2834 <vfprintf+0x3b8>
    26ca:	0d c0       	rjmp	.+26     	; 0x26e6 <vfprintf+0x26a>
    26cc:	80 37       	cpi	r24, 0x70	; 112
    26ce:	21 f0       	breq	.+8      	; 0x26d8 <vfprintf+0x25c>
    26d0:	88 37       	cpi	r24, 0x78	; 120
    26d2:	09 f0       	breq	.+2      	; 0x26d6 <vfprintf+0x25a>
    26d4:	af c0       	rjmp	.+350    	; 0x2834 <vfprintf+0x3b8>
    26d6:	02 c0       	rjmp	.+4      	; 0x26dc <vfprintf+0x260>
    26d8:	20 e1       	ldi	r18, 0x10	; 16
    26da:	b2 2a       	or	r11, r18
    26dc:	b4 fe       	sbrs	r11, 4
    26de:	0b c0       	rjmp	.+22     	; 0x26f6 <vfprintf+0x27a>
    26e0:	84 e0       	ldi	r24, 0x04	; 4
    26e2:	b8 2a       	or	r11, r24
    26e4:	08 c0       	rjmp	.+16     	; 0x26f6 <vfprintf+0x27a>
    26e6:	b4 fe       	sbrs	r11, 4
    26e8:	09 c0       	rjmp	.+18     	; 0x26fc <vfprintf+0x280>
    26ea:	e6 e0       	ldi	r30, 0x06	; 6
    26ec:	be 2a       	or	r11, r30
    26ee:	06 c0       	rjmp	.+12     	; 0x26fc <vfprintf+0x280>
    26f0:	28 e0       	ldi	r18, 0x08	; 8
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	05 c0       	rjmp	.+10     	; 0x2700 <vfprintf+0x284>
    26f6:	20 e1       	ldi	r18, 0x10	; 16
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	02 c0       	rjmp	.+4      	; 0x2700 <vfprintf+0x284>
    26fc:	20 e1       	ldi	r18, 0x10	; 16
    26fe:	32 e0       	ldi	r19, 0x02	; 2
    2700:	b7 fe       	sbrs	r11, 7
    2702:	08 c0       	rjmp	.+16     	; 0x2714 <vfprintf+0x298>
    2704:	f8 01       	movw	r30, r16
    2706:	60 81       	ld	r22, Z
    2708:	71 81       	ldd	r23, Z+1	; 0x01
    270a:	82 81       	ldd	r24, Z+2	; 0x02
    270c:	93 81       	ldd	r25, Z+3	; 0x03
    270e:	0c 5f       	subi	r16, 0xFC	; 252
    2710:	1f 4f       	sbci	r17, 0xFF	; 255
    2712:	07 c0       	rjmp	.+14     	; 0x2722 <vfprintf+0x2a6>
    2714:	f8 01       	movw	r30, r16
    2716:	60 81       	ld	r22, Z
    2718:	71 81       	ldd	r23, Z+1	; 0x01
    271a:	80 e0       	ldi	r24, 0x00	; 0
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	0e 5f       	subi	r16, 0xFE	; 254
    2720:	1f 4f       	sbci	r17, 0xFF	; 255
    2722:	a2 01       	movw	r20, r4
    2724:	0e 94 67 14 	call	0x28ce	; 0x28ce <__ultoa_invert>
    2728:	78 2e       	mov	r7, r24
    272a:	74 18       	sub	r7, r4
    272c:	ff e7       	ldi	r31, 0x7F	; 127
    272e:	bf 22       	and	r11, r31
    2730:	b6 fe       	sbrs	r11, 6
    2732:	0b c0       	rjmp	.+22     	; 0x274a <vfprintf+0x2ce>
    2734:	2e ef       	ldi	r18, 0xFE	; 254
    2736:	b2 22       	and	r11, r18
    2738:	7e 14       	cp	r7, r14
    273a:	38 f4       	brcc	.+14     	; 0x274a <vfprintf+0x2ce>
    273c:	b4 fe       	sbrs	r11, 4
    273e:	07 c0       	rjmp	.+14     	; 0x274e <vfprintf+0x2d2>
    2740:	b2 fc       	sbrc	r11, 2
    2742:	05 c0       	rjmp	.+10     	; 0x274e <vfprintf+0x2d2>
    2744:	8f ee       	ldi	r24, 0xEF	; 239
    2746:	b8 22       	and	r11, r24
    2748:	02 c0       	rjmp	.+4      	; 0x274e <vfprintf+0x2d2>
    274a:	a7 2c       	mov	r10, r7
    274c:	01 c0       	rjmp	.+2      	; 0x2750 <vfprintf+0x2d4>
    274e:	ae 2c       	mov	r10, r14
    2750:	8b 2d       	mov	r24, r11
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	b4 fe       	sbrs	r11, 4
    2756:	0d c0       	rjmp	.+26     	; 0x2772 <vfprintf+0x2f6>
    2758:	fe 01       	movw	r30, r28
    275a:	e7 0d       	add	r30, r7
    275c:	f1 1d       	adc	r31, r1
    275e:	20 81       	ld	r18, Z
    2760:	20 33       	cpi	r18, 0x30	; 48
    2762:	19 f4       	brne	.+6      	; 0x276a <vfprintf+0x2ee>
    2764:	e9 ee       	ldi	r30, 0xE9	; 233
    2766:	be 22       	and	r11, r30
    2768:	09 c0       	rjmp	.+18     	; 0x277c <vfprintf+0x300>
    276a:	a3 94       	inc	r10
    276c:	b2 fe       	sbrs	r11, 2
    276e:	06 c0       	rjmp	.+12     	; 0x277c <vfprintf+0x300>
    2770:	04 c0       	rjmp	.+8      	; 0x277a <vfprintf+0x2fe>
    2772:	86 78       	andi	r24, 0x86	; 134
    2774:	90 70       	andi	r25, 0x00	; 0
    2776:	00 97       	sbiw	r24, 0x00	; 0
    2778:	09 f0       	breq	.+2      	; 0x277c <vfprintf+0x300>
    277a:	a3 94       	inc	r10
    277c:	8b 2c       	mov	r8, r11
    277e:	99 24       	eor	r9, r9
    2780:	b3 fc       	sbrc	r11, 3
    2782:	14 c0       	rjmp	.+40     	; 0x27ac <vfprintf+0x330>
    2784:	b0 fe       	sbrs	r11, 0
    2786:	0f c0       	rjmp	.+30     	; 0x27a6 <vfprintf+0x32a>
    2788:	af 14       	cp	r10, r15
    278a:	28 f4       	brcc	.+10     	; 0x2796 <vfprintf+0x31a>
    278c:	e7 2c       	mov	r14, r7
    278e:	ef 0c       	add	r14, r15
    2790:	ea 18       	sub	r14, r10
    2792:	af 2c       	mov	r10, r15
    2794:	08 c0       	rjmp	.+16     	; 0x27a6 <vfprintf+0x32a>
    2796:	e7 2c       	mov	r14, r7
    2798:	06 c0       	rjmp	.+12     	; 0x27a6 <vfprintf+0x32a>
    279a:	80 e2       	ldi	r24, 0x20	; 32
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	b6 01       	movw	r22, r12
    27a0:	0e 94 3b 14 	call	0x2876	; 0x2876 <fputc>
    27a4:	a3 94       	inc	r10
    27a6:	af 14       	cp	r10, r15
    27a8:	c0 f3       	brcs	.-16     	; 0x279a <vfprintf+0x31e>
    27aa:	04 c0       	rjmp	.+8      	; 0x27b4 <vfprintf+0x338>
    27ac:	af 14       	cp	r10, r15
    27ae:	10 f4       	brcc	.+4      	; 0x27b4 <vfprintf+0x338>
    27b0:	fa 18       	sub	r15, r10
    27b2:	01 c0       	rjmp	.+2      	; 0x27b6 <vfprintf+0x33a>
    27b4:	ff 24       	eor	r15, r15
    27b6:	84 fe       	sbrs	r8, 4
    27b8:	0f c0       	rjmp	.+30     	; 0x27d8 <vfprintf+0x35c>
    27ba:	80 e3       	ldi	r24, 0x30	; 48
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	b6 01       	movw	r22, r12
    27c0:	0e 94 3b 14 	call	0x2876	; 0x2876 <fputc>
    27c4:	82 fe       	sbrs	r8, 2
    27c6:	1f c0       	rjmp	.+62     	; 0x2806 <vfprintf+0x38a>
    27c8:	81 fe       	sbrs	r8, 1
    27ca:	03 c0       	rjmp	.+6      	; 0x27d2 <vfprintf+0x356>
    27cc:	88 e5       	ldi	r24, 0x58	; 88
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	10 c0       	rjmp	.+32     	; 0x27f2 <vfprintf+0x376>
    27d2:	88 e7       	ldi	r24, 0x78	; 120
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	0d c0       	rjmp	.+26     	; 0x27f2 <vfprintf+0x376>
    27d8:	c4 01       	movw	r24, r8
    27da:	86 78       	andi	r24, 0x86	; 134
    27dc:	90 70       	andi	r25, 0x00	; 0
    27de:	00 97       	sbiw	r24, 0x00	; 0
    27e0:	91 f0       	breq	.+36     	; 0x2806 <vfprintf+0x38a>
    27e2:	81 fc       	sbrc	r8, 1
    27e4:	02 c0       	rjmp	.+4      	; 0x27ea <vfprintf+0x36e>
    27e6:	80 e2       	ldi	r24, 0x20	; 32
    27e8:	01 c0       	rjmp	.+2      	; 0x27ec <vfprintf+0x370>
    27ea:	8b e2       	ldi	r24, 0x2B	; 43
    27ec:	b7 fc       	sbrc	r11, 7
    27ee:	8d e2       	ldi	r24, 0x2D	; 45
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	b6 01       	movw	r22, r12
    27f4:	0e 94 3b 14 	call	0x2876	; 0x2876 <fputc>
    27f8:	06 c0       	rjmp	.+12     	; 0x2806 <vfprintf+0x38a>
    27fa:	80 e3       	ldi	r24, 0x30	; 48
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	b6 01       	movw	r22, r12
    2800:	0e 94 3b 14 	call	0x2876	; 0x2876 <fputc>
    2804:	ea 94       	dec	r14
    2806:	7e 14       	cp	r7, r14
    2808:	c0 f3       	brcs	.-16     	; 0x27fa <vfprintf+0x37e>
    280a:	7a 94       	dec	r7
    280c:	f2 01       	movw	r30, r4
    280e:	e7 0d       	add	r30, r7
    2810:	f1 1d       	adc	r31, r1
    2812:	80 81       	ld	r24, Z
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	b6 01       	movw	r22, r12
    2818:	0e 94 3b 14 	call	0x2876	; 0x2876 <fputc>
    281c:	77 20       	and	r7, r7
    281e:	a9 f7       	brne	.-22     	; 0x280a <vfprintf+0x38e>
    2820:	06 c0       	rjmp	.+12     	; 0x282e <vfprintf+0x3b2>
    2822:	80 e2       	ldi	r24, 0x20	; 32
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	b6 01       	movw	r22, r12
    2828:	0e 94 3b 14 	call	0x2876	; 0x2876 <fputc>
    282c:	fa 94       	dec	r15
    282e:	ff 20       	and	r15, r15
    2830:	c1 f7       	brne	.-16     	; 0x2822 <vfprintf+0x3a6>
    2832:	37 ce       	rjmp	.-914    	; 0x24a2 <vfprintf+0x26>
    2834:	f6 01       	movw	r30, r12
    2836:	26 81       	ldd	r18, Z+6	; 0x06
    2838:	37 81       	ldd	r19, Z+7	; 0x07
    283a:	02 c0       	rjmp	.+4      	; 0x2840 <vfprintf+0x3c4>
    283c:	2f ef       	ldi	r18, 0xFF	; 255
    283e:	3f ef       	ldi	r19, 0xFF	; 255
    2840:	c9 01       	movw	r24, r18
    2842:	2c 96       	adiw	r28, 0x0c	; 12
    2844:	e2 e1       	ldi	r30, 0x12	; 18
    2846:	0c 94 99 10 	jmp	0x2132	; 0x2132 <__epilogue_restores__>

0000284a <strnlen_P>:
    284a:	fc 01       	movw	r30, r24
    284c:	05 90       	lpm	r0, Z+
    284e:	61 50       	subi	r22, 0x01	; 1
    2850:	70 40       	sbci	r23, 0x00	; 0
    2852:	01 10       	cpse	r0, r1
    2854:	d8 f7       	brcc	.-10     	; 0x284c <strnlen_P+0x2>
    2856:	80 95       	com	r24
    2858:	90 95       	com	r25
    285a:	8e 0f       	add	r24, r30
    285c:	9f 1f       	adc	r25, r31
    285e:	08 95       	ret

00002860 <strnlen>:
    2860:	fc 01       	movw	r30, r24
    2862:	61 50       	subi	r22, 0x01	; 1
    2864:	70 40       	sbci	r23, 0x00	; 0
    2866:	01 90       	ld	r0, Z+
    2868:	01 10       	cpse	r0, r1
    286a:	d8 f7       	brcc	.-10     	; 0x2862 <strnlen+0x2>
    286c:	80 95       	com	r24
    286e:	90 95       	com	r25
    2870:	8e 0f       	add	r24, r30
    2872:	9f 1f       	adc	r25, r31
    2874:	08 95       	ret

00002876 <fputc>:
    2876:	0f 93       	push	r16
    2878:	1f 93       	push	r17
    287a:	cf 93       	push	r28
    287c:	df 93       	push	r29
    287e:	8c 01       	movw	r16, r24
    2880:	eb 01       	movw	r28, r22
    2882:	8b 81       	ldd	r24, Y+3	; 0x03
    2884:	81 ff       	sbrs	r24, 1
    2886:	1b c0       	rjmp	.+54     	; 0x28be <fputc+0x48>
    2888:	82 ff       	sbrs	r24, 2
    288a:	0d c0       	rjmp	.+26     	; 0x28a6 <fputc+0x30>
    288c:	2e 81       	ldd	r18, Y+6	; 0x06
    288e:	3f 81       	ldd	r19, Y+7	; 0x07
    2890:	8c 81       	ldd	r24, Y+4	; 0x04
    2892:	9d 81       	ldd	r25, Y+5	; 0x05
    2894:	28 17       	cp	r18, r24
    2896:	39 07       	cpc	r19, r25
    2898:	64 f4       	brge	.+24     	; 0x28b2 <fputc+0x3c>
    289a:	e8 81       	ld	r30, Y
    289c:	f9 81       	ldd	r31, Y+1	; 0x01
    289e:	01 93       	st	Z+, r16
    28a0:	f9 83       	std	Y+1, r31	; 0x01
    28a2:	e8 83       	st	Y, r30
    28a4:	06 c0       	rjmp	.+12     	; 0x28b2 <fputc+0x3c>
    28a6:	e8 85       	ldd	r30, Y+8	; 0x08
    28a8:	f9 85       	ldd	r31, Y+9	; 0x09
    28aa:	80 2f       	mov	r24, r16
    28ac:	09 95       	icall
    28ae:	00 97       	sbiw	r24, 0x00	; 0
    28b0:	31 f4       	brne	.+12     	; 0x28be <fputc+0x48>
    28b2:	8e 81       	ldd	r24, Y+6	; 0x06
    28b4:	9f 81       	ldd	r25, Y+7	; 0x07
    28b6:	01 96       	adiw	r24, 0x01	; 1
    28b8:	9f 83       	std	Y+7, r25	; 0x07
    28ba:	8e 83       	std	Y+6, r24	; 0x06
    28bc:	02 c0       	rjmp	.+4      	; 0x28c2 <fputc+0x4c>
    28be:	0f ef       	ldi	r16, 0xFF	; 255
    28c0:	1f ef       	ldi	r17, 0xFF	; 255
    28c2:	c8 01       	movw	r24, r16
    28c4:	df 91       	pop	r29
    28c6:	cf 91       	pop	r28
    28c8:	1f 91       	pop	r17
    28ca:	0f 91       	pop	r16
    28cc:	08 95       	ret

000028ce <__ultoa_invert>:
    28ce:	fa 01       	movw	r30, r20
    28d0:	aa 27       	eor	r26, r26
    28d2:	28 30       	cpi	r18, 0x08	; 8
    28d4:	51 f1       	breq	.+84     	; 0x292a <__ultoa_invert+0x5c>
    28d6:	20 31       	cpi	r18, 0x10	; 16
    28d8:	81 f1       	breq	.+96     	; 0x293a <__ultoa_invert+0x6c>
    28da:	e8 94       	clt
    28dc:	6f 93       	push	r22
    28de:	6e 7f       	andi	r22, 0xFE	; 254
    28e0:	6e 5f       	subi	r22, 0xFE	; 254
    28e2:	7f 4f       	sbci	r23, 0xFF	; 255
    28e4:	8f 4f       	sbci	r24, 0xFF	; 255
    28e6:	9f 4f       	sbci	r25, 0xFF	; 255
    28e8:	af 4f       	sbci	r26, 0xFF	; 255
    28ea:	b1 e0       	ldi	r27, 0x01	; 1
    28ec:	3e d0       	rcall	.+124    	; 0x296a <__ultoa_invert+0x9c>
    28ee:	b4 e0       	ldi	r27, 0x04	; 4
    28f0:	3c d0       	rcall	.+120    	; 0x296a <__ultoa_invert+0x9c>
    28f2:	67 0f       	add	r22, r23
    28f4:	78 1f       	adc	r23, r24
    28f6:	89 1f       	adc	r24, r25
    28f8:	9a 1f       	adc	r25, r26
    28fa:	a1 1d       	adc	r26, r1
    28fc:	68 0f       	add	r22, r24
    28fe:	79 1f       	adc	r23, r25
    2900:	8a 1f       	adc	r24, r26
    2902:	91 1d       	adc	r25, r1
    2904:	a1 1d       	adc	r26, r1
    2906:	6a 0f       	add	r22, r26
    2908:	71 1d       	adc	r23, r1
    290a:	81 1d       	adc	r24, r1
    290c:	91 1d       	adc	r25, r1
    290e:	a1 1d       	adc	r26, r1
    2910:	20 d0       	rcall	.+64     	; 0x2952 <__ultoa_invert+0x84>
    2912:	09 f4       	brne	.+2      	; 0x2916 <__ultoa_invert+0x48>
    2914:	68 94       	set
    2916:	3f 91       	pop	r19
    2918:	2a e0       	ldi	r18, 0x0A	; 10
    291a:	26 9f       	mul	r18, r22
    291c:	11 24       	eor	r1, r1
    291e:	30 19       	sub	r19, r0
    2920:	30 5d       	subi	r19, 0xD0	; 208
    2922:	31 93       	st	Z+, r19
    2924:	de f6       	brtc	.-74     	; 0x28dc <__ultoa_invert+0xe>
    2926:	cf 01       	movw	r24, r30
    2928:	08 95       	ret
    292a:	46 2f       	mov	r20, r22
    292c:	47 70       	andi	r20, 0x07	; 7
    292e:	40 5d       	subi	r20, 0xD0	; 208
    2930:	41 93       	st	Z+, r20
    2932:	b3 e0       	ldi	r27, 0x03	; 3
    2934:	0f d0       	rcall	.+30     	; 0x2954 <__ultoa_invert+0x86>
    2936:	c9 f7       	brne	.-14     	; 0x292a <__ultoa_invert+0x5c>
    2938:	f6 cf       	rjmp	.-20     	; 0x2926 <__ultoa_invert+0x58>
    293a:	46 2f       	mov	r20, r22
    293c:	4f 70       	andi	r20, 0x0F	; 15
    293e:	40 5d       	subi	r20, 0xD0	; 208
    2940:	4a 33       	cpi	r20, 0x3A	; 58
    2942:	18 f0       	brcs	.+6      	; 0x294a <__ultoa_invert+0x7c>
    2944:	49 5d       	subi	r20, 0xD9	; 217
    2946:	31 fd       	sbrc	r19, 1
    2948:	40 52       	subi	r20, 0x20	; 32
    294a:	41 93       	st	Z+, r20
    294c:	02 d0       	rcall	.+4      	; 0x2952 <__ultoa_invert+0x84>
    294e:	a9 f7       	brne	.-22     	; 0x293a <__ultoa_invert+0x6c>
    2950:	ea cf       	rjmp	.-44     	; 0x2926 <__ultoa_invert+0x58>
    2952:	b4 e0       	ldi	r27, 0x04	; 4
    2954:	a6 95       	lsr	r26
    2956:	97 95       	ror	r25
    2958:	87 95       	ror	r24
    295a:	77 95       	ror	r23
    295c:	67 95       	ror	r22
    295e:	ba 95       	dec	r27
    2960:	c9 f7       	brne	.-14     	; 0x2954 <__ultoa_invert+0x86>
    2962:	00 97       	sbiw	r24, 0x00	; 0
    2964:	61 05       	cpc	r22, r1
    2966:	71 05       	cpc	r23, r1
    2968:	08 95       	ret
    296a:	9b 01       	movw	r18, r22
    296c:	ac 01       	movw	r20, r24
    296e:	0a 2e       	mov	r0, r26
    2970:	06 94       	lsr	r0
    2972:	57 95       	ror	r21
    2974:	47 95       	ror	r20
    2976:	37 95       	ror	r19
    2978:	27 95       	ror	r18
    297a:	ba 95       	dec	r27
    297c:	c9 f7       	brne	.-14     	; 0x2970 <__ultoa_invert+0xa2>
    297e:	62 0f       	add	r22, r18
    2980:	73 1f       	adc	r23, r19
    2982:	84 1f       	adc	r24, r20
    2984:	95 1f       	adc	r25, r21
    2986:	a0 1d       	adc	r26, r0
    2988:	08 95       	ret

0000298a <_exit>:
    298a:	f8 94       	cli

0000298c <__stop_program>:
    298c:	ff cf       	rjmp	.-2      	; 0x298c <__stop_program>
