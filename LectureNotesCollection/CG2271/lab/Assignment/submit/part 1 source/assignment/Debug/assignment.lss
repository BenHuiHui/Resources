
assignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000110  00800100  00001cc8  00001d5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cc8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000542  00800210  00800210  00001e6c  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  00001e6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  000025bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000200  00000000  00000000  000026a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000003ff  00000000  00000000  000028a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002bb0  00000000  00000000  00002ca2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001617  00000000  00000000  00005852  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001ed6  00000000  00000000  00006e69  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000330  00000000  00000000  00008d40  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005e7  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000d8b  00000000  00000000  00009657  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000733  00000000  00000000  0000a3e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000080  00000000  00000000  0000ab15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 f4 04 	jmp	0x9e8	; 0x9e8 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 bb 05 	jmp	0xb76	; 0xb76 <__vector_20>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 ec       	ldi	r30, 0xC8	; 200
      7c:	fc e1       	ldi	r31, 0x1C	; 28
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 31       	cpi	r26, 0x10	; 16
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	17 e0       	ldi	r17, 0x07	; 7
      8c:	a0 e1       	ldi	r26, 0x10	; 16
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a2 35       	cpi	r26, 0x52	; 82
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 0a 03 	call	0x614	; 0x614 <main>
      9e:	0c 94 62 0e 	jmp	0x1cc4	; 0x1cc4 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <task1>:
// Base frequency for the buzzer
int buzzer_freq = 1;
int pwm_val = 100;

void task1(void *p)
{
      a6:	0f 93       	push	r16
      a8:	1f 93       	push	r17
      aa:	df 93       	push	r29
      ac:	cf 93       	push	r28
      ae:	cd b7       	in	r28, 0x3d	; 61
      b0:	de b7       	in	r29, 0x3e	; 62
      b2:	a2 97       	sbiw	r28, 0x22	; 34
      b4:	0f b6       	in	r0, 0x3f	; 63
      b6:	f8 94       	cli
      b8:	de bf       	out	0x3e, r29	; 62
      ba:	0f be       	out	0x3f, r0	; 63
      bc:	cd bf       	out	0x3d, r28	; 61
      be:	9a a3       	std	Y+34, r25	; 0x22
      c0:	89 a3       	std	Y+33, r24	; 0x21
	// Operates the buzzer
	// The base frequency is passed in through p.
	int i,delayTime;
	int remainTimes = 2;
      c2:	82 e0       	ldi	r24, 0x02	; 2
      c4:	90 e0       	ldi	r25, 0x00	; 0
      c6:	9a 83       	std	Y+2, r25	; 0x02
      c8:	89 83       	std	Y+1, r24	; 0x01
	buzzer_freq =(int) p;
      ca:	89 a1       	ldd	r24, Y+33	; 0x21
      cc:	9a a1       	ldd	r25, Y+34	; 0x22
      ce:	90 93 01 01 	sts	0x0101, r25
      d2:	80 93 00 01 	sts	0x0100, r24
	
	// set up the port for task 1
	DDRB |= 0b00100000;
      d6:	84 e2       	ldi	r24, 0x24	; 36
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	24 e2       	ldi	r18, 0x24	; 36
      dc:	30 e0       	ldi	r19, 0x00	; 0
      de:	f9 01       	movw	r30, r18
      e0:	20 81       	ld	r18, Z
      e2:	20 62       	ori	r18, 0x20	; 32
      e4:	fc 01       	movw	r30, r24
      e6:	20 83       	st	Z, r18

	while(1){
		delayTime = 1000/buzzer_freq;
      e8:	20 91 00 01 	lds	r18, 0x0100
      ec:	30 91 01 01 	lds	r19, 0x0101
      f0:	88 ee       	ldi	r24, 0xE8	; 232
      f2:	93 e0       	ldi	r25, 0x03	; 3
      f4:	b9 01       	movw	r22, r18
      f6:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <__divmodhi4>
      fa:	9b 01       	movw	r18, r22
      fc:	3c 83       	std	Y+4, r19	; 0x04
      fe:	2b 83       	std	Y+3, r18	; 0x03

		OSMakeAtomic();
     100:	0e 94 c4 03 	call	0x788	; 0x788 <OSMakeAtomic>
		
			// Write a 1 to digital pin 13
		PORTB |= 0b00100000;
     104:	85 e2       	ldi	r24, 0x25	; 37
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	25 e2       	ldi	r18, 0x25	; 37
     10a:	30 e0       	ldi	r19, 0x00	; 0
     10c:	f9 01       	movw	r30, r18
     10e:	20 81       	ld	r18, Z
     110:	20 62       	ori	r18, 0x20	; 32
     112:	fc 01       	movw	r30, r24
     114:	20 83       	st	Z, r18
			// base delay
		_delay_ms(delayTime);
     116:	8b 81       	ldd	r24, Y+3	; 0x03
     118:	9c 81       	ldd	r25, Y+4	; 0x04
     11a:	aa 27       	eor	r26, r26
     11c:	97 fd       	sbrc	r25, 7
     11e:	a0 95       	com	r26
     120:	ba 2f       	mov	r27, r26
     122:	bc 01       	movw	r22, r24
     124:	cd 01       	movw	r24, r26
     126:	0e 94 5f 0b 	call	0x16be	; 0x16be <__floatsisf>
     12a:	dc 01       	movw	r26, r24
     12c:	cb 01       	movw	r24, r22
     12e:	8d 83       	std	Y+5, r24	; 0x05
     130:	9e 83       	std	Y+6, r25	; 0x06
     132:	af 83       	std	Y+7, r26	; 0x07
     134:	b8 87       	std	Y+8, r27	; 0x08
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     136:	6d 81       	ldd	r22, Y+5	; 0x05
     138:	7e 81       	ldd	r23, Y+6	; 0x06
     13a:	8f 81       	ldd	r24, Y+7	; 0x07
     13c:	98 85       	ldd	r25, Y+8	; 0x08
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	30 e0       	ldi	r19, 0x00	; 0
     142:	4a e7       	ldi	r20, 0x7A	; 122
     144:	55 e4       	ldi	r21, 0x45	; 69
     146:	0e 94 27 09 	call	0x124e	; 0x124e <__mulsf3>
     14a:	dc 01       	movw	r26, r24
     14c:	cb 01       	movw	r24, r22
     14e:	89 87       	std	Y+9, r24	; 0x09
     150:	9a 87       	std	Y+10, r25	; 0x0a
     152:	ab 87       	std	Y+11, r26	; 0x0b
     154:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     156:	11 e0       	ldi	r17, 0x01	; 1
     158:	69 85       	ldd	r22, Y+9	; 0x09
     15a:	7a 85       	ldd	r23, Y+10	; 0x0a
     15c:	8b 85       	ldd	r24, Y+11	; 0x0b
     15e:	9c 85       	ldd	r25, Y+12	; 0x0c
     160:	20 e0       	ldi	r18, 0x00	; 0
     162:	30 e0       	ldi	r19, 0x00	; 0
     164:	40 e8       	ldi	r20, 0x80	; 128
     166:	5f e3       	ldi	r21, 0x3F	; 63
     168:	0e 94 2f 0b 	call	0x165e	; 0x165e <__ltsf2>
     16c:	88 23       	and	r24, r24
     16e:	0c f0       	brlt	.+2      	; 0x172 <task1+0xcc>
     170:	10 e0       	ldi	r17, 0x00	; 0
     172:	11 23       	and	r17, r17
     174:	29 f0       	breq	.+10     	; 0x180 <task1+0xda>
		__ticks = 1;
     176:	81 e0       	ldi	r24, 0x01	; 1
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	9e 87       	std	Y+14, r25	; 0x0e
     17c:	8d 87       	std	Y+13, r24	; 0x0d
     17e:	46 c0       	rjmp	.+140    	; 0x20c <task1+0x166>
	else if (__tmp > 65535)
     180:	11 e0       	ldi	r17, 0x01	; 1
     182:	69 85       	ldd	r22, Y+9	; 0x09
     184:	7a 85       	ldd	r23, Y+10	; 0x0a
     186:	8b 85       	ldd	r24, Y+11	; 0x0b
     188:	9c 85       	ldd	r25, Y+12	; 0x0c
     18a:	20 e0       	ldi	r18, 0x00	; 0
     18c:	3f ef       	ldi	r19, 0xFF	; 255
     18e:	4f e7       	ldi	r20, 0x7F	; 127
     190:	57 e4       	ldi	r21, 0x47	; 71
     192:	0e 94 cf 0a 	call	0x159e	; 0x159e <__gtsf2>
     196:	18 16       	cp	r1, r24
     198:	0c f0       	brlt	.+2      	; 0x19c <task1+0xf6>
     19a:	10 e0       	ldi	r17, 0x00	; 0
     19c:	11 23       	and	r17, r17
     19e:	61 f1       	breq	.+88     	; 0x1f8 <task1+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1a0:	6d 81       	ldd	r22, Y+5	; 0x05
     1a2:	7e 81       	ldd	r23, Y+6	; 0x06
     1a4:	8f 81       	ldd	r24, Y+7	; 0x07
     1a6:	98 85       	ldd	r25, Y+8	; 0x08
     1a8:	20 e0       	ldi	r18, 0x00	; 0
     1aa:	30 e0       	ldi	r19, 0x00	; 0
     1ac:	40 e2       	ldi	r20, 0x20	; 32
     1ae:	51 e4       	ldi	r21, 0x41	; 65
     1b0:	0e 94 27 09 	call	0x124e	; 0x124e <__mulsf3>
     1b4:	dc 01       	movw	r26, r24
     1b6:	cb 01       	movw	r24, r22
     1b8:	bc 01       	movw	r22, r24
     1ba:	cd 01       	movw	r24, r26
     1bc:	0e 94 53 07 	call	0xea6	; 0xea6 <__fixunssfsi>
     1c0:	dc 01       	movw	r26, r24
     1c2:	cb 01       	movw	r24, r22
     1c4:	9e 87       	std	Y+14, r25	; 0x0e
     1c6:	8d 87       	std	Y+13, r24	; 0x0d
     1c8:	12 c0       	rjmp	.+36     	; 0x1ee <task1+0x148>
     1ca:	80 e9       	ldi	r24, 0x90	; 144
     1cc:	91 e0       	ldi	r25, 0x01	; 1
     1ce:	98 8b       	std	Y+16, r25	; 0x10
     1d0:	8f 87       	std	Y+15, r24	; 0x0f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1d2:	8f 85       	ldd	r24, Y+15	; 0x0f
     1d4:	98 89       	ldd	r25, Y+16	; 0x10
     1d6:	8c 01       	movw	r16, r24
     1d8:	c8 01       	movw	r24, r16
     1da:	01 97       	sbiw	r24, 0x01	; 1
     1dc:	f1 f7       	brne	.-4      	; 0x1da <task1+0x134>
     1de:	8c 01       	movw	r16, r24
     1e0:	18 8b       	std	Y+16, r17	; 0x10
     1e2:	0f 87       	std	Y+15, r16	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1e4:	8d 85       	ldd	r24, Y+13	; 0x0d
     1e6:	9e 85       	ldd	r25, Y+14	; 0x0e
     1e8:	01 97       	sbiw	r24, 0x01	; 1
     1ea:	9e 87       	std	Y+14, r25	; 0x0e
     1ec:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1ee:	8d 85       	ldd	r24, Y+13	; 0x0d
     1f0:	9e 85       	ldd	r25, Y+14	; 0x0e
     1f2:	00 97       	sbiw	r24, 0x00	; 0
     1f4:	51 f7       	brne	.-44     	; 0x1ca <task1+0x124>
     1f6:	17 c0       	rjmp	.+46     	; 0x226 <task1+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     1f8:	69 85       	ldd	r22, Y+9	; 0x09
     1fa:	7a 85       	ldd	r23, Y+10	; 0x0a
     1fc:	8b 85       	ldd	r24, Y+11	; 0x0b
     1fe:	9c 85       	ldd	r25, Y+12	; 0x0c
     200:	0e 94 53 07 	call	0xea6	; 0xea6 <__fixunssfsi>
     204:	dc 01       	movw	r26, r24
     206:	cb 01       	movw	r24, r22
     208:	9e 87       	std	Y+14, r25	; 0x0e
     20a:	8d 87       	std	Y+13, r24	; 0x0d
     20c:	8d 85       	ldd	r24, Y+13	; 0x0d
     20e:	9e 85       	ldd	r25, Y+14	; 0x0e
     210:	9a 8b       	std	Y+18, r25	; 0x12
     212:	89 8b       	std	Y+17, r24	; 0x11
     214:	89 89       	ldd	r24, Y+17	; 0x11
     216:	9a 89       	ldd	r25, Y+18	; 0x12
     218:	8c 01       	movw	r16, r24
     21a:	f8 01       	movw	r30, r16
     21c:	31 97       	sbiw	r30, 0x01	; 1
     21e:	f1 f7       	brne	.-4      	; 0x21c <task1+0x176>
     220:	8f 01       	movw	r16, r30
     222:	1a 8b       	std	Y+18, r17	; 0x12
     224:	09 8b       	std	Y+17, r16	; 0x11
			// Write a 0 to digital pin 13
		PORTB &= 0b11011111;
     226:	85 e2       	ldi	r24, 0x25	; 37
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	25 e2       	ldi	r18, 0x25	; 37
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	f9 01       	movw	r30, r18
     230:	20 81       	ld	r18, Z
     232:	2f 7d       	andi	r18, 0xDF	; 223
     234:	fc 01       	movw	r30, r24
     236:	20 83       	st	Z, r18
			// base delay to generate the low part of the wave form
			_delay_ms(delayTime);
     238:	8b 81       	ldd	r24, Y+3	; 0x03
     23a:	9c 81       	ldd	r25, Y+4	; 0x04
     23c:	aa 27       	eor	r26, r26
     23e:	97 fd       	sbrc	r25, 7
     240:	a0 95       	com	r26
     242:	ba 2f       	mov	r27, r26
     244:	bc 01       	movw	r22, r24
     246:	cd 01       	movw	r24, r26
     248:	0e 94 5f 0b 	call	0x16be	; 0x16be <__floatsisf>
     24c:	dc 01       	movw	r26, r24
     24e:	cb 01       	movw	r24, r22
     250:	8b 8b       	std	Y+19, r24	; 0x13
     252:	9c 8b       	std	Y+20, r25	; 0x14
     254:	ad 8b       	std	Y+21, r26	; 0x15
     256:	be 8b       	std	Y+22, r27	; 0x16
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     258:	6b 89       	ldd	r22, Y+19	; 0x13
     25a:	7c 89       	ldd	r23, Y+20	; 0x14
     25c:	8d 89       	ldd	r24, Y+21	; 0x15
     25e:	9e 89       	ldd	r25, Y+22	; 0x16
     260:	20 e0       	ldi	r18, 0x00	; 0
     262:	30 e0       	ldi	r19, 0x00	; 0
     264:	4a e7       	ldi	r20, 0x7A	; 122
     266:	55 e4       	ldi	r21, 0x45	; 69
     268:	0e 94 27 09 	call	0x124e	; 0x124e <__mulsf3>
     26c:	dc 01       	movw	r26, r24
     26e:	cb 01       	movw	r24, r22
     270:	8f 8b       	std	Y+23, r24	; 0x17
     272:	98 8f       	std	Y+24, r25	; 0x18
     274:	a9 8f       	std	Y+25, r26	; 0x19
     276:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
     278:	11 e0       	ldi	r17, 0x01	; 1
     27a:	6f 89       	ldd	r22, Y+23	; 0x17
     27c:	78 8d       	ldd	r23, Y+24	; 0x18
     27e:	89 8d       	ldd	r24, Y+25	; 0x19
     280:	9a 8d       	ldd	r25, Y+26	; 0x1a
     282:	20 e0       	ldi	r18, 0x00	; 0
     284:	30 e0       	ldi	r19, 0x00	; 0
     286:	40 e8       	ldi	r20, 0x80	; 128
     288:	5f e3       	ldi	r21, 0x3F	; 63
     28a:	0e 94 2f 0b 	call	0x165e	; 0x165e <__ltsf2>
     28e:	88 23       	and	r24, r24
     290:	0c f0       	brlt	.+2      	; 0x294 <task1+0x1ee>
     292:	10 e0       	ldi	r17, 0x00	; 0
     294:	11 23       	and	r17, r17
     296:	29 f0       	breq	.+10     	; 0x2a2 <task1+0x1fc>
		__ticks = 1;
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	9c 8f       	std	Y+28, r25	; 0x1c
     29e:	8b 8f       	std	Y+27, r24	; 0x1b
     2a0:	46 c0       	rjmp	.+140    	; 0x32e <task1+0x288>
	else if (__tmp > 65535)
     2a2:	11 e0       	ldi	r17, 0x01	; 1
     2a4:	6f 89       	ldd	r22, Y+23	; 0x17
     2a6:	78 8d       	ldd	r23, Y+24	; 0x18
     2a8:	89 8d       	ldd	r24, Y+25	; 0x19
     2aa:	9a 8d       	ldd	r25, Y+26	; 0x1a
     2ac:	20 e0       	ldi	r18, 0x00	; 0
     2ae:	3f ef       	ldi	r19, 0xFF	; 255
     2b0:	4f e7       	ldi	r20, 0x7F	; 127
     2b2:	57 e4       	ldi	r21, 0x47	; 71
     2b4:	0e 94 cf 0a 	call	0x159e	; 0x159e <__gtsf2>
     2b8:	18 16       	cp	r1, r24
     2ba:	0c f0       	brlt	.+2      	; 0x2be <task1+0x218>
     2bc:	10 e0       	ldi	r17, 0x00	; 0
     2be:	11 23       	and	r17, r17
     2c0:	61 f1       	breq	.+88     	; 0x31a <task1+0x274>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2c2:	6b 89       	ldd	r22, Y+19	; 0x13
     2c4:	7c 89       	ldd	r23, Y+20	; 0x14
     2c6:	8d 89       	ldd	r24, Y+21	; 0x15
     2c8:	9e 89       	ldd	r25, Y+22	; 0x16
     2ca:	20 e0       	ldi	r18, 0x00	; 0
     2cc:	30 e0       	ldi	r19, 0x00	; 0
     2ce:	40 e2       	ldi	r20, 0x20	; 32
     2d0:	51 e4       	ldi	r21, 0x41	; 65
     2d2:	0e 94 27 09 	call	0x124e	; 0x124e <__mulsf3>
     2d6:	dc 01       	movw	r26, r24
     2d8:	cb 01       	movw	r24, r22
     2da:	bc 01       	movw	r22, r24
     2dc:	cd 01       	movw	r24, r26
     2de:	0e 94 53 07 	call	0xea6	; 0xea6 <__fixunssfsi>
     2e2:	dc 01       	movw	r26, r24
     2e4:	cb 01       	movw	r24, r22
     2e6:	9c 8f       	std	Y+28, r25	; 0x1c
     2e8:	8b 8f       	std	Y+27, r24	; 0x1b
     2ea:	12 c0       	rjmp	.+36     	; 0x310 <task1+0x26a>
     2ec:	80 e9       	ldi	r24, 0x90	; 144
     2ee:	91 e0       	ldi	r25, 0x01	; 1
     2f0:	9e 8f       	std	Y+30, r25	; 0x1e
     2f2:	8d 8f       	std	Y+29, r24	; 0x1d
     2f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     2f6:	9e 8d       	ldd	r25, Y+30	; 0x1e
     2f8:	8c 01       	movw	r16, r24
     2fa:	c8 01       	movw	r24, r16
     2fc:	01 97       	sbiw	r24, 0x01	; 1
     2fe:	f1 f7       	brne	.-4      	; 0x2fc <task1+0x256>
     300:	8c 01       	movw	r16, r24
     302:	1e 8f       	std	Y+30, r17	; 0x1e
     304:	0d 8f       	std	Y+29, r16	; 0x1d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     306:	8b 8d       	ldd	r24, Y+27	; 0x1b
     308:	9c 8d       	ldd	r25, Y+28	; 0x1c
     30a:	01 97       	sbiw	r24, 0x01	; 1
     30c:	9c 8f       	std	Y+28, r25	; 0x1c
     30e:	8b 8f       	std	Y+27, r24	; 0x1b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     310:	8b 8d       	ldd	r24, Y+27	; 0x1b
     312:	9c 8d       	ldd	r25, Y+28	; 0x1c
     314:	00 97       	sbiw	r24, 0x00	; 0
     316:	51 f7       	brne	.-44     	; 0x2ec <task1+0x246>
     318:	17 c0       	rjmp	.+46     	; 0x348 <task1+0x2a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     31a:	6f 89       	ldd	r22, Y+23	; 0x17
     31c:	78 8d       	ldd	r23, Y+24	; 0x18
     31e:	89 8d       	ldd	r24, Y+25	; 0x19
     320:	9a 8d       	ldd	r25, Y+26	; 0x1a
     322:	0e 94 53 07 	call	0xea6	; 0xea6 <__fixunssfsi>
     326:	dc 01       	movw	r26, r24
     328:	cb 01       	movw	r24, r22
     32a:	9c 8f       	std	Y+28, r25	; 0x1c
     32c:	8b 8f       	std	Y+27, r24	; 0x1b
     32e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     330:	9c 8d       	ldd	r25, Y+28	; 0x1c
     332:	98 a3       	std	Y+32, r25	; 0x20
     334:	8f 8f       	std	Y+31, r24	; 0x1f
     336:	8f 8d       	ldd	r24, Y+31	; 0x1f
     338:	98 a1       	ldd	r25, Y+32	; 0x20
     33a:	8c 01       	movw	r16, r24
     33c:	f8 01       	movw	r30, r16
     33e:	31 97       	sbiw	r30, 0x01	; 1
     340:	f1 f7       	brne	.-4      	; 0x33e <task1+0x298>
     342:	8f 01       	movw	r16, r30
     344:	18 a3       	std	Y+32, r17	; 0x20
     346:	0f 8f       	std	Y+31, r16	; 0x1f
		
		OSLeaveAtomic();
     348:	0e 94 cc 03 	call	0x798	; 0x798 <OSLeaveAtomic>
	}
     34c:	cd ce       	rjmp	.-614    	; 0xe8 <task1+0x42>

0000034e <task2>:
}


// read adc for led
void task2(void *p)
{
     34e:	df 93       	push	r29
     350:	cf 93       	push	r28
     352:	00 d0       	rcall	.+0      	; 0x354 <task2+0x6>
     354:	00 d0       	rcall	.+0      	; 0x356 <task2+0x8>
     356:	cd b7       	in	r28, 0x3d	; 61
     358:	de b7       	in	r29, 0x3e	; 62
     35a:	9c 83       	std	Y+4, r25	; 0x04
     35c:	8b 83       	std	Y+3, r24	; 0x03
	int top;
	
	while(1)
	{
		// Implement Task 2 logic below
		OSMakeAtomic();
     35e:	0e 94 c4 03 	call	0x788	; 0x788 <OSMakeAtomic>
		
		// use chanel 1
		ADMUX &= 0b11111000;
     362:	8c e7       	ldi	r24, 0x7C	; 124
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	2c e7       	ldi	r18, 0x7C	; 124
     368:	30 e0       	ldi	r19, 0x00	; 0
     36a:	f9 01       	movw	r30, r18
     36c:	20 81       	ld	r18, Z
     36e:	28 7f       	andi	r18, 0xF8	; 248
     370:	fc 01       	movw	r30, r24
     372:	20 83       	st	Z, r18
		ADMUX |= 1;
     374:	8c e7       	ldi	r24, 0x7C	; 124
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	2c e7       	ldi	r18, 0x7C	; 124
     37a:	30 e0       	ldi	r19, 0x00	; 0
     37c:	f9 01       	movw	r30, r18
     37e:	20 81       	ld	r18, Z
     380:	21 60       	ori	r18, 0x01	; 1
     382:	fc 01       	movw	r30, r24
     384:	20 83       	st	Z, r18
		
		// enable ADC
		ADCSRA |= 0b01000000;
     386:	8a e7       	ldi	r24, 0x7A	; 122
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	2a e7       	ldi	r18, 0x7A	; 122
     38c:	30 e0       	ldi	r19, 0x00	; 0
     38e:	f9 01       	movw	r30, r18
     390:	20 81       	ld	r18, Z
     392:	20 64       	ori	r18, 0x40	; 64
     394:	fc 01       	movw	r30, r24
     396:	20 83       	st	Z, r18
		
		// wait for it to finish
		while(ADCSRA & 0x01000000);
     398:	00 00       	nop
     39a:	8a e7       	ldi	r24, 0x7A	; 122
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	fc 01       	movw	r30, r24
     3a0:	80 81       	ld	r24, Z
     3a2:	88 2f       	mov	r24, r24
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	a0 e0       	ldi	r26, 0x00	; 0
     3a8:	b0 e0       	ldi	r27, 0x00	; 0
     3aa:	80 70       	andi	r24, 0x00	; 0
     3ac:	90 70       	andi	r25, 0x00	; 0
     3ae:	a0 70       	andi	r26, 0x00	; 0
     3b0:	b1 70       	andi	r27, 0x01	; 1
     3b2:	00 97       	sbiw	r24, 0x00	; 0
     3b4:	a1 05       	cpc	r26, r1
     3b6:	b1 05       	cpc	r27, r1
     3b8:	81 f7       	brne	.-32     	; 0x39a <task2+0x4c>
		
		// save value
		val = ADCL + 255*ADCH;
     3ba:	88 e7       	ldi	r24, 0x78	; 120
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	fc 01       	movw	r30, r24
     3c0:	80 81       	ld	r24, Z
     3c2:	68 2f       	mov	r22, r24
     3c4:	70 e0       	ldi	r23, 0x00	; 0
     3c6:	89 e7       	ldi	r24, 0x79	; 121
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	fc 01       	movw	r30, r24
     3cc:	80 81       	ld	r24, Z
     3ce:	28 2f       	mov	r18, r24
     3d0:	30 e0       	ldi	r19, 0x00	; 0
     3d2:	c9 01       	movw	r24, r18
     3d4:	ac 01       	movw	r20, r24
     3d6:	44 0f       	add	r20, r20
     3d8:	55 1f       	adc	r21, r21
     3da:	ca 01       	movw	r24, r20
     3dc:	96 95       	lsr	r25
     3de:	98 2f       	mov	r25, r24
     3e0:	88 27       	eor	r24, r24
     3e2:	97 95       	ror	r25
     3e4:	87 95       	ror	r24
     3e6:	84 1b       	sub	r24, r20
     3e8:	95 0b       	sbc	r25, r21
     3ea:	82 0f       	add	r24, r18
     3ec:	93 1f       	adc	r25, r19
     3ee:	86 0f       	add	r24, r22
     3f0:	97 1f       	adc	r25, r23
     3f2:	9a 83       	std	Y+2, r25	; 0x02
     3f4:	89 83       	std	Y+1, r24	; 0x01
		
		// clean ADC
		ADCSRA |= 0b00010000;
     3f6:	8a e7       	ldi	r24, 0x7A	; 122
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	2a e7       	ldi	r18, 0x7A	; 122
     3fc:	30 e0       	ldi	r19, 0x00	; 0
     3fe:	f9 01       	movw	r30, r18
     400:	20 81       	ld	r18, Z
     402:	20 61       	ori	r18, 0x10	; 16
     404:	fc 01       	movw	r30, r24
     406:	20 83       	st	Z, r18
		
		// remap
		pwm_val = (val >> 2);
     408:	89 81       	ldd	r24, Y+1	; 0x01
     40a:	9a 81       	ldd	r25, Y+2	; 0x02
     40c:	95 95       	asr	r25
     40e:	87 95       	ror	r24
     410:	95 95       	asr	r25
     412:	87 95       	ror	r24
     414:	90 93 03 01 	sts	0x0103, r25
     418:	80 93 02 01 	sts	0x0102, r24
		
		OSLeaveAtomic();
     41c:	0e 94 cc 03 	call	0x798	; 0x798 <OSLeaveAtomic>
		// Implement Task 2 logic above
		
		// Hand over control to the OS.
		//OSSwapTask();
	}		
     420:	9e cf       	rjmp	.-196    	; 0x35e <task2+0x10>

00000422 <task3>:
}


// read adc for buzzer
void task3(void *p)
{
     422:	df 93       	push	r29
     424:	cf 93       	push	r28
     426:	00 d0       	rcall	.+0      	; 0x428 <task3+0x6>
     428:	00 d0       	rcall	.+0      	; 0x42a <task3+0x8>
     42a:	cd b7       	in	r28, 0x3d	; 61
     42c:	de b7       	in	r29, 0x3e	; 62
     42e:	9c 83       	std	Y+4, r25	; 0x04
     430:	8b 83       	std	Y+3, r24	; 0x03
	int val;
	
	while(1)
	{
		// Implement Task 3 logic below
		OSMakeAtomic();
     432:	0e 94 c4 03 	call	0x788	; 0x788 <OSMakeAtomic>

		// set the channel to be 0
		ADMUX &= 0b11111000;
     436:	8c e7       	ldi	r24, 0x7C	; 124
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	2c e7       	ldi	r18, 0x7C	; 124
     43c:	30 e0       	ldi	r19, 0x00	; 0
     43e:	f9 01       	movw	r30, r18
     440:	20 81       	ld	r18, Z
     442:	28 7f       	andi	r18, 0xF8	; 248
     444:	fc 01       	movw	r30, r24
     446:	20 83       	st	Z, r18
		
		// enable ADC
		ADCSRA |= 0b01000000;
     448:	8a e7       	ldi	r24, 0x7A	; 122
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	2a e7       	ldi	r18, 0x7A	; 122
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	f9 01       	movw	r30, r18
     452:	20 81       	ld	r18, Z
     454:	20 64       	ori	r18, 0x40	; 64
     456:	fc 01       	movw	r30, r24
     458:	20 83       	st	Z, r18
		
		// wait for it to finish
		while(ADCSRA & 0x01000000);
     45a:	00 00       	nop
     45c:	8a e7       	ldi	r24, 0x7A	; 122
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	fc 01       	movw	r30, r24
     462:	80 81       	ld	r24, Z
     464:	88 2f       	mov	r24, r24
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	a0 e0       	ldi	r26, 0x00	; 0
     46a:	b0 e0       	ldi	r27, 0x00	; 0
     46c:	80 70       	andi	r24, 0x00	; 0
     46e:	90 70       	andi	r25, 0x00	; 0
     470:	a0 70       	andi	r26, 0x00	; 0
     472:	b1 70       	andi	r27, 0x01	; 1
     474:	00 97       	sbiw	r24, 0x00	; 0
     476:	a1 05       	cpc	r26, r1
     478:	b1 05       	cpc	r27, r1
     47a:	81 f7       	brne	.-32     	; 0x45c <task3+0x3a>
		
		// save value
		val = ADCL + 255*ADCH;
     47c:	88 e7       	ldi	r24, 0x78	; 120
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	fc 01       	movw	r30, r24
     482:	80 81       	ld	r24, Z
     484:	68 2f       	mov	r22, r24
     486:	70 e0       	ldi	r23, 0x00	; 0
     488:	89 e7       	ldi	r24, 0x79	; 121
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	fc 01       	movw	r30, r24
     48e:	80 81       	ld	r24, Z
     490:	28 2f       	mov	r18, r24
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	c9 01       	movw	r24, r18
     496:	ac 01       	movw	r20, r24
     498:	44 0f       	add	r20, r20
     49a:	55 1f       	adc	r21, r21
     49c:	ca 01       	movw	r24, r20
     49e:	96 95       	lsr	r25
     4a0:	98 2f       	mov	r25, r24
     4a2:	88 27       	eor	r24, r24
     4a4:	97 95       	ror	r25
     4a6:	87 95       	ror	r24
     4a8:	84 1b       	sub	r24, r20
     4aa:	95 0b       	sbc	r25, r21
     4ac:	82 0f       	add	r24, r18
     4ae:	93 1f       	adc	r25, r19
     4b0:	86 0f       	add	r24, r22
     4b2:	97 1f       	adc	r25, r23
     4b4:	9a 83       	std	Y+2, r25	; 0x02
     4b6:	89 83       	std	Y+1, r24	; 0x01
		
		// clean ADC
		ADCSRA |= 0b00010000;
     4b8:	8a e7       	ldi	r24, 0x7A	; 122
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	2a e7       	ldi	r18, 0x7A	; 122
     4be:	30 e0       	ldi	r19, 0x00	; 0
     4c0:	f9 01       	movw	r30, r18
     4c2:	20 81       	ld	r18, Z
     4c4:	20 61       	ori	r18, 0x10	; 16
     4c6:	fc 01       	movw	r30, r24
     4c8:	20 83       	st	Z, r18
		
		if(val < 0)	PORTD ^= 0b00100000;
     4ca:	89 81       	ldd	r24, Y+1	; 0x01
     4cc:	9a 81       	ldd	r25, Y+2	; 0x02
     4ce:	99 23       	and	r25, r25
     4d0:	54 f4       	brge	.+20     	; 0x4e6 <task3+0xc4>
     4d2:	8b e2       	ldi	r24, 0x2B	; 43
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	2b e2       	ldi	r18, 0x2B	; 43
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	f9 01       	movw	r30, r18
     4dc:	30 81       	ld	r19, Z
     4de:	20 e2       	ldi	r18, 0x20	; 32
     4e0:	23 27       	eor	r18, r19
     4e2:	fc 01       	movw	r30, r24
     4e4:	20 83       	st	Z, r18
		
		if(val < BUZZ_MIN){
     4e6:	89 81       	ldd	r24, Y+1	; 0x01
     4e8:	9a 81       	ldd	r25, Y+2	; 0x02
     4ea:	f1 e0       	ldi	r31, 0x01	; 1
     4ec:	82 3c       	cpi	r24, 0xC2	; 194
     4ee:	9f 07       	cpc	r25, r31
     4f0:	3c f4       	brge	.+14     	; 0x500 <task3+0xde>
			//PORTD ^= 0b01000000;
			buzzer_freq = 1;
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	90 93 01 01 	sts	0x0101, r25
     4fa:	80 93 00 01 	sts	0x0100, r24
     4fe:	2c c0       	rjmp	.+88     	; 0x558 <task3+0x136>
		}else{
			//PORTD ^= 0b10000000;
			buzzer_freq = (int)(((float)500) * (val - BUZZ_MIN) / (BUZZ_MAX-BUZZ_MIN));
     500:	89 81       	ldd	r24, Y+1	; 0x01
     502:	9a 81       	ldd	r25, Y+2	; 0x02
     504:	82 5c       	subi	r24, 0xC2	; 194
     506:	91 40       	sbci	r25, 0x01	; 1
     508:	aa 27       	eor	r26, r26
     50a:	97 fd       	sbrc	r25, 7
     50c:	a0 95       	com	r26
     50e:	ba 2f       	mov	r27, r26
     510:	bc 01       	movw	r22, r24
     512:	cd 01       	movw	r24, r26
     514:	0e 94 5f 0b 	call	0x16be	; 0x16be <__floatsisf>
     518:	dc 01       	movw	r26, r24
     51a:	cb 01       	movw	r24, r22
     51c:	bc 01       	movw	r22, r24
     51e:	cd 01       	movw	r24, r26
     520:	20 e0       	ldi	r18, 0x00	; 0
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	4a ef       	ldi	r20, 0xFA	; 250
     526:	53 e4       	ldi	r21, 0x43	; 67
     528:	0e 94 27 09 	call	0x124e	; 0x124e <__mulsf3>
     52c:	dc 01       	movw	r26, r24
     52e:	cb 01       	movw	r24, r22
     530:	bc 01       	movw	r22, r24
     532:	cd 01       	movw	r24, r26
     534:	20 e0       	ldi	r18, 0x00	; 0
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	4f ea       	ldi	r20, 0xAF	; 175
     53a:	53 e4       	ldi	r21, 0x43	; 67
     53c:	0e 94 21 0a 	call	0x1442	; 0x1442 <__divsf3>
     540:	dc 01       	movw	r26, r24
     542:	cb 01       	movw	r24, r22
     544:	bc 01       	movw	r22, r24
     546:	cd 01       	movw	r24, r26
     548:	0e 94 bf 0b 	call	0x177e	; 0x177e <__fixsfsi>
     54c:	dc 01       	movw	r26, r24
     54e:	cb 01       	movw	r24, r22
     550:	90 93 01 01 	sts	0x0101, r25
     554:	80 93 00 01 	sts	0x0100, r24
		}
		
		OSLeaveAtomic();
     558:	0e 94 cc 03 	call	0x798	; 0x798 <OSLeaveAtomic>
		// Implement Task 3 logic above
		
		// Hand over control to the OS.
		// OSSwapTask();
	}
     55c:	6a cf       	rjmp	.-300    	; 0x432 <task3+0x10>

0000055e <task4>:
}

void task4(void *ptr)
{
     55e:	df 93       	push	r29
     560:	cf 93       	push	r28
     562:	00 d0       	rcall	.+0      	; 0x564 <task4+0x6>
     564:	cd b7       	in	r28, 0x3d	; 61
     566:	de b7       	in	r29, 0x3e	; 62
     568:	9a 83       	std	Y+2, r25	; 0x02
     56a:	89 83       	std	Y+1, r24	; 0x01
	// initialize the LED
	DDRB |= 0b00001000;
     56c:	84 e2       	ldi	r24, 0x24	; 36
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	24 e2       	ldi	r18, 0x24	; 36
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	f9 01       	movw	r30, r18
     576:	20 81       	ld	r18, Z
     578:	28 60       	ori	r18, 0x08	; 8
     57a:	fc 01       	movw	r30, r24
     57c:	20 83       	st	Z, r18
	// setup PWM
	// set up PWM
	// set initial timer value
	TCNT2 = 0;
     57e:	82 eb       	ldi	r24, 0xB2	; 178
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	fc 01       	movw	r30, r24
     584:	10 82       	st	Z, r1
	
	// place TOP timer value to output compare register
	OCR2A = 0;
     586:	83 eb       	ldi	r24, 0xB3	; 179
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	fc 01       	movw	r30, r24
     58c:	10 82       	st	Z, r1
	
	// Set TCCR2A to set clear mode
	// and choose mode 1 Phase correct PWM
	TCCR2A = 0b10000001;
     58e:	80 eb       	ldi	r24, 0xB0	; 176
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	21 e8       	ldi	r18, 0x81	; 129
     594:	fc 01       	movw	r30, r24
     596:	20 83       	st	Z, r18
	TCCR2B = 0b100;	// start PWM
     598:	81 eb       	ldi	r24, 0xB1	; 177
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	24 e0       	ldi	r18, 0x04	; 4
     59e:	fc 01       	movw	r30, r24
     5a0:	20 83       	st	Z, r18
	
	while(1)
	{
		// Implement Task 4 logic below
		OCR2A = pwm_val;
     5a2:	83 eb       	ldi	r24, 0xB3	; 179
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	20 91 02 01 	lds	r18, 0x0102
     5aa:	30 91 03 01 	lds	r19, 0x0103
     5ae:	fc 01       	movw	r30, r24
     5b0:	20 83       	st	Z, r18
		
		// Implement Task 4 logic above
		//OSSwapTask();
	}
     5b2:	f7 cf       	rjmp	.-18     	; 0x5a2 <task4+0x44>

000005b4 <setup>:
//  otherwise the OS's swap task got no use

// Declare all other ISRs, etc above this line.

void setup()
{
     5b4:	df 93       	push	r29
     5b6:	cf 93       	push	r28
     5b8:	cd b7       	in	r28, 0x3d	; 61
     5ba:	de b7       	in	r29, 0x3e	; 62
	// use PORTD for testing
	DDRD |= 0b11110000;
     5bc:	8a e2       	ldi	r24, 0x2A	; 42
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	2a e2       	ldi	r18, 0x2A	; 42
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	f9 01       	movw	r30, r18
     5c6:	20 81       	ld	r18, Z
     5c8:	20 6f       	ori	r18, 0xF0	; 240
     5ca:	fc 01       	movw	r30, r24
     5cc:	20 83       	st	Z, r18
	
	// set up ADC -- commonly used by task 2 and 3
	
	// disable power reduction on the ADC
	PRR &= 0b11111110;
     5ce:	84 e6       	ldi	r24, 0x64	; 100
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	24 e6       	ldi	r18, 0x64	; 100
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	f9 01       	movw	r30, r18
     5d8:	20 81       	ld	r18, Z
     5da:	2e 7f       	andi	r18, 0xFE	; 254
     5dc:	fc 01       	movw	r30, r24
     5de:	20 83       	st	Z, r18
	// prescaler value 64 = 16M/128K; 
	// enable ADC, no interrupt;
	ADCSRA = 0b10000110;
     5e0:	8a e7       	ldi	r24, 0x7A	; 122
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	26 e8       	ldi	r18, 0x86	; 134
     5e6:	fc 01       	movw	r30, r24
     5e8:	20 83       	st	Z, r18
	// set the voltage reference -- Vcc
	ADMUX &= 0b01111111;
     5ea:	8c e7       	ldi	r24, 0x7C	; 124
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	2c e7       	ldi	r18, 0x7C	; 124
     5f0:	30 e0       	ldi	r19, 0x00	; 0
     5f2:	f9 01       	movw	r30, r18
     5f4:	20 81       	ld	r18, Z
     5f6:	2f 77       	andi	r18, 0x7F	; 127
     5f8:	fc 01       	movw	r30, r24
     5fa:	20 83       	st	Z, r18
	ADMUX |= 0b01000000;
     5fc:	8c e7       	ldi	r24, 0x7C	; 124
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	2c e7       	ldi	r18, 0x7C	; 124
     602:	30 e0       	ldi	r19, 0x00	; 0
     604:	f9 01       	movw	r30, r18
     606:	20 81       	ld	r18, Z
     608:	20 64       	ori	r18, 0x40	; 64
     60a:	fc 01       	movw	r30, r24
     60c:	20 83       	st	Z, r18
}		
     60e:	cf 91       	pop	r28
     610:	df 91       	pop	r29
     612:	08 95       	ret

00000614 <main>:



int main()
{
     614:	df 93       	push	r29
     616:	cf 93       	push	r28
     618:	cd b7       	in	r28, 0x3d	; 61
     61a:	de b7       	in	r29, 0x3e	; 62
     61c:	c2 58       	subi	r28, 0x82	; 130
     61e:	d0 40       	sbci	r29, 0x00	; 0
     620:	0f b6       	in	r0, 0x3f	; 63
     622:	f8 94       	cli
     624:	de bf       	out	0x3e, r29	; 62
     626:	0f be       	out	0x3f, r0	; 63
     628:	cd bf       	out	0x3d, r28	; 61
	}
	*/
	
	
	int i;
	char buffer[LQLEN] = "";
     62a:	1b 82       	std	Y+3, r1	; 0x03
     62c:	1c 82       	std	Y+4, r1	; 0x04
     62e:	1d 82       	std	Y+5, r1	; 0x05
     630:	1e 82       	std	Y+6, r1	; 0x06
     632:	2c e7       	ldi	r18, 0x7C	; 124
     634:	ce 01       	movw	r24, r28
     636:	07 96       	adiw	r24, 0x07	; 7
     638:	fc 01       	movw	r30, r24
     63a:	32 2f       	mov	r19, r18
     63c:	11 92       	st	Z+, r1
     63e:	3a 95       	dec	r19
     640:	e9 f7       	brne	.-6      	; 0x63c <main+0x28>
	int len = -1;
     642:	8f ef       	ldi	r24, 0xFF	; 255
     644:	9f ef       	ldi	r25, 0xFF	; 255
     646:	9a 83       	std	Y+2, r25	; 0x02
     648:	89 83       	std	Y+1, r24	; 0x01
	
	//DDRD = 0b111111111;
	setupSerial();
     64a:	0e 94 83 05 	call	0xb06	; 0xb06 <setupSerial>
	//sei();
	//say("hello!");
	//_delay_ms(1000);
	cli();
     64e:	f8 94       	cli
	
	// while(len <=0)	hear(buffer, &len);
	// say(buffer);
	
	OSInit();
     650:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <OSInit>
	
	setup();
     654:	0e 94 da 02 	call	0x5b4	; 0x5b4 <setup>
	
	// Create the tasks. Task1 is for the buzzer and we pass in the base frequency as an argument.
	
	OSAddTask(task1, 0, (void *) buzzer_freq);	// buzzer tune
     658:	80 91 00 01 	lds	r24, 0x0100
     65c:	90 91 01 01 	lds	r25, 0x0101
     660:	9c 01       	movw	r18, r24
     662:	83 e5       	ldi	r24, 0x53	; 83
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	60 e0       	ldi	r22, 0x00	; 0
     668:	70 e0       	ldi	r23, 0x00	; 0
     66a:	a9 01       	movw	r20, r18
     66c:	0e 94 12 05 	call	0xa24	; 0xa24 <OSAddTask>
	
	OSAddTask(task2, 1, NULL);	// read for LED
     670:	87 ea       	ldi	r24, 0xA7	; 167
     672:	91 e0       	ldi	r25, 0x01	; 1
     674:	61 e0       	ldi	r22, 0x01	; 1
     676:	70 e0       	ldi	r23, 0x00	; 0
     678:	40 e0       	ldi	r20, 0x00	; 0
     67a:	50 e0       	ldi	r21, 0x00	; 0
     67c:	0e 94 12 05 	call	0xa24	; 0xa24 <OSAddTask>
	
	OSAddTask(task3, 2, NULL);	// convert for buzzer
     680:	81 e1       	ldi	r24, 0x11	; 17
     682:	92 e0       	ldi	r25, 0x02	; 2
     684:	62 e0       	ldi	r22, 0x02	; 2
     686:	70 e0       	ldi	r23, 0x00	; 0
     688:	40 e0       	ldi	r20, 0x00	; 0
     68a:	50 e0       	ldi	r21, 0x00	; 0
     68c:	0e 94 12 05 	call	0xa24	; 0xa24 <OSAddTask>
	
	// Insert code to create task4 below.
	OSAddTask(task4, 3, NULL);	// blink LED
     690:	8f ea       	ldi	r24, 0xAF	; 175
     692:	92 e0       	ldi	r25, 0x02	; 2
     694:	63 e0       	ldi	r22, 0x03	; 3
     696:	70 e0       	ldi	r23, 0x00	; 0
     698:	40 e0       	ldi	r20, 0x00	; 0
     69a:	50 e0       	ldi	r21, 0x00	; 0
     69c:	0e 94 12 05 	call	0xa24	; 0xa24 <OSAddTask>
	
	// And start the OS
	OSRun();
     6a0:	0e 94 68 05 	call	0xad0	; 0xad0 <OSRun>
	
	while(1);
     6a4:	ff cf       	rjmp	.-2      	; 0x6a4 <main+0x90>

000006a6 <runTaskFirstTime>:
	"pop r0	\n\t"\
	"out __SREG__, r0\n\t"\
	"pop r0	\n\t": : "r" (pxCurrentTCB):\
	);

void runTaskFirstTime(int i){
     6a6:	df 93       	push	r29
     6a8:	cf 93       	push	r28
     6aa:	00 d0       	rcall	.+0      	; 0x6ac <runTaskFirstTime+0x6>
     6ac:	cd b7       	in	r28, 0x3d	; 61
     6ae:	de b7       	in	r29, 0x3e	; 62
     6b0:	9a 83       	std	Y+2, r25	; 0x02
     6b2:	89 83       	std	Y+1, r24	; 0x01
	cli();
     6b4:	f8 94       	cli
	currentTask = i;
     6b6:	89 81       	ldd	r24, Y+1	; 0x01
     6b8:	9a 81       	ldd	r25, Y+2	; 0x02
     6ba:	90 93 07 01 	sts	0x0107, r25
     6be:	80 93 06 01 	sts	0x0106, r24
	taskTable[currentTask].runflag = 1;
     6c2:	40 91 06 01 	lds	r20, 0x0106
     6c6:	50 91 07 01 	lds	r21, 0x0107
     6ca:	2b e0       	ldi	r18, 0x0B	; 11
     6cc:	31 e0       	ldi	r19, 0x01	; 1
     6ce:	42 9f       	mul	r20, r18
     6d0:	c0 01       	movw	r24, r0
     6d2:	43 9f       	mul	r20, r19
     6d4:	90 0d       	add	r25, r0
     6d6:	52 9f       	mul	r21, r18
     6d8:	90 0d       	add	r25, r0
     6da:	11 24       	eor	r1, r1
     6dc:	8a 56       	subi	r24, 0x6A	; 106
     6de:	9d 4f       	sbci	r25, 0xFD	; 253
     6e0:	21 e0       	ldi	r18, 0x01	; 1
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	fc 01       	movw	r30, r24
     6e6:	31 83       	std	Z+1, r19	; 0x01
     6e8:	20 83       	st	Z, r18
    
	pxCurrentTCB = (unsigned long)(taskTable[currentTask].stack + TASK_STACK_SIZE - 1);
     6ea:	40 91 06 01 	lds	r20, 0x0106
     6ee:	50 91 07 01 	lds	r21, 0x0107
     6f2:	2b e0       	ldi	r18, 0x0B	; 11
     6f4:	31 e0       	ldi	r19, 0x01	; 1
     6f6:	42 9f       	mul	r20, r18
     6f8:	c0 01       	movw	r24, r0
     6fa:	43 9f       	mul	r20, r19
     6fc:	90 0d       	add	r25, r0
     6fe:	52 9f       	mul	r21, r18
     700:	90 0d       	add	r25, r0
     702:	11 24       	eor	r1, r1
     704:	86 5f       	subi	r24, 0xF6	; 246
     706:	9e 4f       	sbci	r25, 0xFE	; 254
     708:	8a 56       	subi	r24, 0x6A	; 106
     70a:	9d 4f       	sbci	r25, 0xFD	; 253
     70c:	aa 27       	eor	r26, r26
     70e:	97 fd       	sbrc	r25, 7
     710:	a0 95       	com	r26
     712:	ba 2f       	mov	r27, r26
     714:	80 93 92 02 	sts	0x0292, r24
     718:	90 93 93 02 	sts	0x0293, r25
     71c:	a0 93 94 02 	sts	0x0294, r26
     720:	b0 93 95 02 	sts	0x0295, r27
	
    asm volatile ("\n\t"\
     724:	a0 91 92 02 	lds	r26, 0x0292
     728:	b0 91 93 02 	lds	r27, 0x0293
     72c:	ad bf       	out	0x3d, r26	; 61
     72e:	be bf       	out	0x3e, r27	; 62
                  "lds r26, pxCurrentTCB \n\t"\
                  "lds r27, pxCurrentTCB+1 \n\t"\
                  "out __SP_L__, r26 \n\t"\
                  "out __SP_H__, r27 \n\t"\
                  );
	sei();
     730:	78 94       	sei
    taskTable[currentTask].fptr(taskTable[currentTask].arg);
     732:	40 91 06 01 	lds	r20, 0x0106
     736:	50 91 07 01 	lds	r21, 0x0107
     73a:	2b e0       	ldi	r18, 0x0B	; 11
     73c:	31 e0       	ldi	r19, 0x01	; 1
     73e:	42 9f       	mul	r20, r18
     740:	c0 01       	movw	r24, r0
     742:	43 9f       	mul	r20, r19
     744:	90 0d       	add	r25, r0
     746:	52 9f       	mul	r21, r18
     748:	90 0d       	add	r25, r0
     74a:	11 24       	eor	r1, r1
     74c:	86 56       	subi	r24, 0x66	; 102
     74e:	9d 4f       	sbci	r25, 0xFD	; 253
     750:	fc 01       	movw	r30, r24
     752:	20 81       	ld	r18, Z
     754:	31 81       	ldd	r19, Z+1	; 0x01
     756:	60 91 06 01 	lds	r22, 0x0106
     75a:	70 91 07 01 	lds	r23, 0x0107
     75e:	4b e0       	ldi	r20, 0x0B	; 11
     760:	51 e0       	ldi	r21, 0x01	; 1
     762:	64 9f       	mul	r22, r20
     764:	c0 01       	movw	r24, r0
     766:	65 9f       	mul	r22, r21
     768:	90 0d       	add	r25, r0
     76a:	74 9f       	mul	r23, r20
     76c:	90 0d       	add	r25, r0
     76e:	11 24       	eor	r1, r1
     770:	84 56       	subi	r24, 0x64	; 100
     772:	9d 4f       	sbci	r25, 0xFD	; 253
     774:	fc 01       	movw	r30, r24
     776:	80 81       	ld	r24, Z
     778:	91 81       	ldd	r25, Z+1	; 0x01
     77a:	f9 01       	movw	r30, r18
     77c:	09 95       	icall
}
     77e:	0f 90       	pop	r0
     780:	0f 90       	pop	r0
     782:	cf 91       	pop	r28
     784:	df 91       	pop	r29
     786:	08 95       	ret

00000788 <OSMakeAtomic>:



void OSMakeAtomic()
{
     788:	df 93       	push	r29
     78a:	cf 93       	push	r28
     78c:	cd b7       	in	r28, 0x3d	; 61
     78e:	de b7       	in	r29, 0x3e	; 62
	// Disables interrupts to create an atomic section.
	cli();
     790:	f8 94       	cli
}
     792:	cf 91       	pop	r28
     794:	df 91       	pop	r29
     796:	08 95       	ret

00000798 <OSLeaveAtomic>:

void OSLeaveAtomic()
{
     798:	df 93       	push	r29
     79a:	cf 93       	push	r28
     79c:	cd b7       	in	r28, 0x3d	; 61
     79e:	de b7       	in	r29, 0x3e	; 62
	// Leaves atomic section by re-enabling interrupts.
	sei();
     7a0:	78 94       	sei
}
     7a2:	cf 91       	pop	r28
     7a4:	df 91       	pop	r29
     7a6:	08 95       	ret

000007a8 <findNextTask>:

// DO NOT modify this!
void OSSwapTask() __attribute__ ((naked));

int findNextTask()
{
     7a8:	df 93       	push	r29
     7aa:	cf 93       	push	r28
     7ac:	cd b7       	in	r28, 0x3d	; 61
     7ae:	de b7       	in	r29, 0x3e	; 62
	// Apply scheduling algorithm to find next task to run, and returns the index number of that task.
	// Note that OS_NUM_TASKS in kernel.h is the MAXIMUM number of tasks that can be created, not the actual number
	// created. So OS_NUM_TASKS can be 10 although in actual fact only 4 tasks were created. You should pick only amongst
	// these 4 tasks.
	if(task_counter == 0)	return -1;
     7b0:	80 91 10 02 	lds	r24, 0x0210
     7b4:	90 91 11 02 	lds	r25, 0x0211
     7b8:	00 97       	sbiw	r24, 0x00	; 0
     7ba:	19 f4       	brne	.+6      	; 0x7c2 <findNextTask+0x1a>
     7bc:	8f ef       	ldi	r24, 0xFF	; 255
     7be:	9f ef       	ldi	r25, 0xFF	; 255
     7c0:	26 c0       	rjmp	.+76     	; 0x80e <findNextTask+0x66>
	
	// mark the current task as being run
	if(currentTask >= 0)	taskTable[currentTask].runflag = 1;
     7c2:	80 91 06 01 	lds	r24, 0x0106
     7c6:	90 91 07 01 	lds	r25, 0x0107
     7ca:	99 23       	and	r25, r25
     7cc:	a4 f0       	brlt	.+40     	; 0x7f6 <findNextTask+0x4e>
     7ce:	40 91 06 01 	lds	r20, 0x0106
     7d2:	50 91 07 01 	lds	r21, 0x0107
     7d6:	2b e0       	ldi	r18, 0x0B	; 11
     7d8:	31 e0       	ldi	r19, 0x01	; 1
     7da:	42 9f       	mul	r20, r18
     7dc:	c0 01       	movw	r24, r0
     7de:	43 9f       	mul	r20, r19
     7e0:	90 0d       	add	r25, r0
     7e2:	52 9f       	mul	r21, r18
     7e4:	90 0d       	add	r25, r0
     7e6:	11 24       	eor	r1, r1
     7e8:	8a 56       	subi	r24, 0x6A	; 106
     7ea:	9d 4f       	sbci	r25, 0xFD	; 253
     7ec:	21 e0       	ldi	r18, 0x01	; 1
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	fc 01       	movw	r30, r24
     7f2:	31 83       	std	Z+1, r19	; 0x01
     7f4:	20 83       	st	Z, r18
	
	return ((currentTask+1)%task_counter);	// round robin
     7f6:	80 91 06 01 	lds	r24, 0x0106
     7fa:	90 91 07 01 	lds	r25, 0x0107
     7fe:	01 96       	adiw	r24, 0x01	; 1
     800:	20 91 10 02 	lds	r18, 0x0210
     804:	30 91 11 02 	lds	r19, 0x0211
     808:	b9 01       	movw	r22, r18
     80a:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <__divmodhi4>
}
     80e:	cf 91       	pop	r28
     810:	df 91       	pop	r29
     812:	08 95       	ret

00000814 <OSSwapTask>:
 {
	// assumption: when this method is being called, there's always a running task; otherwise it would do nothing
	//if(currentTask < 0)	return;
	
	// assumption: when this method is being called, there's always a running task; otherwise it would do nothing
	if(currentTask > OS_NUM_TASKS || currentTask < -1){
     814:	80 91 06 01 	lds	r24, 0x0106
     818:	90 91 07 01 	lds	r25, 0x0107
     81c:	85 30       	cpi	r24, 0x05	; 5
     81e:	91 05       	cpc	r25, r1
     820:	44 f4       	brge	.+16     	; 0x832 <OSSwapTask+0x1e>
     822:	80 91 06 01 	lds	r24, 0x0106
     826:	90 91 07 01 	lds	r25, 0x0107
     82a:	2f ef       	ldi	r18, 0xFF	; 255
     82c:	8f 3f       	cpi	r24, 0xFF	; 255
     82e:	92 07       	cpc	r25, r18
     830:	64 f4       	brge	.+24     	; 0x84a <OSSwapTask+0x36>
		// use this code to test overflow
		// value of current task over flow
		PORTD ^= 0b00010000;
     832:	8b e2       	ldi	r24, 0x2B	; 43
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	2b e2       	ldi	r18, 0x2B	; 43
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	f9 01       	movw	r30, r18
     83c:	30 81       	ld	r19, Z
     83e:	20 e1       	ldi	r18, 0x10	; 16
     840:	23 27       	eor	r18, r19
     842:	fc 01       	movw	r30, r24
     844:	20 83       	st	Z, r18
		asm("ret");
     846:	08 95       	ret
     848:	09 c0       	rjmp	.+18     	; 0x85c <OSSwapTask+0x48>
	} else if(currentTask == -1){
     84a:	80 91 06 01 	lds	r24, 0x0106
     84e:	90 91 07 01 	lds	r25, 0x0107
     852:	ff ef       	ldi	r31, 0xFF	; 255
     854:	8f 3f       	cpi	r24, 0xFF	; 255
     856:	9f 07       	cpc	r25, r31
     858:	09 f4       	brne	.+2      	; 0x85c <OSSwapTask+0x48>
		asm("ret");	// never got any task run
     85a:	08 95       	ret
	}
	
	// Call findNextTask to decide which task to run next.
	tempTaskNum = findNextTask();
     85c:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <findNextTask>
     860:	90 93 05 01 	sts	0x0105, r25
     864:	80 93 04 01 	sts	0x0104, r24
	if(tempTaskNum < 0)	asm("ret");	// no task to swap
     868:	80 91 04 01 	lds	r24, 0x0104
     86c:	90 91 05 01 	lds	r25, 0x0105
     870:	99 23       	and	r25, r25
     872:	0c f4       	brge	.+2      	; 0x876 <OSSwapTask+0x62>
     874:	08 95       	ret
	cli();
     876:	f8 94       	cli
	// Save the context of the current task, and copy the task stack pointer to the task's entry in the Task Control Block (tcb).
	portSAVE_CONTEXT();
     878:	0f 92       	push	r0
     87a:	0f b6       	in	r0, 0x3f	; 63
     87c:	0f 92       	push	r0
     87e:	1f 92       	push	r1
     880:	11 24       	eor	r1, r1
     882:	2f 92       	push	r2
     884:	3f 92       	push	r3
     886:	4f 92       	push	r4
     888:	5f 92       	push	r5
     88a:	6f 92       	push	r6
     88c:	7f 92       	push	r7
     88e:	8f 92       	push	r8
     890:	9f 92       	push	r9
     892:	af 92       	push	r10
     894:	bf 92       	push	r11
     896:	cf 92       	push	r12
     898:	df 92       	push	r13
     89a:	ef 92       	push	r14
     89c:	ff 92       	push	r15
     89e:	0f 93       	push	r16
     8a0:	1f 93       	push	r17
     8a2:	2f 93       	push	r18
     8a4:	3f 93       	push	r19
     8a6:	4f 93       	push	r20
     8a8:	5f 93       	push	r21
     8aa:	6f 93       	push	r22
     8ac:	7f 93       	push	r23
     8ae:	8f 93       	push	r24
     8b0:	9f 93       	push	r25
     8b2:	af 93       	push	r26
     8b4:	bf 93       	push	r27
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	ef 93       	push	r30
     8bc:	ff 93       	push	r31
     8be:	ad b7       	in	r26, 0x3d	; 61
     8c0:	be b7       	in	r27, 0x3e	; 62
     8c2:	b0 93 93 02 	sts	0x0293, r27
     8c6:	a0 93 92 02 	sts	0x0292, r26
	
	// save the current stack pointer
	taskTable[currentTask].stack_ptr = pxCurrentTCB;
     8ca:	60 91 06 01 	lds	r22, 0x0106
     8ce:	70 91 07 01 	lds	r23, 0x0107
     8d2:	80 91 92 02 	lds	r24, 0x0292
     8d6:	90 91 93 02 	lds	r25, 0x0293
     8da:	a0 91 94 02 	lds	r26, 0x0294
     8de:	b0 91 95 02 	lds	r27, 0x0295
     8e2:	4b e0       	ldi	r20, 0x0B	; 11
     8e4:	51 e0       	ldi	r21, 0x01	; 1
     8e6:	64 9f       	mul	r22, r20
     8e8:	90 01       	movw	r18, r0
     8ea:	65 9f       	mul	r22, r21
     8ec:	30 0d       	add	r19, r0
     8ee:	74 9f       	mul	r23, r20
     8f0:	30 0d       	add	r19, r0
     8f2:	11 24       	eor	r1, r1
     8f4:	22 56       	subi	r18, 0x62	; 98
     8f6:	3d 4f       	sbci	r19, 0xFD	; 253
     8f8:	f9 01       	movw	r30, r18
     8fa:	80 83       	st	Z, r24
     8fc:	91 83       	std	Z+1, r25	; 0x01
     8fe:	a2 83       	std	Z+2, r26	; 0x02
     900:	b3 83       	std	Z+3, r27	; 0x03
	
	// update the "currentTask" to be the next task to run
	currentTask = tempTaskNum;
     902:	80 91 04 01 	lds	r24, 0x0104
     906:	90 91 05 01 	lds	r25, 0x0105
     90a:	90 93 07 01 	sts	0x0107, r25
     90e:	80 93 06 01 	sts	0x0106, r24
	
	TTaskBlock *t = &taskTable[currentTask];
     912:	80 91 06 01 	lds	r24, 0x0106
     916:	90 91 07 01 	lds	r25, 0x0107
     91a:	ac 01       	movw	r20, r24
     91c:	2b e0       	ldi	r18, 0x0B	; 11
     91e:	31 e0       	ldi	r19, 0x01	; 1
     920:	42 9f       	mul	r20, r18
     922:	c0 01       	movw	r24, r0
     924:	43 9f       	mul	r20, r19
     926:	90 0d       	add	r25, r0
     928:	52 9f       	mul	r21, r18
     92a:	90 0d       	add	r25, r0
     92c:	11 24       	eor	r1, r1
     92e:	8a 56       	subi	r24, 0x6A	; 106
     930:	9d 4f       	sbci	r25, 0xFD	; 253
     932:	9a 83       	std	Y+2, r25	; 0x02
     934:	89 83       	std	Y+1, r24	; 0x01
	
	if(t->runflag){	// has been run
     936:	89 81       	ldd	r24, Y+1	; 0x01
     938:	9a 81       	ldd	r25, Y+2	; 0x02
     93a:	fc 01       	movw	r30, r24
     93c:	80 81       	ld	r24, Z
     93e:	91 81       	ldd	r25, Z+1	; 0x01
     940:	00 97       	sbiw	r24, 0x00	; 0
     942:	09 f4       	brne	.+2      	; 0x946 <__stack+0x47>
     944:	4a c0       	rjmp	.+148    	; 0x9da <__stack+0xdb>
		// get the stack pointer saved
		pxCurrentTCB = taskTable[currentTask].stack_ptr;
     946:	40 91 06 01 	lds	r20, 0x0106
     94a:	50 91 07 01 	lds	r21, 0x0107
     94e:	2b e0       	ldi	r18, 0x0B	; 11
     950:	31 e0       	ldi	r19, 0x01	; 1
     952:	42 9f       	mul	r20, r18
     954:	c0 01       	movw	r24, r0
     956:	43 9f       	mul	r20, r19
     958:	90 0d       	add	r25, r0
     95a:	52 9f       	mul	r21, r18
     95c:	90 0d       	add	r25, r0
     95e:	11 24       	eor	r1, r1
     960:	82 56       	subi	r24, 0x62	; 98
     962:	9d 4f       	sbci	r25, 0xFD	; 253
     964:	fc 01       	movw	r30, r24
     966:	80 81       	ld	r24, Z
     968:	91 81       	ldd	r25, Z+1	; 0x01
     96a:	a2 81       	ldd	r26, Z+2	; 0x02
     96c:	b3 81       	ldd	r27, Z+3	; 0x03
     96e:	80 93 92 02 	sts	0x0292, r24
     972:	90 93 93 02 	sts	0x0293, r25
     976:	a0 93 94 02 	sts	0x0294, r26
     97a:	b0 93 95 02 	sts	0x0295, r27
		portRESTORE_CONTEXT();
     97e:	80 91 92 02 	lds	r24, 0x0292
     982:	90 91 93 02 	lds	r25, 0x0293
     986:	a0 91 94 02 	lds	r26, 0x0294
     98a:	b0 91 95 02 	lds	r27, 0x0295
     98e:	8d bf       	out	0x3d, r24	; 61
     990:	9e bf       	out	0x3e, r25	; 62
     992:	ff 91       	pop	r31
     994:	ef 91       	pop	r30
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	bf 91       	pop	r27
     99c:	af 91       	pop	r26
     99e:	9f 91       	pop	r25
     9a0:	8f 91       	pop	r24
     9a2:	7f 91       	pop	r23
     9a4:	6f 91       	pop	r22
     9a6:	5f 91       	pop	r21
     9a8:	4f 91       	pop	r20
     9aa:	3f 91       	pop	r19
     9ac:	2f 91       	pop	r18
     9ae:	1f 91       	pop	r17
     9b0:	0f 91       	pop	r16
     9b2:	ff 90       	pop	r15
     9b4:	ef 90       	pop	r14
     9b6:	df 90       	pop	r13
     9b8:	cf 90       	pop	r12
     9ba:	bf 90       	pop	r11
     9bc:	af 90       	pop	r10
     9be:	9f 90       	pop	r9
     9c0:	8f 90       	pop	r8
     9c2:	7f 90       	pop	r7
     9c4:	6f 90       	pop	r6
     9c6:	5f 90       	pop	r5
     9c8:	4f 90       	pop	r4
     9ca:	3f 90       	pop	r3
     9cc:	2f 90       	pop	r2
     9ce:	1f 90       	pop	r1
     9d0:	0f 90       	pop	r0
     9d2:	0f be       	out	0x3f, r0	; 63
     9d4:	0f 90       	pop	r0
		sei();
     9d6:	78 94       	sei
     9d8:	06 c0       	rjmp	.+12     	; 0x9e6 <__stack+0xe7>
	}else{	// never run -> then run
		runTaskFirstTime(currentTask);
     9da:	80 91 06 01 	lds	r24, 0x0106
     9de:	90 91 07 01 	lds	r25, 0x0107
     9e2:	0e 94 53 03 	call	0x6a6	; 0x6a6 <runTaskFirstTime>
	}
	
	// Do not modify the line below!	
	asm("ret");
     9e6:	08 95       	ret

000009e8 <__vector_14>:
// ISR for the timer. IMPLEMENT ONLY IN PART 2!


ISR(TIMER0_COMPA_vect, ISR_NAKED)
{
	cli();
     9e8:	f8 94       	cli
	
	OSSwapTask();
     9ea:	0e 94 0a 04 	call	0x814	; 0x814 <OSSwapTask>
	
	// Do not change this!
	asm("reti");
     9ee:	18 95       	reti

000009f0 <OSInit>:
}

void OSInit()
{ 
     9f0:	df 93       	push	r29
     9f2:	cf 93       	push	r28
     9f4:	cd b7       	in	r28, 0x3d	; 61
     9f6:	de b7       	in	r29, 0x3e	; 62
	// Initialize all OS state variables, hardware used DIRECTLY by the OS, etc etc. Do not initialize variables or hardware
	// used by the application. Only those used by the OS.
	int i;
	
	// initialize timer 0
	TCNT0 = 0; OCR0A = 100;
     9f8:	86 e4       	ldi	r24, 0x46	; 70
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	fc 01       	movw	r30, r24
     9fe:	10 82       	st	Z, r1
     a00:	87 e4       	ldi	r24, 0x47	; 71
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	24 e6       	ldi	r18, 0x64	; 100
     a06:	fc 01       	movw	r30, r24
     a08:	20 83       	st	Z, r18
	TCCR0A = 0b00000010;
     a0a:	84 e4       	ldi	r24, 0x44	; 68
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	22 e0       	ldi	r18, 0x02	; 2
     a10:	fc 01       	movw	r30, r24
     a12:	20 83       	st	Z, r18
	TCCR0B = 0b00000101;
     a14:	85 e4       	ldi	r24, 0x45	; 69
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	25 e0       	ldi	r18, 0x05	; 5
     a1a:	fc 01       	movw	r30, r24
     a1c:	20 83       	st	Z, r18
}
     a1e:	cf 91       	pop	r28
     a20:	df 91       	pop	r29
     a22:	08 95       	ret

00000a24 <OSAddTask>:
// First argument is a pointer to the task's function code, the second is a priority number (0=highest priority)
// and the 3rd argument is an argument that will be passed to the task function the first time it is run.
// E.g. OSAddTask(task1, 0, (void *) 5) causes a task called task1 to be created with priority 0, and the integer
// 5 is passed to task1 when it is first called. See app.c to fully understand how OSAddTask is used.
int OSAddTask(void (*taskptr)(void *), int prio, void* arg)
{
     a24:	df 93       	push	r29
     a26:	cf 93       	push	r28
     a28:	cd b7       	in	r28, 0x3d	; 61
     a2a:	de b7       	in	r29, 0x3e	; 62
     a2c:	28 97       	sbiw	r28, 0x08	; 8
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	f8 94       	cli
     a32:	de bf       	out	0x3e, r29	; 62
     a34:	0f be       	out	0x3f, r0	; 63
     a36:	cd bf       	out	0x3d, r28	; 61
     a38:	9c 83       	std	Y+4, r25	; 0x04
     a3a:	8b 83       	std	Y+3, r24	; 0x03
     a3c:	7e 83       	std	Y+6, r23	; 0x06
     a3e:	6d 83       	std	Y+5, r22	; 0x05
     a40:	58 87       	std	Y+8, r21	; 0x08
     a42:	4f 83       	std	Y+7, r20	; 0x07
	// Adds a new entry to the TCB. Returns a -1 if # of tasks > OS_NUM_TASKS. Note that OS_NUM_TASKS is the MAXIMUM
	// number of tasks that can be created, not the actual number.
	if(task_counter >= OS_NUM_TASKS)	return -1;
     a44:	80 91 10 02 	lds	r24, 0x0210
     a48:	90 91 11 02 	lds	r25, 0x0211
     a4c:	84 30       	cpi	r24, 0x04	; 4
     a4e:	91 05       	cpc	r25, r1
     a50:	1c f0       	brlt	.+6      	; 0xa58 <OSAddTask+0x34>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	9f ef       	ldi	r25, 0xFF	; 255
     a56:	33 c0       	rjmp	.+102    	; 0xabe <OSAddTask+0x9a>
	TTaskBlock *t = &taskTable[task_counter++];
     a58:	80 91 10 02 	lds	r24, 0x0210
     a5c:	90 91 11 02 	lds	r25, 0x0211
     a60:	bc 01       	movw	r22, r24
     a62:	4b e0       	ldi	r20, 0x0B	; 11
     a64:	51 e0       	ldi	r21, 0x01	; 1
     a66:	64 9f       	mul	r22, r20
     a68:	90 01       	movw	r18, r0
     a6a:	65 9f       	mul	r22, r21
     a6c:	30 0d       	add	r19, r0
     a6e:	74 9f       	mul	r23, r20
     a70:	30 0d       	add	r19, r0
     a72:	11 24       	eor	r1, r1
     a74:	2a 56       	subi	r18, 0x6A	; 106
     a76:	3d 4f       	sbci	r19, 0xFD	; 253
     a78:	3a 83       	std	Y+2, r19	; 0x02
     a7a:	29 83       	std	Y+1, r18	; 0x01
     a7c:	01 96       	adiw	r24, 0x01	; 1
     a7e:	90 93 11 02 	sts	0x0211, r25
     a82:	80 93 10 02 	sts	0x0210, r24
	t->fptr = taskptr;
     a86:	89 81       	ldd	r24, Y+1	; 0x01
     a88:	9a 81       	ldd	r25, Y+2	; 0x02
     a8a:	2b 81       	ldd	r18, Y+3	; 0x03
     a8c:	3c 81       	ldd	r19, Y+4	; 0x04
     a8e:	fc 01       	movw	r30, r24
     a90:	35 83       	std	Z+5, r19	; 0x05
     a92:	24 83       	std	Z+4, r18	; 0x04
	t->prio = prio;
     a94:	89 81       	ldd	r24, Y+1	; 0x01
     a96:	9a 81       	ldd	r25, Y+2	; 0x02
     a98:	2d 81       	ldd	r18, Y+5	; 0x05
     a9a:	3e 81       	ldd	r19, Y+6	; 0x06
     a9c:	fc 01       	movw	r30, r24
     a9e:	33 83       	std	Z+3, r19	; 0x03
     aa0:	22 83       	std	Z+2, r18	; 0x02
	t->arg = arg;
     aa2:	89 81       	ldd	r24, Y+1	; 0x01
     aa4:	9a 81       	ldd	r25, Y+2	; 0x02
     aa6:	2f 81       	ldd	r18, Y+7	; 0x07
     aa8:	38 85       	ldd	r19, Y+8	; 0x08
     aaa:	fc 01       	movw	r30, r24
     aac:	37 83       	std	Z+7, r19	; 0x07
     aae:	26 83       	std	Z+6, r18	; 0x06
	t->runflag = 0;
     ab0:	89 81       	ldd	r24, Y+1	; 0x01
     ab2:	9a 81       	ldd	r25, Y+2	; 0x02
     ab4:	fc 01       	movw	r30, r24
     ab6:	11 82       	std	Z+1, r1	; 0x01
     ab8:	10 82       	st	Z, r1
	
	return 0;
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	90 e0       	ldi	r25, 0x00	; 0
}
     abe:	28 96       	adiw	r28, 0x08	; 8
     ac0:	0f b6       	in	r0, 0x3f	; 63
     ac2:	f8 94       	cli
     ac4:	de bf       	out	0x3e, r29	; 62
     ac6:	0f be       	out	0x3f, r0	; 63
     ac8:	cd bf       	out	0x3d, r28	; 61
     aca:	cf 91       	pop	r28
     acc:	df 91       	pop	r29
     ace:	08 95       	ret

00000ad0 <OSRun>:

void OSRun()
{
     ad0:	df 93       	push	r29
     ad2:	cf 93       	push	r28
     ad4:	cd b7       	in	r28, 0x3d	; 61
     ad6:	de b7       	in	r29, 0x3e	; 62
	// start timer 0
	TIMSK0 |= 0b10;
     ad8:	8e e6       	ldi	r24, 0x6E	; 110
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	2e e6       	ldi	r18, 0x6E	; 110
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	f9 01       	movw	r30, r18
     ae2:	20 81       	ld	r18, Z
     ae4:	22 60       	ori	r18, 0x02	; 2
     ae6:	fc 01       	movw	r30, r24
     ae8:	20 83       	st	Z, r18
	// enable global interrupt
	sei();
     aea:	78 94       	sei
	
	// Starts by executing the first task
	currentTask = 0;
     aec:	10 92 07 01 	sts	0x0107, r1
     af0:	10 92 06 01 	sts	0x0106, r1
	runTaskFirstTime(currentTask);
     af4:	80 91 06 01 	lds	r24, 0x0106
     af8:	90 91 07 01 	lds	r25, 0x0107
     afc:	0e 94 53 03 	call	0x6a6	; 0x6a6 <runTaskFirstTime>
     b00:	cf 91       	pop	r28
     b02:	df 91       	pop	r29
     b04:	08 95       	ret

00000b06 <setupSerial>:
// Set up for 9600 8N1
void setupSerial()
{
	enter_atomic();
	qcount=0;
	qhead=0;
     b06:	df 93       	push	r29
     b08:	cf 93       	push	r28
     b0a:	cd b7       	in	r28, 0x3d	; 61
     b0c:	de b7       	in	r29, 0x3e	; 62
	qtail=0;
     b0e:	f8 94       	cli
	lqhead=0;
     b10:	10 92 0d 07 	sts	0x070D, r1
     b14:	10 92 0c 07 	sts	0x070C, r1
	lqtail=0;
     b18:	10 92 51 07 	sts	0x0751, r1
     b1c:	10 92 50 07 	sts	0x0750, r1
	lqcount=0;
     b20:	10 92 0f 07 	sts	0x070F, r1
     b24:	10 92 0e 07 	sts	0x070E, r1

     b28:	10 92 09 07 	sts	0x0709, r1
     b2c:	10 92 08 07 	sts	0x0708, r1
	// Set up baud rate generator. UBBR=16000000/(16*9600)-1 = 103
     b30:	10 92 0b 07 	sts	0x070B, r1
     b34:	10 92 0a 07 	sts	0x070A, r1
	UBRR0L=103;
     b38:	10 92 07 07 	sts	0x0707, r1
     b3c:	10 92 06 07 	sts	0x0706, r1
	UBRR0H=0;
	
	// Set up 8N1
     b40:	84 ec       	ldi	r24, 0xC4	; 196
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	27 e6       	ldi	r18, 0x67	; 103
     b46:	fc 01       	movw	r30, r24
     b48:	20 83       	st	Z, r18
	UCSR0C=0b110;
     b4a:	85 ec       	ldi	r24, 0xC5	; 197
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	fc 01       	movw	r30, r24
     b50:	10 82       	st	Z, r1
	
	// Enable RX and TX.
	UCSR0B=0b10011000;
     b52:	82 ec       	ldi	r24, 0xC2	; 194
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	26 e0       	ldi	r18, 0x06	; 6
     b58:	fc 01       	movw	r30, r24
     b5a:	20 83       	st	Z, r18
	UCSR0A=0;
	leave_atomic();
}
     b5c:	81 ec       	ldi	r24, 0xC1	; 193
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	28 e9       	ldi	r18, 0x98	; 152
     b62:	fc 01       	movw	r30, r24
     b64:	20 83       	st	Z, r18

     b66:	80 ec       	ldi	r24, 0xC0	; 192
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	fc 01       	movw	r30, r24
     b6c:	10 82       	st	Z, r1
// ISR for transmit end.
     b6e:	78 94       	sei
ISR(USART_TX_vect)
     b70:	cf 91       	pop	r28
     b72:	df 91       	pop	r29
     b74:	08 95       	ret

00000b76 <__vector_20>:
{

	enter_atomic();
	// Disable interrupts. 
     b76:	1f 92       	push	r1
     b78:	0f 92       	push	r0
     b7a:	0f b6       	in	r0, 0x3f	; 63
     b7c:	0f 92       	push	r0
     b7e:	11 24       	eor	r1, r1
     b80:	2f 93       	push	r18
     b82:	3f 93       	push	r19
     b84:	5f 93       	push	r21
     b86:	6f 93       	push	r22
     b88:	7f 93       	push	r23
     b8a:	8f 93       	push	r24
     b8c:	9f 93       	push	r25
     b8e:	af 93       	push	r26
     b90:	bf 93       	push	r27
     b92:	ef 93       	push	r30
     b94:	ff 93       	push	r31
     b96:	df 93       	push	r29
     b98:	cf 93       	push	r28
     b9a:	cd b7       	in	r28, 0x3d	; 61
     b9c:	de b7       	in	r29, 0x3e	; 62
	if(qcount==0)
		UCSR0B&=0b10111111;
     b9e:	f8 94       	cli
	else
	{
     ba0:	80 91 0c 07 	lds	r24, 0x070C
     ba4:	90 91 0d 07 	lds	r25, 0x070D
     ba8:	00 97       	sbiw	r24, 0x00	; 0
     baa:	51 f4       	brne	.+20     	; 0xbc0 <__vector_20+0x4a>
		UDR0=q[qtail];
     bac:	81 ec       	ldi	r24, 0xC1	; 193
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	21 ec       	ldi	r18, 0xC1	; 193
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	f9 01       	movw	r30, r18
     bb6:	20 81       	ld	r18, Z
     bb8:	2f 7b       	andi	r18, 0xBF	; 191
     bba:	fc 01       	movw	r30, r24
     bbc:	20 83       	st	Z, r18
     bbe:	23 c0       	rjmp	.+70     	; 0xc06 <__vector_20+0x90>
		qtail=(qtail+1)%QLEN;
		qcount--;
	}	
     bc0:	86 ec       	ldi	r24, 0xC6	; 198
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	20 91 0e 07 	lds	r18, 0x070E
     bc8:	30 91 0f 07 	lds	r19, 0x070F
     bcc:	20 5f       	subi	r18, 0xF0	; 240
     bce:	38 4f       	sbci	r19, 0xF8	; 248
     bd0:	f9 01       	movw	r30, r18
     bd2:	20 81       	ld	r18, Z
     bd4:	fc 01       	movw	r30, r24
     bd6:	20 83       	st	Z, r18
	leave_atomic();
     bd8:	80 91 0e 07 	lds	r24, 0x070E
     bdc:	90 91 0f 07 	lds	r25, 0x070F
     be0:	01 96       	adiw	r24, 0x01	; 1
     be2:	20 e4       	ldi	r18, 0x40	; 64
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	b9 01       	movw	r22, r18
     be8:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <__divmodhi4>
     bec:	90 93 0f 07 	sts	0x070F, r25
     bf0:	80 93 0e 07 	sts	0x070E, r24
}
     bf4:	80 91 0c 07 	lds	r24, 0x070C
     bf8:	90 91 0d 07 	lds	r25, 0x070D
     bfc:	01 97       	sbiw	r24, 0x01	; 1
     bfe:	90 93 0d 07 	sts	0x070D, r25
     c02:	80 93 0c 07 	sts	0x070C, r24

// Listener
     c06:	78 94       	sei
ISR(USART_RX_vect)
     c08:	cf 91       	pop	r28
     c0a:	df 91       	pop	r29
     c0c:	ff 91       	pop	r31
     c0e:	ef 91       	pop	r30
     c10:	bf 91       	pop	r27
     c12:	af 91       	pop	r26
     c14:	9f 91       	pop	r25
     c16:	8f 91       	pop	r24
     c18:	7f 91       	pop	r23
     c1a:	6f 91       	pop	r22
     c1c:	5f 91       	pop	r21
     c1e:	3f 91       	pop	r19
     c20:	2f 91       	pop	r18
     c22:	0f 90       	pop	r0
     c24:	0f be       	out	0x3f, r0	; 63
     c26:	0f 90       	pop	r0
     c28:	1f 90       	pop	r1
     c2a:	18 95       	reti

00000c2c <__vector_18>:
{
	// Guarantee atomicity
	enter_atomic();
	// Get the character
     c2c:	1f 92       	push	r1
     c2e:	0f 92       	push	r0
     c30:	0f b6       	in	r0, 0x3f	; 63
     c32:	0f 92       	push	r0
     c34:	11 24       	eor	r1, r1
     c36:	2f 93       	push	r18
     c38:	3f 93       	push	r19
     c3a:	5f 93       	push	r21
     c3c:	6f 93       	push	r22
     c3e:	7f 93       	push	r23
     c40:	8f 93       	push	r24
     c42:	9f 93       	push	r25
     c44:	af 93       	push	r26
     c46:	bf 93       	push	r27
     c48:	ef 93       	push	r30
     c4a:	ff 93       	push	r31
     c4c:	df 93       	push	r29
     c4e:	cf 93       	push	r28
     c50:	0f 92       	push	r0
     c52:	cd b7       	in	r28, 0x3d	; 61
     c54:	de b7       	in	r29, 0x3e	; 62
	char ch=UDR0;
	leave_atomic();
     c56:	f8 94       	cli
}

void say(char *str)
     c58:	86 ec       	ldi	r24, 0xC6	; 198
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	fc 01       	movw	r30, r24
     c5e:	80 81       	ld	r24, Z
     c60:	89 83       	std	Y+1, r24	; 0x01
{
     c62:	80 91 06 07 	lds	r24, 0x0706
     c66:	90 91 07 07 	lds	r25, 0x0707
     c6a:	80 38       	cpi	r24, 0x80	; 128
     c6c:	91 05       	cpc	r25, r1
     c6e:	04 f5       	brge	.+64     	; 0xcb0 <__vector_18+0x84>
	int i;
	
     c70:	80 91 08 07 	lds	r24, 0x0708
     c74:	90 91 09 07 	lds	r25, 0x0709
     c78:	8a 53       	subi	r24, 0x3A	; 58
     c7a:	99 4f       	sbci	r25, 0xF9	; 249
     c7c:	29 81       	ldd	r18, Y+1	; 0x01
     c7e:	fc 01       	movw	r30, r24
     c80:	20 83       	st	Z, r18
	// Guarantee atomicity
     c82:	80 91 08 07 	lds	r24, 0x0708
     c86:	90 91 09 07 	lds	r25, 0x0709
     c8a:	01 96       	adiw	r24, 0x01	; 1
     c8c:	20 e8       	ldi	r18, 0x80	; 128
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	b9 01       	movw	r22, r18
     c92:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <__divmodhi4>
     c96:	90 93 09 07 	sts	0x0709, r25
     c9a:	80 93 08 07 	sts	0x0708, r24
	enter_atomic();
     c9e:	80 91 06 07 	lds	r24, 0x0706
     ca2:	90 91 07 07 	lds	r25, 0x0707
     ca6:	01 96       	adiw	r24, 0x01	; 1
     ca8:	90 93 07 07 	sts	0x0707, r25
     cac:	80 93 06 07 	sts	0x0706, r24
	for(i=0; i<strlen(str) && qcount < QLEN; i++)
	{
		q[qhead]=str[i];
     cb0:	78 94       	sei
		qhead=(qhead+1) %QLEN;
     cb2:	0f 90       	pop	r0
     cb4:	cf 91       	pop	r28
     cb6:	df 91       	pop	r29
     cb8:	ff 91       	pop	r31
     cba:	ef 91       	pop	r30
     cbc:	bf 91       	pop	r27
     cbe:	af 91       	pop	r26
     cc0:	9f 91       	pop	r25
     cc2:	8f 91       	pop	r24
     cc4:	7f 91       	pop	r23
     cc6:	6f 91       	pop	r22
     cc8:	5f 91       	pop	r21
     cca:	3f 91       	pop	r19
     ccc:	2f 91       	pop	r18
     cce:	0f 90       	pop	r0
     cd0:	0f be       	out	0x3f, r0	; 63
     cd2:	0f 90       	pop	r0
     cd4:	1f 90       	pop	r1
     cd6:	18 95       	reti

00000cd8 <hear>:
		qcount++;			
		
		if(!(UCSR0B & 0b01000000))
     cd8:	df 93       	push	r29
     cda:	cf 93       	push	r28
     cdc:	00 d0       	rcall	.+0      	; 0xcde <hear+0x6>
     cde:	00 d0       	rcall	.+0      	; 0xce0 <hear+0x8>
     ce0:	00 d0       	rcall	.+0      	; 0xce2 <hear+0xa>
     ce2:	cd b7       	in	r28, 0x3d	; 61
     ce4:	de b7       	in	r29, 0x3e	; 62
     ce6:	9c 83       	std	Y+4, r25	; 0x04
     ce8:	8b 83       	std	Y+3, r24	; 0x03
     cea:	7e 83       	std	Y+6, r23	; 0x06
     cec:	6d 83       	std	Y+5, r22	; 0x05
		{
			UDR0=q[qtail];
			qtail=(qtail+1)%QLEN;
     cee:	f8 94       	cli
			qcount--;
     cf0:	1a 82       	std	Y+2, r1	; 0x02
     cf2:	19 82       	std	Y+1, r1	; 0x01
     cf4:	23 c0       	rjmp	.+70     	; 0xd3c <hear+0x64>
			UCSR0B|=0b01000000;
		}
     cf6:	89 81       	ldd	r24, Y+1	; 0x01
     cf8:	9a 81       	ldd	r25, Y+2	; 0x02
     cfa:	2b 81       	ldd	r18, Y+3	; 0x03
     cfc:	3c 81       	ldd	r19, Y+4	; 0x04
     cfe:	82 0f       	add	r24, r18
     d00:	93 1f       	adc	r25, r19
     d02:	20 91 0a 07 	lds	r18, 0x070A
     d06:	30 91 0b 07 	lds	r19, 0x070B
     d0a:	2a 53       	subi	r18, 0x3A	; 58
     d0c:	39 4f       	sbci	r19, 0xF9	; 249
     d0e:	f9 01       	movw	r30, r18
     d10:	20 81       	ld	r18, Z
     d12:	fc 01       	movw	r30, r24
     d14:	20 83       	st	Z, r18
		
     d16:	80 91 0a 07 	lds	r24, 0x070A
     d1a:	90 91 0b 07 	lds	r25, 0x070B
     d1e:	01 96       	adiw	r24, 0x01	; 1
     d20:	20 e8       	ldi	r18, 0x80	; 128
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	b9 01       	movw	r22, r18
     d26:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <__divmodhi4>
     d2a:	90 93 0b 07 	sts	0x070B, r25
     d2e:	80 93 0a 07 	sts	0x070A, r24
		
		if(!(UCSR0B & 0b01000000))
		{
			UDR0=q[qtail];
			qtail=(qtail+1)%QLEN;
			qcount--;
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	9a 81       	ldd	r25, Y+2	; 0x02
     d36:	01 96       	adiw	r24, 0x01	; 1
     d38:	9a 83       	std	Y+2, r25	; 0x02
     d3a:	89 83       	std	Y+1, r24	; 0x01
     d3c:	80 91 06 07 	lds	r24, 0x0706
     d40:	90 91 07 07 	lds	r25, 0x0707
     d44:	29 81       	ldd	r18, Y+1	; 0x01
     d46:	3a 81       	ldd	r19, Y+2	; 0x02
     d48:	28 17       	cp	r18, r24
     d4a:	39 07       	cpc	r19, r25
     d4c:	a4 f2       	brlt	.-88     	; 0xcf6 <hear+0x1e>
			UCSR0B|=0b01000000;
		}
		
		//while(qcount == QLEN) {
		//	leave_atomic();
		//	enter_atomic();
     d4e:	80 91 0a 07 	lds	r24, 0x070A
     d52:	90 91 0b 07 	lds	r25, 0x070B
     d56:	2b 81       	ldd	r18, Y+3	; 0x03
     d58:	3c 81       	ldd	r19, Y+4	; 0x04
     d5a:	82 0f       	add	r24, r18
     d5c:	93 1f       	adc	r25, r19
     d5e:	fc 01       	movw	r30, r24
     d60:	10 82       	st	Z, r1
		//}
	}
     d62:	20 91 06 07 	lds	r18, 0x0706
     d66:	30 91 07 07 	lds	r19, 0x0707
     d6a:	8d 81       	ldd	r24, Y+5	; 0x05
     d6c:	9e 81       	ldd	r25, Y+6	; 0x06
     d6e:	fc 01       	movw	r30, r24
     d70:	31 83       	std	Z+1, r19	; 0x01
     d72:	20 83       	st	Z, r18
	leave_atomic();
     d74:	10 92 07 07 	sts	0x0707, r1
     d78:	10 92 06 07 	sts	0x0706, r1
     d7c:	78 94       	sei
     d7e:	26 96       	adiw	r28, 0x06	; 6
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	f8 94       	cli
     d84:	de bf       	out	0x3e, r29	; 62
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	cd bf       	out	0x3d, r28	; 61
     d8a:	cf 91       	pop	r28
     d8c:	df 91       	pop	r29
     d8e:	08 95       	ret

00000d90 <say>:
     d90:	0f 93       	push	r16
     d92:	1f 93       	push	r17
     d94:	df 93       	push	r29
     d96:	cf 93       	push	r28
     d98:	00 d0       	rcall	.+0      	; 0xd9a <say+0xa>
     d9a:	00 d0       	rcall	.+0      	; 0xd9c <say+0xc>
     d9c:	cd b7       	in	r28, 0x3d	; 61
     d9e:	de b7       	in	r29, 0x3e	; 62
     da0:	9c 83       	std	Y+4, r25	; 0x04
     da2:	8b 83       	std	Y+3, r24	; 0x03
     da4:	f8 94       	cli
     da6:	1a 82       	std	Y+2, r1	; 0x02
     da8:	19 82       	std	Y+1, r1	; 0x01
     daa:	62 c0       	rjmp	.+196    	; 0xe70 <say+0xe0>
     dac:	80 91 50 07 	lds	r24, 0x0750
     db0:	90 91 51 07 	lds	r25, 0x0751
     db4:	29 81       	ldd	r18, Y+1	; 0x01
     db6:	3a 81       	ldd	r19, Y+2	; 0x02
     db8:	4b 81       	ldd	r20, Y+3	; 0x03
     dba:	5c 81       	ldd	r21, Y+4	; 0x04
     dbc:	24 0f       	add	r18, r20
     dbe:	35 1f       	adc	r19, r21
     dc0:	f9 01       	movw	r30, r18
     dc2:	20 81       	ld	r18, Z
     dc4:	80 5f       	subi	r24, 0xF0	; 240
     dc6:	98 4f       	sbci	r25, 0xF8	; 248
     dc8:	fc 01       	movw	r30, r24
     dca:	20 83       	st	Z, r18
     dcc:	80 91 50 07 	lds	r24, 0x0750
     dd0:	90 91 51 07 	lds	r25, 0x0751
     dd4:	01 96       	adiw	r24, 0x01	; 1
     dd6:	20 e4       	ldi	r18, 0x40	; 64
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	b9 01       	movw	r22, r18
     ddc:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <__divmodhi4>
     de0:	90 93 51 07 	sts	0x0751, r25
     de4:	80 93 50 07 	sts	0x0750, r24
     de8:	80 91 0c 07 	lds	r24, 0x070C
     dec:	90 91 0d 07 	lds	r25, 0x070D
     df0:	01 96       	adiw	r24, 0x01	; 1
     df2:	90 93 0d 07 	sts	0x070D, r25
     df6:	80 93 0c 07 	sts	0x070C, r24
     dfa:	81 ec       	ldi	r24, 0xC1	; 193
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	fc 01       	movw	r30, r24
     e00:	80 81       	ld	r24, Z
     e02:	88 2f       	mov	r24, r24
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	80 74       	andi	r24, 0x40	; 64
     e08:	90 70       	andi	r25, 0x00	; 0
     e0a:	00 97       	sbiw	r24, 0x00	; 0
     e0c:	61 f5       	brne	.+88     	; 0xe66 <say+0xd6>
     e0e:	86 ec       	ldi	r24, 0xC6	; 198
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	20 91 0e 07 	lds	r18, 0x070E
     e16:	30 91 0f 07 	lds	r19, 0x070F
     e1a:	20 5f       	subi	r18, 0xF0	; 240
     e1c:	38 4f       	sbci	r19, 0xF8	; 248
     e1e:	f9 01       	movw	r30, r18
     e20:	20 81       	ld	r18, Z
     e22:	fc 01       	movw	r30, r24
     e24:	20 83       	st	Z, r18
     e26:	80 91 0e 07 	lds	r24, 0x070E
     e2a:	90 91 0f 07 	lds	r25, 0x070F
     e2e:	01 96       	adiw	r24, 0x01	; 1
     e30:	20 e4       	ldi	r18, 0x40	; 64
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	b9 01       	movw	r22, r18
     e36:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <__divmodhi4>
     e3a:	90 93 0f 07 	sts	0x070F, r25
     e3e:	80 93 0e 07 	sts	0x070E, r24
     e42:	80 91 0c 07 	lds	r24, 0x070C
     e46:	90 91 0d 07 	lds	r25, 0x070D
     e4a:	01 97       	sbiw	r24, 0x01	; 1
     e4c:	90 93 0d 07 	sts	0x070D, r25
     e50:	80 93 0c 07 	sts	0x070C, r24
     e54:	81 ec       	ldi	r24, 0xC1	; 193
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	21 ec       	ldi	r18, 0xC1	; 193
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	f9 01       	movw	r30, r18
     e5e:	20 81       	ld	r18, Z
     e60:	20 64       	ori	r18, 0x40	; 64
     e62:	fc 01       	movw	r30, r24
     e64:	20 83       	st	Z, r18
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	9a 81       	ldd	r25, Y+2	; 0x02
     e6a:	01 96       	adiw	r24, 0x01	; 1
     e6c:	9a 83       	std	Y+2, r25	; 0x02
     e6e:	89 83       	std	Y+1, r24	; 0x01
     e70:	09 81       	ldd	r16, Y+1	; 0x01
     e72:	1a 81       	ldd	r17, Y+2	; 0x02
     e74:	8b 81       	ldd	r24, Y+3	; 0x03
     e76:	9c 81       	ldd	r25, Y+4	; 0x04
     e78:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <strlen>
     e7c:	08 17       	cp	r16, r24
     e7e:	19 07       	cpc	r17, r25
     e80:	40 f4       	brcc	.+16     	; 0xe92 <say+0x102>
     e82:	80 91 0c 07 	lds	r24, 0x070C
     e86:	90 91 0d 07 	lds	r25, 0x070D
     e8a:	80 34       	cpi	r24, 0x40	; 64
     e8c:	91 05       	cpc	r25, r1
     e8e:	0c f4       	brge	.+2      	; 0xe92 <say+0x102>
     e90:	8d cf       	rjmp	.-230    	; 0xdac <say+0x1c>
     e92:	78 94       	sei
     e94:	0f 90       	pop	r0
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	cf 91       	pop	r28
     e9e:	df 91       	pop	r29
     ea0:	1f 91       	pop	r17
     ea2:	0f 91       	pop	r16
     ea4:	08 95       	ret

00000ea6 <__fixunssfsi>:
     ea6:	ef 92       	push	r14
     ea8:	ff 92       	push	r15
     eaa:	0f 93       	push	r16
     eac:	1f 93       	push	r17
     eae:	7b 01       	movw	r14, r22
     eb0:	8c 01       	movw	r16, r24
     eb2:	20 e0       	ldi	r18, 0x00	; 0
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	40 e0       	ldi	r20, 0x00	; 0
     eb8:	5f e4       	ldi	r21, 0x4F	; 79
     eba:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <__gesf2>
     ebe:	87 fd       	sbrc	r24, 7
     ec0:	11 c0       	rjmp	.+34     	; 0xee4 <__fixunssfsi+0x3e>
     ec2:	c8 01       	movw	r24, r16
     ec4:	b7 01       	movw	r22, r14
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	40 e0       	ldi	r20, 0x00	; 0
     ecc:	5f e4       	ldi	r21, 0x4F	; 79
     ece:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__subsf3>
     ed2:	0e 94 bf 0b 	call	0x177e	; 0x177e <__fixsfsi>
     ed6:	9b 01       	movw	r18, r22
     ed8:	ac 01       	movw	r20, r24
     eda:	20 50       	subi	r18, 0x00	; 0
     edc:	30 40       	sbci	r19, 0x00	; 0
     ede:	40 40       	sbci	r20, 0x00	; 0
     ee0:	50 48       	sbci	r21, 0x80	; 128
     ee2:	06 c0       	rjmp	.+12     	; 0xef0 <__fixunssfsi+0x4a>
     ee4:	c8 01       	movw	r24, r16
     ee6:	b7 01       	movw	r22, r14
     ee8:	0e 94 bf 0b 	call	0x177e	; 0x177e <__fixsfsi>
     eec:	9b 01       	movw	r18, r22
     eee:	ac 01       	movw	r20, r24
     ef0:	b9 01       	movw	r22, r18
     ef2:	ca 01       	movw	r24, r20
     ef4:	1f 91       	pop	r17
     ef6:	0f 91       	pop	r16
     ef8:	ff 90       	pop	r15
     efa:	ef 90       	pop	r14
     efc:	08 95       	ret

00000efe <_fpadd_parts>:
     efe:	a0 e0       	ldi	r26, 0x00	; 0
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e5 e8       	ldi	r30, 0x85	; 133
     f04:	f7 e0       	ldi	r31, 0x07	; 7
     f06:	0c 94 26 0e 	jmp	0x1c4c	; 0x1c4c <__prologue_saves__+0x8>
     f0a:	fc 01       	movw	r30, r24
     f0c:	ea 01       	movw	r28, r20
     f0e:	80 81       	ld	r24, Z
     f10:	82 30       	cpi	r24, 0x02	; 2
     f12:	08 f4       	brcc	.+2      	; 0xf16 <_fpadd_parts+0x18>
     f14:	38 c1       	rjmp	.+624    	; 0x1186 <_fpadd_parts+0x288>
     f16:	db 01       	movw	r26, r22
     f18:	9c 91       	ld	r25, X
     f1a:	92 30       	cpi	r25, 0x02	; 2
     f1c:	08 f4       	brcc	.+2      	; 0xf20 <_fpadd_parts+0x22>
     f1e:	30 c1       	rjmp	.+608    	; 0x1180 <_fpadd_parts+0x282>
     f20:	84 30       	cpi	r24, 0x04	; 4
     f22:	59 f4       	brne	.+22     	; 0xf3a <_fpadd_parts+0x3c>
     f24:	94 30       	cpi	r25, 0x04	; 4
     f26:	09 f0       	breq	.+2      	; 0xf2a <_fpadd_parts+0x2c>
     f28:	2e c1       	rjmp	.+604    	; 0x1186 <_fpadd_parts+0x288>
     f2a:	91 81       	ldd	r25, Z+1	; 0x01
     f2c:	11 96       	adiw	r26, 0x01	; 1
     f2e:	8c 91       	ld	r24, X
     f30:	11 97       	sbiw	r26, 0x01	; 1
     f32:	98 17       	cp	r25, r24
     f34:	09 f0       	breq	.+2      	; 0xf38 <_fpadd_parts+0x3a>
     f36:	21 c1       	rjmp	.+578    	; 0x117a <_fpadd_parts+0x27c>
     f38:	26 c1       	rjmp	.+588    	; 0x1186 <_fpadd_parts+0x288>
     f3a:	94 30       	cpi	r25, 0x04	; 4
     f3c:	09 f4       	brne	.+2      	; 0xf40 <_fpadd_parts+0x42>
     f3e:	20 c1       	rjmp	.+576    	; 0x1180 <_fpadd_parts+0x282>
     f40:	92 30       	cpi	r25, 0x02	; 2
     f42:	b1 f4       	brne	.+44     	; 0xf70 <_fpadd_parts+0x72>
     f44:	82 30       	cpi	r24, 0x02	; 2
     f46:	09 f0       	breq	.+2      	; 0xf4a <_fpadd_parts+0x4c>
     f48:	1e c1       	rjmp	.+572    	; 0x1186 <_fpadd_parts+0x288>
     f4a:	ca 01       	movw	r24, r20
     f4c:	af 01       	movw	r20, r30
     f4e:	28 e0       	ldi	r18, 0x08	; 8
     f50:	da 01       	movw	r26, r20
     f52:	0d 90       	ld	r0, X+
     f54:	ad 01       	movw	r20, r26
     f56:	dc 01       	movw	r26, r24
     f58:	0d 92       	st	X+, r0
     f5a:	cd 01       	movw	r24, r26
     f5c:	21 50       	subi	r18, 0x01	; 1
     f5e:	c1 f7       	brne	.-16     	; 0xf50 <_fpadd_parts+0x52>
     f60:	db 01       	movw	r26, r22
     f62:	11 96       	adiw	r26, 0x01	; 1
     f64:	8c 91       	ld	r24, X
     f66:	11 97       	sbiw	r26, 0x01	; 1
     f68:	91 81       	ldd	r25, Z+1	; 0x01
     f6a:	89 23       	and	r24, r25
     f6c:	89 83       	std	Y+1, r24	; 0x01
     f6e:	0a c1       	rjmp	.+532    	; 0x1184 <_fpadd_parts+0x286>
     f70:	82 30       	cpi	r24, 0x02	; 2
     f72:	09 f4       	brne	.+2      	; 0xf76 <_fpadd_parts+0x78>
     f74:	05 c1       	rjmp	.+522    	; 0x1180 <_fpadd_parts+0x282>
     f76:	c2 80       	ldd	r12, Z+2	; 0x02
     f78:	d3 80       	ldd	r13, Z+3	; 0x03
     f7a:	db 01       	movw	r26, r22
     f7c:	12 96       	adiw	r26, 0x02	; 2
     f7e:	6d 90       	ld	r6, X+
     f80:	7c 90       	ld	r7, X
     f82:	13 97       	sbiw	r26, 0x03	; 3
     f84:	24 81       	ldd	r18, Z+4	; 0x04
     f86:	35 81       	ldd	r19, Z+5	; 0x05
     f88:	46 81       	ldd	r20, Z+6	; 0x06
     f8a:	57 81       	ldd	r21, Z+7	; 0x07
     f8c:	14 96       	adiw	r26, 0x04	; 4
     f8e:	ed 90       	ld	r14, X+
     f90:	fd 90       	ld	r15, X+
     f92:	0d 91       	ld	r16, X+
     f94:	1c 91       	ld	r17, X
     f96:	17 97       	sbiw	r26, 0x07	; 7
     f98:	c6 01       	movw	r24, r12
     f9a:	86 19       	sub	r24, r6
     f9c:	97 09       	sbc	r25, r7
     f9e:	5c 01       	movw	r10, r24
     fa0:	97 ff       	sbrs	r25, 7
     fa2:	04 c0       	rjmp	.+8      	; 0xfac <_fpadd_parts+0xae>
     fa4:	aa 24       	eor	r10, r10
     fa6:	bb 24       	eor	r11, r11
     fa8:	a8 1a       	sub	r10, r24
     faa:	b9 0a       	sbc	r11, r25
     fac:	b0 e2       	ldi	r27, 0x20	; 32
     fae:	ab 16       	cp	r10, r27
     fb0:	b1 04       	cpc	r11, r1
     fb2:	0c f0       	brlt	.+2      	; 0xfb6 <_fpadd_parts+0xb8>
     fb4:	61 c0       	rjmp	.+194    	; 0x1078 <_fpadd_parts+0x17a>
     fb6:	18 16       	cp	r1, r24
     fb8:	19 06       	cpc	r1, r25
     fba:	6c f5       	brge	.+90     	; 0x1016 <_fpadd_parts+0x118>
     fbc:	37 01       	movw	r6, r14
     fbe:	48 01       	movw	r8, r16
     fc0:	0a 2c       	mov	r0, r10
     fc2:	04 c0       	rjmp	.+8      	; 0xfcc <_fpadd_parts+0xce>
     fc4:	96 94       	lsr	r9
     fc6:	87 94       	ror	r8
     fc8:	77 94       	ror	r7
     fca:	67 94       	ror	r6
     fcc:	0a 94       	dec	r0
     fce:	d2 f7       	brpl	.-12     	; 0xfc4 <_fpadd_parts+0xc6>
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	a0 e0       	ldi	r26, 0x00	; 0
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	0a 2c       	mov	r0, r10
     fda:	04 c0       	rjmp	.+8      	; 0xfe4 <_fpadd_parts+0xe6>
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	aa 1f       	adc	r26, r26
     fe2:	bb 1f       	adc	r27, r27
     fe4:	0a 94       	dec	r0
     fe6:	d2 f7       	brpl	.-12     	; 0xfdc <_fpadd_parts+0xde>
     fe8:	01 97       	sbiw	r24, 0x01	; 1
     fea:	a1 09       	sbc	r26, r1
     fec:	b1 09       	sbc	r27, r1
     fee:	8e 21       	and	r24, r14
     ff0:	9f 21       	and	r25, r15
     ff2:	a0 23       	and	r26, r16
     ff4:	b1 23       	and	r27, r17
     ff6:	ee 24       	eor	r14, r14
     ff8:	ff 24       	eor	r15, r15
     ffa:	87 01       	movw	r16, r14
     ffc:	e3 94       	inc	r14
     ffe:	00 97       	sbiw	r24, 0x00	; 0
    1000:	a1 05       	cpc	r26, r1
    1002:	b1 05       	cpc	r27, r1
    1004:	19 f4       	brne	.+6      	; 0x100c <_fpadd_parts+0x10e>
    1006:	ee 24       	eor	r14, r14
    1008:	ff 24       	eor	r15, r15
    100a:	87 01       	movw	r16, r14
    100c:	e6 28       	or	r14, r6
    100e:	f7 28       	or	r15, r7
    1010:	08 29       	or	r16, r8
    1012:	19 29       	or	r17, r9
    1014:	3c c0       	rjmp	.+120    	; 0x108e <_fpadd_parts+0x190>
    1016:	00 97       	sbiw	r24, 0x00	; 0
    1018:	d1 f1       	breq	.+116    	; 0x108e <_fpadd_parts+0x190>
    101a:	ca 0c       	add	r12, r10
    101c:	db 1c       	adc	r13, r11
    101e:	39 01       	movw	r6, r18
    1020:	4a 01       	movw	r8, r20
    1022:	0a 2c       	mov	r0, r10
    1024:	04 c0       	rjmp	.+8      	; 0x102e <_fpadd_parts+0x130>
    1026:	96 94       	lsr	r9
    1028:	87 94       	ror	r8
    102a:	77 94       	ror	r7
    102c:	67 94       	ror	r6
    102e:	0a 94       	dec	r0
    1030:	d2 f7       	brpl	.-12     	; 0x1026 <_fpadd_parts+0x128>
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	a0 e0       	ldi	r26, 0x00	; 0
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	0a 2c       	mov	r0, r10
    103c:	04 c0       	rjmp	.+8      	; 0x1046 <_fpadd_parts+0x148>
    103e:	88 0f       	add	r24, r24
    1040:	99 1f       	adc	r25, r25
    1042:	aa 1f       	adc	r26, r26
    1044:	bb 1f       	adc	r27, r27
    1046:	0a 94       	dec	r0
    1048:	d2 f7       	brpl	.-12     	; 0x103e <_fpadd_parts+0x140>
    104a:	01 97       	sbiw	r24, 0x01	; 1
    104c:	a1 09       	sbc	r26, r1
    104e:	b1 09       	sbc	r27, r1
    1050:	82 23       	and	r24, r18
    1052:	93 23       	and	r25, r19
    1054:	a4 23       	and	r26, r20
    1056:	b5 23       	and	r27, r21
    1058:	21 e0       	ldi	r18, 0x01	; 1
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	40 e0       	ldi	r20, 0x00	; 0
    105e:	50 e0       	ldi	r21, 0x00	; 0
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	a1 05       	cpc	r26, r1
    1064:	b1 05       	cpc	r27, r1
    1066:	19 f4       	brne	.+6      	; 0x106e <_fpadd_parts+0x170>
    1068:	20 e0       	ldi	r18, 0x00	; 0
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	a9 01       	movw	r20, r18
    106e:	26 29       	or	r18, r6
    1070:	37 29       	or	r19, r7
    1072:	48 29       	or	r20, r8
    1074:	59 29       	or	r21, r9
    1076:	0b c0       	rjmp	.+22     	; 0x108e <_fpadd_parts+0x190>
    1078:	6c 14       	cp	r6, r12
    107a:	7d 04       	cpc	r7, r13
    107c:	24 f4       	brge	.+8      	; 0x1086 <_fpadd_parts+0x188>
    107e:	ee 24       	eor	r14, r14
    1080:	ff 24       	eor	r15, r15
    1082:	87 01       	movw	r16, r14
    1084:	04 c0       	rjmp	.+8      	; 0x108e <_fpadd_parts+0x190>
    1086:	63 01       	movw	r12, r6
    1088:	20 e0       	ldi	r18, 0x00	; 0
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	a9 01       	movw	r20, r18
    108e:	81 81       	ldd	r24, Z+1	; 0x01
    1090:	fb 01       	movw	r30, r22
    1092:	91 81       	ldd	r25, Z+1	; 0x01
    1094:	89 17       	cp	r24, r25
    1096:	09 f4       	brne	.+2      	; 0x109a <_fpadd_parts+0x19c>
    1098:	45 c0       	rjmp	.+138    	; 0x1124 <_fpadd_parts+0x226>
    109a:	88 23       	and	r24, r24
    109c:	49 f0       	breq	.+18     	; 0x10b0 <_fpadd_parts+0x1b2>
    109e:	d8 01       	movw	r26, r16
    10a0:	c7 01       	movw	r24, r14
    10a2:	82 1b       	sub	r24, r18
    10a4:	93 0b       	sbc	r25, r19
    10a6:	a4 0b       	sbc	r26, r20
    10a8:	b5 0b       	sbc	r27, r21
    10aa:	9c 01       	movw	r18, r24
    10ac:	ad 01       	movw	r20, r26
    10ae:	04 c0       	rjmp	.+8      	; 0x10b8 <_fpadd_parts+0x1ba>
    10b0:	2e 19       	sub	r18, r14
    10b2:	3f 09       	sbc	r19, r15
    10b4:	40 0b       	sbc	r20, r16
    10b6:	51 0b       	sbc	r21, r17
    10b8:	57 fd       	sbrc	r21, 7
    10ba:	04 c0       	rjmp	.+8      	; 0x10c4 <_fpadd_parts+0x1c6>
    10bc:	19 82       	std	Y+1, r1	; 0x01
    10be:	db 82       	std	Y+3, r13	; 0x03
    10c0:	ca 82       	std	Y+2, r12	; 0x02
    10c2:	0b c0       	rjmp	.+22     	; 0x10da <_fpadd_parts+0x1dc>
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	89 83       	std	Y+1, r24	; 0x01
    10c8:	db 82       	std	Y+3, r13	; 0x03
    10ca:	ca 82       	std	Y+2, r12	; 0x02
    10cc:	50 95       	com	r21
    10ce:	40 95       	com	r20
    10d0:	30 95       	com	r19
    10d2:	21 95       	neg	r18
    10d4:	3f 4f       	sbci	r19, 0xFF	; 255
    10d6:	4f 4f       	sbci	r20, 0xFF	; 255
    10d8:	5f 4f       	sbci	r21, 0xFF	; 255
    10da:	2c 83       	std	Y+4, r18	; 0x04
    10dc:	3d 83       	std	Y+5, r19	; 0x05
    10de:	4e 83       	std	Y+6, r20	; 0x06
    10e0:	5f 83       	std	Y+7, r21	; 0x07
    10e2:	0d c0       	rjmp	.+26     	; 0x10fe <_fpadd_parts+0x200>
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	aa 1f       	adc	r26, r26
    10ea:	bb 1f       	adc	r27, r27
    10ec:	8c 83       	std	Y+4, r24	; 0x04
    10ee:	9d 83       	std	Y+5, r25	; 0x05
    10f0:	ae 83       	std	Y+6, r26	; 0x06
    10f2:	bf 83       	std	Y+7, r27	; 0x07
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	9b 81       	ldd	r25, Y+3	; 0x03
    10f8:	01 97       	sbiw	r24, 0x01	; 1
    10fa:	9b 83       	std	Y+3, r25	; 0x03
    10fc:	8a 83       	std	Y+2, r24	; 0x02
    10fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1100:	9d 81       	ldd	r25, Y+5	; 0x05
    1102:	ae 81       	ldd	r26, Y+6	; 0x06
    1104:	bf 81       	ldd	r27, Y+7	; 0x07
    1106:	9c 01       	movw	r18, r24
    1108:	ad 01       	movw	r20, r26
    110a:	21 50       	subi	r18, 0x01	; 1
    110c:	30 40       	sbci	r19, 0x00	; 0
    110e:	40 40       	sbci	r20, 0x00	; 0
    1110:	50 40       	sbci	r21, 0x00	; 0
    1112:	2f 3f       	cpi	r18, 0xFF	; 255
    1114:	ef ef       	ldi	r30, 0xFF	; 255
    1116:	3e 07       	cpc	r19, r30
    1118:	ef ef       	ldi	r30, 0xFF	; 255
    111a:	4e 07       	cpc	r20, r30
    111c:	ef e3       	ldi	r30, 0x3F	; 63
    111e:	5e 07       	cpc	r21, r30
    1120:	08 f3       	brcs	.-62     	; 0x10e4 <_fpadd_parts+0x1e6>
    1122:	0b c0       	rjmp	.+22     	; 0x113a <_fpadd_parts+0x23c>
    1124:	89 83       	std	Y+1, r24	; 0x01
    1126:	db 82       	std	Y+3, r13	; 0x03
    1128:	ca 82       	std	Y+2, r12	; 0x02
    112a:	2e 0d       	add	r18, r14
    112c:	3f 1d       	adc	r19, r15
    112e:	40 1f       	adc	r20, r16
    1130:	51 1f       	adc	r21, r17
    1132:	2c 83       	std	Y+4, r18	; 0x04
    1134:	3d 83       	std	Y+5, r19	; 0x05
    1136:	4e 83       	std	Y+6, r20	; 0x06
    1138:	5f 83       	std	Y+7, r21	; 0x07
    113a:	83 e0       	ldi	r24, 0x03	; 3
    113c:	88 83       	st	Y, r24
    113e:	2c 81       	ldd	r18, Y+4	; 0x04
    1140:	3d 81       	ldd	r19, Y+5	; 0x05
    1142:	4e 81       	ldd	r20, Y+6	; 0x06
    1144:	5f 81       	ldd	r21, Y+7	; 0x07
    1146:	57 ff       	sbrs	r21, 7
    1148:	1d c0       	rjmp	.+58     	; 0x1184 <_fpadd_parts+0x286>
    114a:	da 01       	movw	r26, r20
    114c:	c9 01       	movw	r24, r18
    114e:	81 70       	andi	r24, 0x01	; 1
    1150:	90 70       	andi	r25, 0x00	; 0
    1152:	a0 70       	andi	r26, 0x00	; 0
    1154:	b0 70       	andi	r27, 0x00	; 0
    1156:	56 95       	lsr	r21
    1158:	47 95       	ror	r20
    115a:	37 95       	ror	r19
    115c:	27 95       	ror	r18
    115e:	82 2b       	or	r24, r18
    1160:	93 2b       	or	r25, r19
    1162:	a4 2b       	or	r26, r20
    1164:	b5 2b       	or	r27, r21
    1166:	8c 83       	std	Y+4, r24	; 0x04
    1168:	9d 83       	std	Y+5, r25	; 0x05
    116a:	ae 83       	std	Y+6, r26	; 0x06
    116c:	bf 83       	std	Y+7, r27	; 0x07
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	9b 81       	ldd	r25, Y+3	; 0x03
    1172:	01 96       	adiw	r24, 0x01	; 1
    1174:	9b 83       	std	Y+3, r25	; 0x03
    1176:	8a 83       	std	Y+2, r24	; 0x02
    1178:	05 c0       	rjmp	.+10     	; 0x1184 <_fpadd_parts+0x286>
    117a:	e8 e0       	ldi	r30, 0x08	; 8
    117c:	f1 e0       	ldi	r31, 0x01	; 1
    117e:	03 c0       	rjmp	.+6      	; 0x1186 <_fpadd_parts+0x288>
    1180:	fb 01       	movw	r30, r22
    1182:	01 c0       	rjmp	.+2      	; 0x1186 <_fpadd_parts+0x288>
    1184:	fe 01       	movw	r30, r28
    1186:	cf 01       	movw	r24, r30
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	ee e0       	ldi	r30, 0x0E	; 14
    118e:	0c 94 42 0e 	jmp	0x1c84	; 0x1c84 <__epilogue_restores__+0x8>

00001192 <__addsf3>:
    1192:	a0 e2       	ldi	r26, 0x20	; 32
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	ef ec       	ldi	r30, 0xCF	; 207
    1198:	f8 e0       	ldi	r31, 0x08	; 8
    119a:	0c 94 2e 0e 	jmp	0x1c5c	; 0x1c5c <__prologue_saves__+0x18>
    119e:	69 83       	std	Y+1, r22	; 0x01
    11a0:	7a 83       	std	Y+2, r23	; 0x02
    11a2:	8b 83       	std	Y+3, r24	; 0x03
    11a4:	9c 83       	std	Y+4, r25	; 0x04
    11a6:	2d 83       	std	Y+5, r18	; 0x05
    11a8:	3e 83       	std	Y+6, r19	; 0x06
    11aa:	4f 83       	std	Y+7, r20	; 0x07
    11ac:	58 87       	std	Y+8, r21	; 0x08
    11ae:	89 e0       	ldi	r24, 0x09	; 9
    11b0:	e8 2e       	mov	r14, r24
    11b2:	f1 2c       	mov	r15, r1
    11b4:	ec 0e       	add	r14, r28
    11b6:	fd 1e       	adc	r15, r29
    11b8:	ce 01       	movw	r24, r28
    11ba:	01 96       	adiw	r24, 0x01	; 1
    11bc:	b7 01       	movw	r22, r14
    11be:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__unpack_f>
    11c2:	8e 01       	movw	r16, r28
    11c4:	0f 5e       	subi	r16, 0xEF	; 239
    11c6:	1f 4f       	sbci	r17, 0xFF	; 255
    11c8:	ce 01       	movw	r24, r28
    11ca:	05 96       	adiw	r24, 0x05	; 5
    11cc:	b8 01       	movw	r22, r16
    11ce:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__unpack_f>
    11d2:	c7 01       	movw	r24, r14
    11d4:	b8 01       	movw	r22, r16
    11d6:	ae 01       	movw	r20, r28
    11d8:	47 5e       	subi	r20, 0xE7	; 231
    11da:	5f 4f       	sbci	r21, 0xFF	; 255
    11dc:	0e 94 7f 07 	call	0xefe	; 0xefe <_fpadd_parts>
    11e0:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <__pack_f>
    11e4:	a0 96       	adiw	r28, 0x20	; 32
    11e6:	e6 e0       	ldi	r30, 0x06	; 6
    11e8:	0c 94 4a 0e 	jmp	0x1c94	; 0x1c94 <__epilogue_restores__+0x18>

000011ec <__subsf3>:
    11ec:	a0 e2       	ldi	r26, 0x20	; 32
    11ee:	b0 e0       	ldi	r27, 0x00	; 0
    11f0:	ec ef       	ldi	r30, 0xFC	; 252
    11f2:	f8 e0       	ldi	r31, 0x08	; 8
    11f4:	0c 94 2e 0e 	jmp	0x1c5c	; 0x1c5c <__prologue_saves__+0x18>
    11f8:	69 83       	std	Y+1, r22	; 0x01
    11fa:	7a 83       	std	Y+2, r23	; 0x02
    11fc:	8b 83       	std	Y+3, r24	; 0x03
    11fe:	9c 83       	std	Y+4, r25	; 0x04
    1200:	2d 83       	std	Y+5, r18	; 0x05
    1202:	3e 83       	std	Y+6, r19	; 0x06
    1204:	4f 83       	std	Y+7, r20	; 0x07
    1206:	58 87       	std	Y+8, r21	; 0x08
    1208:	8e 01       	movw	r16, r28
    120a:	07 5f       	subi	r16, 0xF7	; 247
    120c:	1f 4f       	sbci	r17, 0xFF	; 255
    120e:	ce 01       	movw	r24, r28
    1210:	01 96       	adiw	r24, 0x01	; 1
    1212:	b8 01       	movw	r22, r16
    1214:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__unpack_f>
    1218:	91 e1       	ldi	r25, 0x11	; 17
    121a:	e9 2e       	mov	r14, r25
    121c:	f1 2c       	mov	r15, r1
    121e:	ec 0e       	add	r14, r28
    1220:	fd 1e       	adc	r15, r29
    1222:	ce 01       	movw	r24, r28
    1224:	05 96       	adiw	r24, 0x05	; 5
    1226:	b7 01       	movw	r22, r14
    1228:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__unpack_f>
    122c:	8a 89       	ldd	r24, Y+18	; 0x12
    122e:	91 e0       	ldi	r25, 0x01	; 1
    1230:	89 27       	eor	r24, r25
    1232:	8a 8b       	std	Y+18, r24	; 0x12
    1234:	c8 01       	movw	r24, r16
    1236:	b7 01       	movw	r22, r14
    1238:	ae 01       	movw	r20, r28
    123a:	47 5e       	subi	r20, 0xE7	; 231
    123c:	5f 4f       	sbci	r21, 0xFF	; 255
    123e:	0e 94 7f 07 	call	0xefe	; 0xefe <_fpadd_parts>
    1242:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <__pack_f>
    1246:	a0 96       	adiw	r28, 0x20	; 32
    1248:	e6 e0       	ldi	r30, 0x06	; 6
    124a:	0c 94 4a 0e 	jmp	0x1c94	; 0x1c94 <__epilogue_restores__+0x18>

0000124e <__mulsf3>:
    124e:	a0 e2       	ldi	r26, 0x20	; 32
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	ed e2       	ldi	r30, 0x2D	; 45
    1254:	f9 e0       	ldi	r31, 0x09	; 9
    1256:	0c 94 22 0e 	jmp	0x1c44	; 0x1c44 <__prologue_saves__>
    125a:	69 83       	std	Y+1, r22	; 0x01
    125c:	7a 83       	std	Y+2, r23	; 0x02
    125e:	8b 83       	std	Y+3, r24	; 0x03
    1260:	9c 83       	std	Y+4, r25	; 0x04
    1262:	2d 83       	std	Y+5, r18	; 0x05
    1264:	3e 83       	std	Y+6, r19	; 0x06
    1266:	4f 83       	std	Y+7, r20	; 0x07
    1268:	58 87       	std	Y+8, r21	; 0x08
    126a:	ce 01       	movw	r24, r28
    126c:	01 96       	adiw	r24, 0x01	; 1
    126e:	be 01       	movw	r22, r28
    1270:	67 5f       	subi	r22, 0xF7	; 247
    1272:	7f 4f       	sbci	r23, 0xFF	; 255
    1274:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__unpack_f>
    1278:	ce 01       	movw	r24, r28
    127a:	05 96       	adiw	r24, 0x05	; 5
    127c:	be 01       	movw	r22, r28
    127e:	6f 5e       	subi	r22, 0xEF	; 239
    1280:	7f 4f       	sbci	r23, 0xFF	; 255
    1282:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__unpack_f>
    1286:	99 85       	ldd	r25, Y+9	; 0x09
    1288:	92 30       	cpi	r25, 0x02	; 2
    128a:	78 f0       	brcs	.+30     	; 0x12aa <__mulsf3+0x5c>
    128c:	89 89       	ldd	r24, Y+17	; 0x11
    128e:	82 30       	cpi	r24, 0x02	; 2
    1290:	c0 f0       	brcs	.+48     	; 0x12c2 <__mulsf3+0x74>
    1292:	94 30       	cpi	r25, 0x04	; 4
    1294:	19 f4       	brne	.+6      	; 0x129c <__mulsf3+0x4e>
    1296:	82 30       	cpi	r24, 0x02	; 2
    1298:	41 f4       	brne	.+16     	; 0x12aa <__mulsf3+0x5c>
    129a:	cb c0       	rjmp	.+406    	; 0x1432 <__mulsf3+0x1e4>
    129c:	84 30       	cpi	r24, 0x04	; 4
    129e:	19 f4       	brne	.+6      	; 0x12a6 <__mulsf3+0x58>
    12a0:	92 30       	cpi	r25, 0x02	; 2
    12a2:	79 f4       	brne	.+30     	; 0x12c2 <__mulsf3+0x74>
    12a4:	c6 c0       	rjmp	.+396    	; 0x1432 <__mulsf3+0x1e4>
    12a6:	92 30       	cpi	r25, 0x02	; 2
    12a8:	51 f4       	brne	.+20     	; 0x12be <__mulsf3+0x70>
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	2a 85       	ldd	r18, Y+10	; 0x0a
    12ae:	9a 89       	ldd	r25, Y+18	; 0x12
    12b0:	29 17       	cp	r18, r25
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <__mulsf3+0x68>
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	8a 87       	std	Y+10, r24	; 0x0a
    12b8:	ce 01       	movw	r24, r28
    12ba:	09 96       	adiw	r24, 0x09	; 9
    12bc:	bc c0       	rjmp	.+376    	; 0x1436 <__mulsf3+0x1e8>
    12be:	82 30       	cpi	r24, 0x02	; 2
    12c0:	51 f4       	brne	.+20     	; 0x12d6 <__mulsf3+0x88>
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	2a 85       	ldd	r18, Y+10	; 0x0a
    12c6:	9a 89       	ldd	r25, Y+18	; 0x12
    12c8:	29 17       	cp	r18, r25
    12ca:	09 f4       	brne	.+2      	; 0x12ce <__mulsf3+0x80>
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	8a 8b       	std	Y+18, r24	; 0x12
    12d0:	ce 01       	movw	r24, r28
    12d2:	41 96       	adiw	r24, 0x11	; 17
    12d4:	b0 c0       	rjmp	.+352    	; 0x1436 <__mulsf3+0x1e8>
    12d6:	6d 84       	ldd	r6, Y+13	; 0x0d
    12d8:	7e 84       	ldd	r7, Y+14	; 0x0e
    12da:	8f 84       	ldd	r8, Y+15	; 0x0f
    12dc:	98 88       	ldd	r9, Y+16	; 0x10
    12de:	ed 88       	ldd	r14, Y+21	; 0x15
    12e0:	fe 88       	ldd	r15, Y+22	; 0x16
    12e2:	0f 89       	ldd	r16, Y+23	; 0x17
    12e4:	18 8d       	ldd	r17, Y+24	; 0x18
    12e6:	e0 e2       	ldi	r30, 0x20	; 32
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	dc 01       	movw	r26, r24
    12f0:	aa 24       	eor	r10, r10
    12f2:	bb 24       	eor	r11, r11
    12f4:	65 01       	movw	r12, r10
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	a9 01       	movw	r20, r18
    12fc:	b3 01       	movw	r22, r6
    12fe:	61 70       	andi	r22, 0x01	; 1
    1300:	70 70       	andi	r23, 0x00	; 0
    1302:	61 15       	cp	r22, r1
    1304:	71 05       	cpc	r23, r1
    1306:	d1 f0       	breq	.+52     	; 0x133c <__mulsf3+0xee>
    1308:	2e 0d       	add	r18, r14
    130a:	3f 1d       	adc	r19, r15
    130c:	40 1f       	adc	r20, r16
    130e:	51 1f       	adc	r21, r17
    1310:	15 01       	movw	r2, r10
    1312:	26 01       	movw	r4, r12
    1314:	28 0e       	add	r2, r24
    1316:	39 1e       	adc	r3, r25
    1318:	4a 1e       	adc	r4, r26
    131a:	5b 1e       	adc	r5, r27
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	a0 e0       	ldi	r26, 0x00	; 0
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	2e 15       	cp	r18, r14
    1326:	3f 05       	cpc	r19, r15
    1328:	40 07       	cpc	r20, r16
    132a:	51 07       	cpc	r21, r17
    132c:	18 f0       	brcs	.+6      	; 0x1334 <__mulsf3+0xe6>
    132e:	80 e0       	ldi	r24, 0x00	; 0
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	dc 01       	movw	r26, r24
    1334:	82 0d       	add	r24, r2
    1336:	93 1d       	adc	r25, r3
    1338:	a4 1d       	adc	r26, r4
    133a:	b5 1d       	adc	r27, r5
    133c:	aa 0c       	add	r10, r10
    133e:	bb 1c       	adc	r11, r11
    1340:	cc 1c       	adc	r12, r12
    1342:	dd 1c       	adc	r13, r13
    1344:	17 ff       	sbrs	r17, 7
    1346:	09 c0       	rjmp	.+18     	; 0x135a <__mulsf3+0x10c>
    1348:	61 e0       	ldi	r22, 0x01	; 1
    134a:	26 2e       	mov	r2, r22
    134c:	31 2c       	mov	r3, r1
    134e:	41 2c       	mov	r4, r1
    1350:	51 2c       	mov	r5, r1
    1352:	a2 28       	or	r10, r2
    1354:	b3 28       	or	r11, r3
    1356:	c4 28       	or	r12, r4
    1358:	d5 28       	or	r13, r5
    135a:	31 97       	sbiw	r30, 0x01	; 1
    135c:	49 f0       	breq	.+18     	; 0x1370 <__mulsf3+0x122>
    135e:	ee 0c       	add	r14, r14
    1360:	ff 1c       	adc	r15, r15
    1362:	00 1f       	adc	r16, r16
    1364:	11 1f       	adc	r17, r17
    1366:	96 94       	lsr	r9
    1368:	87 94       	ror	r8
    136a:	77 94       	ror	r7
    136c:	67 94       	ror	r6
    136e:	c6 cf       	rjmp	.-116    	; 0x12fc <__mulsf3+0xae>
    1370:	6b 89       	ldd	r22, Y+19	; 0x13
    1372:	7c 89       	ldd	r23, Y+20	; 0x14
    1374:	eb 85       	ldd	r30, Y+11	; 0x0b
    1376:	fc 85       	ldd	r31, Y+12	; 0x0c
    1378:	6e 0f       	add	r22, r30
    137a:	7f 1f       	adc	r23, r31
    137c:	6e 5f       	subi	r22, 0xFE	; 254
    137e:	7f 4f       	sbci	r23, 0xFF	; 255
    1380:	7c 8f       	std	Y+28, r23	; 0x1c
    1382:	6b 8f       	std	Y+27, r22	; 0x1b
    1384:	61 e0       	ldi	r22, 0x01	; 1
    1386:	ea 85       	ldd	r30, Y+10	; 0x0a
    1388:	7a 89       	ldd	r23, Y+18	; 0x12
    138a:	e7 17       	cp	r30, r23
    138c:	09 f4       	brne	.+2      	; 0x1390 <__mulsf3+0x142>
    138e:	60 e0       	ldi	r22, 0x00	; 0
    1390:	6a 8f       	std	Y+26, r22	; 0x1a
    1392:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1394:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1396:	10 c0       	rjmp	.+32     	; 0x13b8 <__mulsf3+0x16a>
    1398:	fc 01       	movw	r30, r24
    139a:	e1 70       	andi	r30, 0x01	; 1
    139c:	f0 70       	andi	r31, 0x00	; 0
    139e:	30 97       	sbiw	r30, 0x00	; 0
    13a0:	29 f0       	breq	.+10     	; 0x13ac <__mulsf3+0x15e>
    13a2:	56 95       	lsr	r21
    13a4:	47 95       	ror	r20
    13a6:	37 95       	ror	r19
    13a8:	27 95       	ror	r18
    13aa:	50 68       	ori	r21, 0x80	; 128
    13ac:	b6 95       	lsr	r27
    13ae:	a7 95       	ror	r26
    13b0:	97 95       	ror	r25
    13b2:	87 95       	ror	r24
    13b4:	6f 5f       	subi	r22, 0xFF	; 255
    13b6:	7f 4f       	sbci	r23, 0xFF	; 255
    13b8:	b7 fd       	sbrc	r27, 7
    13ba:	ee cf       	rjmp	.-36     	; 0x1398 <__mulsf3+0x14a>
    13bc:	0c c0       	rjmp	.+24     	; 0x13d6 <__mulsf3+0x188>
    13be:	88 0f       	add	r24, r24
    13c0:	99 1f       	adc	r25, r25
    13c2:	aa 1f       	adc	r26, r26
    13c4:	bb 1f       	adc	r27, r27
    13c6:	57 fd       	sbrc	r21, 7
    13c8:	81 60       	ori	r24, 0x01	; 1
    13ca:	22 0f       	add	r18, r18
    13cc:	33 1f       	adc	r19, r19
    13ce:	44 1f       	adc	r20, r20
    13d0:	55 1f       	adc	r21, r21
    13d2:	61 50       	subi	r22, 0x01	; 1
    13d4:	70 40       	sbci	r23, 0x00	; 0
    13d6:	80 30       	cpi	r24, 0x00	; 0
    13d8:	e0 e0       	ldi	r30, 0x00	; 0
    13da:	9e 07       	cpc	r25, r30
    13dc:	e0 e0       	ldi	r30, 0x00	; 0
    13de:	ae 07       	cpc	r26, r30
    13e0:	e0 e4       	ldi	r30, 0x40	; 64
    13e2:	be 07       	cpc	r27, r30
    13e4:	60 f3       	brcs	.-40     	; 0x13be <__mulsf3+0x170>
    13e6:	6b 8f       	std	Y+27, r22	; 0x1b
    13e8:	7c 8f       	std	Y+28, r23	; 0x1c
    13ea:	6f e7       	ldi	r22, 0x7F	; 127
    13ec:	e6 2e       	mov	r14, r22
    13ee:	f1 2c       	mov	r15, r1
    13f0:	01 2d       	mov	r16, r1
    13f2:	11 2d       	mov	r17, r1
    13f4:	e8 22       	and	r14, r24
    13f6:	f9 22       	and	r15, r25
    13f8:	0a 23       	and	r16, r26
    13fa:	1b 23       	and	r17, r27
    13fc:	60 e4       	ldi	r22, 0x40	; 64
    13fe:	e6 16       	cp	r14, r22
    1400:	f1 04       	cpc	r15, r1
    1402:	01 05       	cpc	r16, r1
    1404:	11 05       	cpc	r17, r1
    1406:	61 f4       	brne	.+24     	; 0x1420 <__mulsf3+0x1d2>
    1408:	87 fd       	sbrc	r24, 7
    140a:	0a c0       	rjmp	.+20     	; 0x1420 <__mulsf3+0x1d2>
    140c:	21 15       	cp	r18, r1
    140e:	31 05       	cpc	r19, r1
    1410:	41 05       	cpc	r20, r1
    1412:	51 05       	cpc	r21, r1
    1414:	29 f0       	breq	.+10     	; 0x1420 <__mulsf3+0x1d2>
    1416:	80 5c       	subi	r24, 0xC0	; 192
    1418:	9f 4f       	sbci	r25, 0xFF	; 255
    141a:	af 4f       	sbci	r26, 0xFF	; 255
    141c:	bf 4f       	sbci	r27, 0xFF	; 255
    141e:	80 78       	andi	r24, 0x80	; 128
    1420:	8d 8f       	std	Y+29, r24	; 0x1d
    1422:	9e 8f       	std	Y+30, r25	; 0x1e
    1424:	af 8f       	std	Y+31, r26	; 0x1f
    1426:	b8 a3       	std	Y+32, r27	; 0x20
    1428:	83 e0       	ldi	r24, 0x03	; 3
    142a:	89 8f       	std	Y+25, r24	; 0x19
    142c:	ce 01       	movw	r24, r28
    142e:	49 96       	adiw	r24, 0x19	; 25
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <__mulsf3+0x1e8>
    1432:	88 e0       	ldi	r24, 0x08	; 8
    1434:	91 e0       	ldi	r25, 0x01	; 1
    1436:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <__pack_f>
    143a:	a0 96       	adiw	r28, 0x20	; 32
    143c:	e2 e1       	ldi	r30, 0x12	; 18
    143e:	0c 94 3e 0e 	jmp	0x1c7c	; 0x1c7c <__epilogue_restores__>

00001442 <__divsf3>:
    1442:	a8 e1       	ldi	r26, 0x18	; 24
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	e7 e2       	ldi	r30, 0x27	; 39
    1448:	fa e0       	ldi	r31, 0x0A	; 10
    144a:	0c 94 2a 0e 	jmp	0x1c54	; 0x1c54 <__prologue_saves__+0x10>
    144e:	69 83       	std	Y+1, r22	; 0x01
    1450:	7a 83       	std	Y+2, r23	; 0x02
    1452:	8b 83       	std	Y+3, r24	; 0x03
    1454:	9c 83       	std	Y+4, r25	; 0x04
    1456:	2d 83       	std	Y+5, r18	; 0x05
    1458:	3e 83       	std	Y+6, r19	; 0x06
    145a:	4f 83       	std	Y+7, r20	; 0x07
    145c:	58 87       	std	Y+8, r21	; 0x08
    145e:	8e 01       	movw	r16, r28
    1460:	07 5f       	subi	r16, 0xF7	; 247
    1462:	1f 4f       	sbci	r17, 0xFF	; 255
    1464:	ce 01       	movw	r24, r28
    1466:	01 96       	adiw	r24, 0x01	; 1
    1468:	b8 01       	movw	r22, r16
    146a:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__unpack_f>
    146e:	81 e1       	ldi	r24, 0x11	; 17
    1470:	e8 2e       	mov	r14, r24
    1472:	f1 2c       	mov	r15, r1
    1474:	ec 0e       	add	r14, r28
    1476:	fd 1e       	adc	r15, r29
    1478:	ce 01       	movw	r24, r28
    147a:	05 96       	adiw	r24, 0x05	; 5
    147c:	b7 01       	movw	r22, r14
    147e:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__unpack_f>
    1482:	99 85       	ldd	r25, Y+9	; 0x09
    1484:	92 30       	cpi	r25, 0x02	; 2
    1486:	08 f4       	brcc	.+2      	; 0x148a <__divsf3+0x48>
    1488:	83 c0       	rjmp	.+262    	; 0x1590 <__divsf3+0x14e>
    148a:	89 89       	ldd	r24, Y+17	; 0x11
    148c:	82 30       	cpi	r24, 0x02	; 2
    148e:	08 f4       	brcc	.+2      	; 0x1492 <__divsf3+0x50>
    1490:	7b c0       	rjmp	.+246    	; 0x1588 <__divsf3+0x146>
    1492:	2a 85       	ldd	r18, Y+10	; 0x0a
    1494:	3a 89       	ldd	r19, Y+18	; 0x12
    1496:	23 27       	eor	r18, r19
    1498:	2a 87       	std	Y+10, r18	; 0x0a
    149a:	94 30       	cpi	r25, 0x04	; 4
    149c:	11 f0       	breq	.+4      	; 0x14a2 <__divsf3+0x60>
    149e:	92 30       	cpi	r25, 0x02	; 2
    14a0:	21 f4       	brne	.+8      	; 0x14aa <__divsf3+0x68>
    14a2:	98 17       	cp	r25, r24
    14a4:	09 f0       	breq	.+2      	; 0x14a8 <__divsf3+0x66>
    14a6:	6c c0       	rjmp	.+216    	; 0x1580 <__divsf3+0x13e>
    14a8:	71 c0       	rjmp	.+226    	; 0x158c <__divsf3+0x14a>
    14aa:	84 30       	cpi	r24, 0x04	; 4
    14ac:	39 f4       	brne	.+14     	; 0x14bc <__divsf3+0x7a>
    14ae:	1d 86       	std	Y+13, r1	; 0x0d
    14b0:	1e 86       	std	Y+14, r1	; 0x0e
    14b2:	1f 86       	std	Y+15, r1	; 0x0f
    14b4:	18 8a       	std	Y+16, r1	; 0x10
    14b6:	1c 86       	std	Y+12, r1	; 0x0c
    14b8:	1b 86       	std	Y+11, r1	; 0x0b
    14ba:	6a c0       	rjmp	.+212    	; 0x1590 <__divsf3+0x14e>
    14bc:	82 30       	cpi	r24, 0x02	; 2
    14be:	19 f4       	brne	.+6      	; 0x14c6 <__divsf3+0x84>
    14c0:	84 e0       	ldi	r24, 0x04	; 4
    14c2:	89 87       	std	Y+9, r24	; 0x09
    14c4:	65 c0       	rjmp	.+202    	; 0x1590 <__divsf3+0x14e>
    14c6:	8b 85       	ldd	r24, Y+11	; 0x0b
    14c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    14ca:	2b 89       	ldd	r18, Y+19	; 0x13
    14cc:	3c 89       	ldd	r19, Y+20	; 0x14
    14ce:	82 1b       	sub	r24, r18
    14d0:	93 0b       	sbc	r25, r19
    14d2:	9c 87       	std	Y+12, r25	; 0x0c
    14d4:	8b 87       	std	Y+11, r24	; 0x0b
    14d6:	2d 85       	ldd	r18, Y+13	; 0x0d
    14d8:	3e 85       	ldd	r19, Y+14	; 0x0e
    14da:	4f 85       	ldd	r20, Y+15	; 0x0f
    14dc:	58 89       	ldd	r21, Y+16	; 0x10
    14de:	ed 88       	ldd	r14, Y+21	; 0x15
    14e0:	fe 88       	ldd	r15, Y+22	; 0x16
    14e2:	0f 89       	ldd	r16, Y+23	; 0x17
    14e4:	18 8d       	ldd	r17, Y+24	; 0x18
    14e6:	2e 15       	cp	r18, r14
    14e8:	3f 05       	cpc	r19, r15
    14ea:	40 07       	cpc	r20, r16
    14ec:	51 07       	cpc	r21, r17
    14ee:	38 f4       	brcc	.+14     	; 0x14fe <__divsf3+0xbc>
    14f0:	22 0f       	add	r18, r18
    14f2:	33 1f       	adc	r19, r19
    14f4:	44 1f       	adc	r20, r20
    14f6:	55 1f       	adc	r21, r21
    14f8:	01 97       	sbiw	r24, 0x01	; 1
    14fa:	9c 87       	std	Y+12, r25	; 0x0c
    14fc:	8b 87       	std	Y+11, r24	; 0x0b
    14fe:	6f e1       	ldi	r22, 0x1F	; 31
    1500:	70 e0       	ldi	r23, 0x00	; 0
    1502:	a1 2c       	mov	r10, r1
    1504:	b1 2c       	mov	r11, r1
    1506:	c1 2c       	mov	r12, r1
    1508:	a0 e4       	ldi	r26, 0x40	; 64
    150a:	da 2e       	mov	r13, r26
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	dc 01       	movw	r26, r24
    1512:	2e 15       	cp	r18, r14
    1514:	3f 05       	cpc	r19, r15
    1516:	40 07       	cpc	r20, r16
    1518:	51 07       	cpc	r21, r17
    151a:	40 f0       	brcs	.+16     	; 0x152c <__divsf3+0xea>
    151c:	8a 29       	or	r24, r10
    151e:	9b 29       	or	r25, r11
    1520:	ac 29       	or	r26, r12
    1522:	bd 29       	or	r27, r13
    1524:	2e 19       	sub	r18, r14
    1526:	3f 09       	sbc	r19, r15
    1528:	40 0b       	sbc	r20, r16
    152a:	51 0b       	sbc	r21, r17
    152c:	d6 94       	lsr	r13
    152e:	c7 94       	ror	r12
    1530:	b7 94       	ror	r11
    1532:	a7 94       	ror	r10
    1534:	22 0f       	add	r18, r18
    1536:	33 1f       	adc	r19, r19
    1538:	44 1f       	adc	r20, r20
    153a:	55 1f       	adc	r21, r21
    153c:	61 50       	subi	r22, 0x01	; 1
    153e:	70 40       	sbci	r23, 0x00	; 0
    1540:	41 f7       	brne	.-48     	; 0x1512 <__divsf3+0xd0>
    1542:	6f e7       	ldi	r22, 0x7F	; 127
    1544:	e6 2e       	mov	r14, r22
    1546:	f1 2c       	mov	r15, r1
    1548:	01 2d       	mov	r16, r1
    154a:	11 2d       	mov	r17, r1
    154c:	e8 22       	and	r14, r24
    154e:	f9 22       	and	r15, r25
    1550:	0a 23       	and	r16, r26
    1552:	1b 23       	and	r17, r27
    1554:	60 e4       	ldi	r22, 0x40	; 64
    1556:	e6 16       	cp	r14, r22
    1558:	f1 04       	cpc	r15, r1
    155a:	01 05       	cpc	r16, r1
    155c:	11 05       	cpc	r17, r1
    155e:	61 f4       	brne	.+24     	; 0x1578 <__divsf3+0x136>
    1560:	87 fd       	sbrc	r24, 7
    1562:	0a c0       	rjmp	.+20     	; 0x1578 <__divsf3+0x136>
    1564:	21 15       	cp	r18, r1
    1566:	31 05       	cpc	r19, r1
    1568:	41 05       	cpc	r20, r1
    156a:	51 05       	cpc	r21, r1
    156c:	29 f0       	breq	.+10     	; 0x1578 <__divsf3+0x136>
    156e:	80 5c       	subi	r24, 0xC0	; 192
    1570:	9f 4f       	sbci	r25, 0xFF	; 255
    1572:	af 4f       	sbci	r26, 0xFF	; 255
    1574:	bf 4f       	sbci	r27, 0xFF	; 255
    1576:	80 78       	andi	r24, 0x80	; 128
    1578:	8d 87       	std	Y+13, r24	; 0x0d
    157a:	9e 87       	std	Y+14, r25	; 0x0e
    157c:	af 87       	std	Y+15, r26	; 0x0f
    157e:	b8 8b       	std	Y+16, r27	; 0x10
    1580:	8e 01       	movw	r16, r28
    1582:	07 5f       	subi	r16, 0xF7	; 247
    1584:	1f 4f       	sbci	r17, 0xFF	; 255
    1586:	04 c0       	rjmp	.+8      	; 0x1590 <__divsf3+0x14e>
    1588:	87 01       	movw	r16, r14
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <__divsf3+0x14e>
    158c:	08 e0       	ldi	r16, 0x08	; 8
    158e:	11 e0       	ldi	r17, 0x01	; 1
    1590:	c8 01       	movw	r24, r16
    1592:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <__pack_f>
    1596:	68 96       	adiw	r28, 0x18	; 24
    1598:	ea e0       	ldi	r30, 0x0A	; 10
    159a:	0c 94 46 0e 	jmp	0x1c8c	; 0x1c8c <__epilogue_restores__+0x10>

0000159e <__gtsf2>:
    159e:	a8 e1       	ldi	r26, 0x18	; 24
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e5 ed       	ldi	r30, 0xD5	; 213
    15a4:	fa e0       	ldi	r31, 0x0A	; 10
    15a6:	0c 94 2e 0e 	jmp	0x1c5c	; 0x1c5c <__prologue_saves__+0x18>
    15aa:	69 83       	std	Y+1, r22	; 0x01
    15ac:	7a 83       	std	Y+2, r23	; 0x02
    15ae:	8b 83       	std	Y+3, r24	; 0x03
    15b0:	9c 83       	std	Y+4, r25	; 0x04
    15b2:	2d 83       	std	Y+5, r18	; 0x05
    15b4:	3e 83       	std	Y+6, r19	; 0x06
    15b6:	4f 83       	std	Y+7, r20	; 0x07
    15b8:	58 87       	std	Y+8, r21	; 0x08
    15ba:	8e 01       	movw	r16, r28
    15bc:	07 5f       	subi	r16, 0xF7	; 247
    15be:	1f 4f       	sbci	r17, 0xFF	; 255
    15c0:	ce 01       	movw	r24, r28
    15c2:	01 96       	adiw	r24, 0x01	; 1
    15c4:	b8 01       	movw	r22, r16
    15c6:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__unpack_f>
    15ca:	81 e1       	ldi	r24, 0x11	; 17
    15cc:	e8 2e       	mov	r14, r24
    15ce:	f1 2c       	mov	r15, r1
    15d0:	ec 0e       	add	r14, r28
    15d2:	fd 1e       	adc	r15, r29
    15d4:	ce 01       	movw	r24, r28
    15d6:	05 96       	adiw	r24, 0x05	; 5
    15d8:	b7 01       	movw	r22, r14
    15da:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__unpack_f>
    15de:	89 85       	ldd	r24, Y+9	; 0x09
    15e0:	82 30       	cpi	r24, 0x02	; 2
    15e2:	40 f0       	brcs	.+16     	; 0x15f4 <__gtsf2+0x56>
    15e4:	89 89       	ldd	r24, Y+17	; 0x11
    15e6:	82 30       	cpi	r24, 0x02	; 2
    15e8:	28 f0       	brcs	.+10     	; 0x15f4 <__gtsf2+0x56>
    15ea:	c8 01       	movw	r24, r16
    15ec:	b7 01       	movw	r22, r14
    15ee:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <__fpcmp_parts_f>
    15f2:	01 c0       	rjmp	.+2      	; 0x15f6 <__gtsf2+0x58>
    15f4:	8f ef       	ldi	r24, 0xFF	; 255
    15f6:	68 96       	adiw	r28, 0x18	; 24
    15f8:	e6 e0       	ldi	r30, 0x06	; 6
    15fa:	0c 94 4a 0e 	jmp	0x1c94	; 0x1c94 <__epilogue_restores__+0x18>

000015fe <__gesf2>:
    15fe:	a8 e1       	ldi	r26, 0x18	; 24
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e5 e0       	ldi	r30, 0x05	; 5
    1604:	fb e0       	ldi	r31, 0x0B	; 11
    1606:	0c 94 2e 0e 	jmp	0x1c5c	; 0x1c5c <__prologue_saves__+0x18>
    160a:	69 83       	std	Y+1, r22	; 0x01
    160c:	7a 83       	std	Y+2, r23	; 0x02
    160e:	8b 83       	std	Y+3, r24	; 0x03
    1610:	9c 83       	std	Y+4, r25	; 0x04
    1612:	2d 83       	std	Y+5, r18	; 0x05
    1614:	3e 83       	std	Y+6, r19	; 0x06
    1616:	4f 83       	std	Y+7, r20	; 0x07
    1618:	58 87       	std	Y+8, r21	; 0x08
    161a:	8e 01       	movw	r16, r28
    161c:	07 5f       	subi	r16, 0xF7	; 247
    161e:	1f 4f       	sbci	r17, 0xFF	; 255
    1620:	ce 01       	movw	r24, r28
    1622:	01 96       	adiw	r24, 0x01	; 1
    1624:	b8 01       	movw	r22, r16
    1626:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__unpack_f>
    162a:	81 e1       	ldi	r24, 0x11	; 17
    162c:	e8 2e       	mov	r14, r24
    162e:	f1 2c       	mov	r15, r1
    1630:	ec 0e       	add	r14, r28
    1632:	fd 1e       	adc	r15, r29
    1634:	ce 01       	movw	r24, r28
    1636:	05 96       	adiw	r24, 0x05	; 5
    1638:	b7 01       	movw	r22, r14
    163a:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__unpack_f>
    163e:	89 85       	ldd	r24, Y+9	; 0x09
    1640:	82 30       	cpi	r24, 0x02	; 2
    1642:	40 f0       	brcs	.+16     	; 0x1654 <__gesf2+0x56>
    1644:	89 89       	ldd	r24, Y+17	; 0x11
    1646:	82 30       	cpi	r24, 0x02	; 2
    1648:	28 f0       	brcs	.+10     	; 0x1654 <__gesf2+0x56>
    164a:	c8 01       	movw	r24, r16
    164c:	b7 01       	movw	r22, r14
    164e:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <__fpcmp_parts_f>
    1652:	01 c0       	rjmp	.+2      	; 0x1656 <__gesf2+0x58>
    1654:	8f ef       	ldi	r24, 0xFF	; 255
    1656:	68 96       	adiw	r28, 0x18	; 24
    1658:	e6 e0       	ldi	r30, 0x06	; 6
    165a:	0c 94 4a 0e 	jmp	0x1c94	; 0x1c94 <__epilogue_restores__+0x18>

0000165e <__ltsf2>:
    165e:	a8 e1       	ldi	r26, 0x18	; 24
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	e5 e3       	ldi	r30, 0x35	; 53
    1664:	fb e0       	ldi	r31, 0x0B	; 11
    1666:	0c 94 2e 0e 	jmp	0x1c5c	; 0x1c5c <__prologue_saves__+0x18>
    166a:	69 83       	std	Y+1, r22	; 0x01
    166c:	7a 83       	std	Y+2, r23	; 0x02
    166e:	8b 83       	std	Y+3, r24	; 0x03
    1670:	9c 83       	std	Y+4, r25	; 0x04
    1672:	2d 83       	std	Y+5, r18	; 0x05
    1674:	3e 83       	std	Y+6, r19	; 0x06
    1676:	4f 83       	std	Y+7, r20	; 0x07
    1678:	58 87       	std	Y+8, r21	; 0x08
    167a:	8e 01       	movw	r16, r28
    167c:	07 5f       	subi	r16, 0xF7	; 247
    167e:	1f 4f       	sbci	r17, 0xFF	; 255
    1680:	ce 01       	movw	r24, r28
    1682:	01 96       	adiw	r24, 0x01	; 1
    1684:	b8 01       	movw	r22, r16
    1686:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__unpack_f>
    168a:	81 e1       	ldi	r24, 0x11	; 17
    168c:	e8 2e       	mov	r14, r24
    168e:	f1 2c       	mov	r15, r1
    1690:	ec 0e       	add	r14, r28
    1692:	fd 1e       	adc	r15, r29
    1694:	ce 01       	movw	r24, r28
    1696:	05 96       	adiw	r24, 0x05	; 5
    1698:	b7 01       	movw	r22, r14
    169a:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__unpack_f>
    169e:	89 85       	ldd	r24, Y+9	; 0x09
    16a0:	82 30       	cpi	r24, 0x02	; 2
    16a2:	40 f0       	brcs	.+16     	; 0x16b4 <__ltsf2+0x56>
    16a4:	89 89       	ldd	r24, Y+17	; 0x11
    16a6:	82 30       	cpi	r24, 0x02	; 2
    16a8:	28 f0       	brcs	.+10     	; 0x16b4 <__ltsf2+0x56>
    16aa:	c8 01       	movw	r24, r16
    16ac:	b7 01       	movw	r22, r14
    16ae:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <__fpcmp_parts_f>
    16b2:	01 c0       	rjmp	.+2      	; 0x16b6 <__ltsf2+0x58>
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	68 96       	adiw	r28, 0x18	; 24
    16b8:	e6 e0       	ldi	r30, 0x06	; 6
    16ba:	0c 94 4a 0e 	jmp	0x1c94	; 0x1c94 <__epilogue_restores__+0x18>

000016be <__floatsisf>:
    16be:	a8 e0       	ldi	r26, 0x08	; 8
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	e5 e6       	ldi	r30, 0x65	; 101
    16c4:	fb e0       	ldi	r31, 0x0B	; 11
    16c6:	0c 94 2e 0e 	jmp	0x1c5c	; 0x1c5c <__prologue_saves__+0x18>
    16ca:	7b 01       	movw	r14, r22
    16cc:	8c 01       	movw	r16, r24
    16ce:	83 e0       	ldi	r24, 0x03	; 3
    16d0:	89 83       	std	Y+1, r24	; 0x01
    16d2:	d8 01       	movw	r26, r16
    16d4:	c7 01       	movw	r24, r14
    16d6:	88 27       	eor	r24, r24
    16d8:	b7 fd       	sbrc	r27, 7
    16da:	83 95       	inc	r24
    16dc:	99 27       	eor	r25, r25
    16de:	aa 27       	eor	r26, r26
    16e0:	bb 27       	eor	r27, r27
    16e2:	28 2f       	mov	r18, r24
    16e4:	8a 83       	std	Y+2, r24	; 0x02
    16e6:	e1 14       	cp	r14, r1
    16e8:	f1 04       	cpc	r15, r1
    16ea:	01 05       	cpc	r16, r1
    16ec:	11 05       	cpc	r17, r1
    16ee:	19 f4       	brne	.+6      	; 0x16f6 <__floatsisf+0x38>
    16f0:	82 e0       	ldi	r24, 0x02	; 2
    16f2:	89 83       	std	Y+1, r24	; 0x01
    16f4:	37 c0       	rjmp	.+110    	; 0x1764 <__floatsisf+0xa6>
    16f6:	8e e1       	ldi	r24, 0x1E	; 30
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	9c 83       	std	Y+4, r25	; 0x04
    16fc:	8b 83       	std	Y+3, r24	; 0x03
    16fe:	22 23       	and	r18, r18
    1700:	89 f0       	breq	.+34     	; 0x1724 <__floatsisf+0x66>
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	e8 16       	cp	r14, r24
    1706:	80 e0       	ldi	r24, 0x00	; 0
    1708:	f8 06       	cpc	r15, r24
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	08 07       	cpc	r16, r24
    170e:	80 e8       	ldi	r24, 0x80	; 128
    1710:	18 07       	cpc	r17, r24
    1712:	69 f1       	breq	.+90     	; 0x176e <__floatsisf+0xb0>
    1714:	10 95       	com	r17
    1716:	00 95       	com	r16
    1718:	f0 94       	com	r15
    171a:	e0 94       	com	r14
    171c:	e1 1c       	adc	r14, r1
    171e:	f1 1c       	adc	r15, r1
    1720:	01 1d       	adc	r16, r1
    1722:	11 1d       	adc	r17, r1
    1724:	ed 82       	std	Y+5, r14	; 0x05
    1726:	fe 82       	std	Y+6, r15	; 0x06
    1728:	0f 83       	std	Y+7, r16	; 0x07
    172a:	18 87       	std	Y+8, r17	; 0x08
    172c:	c8 01       	movw	r24, r16
    172e:	b7 01       	movw	r22, r14
    1730:	0e 94 11 0c 	call	0x1822	; 0x1822 <__clzsi2>
    1734:	9c 01       	movw	r18, r24
    1736:	21 50       	subi	r18, 0x01	; 1
    1738:	30 40       	sbci	r19, 0x00	; 0
    173a:	12 16       	cp	r1, r18
    173c:	13 06       	cpc	r1, r19
    173e:	94 f4       	brge	.+36     	; 0x1764 <__floatsisf+0xa6>
    1740:	02 2e       	mov	r0, r18
    1742:	04 c0       	rjmp	.+8      	; 0x174c <__floatsisf+0x8e>
    1744:	ee 0c       	add	r14, r14
    1746:	ff 1c       	adc	r15, r15
    1748:	00 1f       	adc	r16, r16
    174a:	11 1f       	adc	r17, r17
    174c:	0a 94       	dec	r0
    174e:	d2 f7       	brpl	.-12     	; 0x1744 <__floatsisf+0x86>
    1750:	ed 82       	std	Y+5, r14	; 0x05
    1752:	fe 82       	std	Y+6, r15	; 0x06
    1754:	0f 83       	std	Y+7, r16	; 0x07
    1756:	18 87       	std	Y+8, r17	; 0x08
    1758:	8e e1       	ldi	r24, 0x1E	; 30
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	82 1b       	sub	r24, r18
    175e:	93 0b       	sbc	r25, r19
    1760:	9c 83       	std	Y+4, r25	; 0x04
    1762:	8b 83       	std	Y+3, r24	; 0x03
    1764:	ce 01       	movw	r24, r28
    1766:	01 96       	adiw	r24, 0x01	; 1
    1768:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <__pack_f>
    176c:	04 c0       	rjmp	.+8      	; 0x1776 <__floatsisf+0xb8>
    176e:	60 e0       	ldi	r22, 0x00	; 0
    1770:	70 e0       	ldi	r23, 0x00	; 0
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	9f ec       	ldi	r25, 0xCF	; 207
    1776:	28 96       	adiw	r28, 0x08	; 8
    1778:	e6 e0       	ldi	r30, 0x06	; 6
    177a:	0c 94 4a 0e 	jmp	0x1c94	; 0x1c94 <__epilogue_restores__+0x18>

0000177e <__fixsfsi>:
    177e:	ac e0       	ldi	r26, 0x0C	; 12
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	e5 ec       	ldi	r30, 0xC5	; 197
    1784:	fb e0       	ldi	r31, 0x0B	; 11
    1786:	0c 94 32 0e 	jmp	0x1c64	; 0x1c64 <__prologue_saves__+0x20>
    178a:	69 83       	std	Y+1, r22	; 0x01
    178c:	7a 83       	std	Y+2, r23	; 0x02
    178e:	8b 83       	std	Y+3, r24	; 0x03
    1790:	9c 83       	std	Y+4, r25	; 0x04
    1792:	ce 01       	movw	r24, r28
    1794:	01 96       	adiw	r24, 0x01	; 1
    1796:	be 01       	movw	r22, r28
    1798:	6b 5f       	subi	r22, 0xFB	; 251
    179a:	7f 4f       	sbci	r23, 0xFF	; 255
    179c:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <__unpack_f>
    17a0:	8d 81       	ldd	r24, Y+5	; 0x05
    17a2:	82 30       	cpi	r24, 0x02	; 2
    17a4:	81 f1       	breq	.+96     	; 0x1806 <__fixsfsi+0x88>
    17a6:	82 30       	cpi	r24, 0x02	; 2
    17a8:	70 f1       	brcs	.+92     	; 0x1806 <__fixsfsi+0x88>
    17aa:	84 30       	cpi	r24, 0x04	; 4
    17ac:	21 f4       	brne	.+8      	; 0x17b6 <__fixsfsi+0x38>
    17ae:	8e 81       	ldd	r24, Y+6	; 0x06
    17b0:	88 23       	and	r24, r24
    17b2:	69 f1       	breq	.+90     	; 0x180e <__fixsfsi+0x90>
    17b4:	0a c0       	rjmp	.+20     	; 0x17ca <__fixsfsi+0x4c>
    17b6:	2f 81       	ldd	r18, Y+7	; 0x07
    17b8:	38 85       	ldd	r19, Y+8	; 0x08
    17ba:	37 fd       	sbrc	r19, 7
    17bc:	24 c0       	rjmp	.+72     	; 0x1806 <__fixsfsi+0x88>
    17be:	6e 81       	ldd	r22, Y+6	; 0x06
    17c0:	2f 31       	cpi	r18, 0x1F	; 31
    17c2:	31 05       	cpc	r19, r1
    17c4:	3c f0       	brlt	.+14     	; 0x17d4 <__fixsfsi+0x56>
    17c6:	66 23       	and	r22, r22
    17c8:	11 f1       	breq	.+68     	; 0x180e <__fixsfsi+0x90>
    17ca:	20 e0       	ldi	r18, 0x00	; 0
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	40 e0       	ldi	r20, 0x00	; 0
    17d0:	50 e8       	ldi	r21, 0x80	; 128
    17d2:	21 c0       	rjmp	.+66     	; 0x1816 <__fixsfsi+0x98>
    17d4:	8e e1       	ldi	r24, 0x1E	; 30
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	82 1b       	sub	r24, r18
    17da:	93 0b       	sbc	r25, r19
    17dc:	29 85       	ldd	r18, Y+9	; 0x09
    17de:	3a 85       	ldd	r19, Y+10	; 0x0a
    17e0:	4b 85       	ldd	r20, Y+11	; 0x0b
    17e2:	5c 85       	ldd	r21, Y+12	; 0x0c
    17e4:	04 c0       	rjmp	.+8      	; 0x17ee <__fixsfsi+0x70>
    17e6:	56 95       	lsr	r21
    17e8:	47 95       	ror	r20
    17ea:	37 95       	ror	r19
    17ec:	27 95       	ror	r18
    17ee:	8a 95       	dec	r24
    17f0:	d2 f7       	brpl	.-12     	; 0x17e6 <__fixsfsi+0x68>
    17f2:	66 23       	and	r22, r22
    17f4:	81 f0       	breq	.+32     	; 0x1816 <__fixsfsi+0x98>
    17f6:	50 95       	com	r21
    17f8:	40 95       	com	r20
    17fa:	30 95       	com	r19
    17fc:	21 95       	neg	r18
    17fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1800:	4f 4f       	sbci	r20, 0xFF	; 255
    1802:	5f 4f       	sbci	r21, 0xFF	; 255
    1804:	08 c0       	rjmp	.+16     	; 0x1816 <__fixsfsi+0x98>
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	a9 01       	movw	r20, r18
    180c:	04 c0       	rjmp	.+8      	; 0x1816 <__fixsfsi+0x98>
    180e:	2f ef       	ldi	r18, 0xFF	; 255
    1810:	3f ef       	ldi	r19, 0xFF	; 255
    1812:	4f ef       	ldi	r20, 0xFF	; 255
    1814:	5f e7       	ldi	r21, 0x7F	; 127
    1816:	b9 01       	movw	r22, r18
    1818:	ca 01       	movw	r24, r20
    181a:	2c 96       	adiw	r28, 0x0c	; 12
    181c:	e2 e0       	ldi	r30, 0x02	; 2
    181e:	0c 94 4e 0e 	jmp	0x1c9c	; 0x1c9c <__epilogue_restores__+0x20>

00001822 <__clzsi2>:
    1822:	af 92       	push	r10
    1824:	bf 92       	push	r11
    1826:	cf 92       	push	r12
    1828:	df 92       	push	r13
    182a:	ef 92       	push	r14
    182c:	ff 92       	push	r15
    182e:	0f 93       	push	r16
    1830:	1f 93       	push	r17
    1832:	7b 01       	movw	r14, r22
    1834:	8c 01       	movw	r16, r24
    1836:	80 e0       	ldi	r24, 0x00	; 0
    1838:	e8 16       	cp	r14, r24
    183a:	80 e0       	ldi	r24, 0x00	; 0
    183c:	f8 06       	cpc	r15, r24
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	08 07       	cpc	r16, r24
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	18 07       	cpc	r17, r24
    1846:	58 f4       	brcc	.+22     	; 0x185e <__clzsi2+0x3c>
    1848:	ef ef       	ldi	r30, 0xFF	; 255
    184a:	ee 16       	cp	r14, r30
    184c:	f1 04       	cpc	r15, r1
    184e:	01 05       	cpc	r16, r1
    1850:	11 05       	cpc	r17, r1
    1852:	09 f0       	breq	.+2      	; 0x1856 <__clzsi2+0x34>
    1854:	90 f4       	brcc	.+36     	; 0x187a <__clzsi2+0x58>
    1856:	80 e0       	ldi	r24, 0x00	; 0
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	dc 01       	movw	r26, r24
    185c:	17 c0       	rjmp	.+46     	; 0x188c <__clzsi2+0x6a>
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	ef 16       	cp	r14, r31
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	ff 06       	cpc	r15, r31
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	0f 07       	cpc	r16, r31
    186a:	f1 e0       	ldi	r31, 0x01	; 1
    186c:	1f 07       	cpc	r17, r31
    186e:	50 f4       	brcc	.+20     	; 0x1884 <__clzsi2+0x62>
    1870:	80 e1       	ldi	r24, 0x10	; 16
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	a0 e0       	ldi	r26, 0x00	; 0
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	09 c0       	rjmp	.+18     	; 0x188c <__clzsi2+0x6a>
    187a:	88 e0       	ldi	r24, 0x08	; 8
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	a0 e0       	ldi	r26, 0x00	; 0
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	04 c0       	rjmp	.+8      	; 0x188c <__clzsi2+0x6a>
    1884:	88 e1       	ldi	r24, 0x18	; 24
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	a0 e0       	ldi	r26, 0x00	; 0
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	20 e2       	ldi	r18, 0x20	; 32
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	40 e0       	ldi	r20, 0x00	; 0
    1892:	50 e0       	ldi	r21, 0x00	; 0
    1894:	28 1b       	sub	r18, r24
    1896:	39 0b       	sbc	r19, r25
    1898:	4a 0b       	sbc	r20, r26
    189a:	5b 0b       	sbc	r21, r27
    189c:	57 01       	movw	r10, r14
    189e:	68 01       	movw	r12, r16
    18a0:	04 c0       	rjmp	.+8      	; 0x18aa <__clzsi2+0x88>
    18a2:	d6 94       	lsr	r13
    18a4:	c7 94       	ror	r12
    18a6:	b7 94       	ror	r11
    18a8:	a7 94       	ror	r10
    18aa:	8a 95       	dec	r24
    18ac:	d2 f7       	brpl	.-12     	; 0x18a2 <__clzsi2+0x80>
    18ae:	d6 01       	movw	r26, r12
    18b0:	c5 01       	movw	r24, r10
    18b2:	80 5f       	subi	r24, 0xF0	; 240
    18b4:	9e 4f       	sbci	r25, 0xFE	; 254
    18b6:	fc 01       	movw	r30, r24
    18b8:	80 81       	ld	r24, Z
    18ba:	28 1b       	sub	r18, r24
    18bc:	31 09       	sbc	r19, r1
    18be:	41 09       	sbc	r20, r1
    18c0:	51 09       	sbc	r21, r1
    18c2:	c9 01       	movw	r24, r18
    18c4:	1f 91       	pop	r17
    18c6:	0f 91       	pop	r16
    18c8:	ff 90       	pop	r15
    18ca:	ef 90       	pop	r14
    18cc:	df 90       	pop	r13
    18ce:	cf 90       	pop	r12
    18d0:	bf 90       	pop	r11
    18d2:	af 90       	pop	r10
    18d4:	08 95       	ret

000018d6 <__pack_f>:
    18d6:	ef 92       	push	r14
    18d8:	ff 92       	push	r15
    18da:	0f 93       	push	r16
    18dc:	1f 93       	push	r17
    18de:	cf 93       	push	r28
    18e0:	df 93       	push	r29
    18e2:	fc 01       	movw	r30, r24
    18e4:	24 81       	ldd	r18, Z+4	; 0x04
    18e6:	35 81       	ldd	r19, Z+5	; 0x05
    18e8:	46 81       	ldd	r20, Z+6	; 0x06
    18ea:	57 81       	ldd	r21, Z+7	; 0x07
    18ec:	61 81       	ldd	r22, Z+1	; 0x01
    18ee:	80 81       	ld	r24, Z
    18f0:	82 30       	cpi	r24, 0x02	; 2
    18f2:	20 f4       	brcc	.+8      	; 0x18fc <__pack_f+0x26>
    18f4:	40 61       	ori	r20, 0x10	; 16
    18f6:	ef ef       	ldi	r30, 0xFF	; 255
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	a3 c0       	rjmp	.+326    	; 0x1a42 <__pack_f+0x16c>
    18fc:	84 30       	cpi	r24, 0x04	; 4
    18fe:	09 f4       	brne	.+2      	; 0x1902 <__pack_f+0x2c>
    1900:	9b c0       	rjmp	.+310    	; 0x1a38 <__pack_f+0x162>
    1902:	82 30       	cpi	r24, 0x02	; 2
    1904:	09 f4       	brne	.+2      	; 0x1908 <__pack_f+0x32>
    1906:	92 c0       	rjmp	.+292    	; 0x1a2c <__pack_f+0x156>
    1908:	21 15       	cp	r18, r1
    190a:	31 05       	cpc	r19, r1
    190c:	41 05       	cpc	r20, r1
    190e:	51 05       	cpc	r21, r1
    1910:	09 f4       	brne	.+2      	; 0x1914 <__pack_f+0x3e>
    1912:	8f c0       	rjmp	.+286    	; 0x1a32 <__pack_f+0x15c>
    1914:	02 80       	ldd	r0, Z+2	; 0x02
    1916:	f3 81       	ldd	r31, Z+3	; 0x03
    1918:	e0 2d       	mov	r30, r0
    191a:	8f ef       	ldi	r24, 0xFF	; 255
    191c:	e2 38       	cpi	r30, 0x82	; 130
    191e:	f8 07       	cpc	r31, r24
    1920:	0c f0       	brlt	.+2      	; 0x1924 <__pack_f+0x4e>
    1922:	5a c0       	rjmp	.+180    	; 0x19d8 <__pack_f+0x102>
    1924:	c2 e8       	ldi	r28, 0x82	; 130
    1926:	df ef       	ldi	r29, 0xFF	; 255
    1928:	ce 1b       	sub	r28, r30
    192a:	df 0b       	sbc	r29, r31
    192c:	ca 31       	cpi	r28, 0x1A	; 26
    192e:	d1 05       	cpc	r29, r1
    1930:	6c f5       	brge	.+90     	; 0x198c <__pack_f+0xb6>
    1932:	79 01       	movw	r14, r18
    1934:	8a 01       	movw	r16, r20
    1936:	0c 2e       	mov	r0, r28
    1938:	04 c0       	rjmp	.+8      	; 0x1942 <__pack_f+0x6c>
    193a:	16 95       	lsr	r17
    193c:	07 95       	ror	r16
    193e:	f7 94       	ror	r15
    1940:	e7 94       	ror	r14
    1942:	0a 94       	dec	r0
    1944:	d2 f7       	brpl	.-12     	; 0x193a <__pack_f+0x64>
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	a0 e0       	ldi	r26, 0x00	; 0
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	0c 2e       	mov	r0, r28
    1950:	04 c0       	rjmp	.+8      	; 0x195a <__pack_f+0x84>
    1952:	88 0f       	add	r24, r24
    1954:	99 1f       	adc	r25, r25
    1956:	aa 1f       	adc	r26, r26
    1958:	bb 1f       	adc	r27, r27
    195a:	0a 94       	dec	r0
    195c:	d2 f7       	brpl	.-12     	; 0x1952 <__pack_f+0x7c>
    195e:	01 97       	sbiw	r24, 0x01	; 1
    1960:	a1 09       	sbc	r26, r1
    1962:	b1 09       	sbc	r27, r1
    1964:	82 23       	and	r24, r18
    1966:	93 23       	and	r25, r19
    1968:	a4 23       	and	r26, r20
    196a:	b5 23       	and	r27, r21
    196c:	21 e0       	ldi	r18, 0x01	; 1
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	40 e0       	ldi	r20, 0x00	; 0
    1972:	50 e0       	ldi	r21, 0x00	; 0
    1974:	00 97       	sbiw	r24, 0x00	; 0
    1976:	a1 05       	cpc	r26, r1
    1978:	b1 05       	cpc	r27, r1
    197a:	19 f4       	brne	.+6      	; 0x1982 <__pack_f+0xac>
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	a9 01       	movw	r20, r18
    1982:	2e 29       	or	r18, r14
    1984:	3f 29       	or	r19, r15
    1986:	40 2b       	or	r20, r16
    1988:	51 2b       	or	r21, r17
    198a:	03 c0       	rjmp	.+6      	; 0x1992 <__pack_f+0xbc>
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	a9 01       	movw	r20, r18
    1992:	da 01       	movw	r26, r20
    1994:	c9 01       	movw	r24, r18
    1996:	8f 77       	andi	r24, 0x7F	; 127
    1998:	90 70       	andi	r25, 0x00	; 0
    199a:	a0 70       	andi	r26, 0x00	; 0
    199c:	b0 70       	andi	r27, 0x00	; 0
    199e:	80 34       	cpi	r24, 0x40	; 64
    19a0:	91 05       	cpc	r25, r1
    19a2:	a1 05       	cpc	r26, r1
    19a4:	b1 05       	cpc	r27, r1
    19a6:	39 f4       	brne	.+14     	; 0x19b6 <__pack_f+0xe0>
    19a8:	27 ff       	sbrs	r18, 7
    19aa:	09 c0       	rjmp	.+18     	; 0x19be <__pack_f+0xe8>
    19ac:	20 5c       	subi	r18, 0xC0	; 192
    19ae:	3f 4f       	sbci	r19, 0xFF	; 255
    19b0:	4f 4f       	sbci	r20, 0xFF	; 255
    19b2:	5f 4f       	sbci	r21, 0xFF	; 255
    19b4:	04 c0       	rjmp	.+8      	; 0x19be <__pack_f+0xe8>
    19b6:	21 5c       	subi	r18, 0xC1	; 193
    19b8:	3f 4f       	sbci	r19, 0xFF	; 255
    19ba:	4f 4f       	sbci	r20, 0xFF	; 255
    19bc:	5f 4f       	sbci	r21, 0xFF	; 255
    19be:	e1 e0       	ldi	r30, 0x01	; 1
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	20 30       	cpi	r18, 0x00	; 0
    19c4:	80 e0       	ldi	r24, 0x00	; 0
    19c6:	38 07       	cpc	r19, r24
    19c8:	80 e0       	ldi	r24, 0x00	; 0
    19ca:	48 07       	cpc	r20, r24
    19cc:	80 e4       	ldi	r24, 0x40	; 64
    19ce:	58 07       	cpc	r21, r24
    19d0:	28 f5       	brcc	.+74     	; 0x1a1c <__pack_f+0x146>
    19d2:	e0 e0       	ldi	r30, 0x00	; 0
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	22 c0       	rjmp	.+68     	; 0x1a1c <__pack_f+0x146>
    19d8:	e0 38       	cpi	r30, 0x80	; 128
    19da:	f1 05       	cpc	r31, r1
    19dc:	6c f5       	brge	.+90     	; 0x1a38 <__pack_f+0x162>
    19de:	e1 58       	subi	r30, 0x81	; 129
    19e0:	ff 4f       	sbci	r31, 0xFF	; 255
    19e2:	da 01       	movw	r26, r20
    19e4:	c9 01       	movw	r24, r18
    19e6:	8f 77       	andi	r24, 0x7F	; 127
    19e8:	90 70       	andi	r25, 0x00	; 0
    19ea:	a0 70       	andi	r26, 0x00	; 0
    19ec:	b0 70       	andi	r27, 0x00	; 0
    19ee:	80 34       	cpi	r24, 0x40	; 64
    19f0:	91 05       	cpc	r25, r1
    19f2:	a1 05       	cpc	r26, r1
    19f4:	b1 05       	cpc	r27, r1
    19f6:	39 f4       	brne	.+14     	; 0x1a06 <__pack_f+0x130>
    19f8:	27 ff       	sbrs	r18, 7
    19fa:	09 c0       	rjmp	.+18     	; 0x1a0e <__pack_f+0x138>
    19fc:	20 5c       	subi	r18, 0xC0	; 192
    19fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1a00:	4f 4f       	sbci	r20, 0xFF	; 255
    1a02:	5f 4f       	sbci	r21, 0xFF	; 255
    1a04:	04 c0       	rjmp	.+8      	; 0x1a0e <__pack_f+0x138>
    1a06:	21 5c       	subi	r18, 0xC1	; 193
    1a08:	3f 4f       	sbci	r19, 0xFF	; 255
    1a0a:	4f 4f       	sbci	r20, 0xFF	; 255
    1a0c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a0e:	57 ff       	sbrs	r21, 7
    1a10:	05 c0       	rjmp	.+10     	; 0x1a1c <__pack_f+0x146>
    1a12:	56 95       	lsr	r21
    1a14:	47 95       	ror	r20
    1a16:	37 95       	ror	r19
    1a18:	27 95       	ror	r18
    1a1a:	31 96       	adiw	r30, 0x01	; 1
    1a1c:	87 e0       	ldi	r24, 0x07	; 7
    1a1e:	56 95       	lsr	r21
    1a20:	47 95       	ror	r20
    1a22:	37 95       	ror	r19
    1a24:	27 95       	ror	r18
    1a26:	8a 95       	dec	r24
    1a28:	d1 f7       	brne	.-12     	; 0x1a1e <__pack_f+0x148>
    1a2a:	0b c0       	rjmp	.+22     	; 0x1a42 <__pack_f+0x16c>
    1a2c:	e0 e0       	ldi	r30, 0x00	; 0
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	05 c0       	rjmp	.+10     	; 0x1a3c <__pack_f+0x166>
    1a32:	e0 e0       	ldi	r30, 0x00	; 0
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	05 c0       	rjmp	.+10     	; 0x1a42 <__pack_f+0x16c>
    1a38:	ef ef       	ldi	r30, 0xFF	; 255
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	20 e0       	ldi	r18, 0x00	; 0
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	a9 01       	movw	r20, r18
    1a42:	8e 2f       	mov	r24, r30
    1a44:	87 95       	ror	r24
    1a46:	88 27       	eor	r24, r24
    1a48:	87 95       	ror	r24
    1a4a:	94 2f       	mov	r25, r20
    1a4c:	9f 77       	andi	r25, 0x7F	; 127
    1a4e:	67 95       	ror	r22
    1a50:	66 27       	eor	r22, r22
    1a52:	67 95       	ror	r22
    1a54:	e6 95       	lsr	r30
    1a56:	e2 2e       	mov	r14, r18
    1a58:	a9 2f       	mov	r26, r25
    1a5a:	a8 2b       	or	r26, r24
    1a5c:	fe 2f       	mov	r31, r30
    1a5e:	f6 2b       	or	r31, r22
    1a60:	62 2f       	mov	r22, r18
    1a62:	73 2f       	mov	r23, r19
    1a64:	8a 2f       	mov	r24, r26
    1a66:	9f 2f       	mov	r25, r31
    1a68:	cd b7       	in	r28, 0x3d	; 61
    1a6a:	de b7       	in	r29, 0x3e	; 62
    1a6c:	e6 e0       	ldi	r30, 0x06	; 6
    1a6e:	0c 94 4a 0e 	jmp	0x1c94	; 0x1c94 <__epilogue_restores__+0x18>

00001a72 <__unpack_f>:
    1a72:	dc 01       	movw	r26, r24
    1a74:	fb 01       	movw	r30, r22
    1a76:	2c 91       	ld	r18, X
    1a78:	11 96       	adiw	r26, 0x01	; 1
    1a7a:	3c 91       	ld	r19, X
    1a7c:	11 97       	sbiw	r26, 0x01	; 1
    1a7e:	12 96       	adiw	r26, 0x02	; 2
    1a80:	8c 91       	ld	r24, X
    1a82:	12 97       	sbiw	r26, 0x02	; 2
    1a84:	48 2f       	mov	r20, r24
    1a86:	4f 77       	andi	r20, 0x7F	; 127
    1a88:	50 e0       	ldi	r21, 0x00	; 0
    1a8a:	98 2f       	mov	r25, r24
    1a8c:	99 1f       	adc	r25, r25
    1a8e:	99 27       	eor	r25, r25
    1a90:	99 1f       	adc	r25, r25
    1a92:	13 96       	adiw	r26, 0x03	; 3
    1a94:	6c 91       	ld	r22, X
    1a96:	13 97       	sbiw	r26, 0x03	; 3
    1a98:	86 2f       	mov	r24, r22
    1a9a:	88 0f       	add	r24, r24
    1a9c:	89 2b       	or	r24, r25
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	66 1f       	adc	r22, r22
    1aa2:	66 27       	eor	r22, r22
    1aa4:	66 1f       	adc	r22, r22
    1aa6:	61 83       	std	Z+1, r22	; 0x01
    1aa8:	00 97       	sbiw	r24, 0x00	; 0
    1aaa:	39 f5       	brne	.+78     	; 0x1afa <__unpack_f+0x88>
    1aac:	21 15       	cp	r18, r1
    1aae:	31 05       	cpc	r19, r1
    1ab0:	41 05       	cpc	r20, r1
    1ab2:	51 05       	cpc	r21, r1
    1ab4:	11 f4       	brne	.+4      	; 0x1aba <__unpack_f+0x48>
    1ab6:	82 e0       	ldi	r24, 0x02	; 2
    1ab8:	29 c0       	rjmp	.+82     	; 0x1b0c <__unpack_f+0x9a>
    1aba:	82 e8       	ldi	r24, 0x82	; 130
    1abc:	9f ef       	ldi	r25, 0xFF	; 255
    1abe:	93 83       	std	Z+3, r25	; 0x03
    1ac0:	82 83       	std	Z+2, r24	; 0x02
    1ac2:	67 e0       	ldi	r22, 0x07	; 7
    1ac4:	22 0f       	add	r18, r18
    1ac6:	33 1f       	adc	r19, r19
    1ac8:	44 1f       	adc	r20, r20
    1aca:	55 1f       	adc	r21, r21
    1acc:	6a 95       	dec	r22
    1ace:	d1 f7       	brne	.-12     	; 0x1ac4 <__unpack_f+0x52>
    1ad0:	83 e0       	ldi	r24, 0x03	; 3
    1ad2:	80 83       	st	Z, r24
    1ad4:	09 c0       	rjmp	.+18     	; 0x1ae8 <__unpack_f+0x76>
    1ad6:	22 0f       	add	r18, r18
    1ad8:	33 1f       	adc	r19, r19
    1ada:	44 1f       	adc	r20, r20
    1adc:	55 1f       	adc	r21, r21
    1ade:	82 81       	ldd	r24, Z+2	; 0x02
    1ae0:	93 81       	ldd	r25, Z+3	; 0x03
    1ae2:	01 97       	sbiw	r24, 0x01	; 1
    1ae4:	93 83       	std	Z+3, r25	; 0x03
    1ae6:	82 83       	std	Z+2, r24	; 0x02
    1ae8:	20 30       	cpi	r18, 0x00	; 0
    1aea:	80 e0       	ldi	r24, 0x00	; 0
    1aec:	38 07       	cpc	r19, r24
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	48 07       	cpc	r20, r24
    1af2:	80 e4       	ldi	r24, 0x40	; 64
    1af4:	58 07       	cpc	r21, r24
    1af6:	78 f3       	brcs	.-34     	; 0x1ad6 <__unpack_f+0x64>
    1af8:	20 c0       	rjmp	.+64     	; 0x1b3a <__unpack_f+0xc8>
    1afa:	8f 3f       	cpi	r24, 0xFF	; 255
    1afc:	91 05       	cpc	r25, r1
    1afe:	79 f4       	brne	.+30     	; 0x1b1e <__unpack_f+0xac>
    1b00:	21 15       	cp	r18, r1
    1b02:	31 05       	cpc	r19, r1
    1b04:	41 05       	cpc	r20, r1
    1b06:	51 05       	cpc	r21, r1
    1b08:	19 f4       	brne	.+6      	; 0x1b10 <__unpack_f+0x9e>
    1b0a:	84 e0       	ldi	r24, 0x04	; 4
    1b0c:	80 83       	st	Z, r24
    1b0e:	08 95       	ret
    1b10:	44 ff       	sbrs	r20, 4
    1b12:	03 c0       	rjmp	.+6      	; 0x1b1a <__unpack_f+0xa8>
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	80 83       	st	Z, r24
    1b18:	10 c0       	rjmp	.+32     	; 0x1b3a <__unpack_f+0xc8>
    1b1a:	10 82       	st	Z, r1
    1b1c:	0e c0       	rjmp	.+28     	; 0x1b3a <__unpack_f+0xc8>
    1b1e:	8f 57       	subi	r24, 0x7F	; 127
    1b20:	90 40       	sbci	r25, 0x00	; 0
    1b22:	93 83       	std	Z+3, r25	; 0x03
    1b24:	82 83       	std	Z+2, r24	; 0x02
    1b26:	83 e0       	ldi	r24, 0x03	; 3
    1b28:	80 83       	st	Z, r24
    1b2a:	87 e0       	ldi	r24, 0x07	; 7
    1b2c:	22 0f       	add	r18, r18
    1b2e:	33 1f       	adc	r19, r19
    1b30:	44 1f       	adc	r20, r20
    1b32:	55 1f       	adc	r21, r21
    1b34:	8a 95       	dec	r24
    1b36:	d1 f7       	brne	.-12     	; 0x1b2c <__unpack_f+0xba>
    1b38:	50 64       	ori	r21, 0x40	; 64
    1b3a:	24 83       	std	Z+4, r18	; 0x04
    1b3c:	35 83       	std	Z+5, r19	; 0x05
    1b3e:	46 83       	std	Z+6, r20	; 0x06
    1b40:	57 83       	std	Z+7, r21	; 0x07
    1b42:	08 95       	ret

00001b44 <__fpcmp_parts_f>:
    1b44:	fc 01       	movw	r30, r24
    1b46:	db 01       	movw	r26, r22
    1b48:	90 81       	ld	r25, Z
    1b4a:	92 30       	cpi	r25, 0x02	; 2
    1b4c:	08 f4       	brcc	.+2      	; 0x1b50 <__fpcmp_parts_f+0xc>
    1b4e:	49 c0       	rjmp	.+146    	; 0x1be2 <__fpcmp_parts_f+0x9e>
    1b50:	8c 91       	ld	r24, X
    1b52:	82 30       	cpi	r24, 0x02	; 2
    1b54:	08 f4       	brcc	.+2      	; 0x1b58 <__fpcmp_parts_f+0x14>
    1b56:	45 c0       	rjmp	.+138    	; 0x1be2 <__fpcmp_parts_f+0x9e>
    1b58:	94 30       	cpi	r25, 0x04	; 4
    1b5a:	51 f4       	brne	.+20     	; 0x1b70 <__fpcmp_parts_f+0x2c>
    1b5c:	61 81       	ldd	r22, Z+1	; 0x01
    1b5e:	84 30       	cpi	r24, 0x04	; 4
    1b60:	b1 f5       	brne	.+108    	; 0x1bce <__fpcmp_parts_f+0x8a>
    1b62:	11 96       	adiw	r26, 0x01	; 1
    1b64:	2c 91       	ld	r18, X
    1b66:	11 97       	sbiw	r26, 0x01	; 1
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	26 1b       	sub	r18, r22
    1b6c:	31 09       	sbc	r19, r1
    1b6e:	41 c0       	rjmp	.+130    	; 0x1bf2 <__fpcmp_parts_f+0xae>
    1b70:	84 30       	cpi	r24, 0x04	; 4
    1b72:	21 f0       	breq	.+8      	; 0x1b7c <__fpcmp_parts_f+0x38>
    1b74:	92 30       	cpi	r25, 0x02	; 2
    1b76:	41 f4       	brne	.+16     	; 0x1b88 <__fpcmp_parts_f+0x44>
    1b78:	82 30       	cpi	r24, 0x02	; 2
    1b7a:	b1 f1       	breq	.+108    	; 0x1be8 <__fpcmp_parts_f+0xa4>
    1b7c:	11 96       	adiw	r26, 0x01	; 1
    1b7e:	8c 91       	ld	r24, X
    1b80:	11 97       	sbiw	r26, 0x01	; 1
    1b82:	88 23       	and	r24, r24
    1b84:	a1 f1       	breq	.+104    	; 0x1bee <__fpcmp_parts_f+0xaa>
    1b86:	2d c0       	rjmp	.+90     	; 0x1be2 <__fpcmp_parts_f+0x9e>
    1b88:	61 81       	ldd	r22, Z+1	; 0x01
    1b8a:	82 30       	cpi	r24, 0x02	; 2
    1b8c:	01 f1       	breq	.+64     	; 0x1bce <__fpcmp_parts_f+0x8a>
    1b8e:	11 96       	adiw	r26, 0x01	; 1
    1b90:	8c 91       	ld	r24, X
    1b92:	11 97       	sbiw	r26, 0x01	; 1
    1b94:	68 17       	cp	r22, r24
    1b96:	d9 f4       	brne	.+54     	; 0x1bce <__fpcmp_parts_f+0x8a>
    1b98:	22 81       	ldd	r18, Z+2	; 0x02
    1b9a:	33 81       	ldd	r19, Z+3	; 0x03
    1b9c:	12 96       	adiw	r26, 0x02	; 2
    1b9e:	8d 91       	ld	r24, X+
    1ba0:	9c 91       	ld	r25, X
    1ba2:	13 97       	sbiw	r26, 0x03	; 3
    1ba4:	82 17       	cp	r24, r18
    1ba6:	93 07       	cpc	r25, r19
    1ba8:	94 f0       	brlt	.+36     	; 0x1bce <__fpcmp_parts_f+0x8a>
    1baa:	28 17       	cp	r18, r24
    1bac:	39 07       	cpc	r19, r25
    1bae:	bc f0       	brlt	.+46     	; 0x1bde <__fpcmp_parts_f+0x9a>
    1bb0:	24 81       	ldd	r18, Z+4	; 0x04
    1bb2:	35 81       	ldd	r19, Z+5	; 0x05
    1bb4:	46 81       	ldd	r20, Z+6	; 0x06
    1bb6:	57 81       	ldd	r21, Z+7	; 0x07
    1bb8:	14 96       	adiw	r26, 0x04	; 4
    1bba:	8d 91       	ld	r24, X+
    1bbc:	9d 91       	ld	r25, X+
    1bbe:	0d 90       	ld	r0, X+
    1bc0:	bc 91       	ld	r27, X
    1bc2:	a0 2d       	mov	r26, r0
    1bc4:	82 17       	cp	r24, r18
    1bc6:	93 07       	cpc	r25, r19
    1bc8:	a4 07       	cpc	r26, r20
    1bca:	b5 07       	cpc	r27, r21
    1bcc:	18 f4       	brcc	.+6      	; 0x1bd4 <__fpcmp_parts_f+0x90>
    1bce:	66 23       	and	r22, r22
    1bd0:	41 f0       	breq	.+16     	; 0x1be2 <__fpcmp_parts_f+0x9e>
    1bd2:	0d c0       	rjmp	.+26     	; 0x1bee <__fpcmp_parts_f+0xaa>
    1bd4:	28 17       	cp	r18, r24
    1bd6:	39 07       	cpc	r19, r25
    1bd8:	4a 07       	cpc	r20, r26
    1bda:	5b 07       	cpc	r21, r27
    1bdc:	28 f4       	brcc	.+10     	; 0x1be8 <__fpcmp_parts_f+0xa4>
    1bde:	66 23       	and	r22, r22
    1be0:	31 f0       	breq	.+12     	; 0x1bee <__fpcmp_parts_f+0xaa>
    1be2:	21 e0       	ldi	r18, 0x01	; 1
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	05 c0       	rjmp	.+10     	; 0x1bf2 <__fpcmp_parts_f+0xae>
    1be8:	20 e0       	ldi	r18, 0x00	; 0
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	02 c0       	rjmp	.+4      	; 0x1bf2 <__fpcmp_parts_f+0xae>
    1bee:	2f ef       	ldi	r18, 0xFF	; 255
    1bf0:	3f ef       	ldi	r19, 0xFF	; 255
    1bf2:	c9 01       	movw	r24, r18
    1bf4:	08 95       	ret

00001bf6 <__divmodhi4>:
    1bf6:	97 fb       	bst	r25, 7
    1bf8:	09 2e       	mov	r0, r25
    1bfa:	07 26       	eor	r0, r23
    1bfc:	0a d0       	rcall	.+20     	; 0x1c12 <__divmodhi4_neg1>
    1bfe:	77 fd       	sbrc	r23, 7
    1c00:	04 d0       	rcall	.+8      	; 0x1c0a <__divmodhi4_neg2>
    1c02:	0c d0       	rcall	.+24     	; 0x1c1c <__udivmodhi4>
    1c04:	06 d0       	rcall	.+12     	; 0x1c12 <__divmodhi4_neg1>
    1c06:	00 20       	and	r0, r0
    1c08:	1a f4       	brpl	.+6      	; 0x1c10 <__divmodhi4_exit>

00001c0a <__divmodhi4_neg2>:
    1c0a:	70 95       	com	r23
    1c0c:	61 95       	neg	r22
    1c0e:	7f 4f       	sbci	r23, 0xFF	; 255

00001c10 <__divmodhi4_exit>:
    1c10:	08 95       	ret

00001c12 <__divmodhi4_neg1>:
    1c12:	f6 f7       	brtc	.-4      	; 0x1c10 <__divmodhi4_exit>
    1c14:	90 95       	com	r25
    1c16:	81 95       	neg	r24
    1c18:	9f 4f       	sbci	r25, 0xFF	; 255
    1c1a:	08 95       	ret

00001c1c <__udivmodhi4>:
    1c1c:	aa 1b       	sub	r26, r26
    1c1e:	bb 1b       	sub	r27, r27
    1c20:	51 e1       	ldi	r21, 0x11	; 17
    1c22:	07 c0       	rjmp	.+14     	; 0x1c32 <__udivmodhi4_ep>

00001c24 <__udivmodhi4_loop>:
    1c24:	aa 1f       	adc	r26, r26
    1c26:	bb 1f       	adc	r27, r27
    1c28:	a6 17       	cp	r26, r22
    1c2a:	b7 07       	cpc	r27, r23
    1c2c:	10 f0       	brcs	.+4      	; 0x1c32 <__udivmodhi4_ep>
    1c2e:	a6 1b       	sub	r26, r22
    1c30:	b7 0b       	sbc	r27, r23

00001c32 <__udivmodhi4_ep>:
    1c32:	88 1f       	adc	r24, r24
    1c34:	99 1f       	adc	r25, r25
    1c36:	5a 95       	dec	r21
    1c38:	a9 f7       	brne	.-22     	; 0x1c24 <__udivmodhi4_loop>
    1c3a:	80 95       	com	r24
    1c3c:	90 95       	com	r25
    1c3e:	bc 01       	movw	r22, r24
    1c40:	cd 01       	movw	r24, r26
    1c42:	08 95       	ret

00001c44 <__prologue_saves__>:
    1c44:	2f 92       	push	r2
    1c46:	3f 92       	push	r3
    1c48:	4f 92       	push	r4
    1c4a:	5f 92       	push	r5
    1c4c:	6f 92       	push	r6
    1c4e:	7f 92       	push	r7
    1c50:	8f 92       	push	r8
    1c52:	9f 92       	push	r9
    1c54:	af 92       	push	r10
    1c56:	bf 92       	push	r11
    1c58:	cf 92       	push	r12
    1c5a:	df 92       	push	r13
    1c5c:	ef 92       	push	r14
    1c5e:	ff 92       	push	r15
    1c60:	0f 93       	push	r16
    1c62:	1f 93       	push	r17
    1c64:	cf 93       	push	r28
    1c66:	df 93       	push	r29
    1c68:	cd b7       	in	r28, 0x3d	; 61
    1c6a:	de b7       	in	r29, 0x3e	; 62
    1c6c:	ca 1b       	sub	r28, r26
    1c6e:	db 0b       	sbc	r29, r27
    1c70:	0f b6       	in	r0, 0x3f	; 63
    1c72:	f8 94       	cli
    1c74:	de bf       	out	0x3e, r29	; 62
    1c76:	0f be       	out	0x3f, r0	; 63
    1c78:	cd bf       	out	0x3d, r28	; 61
    1c7a:	09 94       	ijmp

00001c7c <__epilogue_restores__>:
    1c7c:	2a 88       	ldd	r2, Y+18	; 0x12
    1c7e:	39 88       	ldd	r3, Y+17	; 0x11
    1c80:	48 88       	ldd	r4, Y+16	; 0x10
    1c82:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c84:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c86:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c88:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c8a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c8c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c8e:	b9 84       	ldd	r11, Y+9	; 0x09
    1c90:	c8 84       	ldd	r12, Y+8	; 0x08
    1c92:	df 80       	ldd	r13, Y+7	; 0x07
    1c94:	ee 80       	ldd	r14, Y+6	; 0x06
    1c96:	fd 80       	ldd	r15, Y+5	; 0x05
    1c98:	0c 81       	ldd	r16, Y+4	; 0x04
    1c9a:	1b 81       	ldd	r17, Y+3	; 0x03
    1c9c:	aa 81       	ldd	r26, Y+2	; 0x02
    1c9e:	b9 81       	ldd	r27, Y+1	; 0x01
    1ca0:	ce 0f       	add	r28, r30
    1ca2:	d1 1d       	adc	r29, r1
    1ca4:	0f b6       	in	r0, 0x3f	; 63
    1ca6:	f8 94       	cli
    1ca8:	de bf       	out	0x3e, r29	; 62
    1caa:	0f be       	out	0x3f, r0	; 63
    1cac:	cd bf       	out	0x3d, r28	; 61
    1cae:	ed 01       	movw	r28, r26
    1cb0:	08 95       	ret

00001cb2 <strlen>:
    1cb2:	fc 01       	movw	r30, r24
    1cb4:	01 90       	ld	r0, Z+
    1cb6:	00 20       	and	r0, r0
    1cb8:	e9 f7       	brne	.-6      	; 0x1cb4 <strlen+0x2>
    1cba:	80 95       	com	r24
    1cbc:	90 95       	com	r25
    1cbe:	8e 0f       	add	r24, r30
    1cc0:	9f 1f       	adc	r25, r31
    1cc2:	08 95       	ret

00001cc4 <_exit>:
    1cc4:	f8 94       	cli

00001cc6 <__stop_program>:
    1cc6:	ff cf       	rjmp	.-2      	; 0x1cc6 <__stop_program>
