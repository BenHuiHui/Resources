
assignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  000029cc  00002a60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000029cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000522  0080011a  0080011a  00002a7a  2**0
                  ALLOC
  3 .stab         00000d74  00000000  00000000  00002a7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000027a  00000000  00000000  000037f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000268  00000000  00000000  00003a6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000529  00000000  00000000  00003cd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003318  00000000  00000000  000041fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001890  00000000  00000000  00007513  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002d24  00000000  00000000  00008da3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000410  00000000  00000000  0000bac8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000008de  00000000  00000000  0000bed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000015fb  00000000  00000000  0000c7b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000760  00000000  00000000  0000ddb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000a0  00000000  00000000  0000e511  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 cf 08 	jmp	0x119e	; 0x119e <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 9d 09 	jmp	0x133a	; 0x133a <__vector_20>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec ec       	ldi	r30, 0xCC	; 204
      7c:	f9 e2       	ldi	r31, 0x29	; 41
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 31       	cpi	r26, 0x1A	; 26
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	16 e0       	ldi	r17, 0x06	; 6
      8c:	aa e1       	ldi	r26, 0x1A	; 26
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ac 33       	cpi	r26, 0x3C	; 60
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 bf 01 	call	0x37e	; 0x37e <main>
      9e:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <task1>:
// Tasks 1 and 2 will increment a global variable ctr, and every 10 increments task 1 will send the resulting value in ctr to task3 via a queue.
// Task 3 will then send it via serial to the PC. 

// In addition, do something fun and creative with this program, the serial port and the components you have. Describe it in your report. :)
void task1(void *p)
{
      a6:	df 93       	push	r29
      a8:	cf 93       	push	r28
      aa:	00 d0       	rcall	.+0      	; 0xac <task1+0x6>
      ac:	00 d0       	rcall	.+0      	; 0xae <task1+0x8>
      ae:	cd b7       	in	r28, 0x3d	; 61
      b0:	de b7       	in	r29, 0x3e	; 62
      b2:	9c 83       	std	Y+4, r25	; 0x04
      b4:	8b 83       	std	Y+3, r24	; 0x03
	int count = 0;
      b6:	1a 82       	std	Y+2, r1	; 0x02
      b8:	19 82       	std	Y+1, r1	; 0x01
	
	while(1)
	{
		enterCritical();
      ba:	0e 94 e5 01 	call	0x3ca	; 0x3ca <enterCritical>
		count++;
      be:	89 81       	ldd	r24, Y+1	; 0x01
      c0:	9a 81       	ldd	r25, Y+2	; 0x02
      c2:	01 96       	adiw	r24, 0x01	; 1
      c4:	9a 83       	std	Y+2, r25	; 0x02
      c6:	89 83       	std	Y+1, r24	; 0x01
		variable++;
      c8:	80 91 1a 01 	lds	r24, 0x011A
      cc:	90 91 1b 01 	lds	r25, 0x011B
      d0:	01 96       	adiw	r24, 0x01	; 1
      d2:	90 93 1b 01 	sts	0x011B, r25
      d6:	80 93 1a 01 	sts	0x011A, r24
		if(count == 10){
      da:	89 81       	ldd	r24, Y+1	; 0x01
      dc:	9a 81       	ldd	r25, Y+2	; 0x02
      de:	8a 30       	cpi	r24, 0x0A	; 10
      e0:	91 05       	cpc	r25, r1
      e2:	a9 f4       	brne	.+42     	; 0x10e <task1+0x68>
			count = 0;
      e4:	1a 82       	std	Y+2, r1	; 0x02
      e6:	19 82       	std	Y+1, r1	; 0x01
			PORTD ^= 0b10000000;
      e8:	8b e2       	ldi	r24, 0x2B	; 43
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	2b e2       	ldi	r18, 0x2B	; 43
      ee:	30 e0       	ldi	r19, 0x00	; 0
      f0:	f9 01       	movw	r30, r18
      f2:	30 81       	ld	r19, Z
      f4:	20 e8       	ldi	r18, 0x80	; 128
      f6:	23 27       	eor	r18, r19
      f8:	fc 01       	movw	r30, r24
      fa:	20 83       	st	Z, r18
			OSenq(queue,&variable);
      fc:	80 91 60 01 	lds	r24, 0x0160
     100:	90 91 61 01 	lds	r25, 0x0161
     104:	2a e1       	ldi	r18, 0x1A	; 26
     106:	31 e0       	ldi	r19, 0x01	; 1
     108:	b9 01       	movw	r22, r18
     10a:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <OSenq>
		}
		
		leaveCritical();
     10e:	0e 94 ed 01 	call	0x3da	; 0x3da <leaveCritical>
	}
     112:	d3 cf       	rjmp	.-90     	; 0xba <task1+0x14>

00000114 <task2>:
}

void task2(void *p)
{
     114:	df 93       	push	r29
     116:	cf 93       	push	r28
     118:	00 d0       	rcall	.+0      	; 0x11a <task2+0x6>
     11a:	00 d0       	rcall	.+0      	; 0x11c <task2+0x8>
     11c:	cd b7       	in	r28, 0x3d	; 61
     11e:	de b7       	in	r29, 0x3e	; 62
     120:	9c 83       	std	Y+4, r25	; 0x04
     122:	8b 83       	std	Y+3, r24	; 0x03
	int count = 0;
     124:	1a 82       	std	Y+2, r1	; 0x02
     126:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		enterCritical();
     128:	0e 94 e5 01 	call	0x3ca	; 0x3ca <enterCritical>
		count++;
     12c:	89 81       	ldd	r24, Y+1	; 0x01
     12e:	9a 81       	ldd	r25, Y+2	; 0x02
     130:	01 96       	adiw	r24, 0x01	; 1
     132:	9a 83       	std	Y+2, r25	; 0x02
     134:	89 83       	std	Y+1, r24	; 0x01
		variable++;
     136:	80 91 1a 01 	lds	r24, 0x011A
     13a:	90 91 1b 01 	lds	r25, 0x011B
     13e:	01 96       	adiw	r24, 0x01	; 1
     140:	90 93 1b 01 	sts	0x011B, r25
     144:	80 93 1a 01 	sts	0x011A, r24
		
		if(count == 10){
     148:	89 81       	ldd	r24, Y+1	; 0x01
     14a:	9a 81       	ldd	r25, Y+2	; 0x02
     14c:	8a 30       	cpi	r24, 0x0A	; 10
     14e:	91 05       	cpc	r25, r1
     150:	a9 f4       	brne	.+42     	; 0x17c <task2+0x68>
			count = 0;
     152:	1a 82       	std	Y+2, r1	; 0x02
     154:	19 82       	std	Y+1, r1	; 0x01
			PORTD ^= 0b01000000;
     156:	8b e2       	ldi	r24, 0x2B	; 43
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	2b e2       	ldi	r18, 0x2B	; 43
     15c:	30 e0       	ldi	r19, 0x00	; 0
     15e:	f9 01       	movw	r30, r18
     160:	30 81       	ld	r19, Z
     162:	20 e4       	ldi	r18, 0x40	; 64
     164:	23 27       	eor	r18, r19
     166:	fc 01       	movw	r30, r24
     168:	20 83       	st	Z, r18
			OSenq(queue,&variable);
     16a:	80 91 60 01 	lds	r24, 0x0160
     16e:	90 91 61 01 	lds	r25, 0x0161
     172:	2a e1       	ldi	r18, 0x1A	; 26
     174:	31 e0       	ldi	r19, 0x01	; 1
     176:	b9 01       	movw	r22, r18
     178:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <OSenq>
		}
		
		leaveCritical();
     17c:	0e 94 ed 01 	call	0x3da	; 0x3da <leaveCritical>
	}
     180:	d3 cf       	rjmp	.-90     	; 0x128 <task2+0x14>

00000182 <task3>:
}

void task3(void *p)
{
     182:	0f 93       	push	r16
     184:	1f 93       	push	r17
     186:	df 93       	push	r29
     188:	cf 93       	push	r28
     18a:	cd b7       	in	r28, 0x3d	; 61
     18c:	de b7       	in	r29, 0x3e	; 62
     18e:	64 97       	sbiw	r28, 0x14	; 20
     190:	0f b6       	in	r0, 0x3f	; 63
     192:	f8 94       	cli
     194:	de bf       	out	0x3e, r29	; 62
     196:	0f be       	out	0x3f, r0	; 63
     198:	cd bf       	out	0x3d, r28	; 61
     19a:	9c 8b       	std	Y+20, r25	; 0x14
     19c:	8b 8b       	std	Y+19, r24	; 0x13
     19e:	01 c0       	rjmp	.+2      	; 0x1a2 <task3+0x20>
			_delay_ms(100);
			say(sayBuf);
			PORTD ^= 0b00100000;
			leaveCritical();
		}
	}
     1a0:	00 00       	nop
{
	void *addr;
	int res,i;
	while(1)
	{
		if(queue->size > 0){
     1a2:	80 91 60 01 	lds	r24, 0x0160
     1a6:	90 91 61 01 	lds	r25, 0x0161
     1aa:	fc 01       	movw	r30, r24
     1ac:	86 81       	ldd	r24, Z+6	; 0x06
     1ae:	97 81       	ldd	r25, Z+7	; 0x07
     1b0:	18 16       	cp	r1, r24
     1b2:	19 06       	cpc	r1, r25
     1b4:	ac f7       	brge	.-22     	; 0x1a0 <task3+0x1e>
			enterCritical();
     1b6:	0e 94 e5 01 	call	0x3ca	; 0x3ca <enterCritical>
			addr = OSdeq(queue);
     1ba:	80 91 60 01 	lds	r24, 0x0160
     1be:	90 91 61 01 	lds	r25, 0x0161
     1c2:	0e 94 a9 05 	call	0xb52	; 0xb52 <OSdeq>
     1c6:	9a 83       	std	Y+2, r25	; 0x02
     1c8:	89 83       	std	Y+1, r24	; 0x01
			//for(i=0;i<sizeof(int);i++)
			//	*(char*)(&res + i) = *(char*)(addr + i);
			
			res = *(int*)addr;
     1ca:	89 81       	ldd	r24, Y+1	; 0x01
     1cc:	9a 81       	ldd	r25, Y+2	; 0x02
     1ce:	fc 01       	movw	r30, r24
     1d0:	80 81       	ld	r24, Z
     1d2:	91 81       	ldd	r25, Z+1	; 0x01
     1d4:	9c 83       	std	Y+4, r25	; 0x04
     1d6:	8b 83       	std	Y+3, r24	; 0x03
			
			sprintf(sayBuf,"r:%d \n\r",res);
     1d8:	00 d0       	rcall	.+0      	; 0x1da <task3+0x58>
     1da:	00 d0       	rcall	.+0      	; 0x1dc <task3+0x5a>
     1dc:	00 d0       	rcall	.+0      	; 0x1de <task3+0x5c>
     1de:	8d b7       	in	r24, 0x3d	; 61
     1e0:	9e b7       	in	r25, 0x3e	; 62
     1e2:	01 96       	adiw	r24, 0x01	; 1
     1e4:	20 e2       	ldi	r18, 0x20	; 32
     1e6:	31 e0       	ldi	r19, 0x01	; 1
     1e8:	fc 01       	movw	r30, r24
     1ea:	31 83       	std	Z+1, r19	; 0x01
     1ec:	20 83       	st	Z, r18
     1ee:	20 e0       	ldi	r18, 0x00	; 0
     1f0:	31 e0       	ldi	r19, 0x01	; 1
     1f2:	fc 01       	movw	r30, r24
     1f4:	33 83       	std	Z+3, r19	; 0x03
     1f6:	22 83       	std	Z+2, r18	; 0x02
     1f8:	2b 81       	ldd	r18, Y+3	; 0x03
     1fa:	3c 81       	ldd	r19, Y+4	; 0x04
     1fc:	fc 01       	movw	r30, r24
     1fe:	35 83       	std	Z+5, r19	; 0x05
     200:	24 83       	std	Z+4, r18	; 0x04
     202:	0e 94 3a 12 	call	0x2474	; 0x2474 <sprintf>
     206:	8d b7       	in	r24, 0x3d	; 61
     208:	9e b7       	in	r25, 0x3e	; 62
     20a:	06 96       	adiw	r24, 0x06	; 6
     20c:	0f b6       	in	r0, 0x3f	; 63
     20e:	f8 94       	cli
     210:	9e bf       	out	0x3e, r25	; 62
     212:	0f be       	out	0x3f, r0	; 63
     214:	8d bf       	out	0x3d, r24	; 61
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	a8 ec       	ldi	r26, 0xC8	; 200
     21c:	b2 e4       	ldi	r27, 0x42	; 66
     21e:	8d 83       	std	Y+5, r24	; 0x05
     220:	9e 83       	std	Y+6, r25	; 0x06
     222:	af 83       	std	Y+7, r26	; 0x07
     224:	b8 87       	std	Y+8, r27	; 0x08
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     226:	6d 81       	ldd	r22, Y+5	; 0x05
     228:	7e 81       	ldd	r23, Y+6	; 0x06
     22a:	8f 81       	ldd	r24, Y+7	; 0x07
     22c:	98 85       	ldd	r25, Y+8	; 0x08
     22e:	20 e0       	ldi	r18, 0x00	; 0
     230:	30 e0       	ldi	r19, 0x00	; 0
     232:	4a e7       	ldi	r20, 0x7A	; 122
     234:	55 e4       	ldi	r21, 0x45	; 69
     236:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__mulsf3>
     23a:	dc 01       	movw	r26, r24
     23c:	cb 01       	movw	r24, r22
     23e:	89 87       	std	Y+9, r24	; 0x09
     240:	9a 87       	std	Y+10, r25	; 0x0a
     242:	ab 87       	std	Y+11, r26	; 0x0b
     244:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     246:	11 e0       	ldi	r17, 0x01	; 1
     248:	69 85       	ldd	r22, Y+9	; 0x09
     24a:	7a 85       	ldd	r23, Y+10	; 0x0a
     24c:	8b 85       	ldd	r24, Y+11	; 0x0b
     24e:	9c 85       	ldd	r25, Y+12	; 0x0c
     250:	20 e0       	ldi	r18, 0x00	; 0
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e8       	ldi	r20, 0x80	; 128
     256:	5f e3       	ldi	r21, 0x3F	; 63
     258:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <__ltsf2>
     25c:	88 23       	and	r24, r24
     25e:	0c f0       	brlt	.+2      	; 0x262 <task3+0xe0>
     260:	10 e0       	ldi	r17, 0x00	; 0
     262:	11 23       	and	r17, r17
     264:	29 f0       	breq	.+10     	; 0x270 <task3+0xee>
		__ticks = 1;
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	9e 87       	std	Y+14, r25	; 0x0e
     26c:	8d 87       	std	Y+13, r24	; 0x0d
     26e:	46 c0       	rjmp	.+140    	; 0x2fc <task3+0x17a>
	else if (__tmp > 65535)
     270:	11 e0       	ldi	r17, 0x01	; 1
     272:	69 85       	ldd	r22, Y+9	; 0x09
     274:	7a 85       	ldd	r23, Y+10	; 0x0a
     276:	8b 85       	ldd	r24, Y+11	; 0x0b
     278:	9c 85       	ldd	r25, Y+12	; 0x0c
     27a:	20 e0       	ldi	r18, 0x00	; 0
     27c:	3f ef       	ldi	r19, 0xFF	; 255
     27e:	4f e7       	ldi	r20, 0x7F	; 127
     280:	57 e4       	ldi	r21, 0x47	; 71
     282:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__gtsf2>
     286:	18 16       	cp	r1, r24
     288:	0c f0       	brlt	.+2      	; 0x28c <task3+0x10a>
     28a:	10 e0       	ldi	r17, 0x00	; 0
     28c:	11 23       	and	r17, r17
     28e:	61 f1       	breq	.+88     	; 0x2e8 <task3+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     290:	6d 81       	ldd	r22, Y+5	; 0x05
     292:	7e 81       	ldd	r23, Y+6	; 0x06
     294:	8f 81       	ldd	r24, Y+7	; 0x07
     296:	98 85       	ldd	r25, Y+8	; 0x08
     298:	20 e0       	ldi	r18, 0x00	; 0
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	40 e2       	ldi	r20, 0x20	; 32
     29e:	51 e4       	ldi	r21, 0x41	; 65
     2a0:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <__mulsf3>
     2a4:	dc 01       	movw	r26, r24
     2a6:	cb 01       	movw	r24, r22
     2a8:	bc 01       	movw	r22, r24
     2aa:	cd 01       	movw	r24, r26
     2ac:	0e 94 35 0b 	call	0x166a	; 0x166a <__fixunssfsi>
     2b0:	dc 01       	movw	r26, r24
     2b2:	cb 01       	movw	r24, r22
     2b4:	9e 87       	std	Y+14, r25	; 0x0e
     2b6:	8d 87       	std	Y+13, r24	; 0x0d
     2b8:	12 c0       	rjmp	.+36     	; 0x2de <task3+0x15c>
     2ba:	80 e9       	ldi	r24, 0x90	; 144
     2bc:	91 e0       	ldi	r25, 0x01	; 1
     2be:	98 8b       	std	Y+16, r25	; 0x10
     2c0:	8f 87       	std	Y+15, r24	; 0x0f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2c2:	8f 85       	ldd	r24, Y+15	; 0x0f
     2c4:	98 89       	ldd	r25, Y+16	; 0x10
     2c6:	8c 01       	movw	r16, r24
     2c8:	f8 01       	movw	r30, r16
     2ca:	31 97       	sbiw	r30, 0x01	; 1
     2cc:	f1 f7       	brne	.-4      	; 0x2ca <task3+0x148>
     2ce:	8f 01       	movw	r16, r30
     2d0:	18 8b       	std	Y+16, r17	; 0x10
     2d2:	0f 87       	std	Y+15, r16	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2d4:	8d 85       	ldd	r24, Y+13	; 0x0d
     2d6:	9e 85       	ldd	r25, Y+14	; 0x0e
     2d8:	01 97       	sbiw	r24, 0x01	; 1
     2da:	9e 87       	std	Y+14, r25	; 0x0e
     2dc:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2de:	8d 85       	ldd	r24, Y+13	; 0x0d
     2e0:	9e 85       	ldd	r25, Y+14	; 0x0e
     2e2:	00 97       	sbiw	r24, 0x00	; 0
     2e4:	51 f7       	brne	.-44     	; 0x2ba <task3+0x138>
     2e6:	17 c0       	rjmp	.+46     	; 0x316 <task3+0x194>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2e8:	69 85       	ldd	r22, Y+9	; 0x09
     2ea:	7a 85       	ldd	r23, Y+10	; 0x0a
     2ec:	8b 85       	ldd	r24, Y+11	; 0x0b
     2ee:	9c 85       	ldd	r25, Y+12	; 0x0c
     2f0:	0e 94 35 0b 	call	0x166a	; 0x166a <__fixunssfsi>
     2f4:	dc 01       	movw	r26, r24
     2f6:	cb 01       	movw	r24, r22
     2f8:	9e 87       	std	Y+14, r25	; 0x0e
     2fa:	8d 87       	std	Y+13, r24	; 0x0d
     2fc:	8d 85       	ldd	r24, Y+13	; 0x0d
     2fe:	9e 85       	ldd	r25, Y+14	; 0x0e
     300:	9a 8b       	std	Y+18, r25	; 0x12
     302:	89 8b       	std	Y+17, r24	; 0x11
     304:	89 89       	ldd	r24, Y+17	; 0x11
     306:	9a 89       	ldd	r25, Y+18	; 0x12
     308:	8c 01       	movw	r16, r24
     30a:	c8 01       	movw	r24, r16
     30c:	01 97       	sbiw	r24, 0x01	; 1
     30e:	f1 f7       	brne	.-4      	; 0x30c <task3+0x18a>
     310:	8c 01       	movw	r16, r24
     312:	1a 8b       	std	Y+18, r17	; 0x12
     314:	09 8b       	std	Y+17, r16	; 0x11
			_delay_ms(100);
			say(sayBuf);
     316:	80 e2       	ldi	r24, 0x20	; 32
     318:	91 e0       	ldi	r25, 0x01	; 1
     31a:	0e 94 aa 0a 	call	0x1554	; 0x1554 <say>
			PORTD ^= 0b00100000;
     31e:	8b e2       	ldi	r24, 0x2B	; 43
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	2b e2       	ldi	r18, 0x2B	; 43
     324:	30 e0       	ldi	r19, 0x00	; 0
     326:	f9 01       	movw	r30, r18
     328:	30 81       	ld	r19, Z
     32a:	20 e2       	ldi	r18, 0x20	; 32
     32c:	23 27       	eor	r18, r19
     32e:	fc 01       	movw	r30, r24
     330:	20 83       	st	Z, r18
			leaveCritical();
     332:	0e 94 ed 01 	call	0x3da	; 0x3da <leaveCritical>
		}
	}
     336:	35 cf       	rjmp	.-406    	; 0x1a2 <task3+0x20>

00000338 <setup>:
}

void setup()
{
     338:	df 93       	push	r29
     33a:	cf 93       	push	r28
     33c:	cd b7       	in	r28, 0x3d	; 61
     33e:	de b7       	in	r29, 0x3e	; 62
	// create a global queue
	queue = (OSSignal*)OSmakeQ(MAX_QUEUE_SIZE,sizeof(int));
     340:	8a e0       	ldi	r24, 0x0A	; 10
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	62 e0       	ldi	r22, 0x02	; 2
     346:	70 e0       	ldi	r23, 0x00	; 0
     348:	0e 94 38 04 	call	0x870	; 0x870 <OSmakeQ>
     34c:	90 93 61 01 	sts	0x0161, r25
     350:	80 93 60 01 	sts	0x0160, r24
	
	// for testing only
	DDRD |= 0b11111100;
     354:	8a e2       	ldi	r24, 0x2A	; 42
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	2a e2       	ldi	r18, 0x2A	; 42
     35a:	30 e0       	ldi	r19, 0x00	; 0
     35c:	f9 01       	movw	r30, r18
     35e:	20 81       	ld	r18, Z
     360:	2c 6f       	ori	r18, 0xFC	; 252
     362:	fc 01       	movw	r30, r24
     364:	20 83       	st	Z, r18
	
	// signal OS running correctly
	PORTD |= 0b10000000;
     366:	8b e2       	ldi	r24, 0x2B	; 43
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	2b e2       	ldi	r18, 0x2B	; 43
     36c:	30 e0       	ldi	r19, 0x00	; 0
     36e:	f9 01       	movw	r30, r18
     370:	20 81       	ld	r18, Z
     372:	20 68       	ori	r18, 0x80	; 128
     374:	fc 01       	movw	r30, r24
     376:	20 83       	st	Z, r18
}		
     378:	cf 91       	pop	r28
     37a:	df 91       	pop	r29
     37c:	08 95       	ret

0000037e <main>:




int main()
{
     37e:	df 93       	push	r29
     380:	cf 93       	push	r28
     382:	cd b7       	in	r28, 0x3d	; 61
     384:	de b7       	in	r29, 0x3e	; 62
	setupSerial();
     386:	0e 94 65 09 	call	0x12ca	; 0x12ca <setupSerial>
	
	cli();
     38a:	f8 94       	cli
	
	OSInit();
     38c:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <OSInit>
	
	setup();
     390:	0e 94 9c 01 	call	0x338	; 0x338 <setup>
	
	// Create the tasks. Task1 is for the buzzer and we pass in the base frequency as an argument.
	
	OSAddTask(task1, 0, NULL);
     394:	83 e5       	ldi	r24, 0x53	; 83
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	60 e0       	ldi	r22, 0x00	; 0
     39a:	70 e0       	ldi	r23, 0x00	; 0
     39c:	40 e0       	ldi	r20, 0x00	; 0
     39e:	50 e0       	ldi	r21, 0x00	; 0
     3a0:	0e 94 ed 08 	call	0x11da	; 0x11da <OSAddTask>
	
	OSAddTask(task2, 1, NULL);
     3a4:	8a e8       	ldi	r24, 0x8A	; 138
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	61 e0       	ldi	r22, 0x01	; 1
     3aa:	70 e0       	ldi	r23, 0x00	; 0
     3ac:	40 e0       	ldi	r20, 0x00	; 0
     3ae:	50 e0       	ldi	r21, 0x00	; 0
     3b0:	0e 94 ed 08 	call	0x11da	; 0x11da <OSAddTask>
	
	OSAddTask(task3, 1, NULL);
     3b4:	81 ec       	ldi	r24, 0xC1	; 193
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	61 e0       	ldi	r22, 0x01	; 1
     3ba:	70 e0       	ldi	r23, 0x00	; 0
     3bc:	40 e0       	ldi	r20, 0x00	; 0
     3be:	50 e0       	ldi	r21, 0x00	; 0
     3c0:	0e 94 ed 08 	call	0x11da	; 0x11da <OSAddTask>
	
	// start the OS
	OSRun();
     3c4:	0e 94 4a 09 	call	0x1294	; 0x1294 <OSRun>
	
	while(1);
     3c8:	ff cf       	rjmp	.-2      	; 0x3c8 <main+0x4a>

000003ca <enterCritical>:

/* ======================================= */
/* Critical section management             */
/* ======================================= */
inline void enterCritical()
{
     3ca:	df 93       	push	r29
     3cc:	cf 93       	push	r28
     3ce:	cd b7       	in	r28, 0x3d	; 61
     3d0:	de b7       	in	r29, 0x3e	; 62
	cli();
     3d2:	f8 94       	cli
}
     3d4:	cf 91       	pop	r28
     3d6:	df 91       	pop	r29
     3d8:	08 95       	ret

000003da <leaveCritical>:

inline void leaveCritical()
{
     3da:	df 93       	push	r29
     3dc:	cf 93       	push	r28
     3de:	cd b7       	in	r28, 0x3d	; 61
     3e0:	de b7       	in	r29, 0x3e	; 62
	sei();
     3e2:	78 94       	sei
}
     3e4:	cf 91       	pop	r28
     3e6:	df 91       	pop	r29
     3e8:	08 95       	ret

000003ea <OSmakeSema>:

#ifdef OSIncludeSema

// Creates a semaphore with initial value initval
OSSignal *OSmakeSema(int initval)
{
     3ea:	df 93       	push	r29
     3ec:	cf 93       	push	r28
     3ee:	00 d0       	rcall	.+0      	; 0x3f0 <OSmakeSema+0x6>
     3f0:	00 d0       	rcall	.+0      	; 0x3f2 <OSmakeSema+0x8>
     3f2:	cd b7       	in	r28, 0x3d	; 61
     3f4:	de b7       	in	r29, 0x3e	; 62
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	8b 83       	std	Y+3, r24	; 0x03
	OSSignal *sem = (OSSignal *) malloc(sizeof(OSSignal));
     3fa:	8c e0       	ldi	r24, 0x0C	; 12
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	0e 94 f7 10 	call	0x21ee	; 0x21ee <malloc>
     402:	9a 83       	std	Y+2, r25	; 0x02
     404:	89 83       	std	Y+1, r24	; 0x01
	if(!sem){	// when the space allocation is not successful
     406:	89 81       	ldd	r24, Y+1	; 0x01
     408:	9a 81       	ldd	r25, Y+2	; 0x02
     40a:	00 97       	sbiw	r24, 0x00	; 0
     40c:	61 f4       	brne	.+24     	; 0x426 <OSmakeSema+0x3c>
		PORTD |= 0b00010000;	// signal error
     40e:	8b e2       	ldi	r24, 0x2B	; 43
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	2b e2       	ldi	r18, 0x2B	; 43
     414:	30 e0       	ldi	r19, 0x00	; 0
     416:	f9 01       	movw	r30, r18
     418:	20 81       	ld	r18, Z
     41a:	20 61       	ori	r18, 0x10	; 16
     41c:	fc 01       	movw	r30, r24
     41e:	20 83       	st	Z, r18
		return NULL;
     420:	80 e0       	ldi	r24, 0x00	; 0
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	50 c0       	rjmp	.+160    	; 0x4c6 <OSmakeSema+0xdc>
	}
	
	sem->type	= SEMAPHORE_TYPE;
     426:	89 81       	ldd	r24, Y+1	; 0x01
     428:	9a 81       	ldd	r25, Y+2	; 0x02
     42a:	fc 01       	movw	r30, r24
     42c:	11 82       	std	Z+1, r1	; 0x01
     42e:	10 82       	st	Z, r1
	sem->num	= initval;	// the (-num) is qsize; when num >= 0, qsize = 0
     430:	89 81       	ldd	r24, Y+1	; 0x01
     432:	9a 81       	ldd	r25, Y+2	; 0x02
     434:	2b 81       	ldd	r18, Y+3	; 0x03
     436:	3c 81       	ldd	r19, Y+4	; 0x04
     438:	fc 01       	movw	r30, r24
     43a:	33 83       	std	Z+3, r19	; 0x03
     43c:	22 83       	std	Z+2, r18	; 0x02
	sem->esize	= 1;		// store the task id
     43e:	89 81       	ldd	r24, Y+1	; 0x01
     440:	9a 81       	ldd	r25, Y+2	; 0x02
     442:	21 e0       	ldi	r18, 0x01	; 1
     444:	30 e0       	ldi	r19, 0x00	; 0
     446:	fc 01       	movw	r30, r24
     448:	35 83       	std	Z+5, r19	; 0x05
     44a:	24 83       	std	Z+4, r18	; 0x04
	sem->size	= OS_NUM_TASKS;	// the maximum is the number of tasks system has
     44c:	89 81       	ldd	r24, Y+1	; 0x01
     44e:	9a 81       	ldd	r25, Y+2	; 0x02
     450:	24 e0       	ldi	r18, 0x04	; 4
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	fc 01       	movw	r30, r24
     456:	37 83       	std	Z+7, r19	; 0x07
     458:	26 83       	std	Z+6, r18	; 0x06
	sem->start	= calloc(sem->size,sem->esize);
     45a:	89 81       	ldd	r24, Y+1	; 0x01
     45c:	9a 81       	ldd	r25, Y+2	; 0x02
     45e:	fc 01       	movw	r30, r24
     460:	86 81       	ldd	r24, Z+6	; 0x06
     462:	97 81       	ldd	r25, Z+7	; 0x07
     464:	29 81       	ldd	r18, Y+1	; 0x01
     466:	3a 81       	ldd	r19, Y+2	; 0x02
     468:	f9 01       	movw	r30, r18
     46a:	24 81       	ldd	r18, Z+4	; 0x04
     46c:	35 81       	ldd	r19, Z+5	; 0x05
     46e:	b9 01       	movw	r22, r18
     470:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <calloc>
     474:	9c 01       	movw	r18, r24
     476:	89 81       	ldd	r24, Y+1	; 0x01
     478:	9a 81       	ldd	r25, Y+2	; 0x02
     47a:	fc 01       	movw	r30, r24
     47c:	31 87       	std	Z+9, r19	; 0x09
     47e:	20 87       	std	Z+8, r18	; 0x08
	
	if(!(sem->start)){	// when the space allocation is not successful
     480:	89 81       	ldd	r24, Y+1	; 0x01
     482:	9a 81       	ldd	r25, Y+2	; 0x02
     484:	fc 01       	movw	r30, r24
     486:	80 85       	ldd	r24, Z+8	; 0x08
     488:	91 85       	ldd	r25, Z+9	; 0x09
     48a:	00 97       	sbiw	r24, 0x00	; 0
     48c:	81 f4       	brne	.+32     	; 0x4ae <OSmakeSema+0xc4>
		free(sem);
     48e:	89 81       	ldd	r24, Y+1	; 0x01
     490:	9a 81       	ldd	r25, Y+2	; 0x02
     492:	0e 94 91 11 	call	0x2322	; 0x2322 <free>
		PORTD |= 0b00010000;	// signal error
     496:	8b e2       	ldi	r24, 0x2B	; 43
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	2b e2       	ldi	r18, 0x2B	; 43
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	f9 01       	movw	r30, r18
     4a0:	20 81       	ld	r18, Z
     4a2:	20 61       	ori	r18, 0x10	; 16
     4a4:	fc 01       	movw	r30, r24
     4a6:	20 83       	st	Z, r18
		return NULL;
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	0c c0       	rjmp	.+24     	; 0x4c6 <OSmakeSema+0xdc>
	}
	
	sem->head	= sem->start;
     4ae:	89 81       	ldd	r24, Y+1	; 0x01
     4b0:	9a 81       	ldd	r25, Y+2	; 0x02
     4b2:	fc 01       	movw	r30, r24
     4b4:	20 85       	ldd	r18, Z+8	; 0x08
     4b6:	31 85       	ldd	r19, Z+9	; 0x09
     4b8:	89 81       	ldd	r24, Y+1	; 0x01
     4ba:	9a 81       	ldd	r25, Y+2	; 0x02
     4bc:	fc 01       	movw	r30, r24
     4be:	33 87       	std	Z+11, r19	; 0x0b
     4c0:	22 87       	std	Z+10, r18	; 0x0a
	
	return sem;
     4c2:	89 81       	ldd	r24, Y+1	; 0x01
     4c4:	9a 81       	ldd	r25, Y+2	; 0x02
}
     4c6:	0f 90       	pop	r0
     4c8:	0f 90       	pop	r0
     4ca:	0f 90       	pop	r0
     4cc:	0f 90       	pop	r0
     4ce:	cf 91       	pop	r28
     4d0:	df 91       	pop	r29
     4d2:	08 95       	ret

000004d4 <OSSemPend>:

// Takes a semaphore. Blocks if semaphore is 0.
void OSSemPend(OSSignal *sema)
{
     4d4:	df 93       	push	r29
     4d6:	cf 93       	push	r28
     4d8:	00 d0       	rcall	.+0      	; 0x4da <OSSemPend+0x6>
     4da:	00 d0       	rcall	.+0      	; 0x4dc <OSSemPend+0x8>
     4dc:	00 d0       	rcall	.+0      	; 0x4de <OSSemPend+0xa>
     4de:	cd b7       	in	r28, 0x3d	; 61
     4e0:	de b7       	in	r29, 0x3e	; 62
     4e2:	9e 83       	std	Y+6, r25	; 0x06
     4e4:	8d 83       	std	Y+5, r24	; 0x05
	enterCritical();
     4e6:	0e 94 e5 01 	call	0x3ca	; 0x3ca <enterCritical>
	
	// wrong type no use
	if(sema == NULL || sema->type != SEMAPHORE_TYPE){
     4ea:	8d 81       	ldd	r24, Y+5	; 0x05
     4ec:	9e 81       	ldd	r25, Y+6	; 0x06
     4ee:	00 97       	sbiw	r24, 0x00	; 0
     4f0:	39 f0       	breq	.+14     	; 0x500 <OSSemPend+0x2c>
     4f2:	8d 81       	ldd	r24, Y+5	; 0x05
     4f4:	9e 81       	ldd	r25, Y+6	; 0x06
     4f6:	fc 01       	movw	r30, r24
     4f8:	80 81       	ld	r24, Z
     4fa:	91 81       	ldd	r25, Z+1	; 0x01
     4fc:	00 97       	sbiw	r24, 0x00	; 0
     4fe:	19 f0       	breq	.+6      	; 0x506 <OSSemPend+0x32>
		leaveCritical();
     500:	0e 94 ed 01 	call	0x3da	; 0x3da <leaveCritical>
		return;
     504:	d1 c0       	rjmp	.+418    	; 0x6a8 <OSSemPend+0x1d4>
	}
	
	if(sema->num <= 0){
     506:	8d 81       	ldd	r24, Y+5	; 0x05
     508:	9e 81       	ldd	r25, Y+6	; 0x06
     50a:	fc 01       	movw	r30, r24
     50c:	82 81       	ldd	r24, Z+2	; 0x02
     50e:	93 81       	ldd	r25, Z+3	; 0x03
     510:	18 16       	cp	r1, r24
     512:	19 06       	cpc	r1, r25
     514:	0c f4       	brge	.+2      	; 0x518 <OSSemPend+0x44>
     516:	b9 c0       	rjmp	.+370    	; 0x68a <OSSemPend+0x1b6>
		// the queue used in the semaphore would be always less than the maximum
		// but check to avoid overflow
		if(-(sema->num) >= sema->size){
     518:	8d 81       	ldd	r24, Y+5	; 0x05
     51a:	9e 81       	ldd	r25, Y+6	; 0x06
     51c:	fc 01       	movw	r30, r24
     51e:	82 81       	ldd	r24, Z+2	; 0x02
     520:	93 81       	ldd	r25, Z+3	; 0x03
     522:	22 27       	eor	r18, r18
     524:	33 27       	eor	r19, r19
     526:	28 1b       	sub	r18, r24
     528:	39 0b       	sbc	r19, r25
     52a:	8d 81       	ldd	r24, Y+5	; 0x05
     52c:	9e 81       	ldd	r25, Y+6	; 0x06
     52e:	fc 01       	movw	r30, r24
     530:	86 81       	ldd	r24, Z+6	; 0x06
     532:	97 81       	ldd	r25, Z+7	; 0x07
     534:	28 17       	cp	r18, r24
     536:	39 07       	cpc	r19, r25
     538:	64 f0       	brlt	.+24     	; 0x552 <OSSemPend+0x7e>
			PORTD |= 0b00010000;	// signal error
     53a:	8b e2       	ldi	r24, 0x2B	; 43
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	2b e2       	ldi	r18, 0x2B	; 43
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	f9 01       	movw	r30, r18
     544:	20 81       	ld	r18, Z
     546:	20 61       	ori	r18, 0x10	; 16
     548:	fc 01       	movw	r30, r24
     54a:	20 83       	st	Z, r18
			leaveCritical();
     54c:	0e 94 ed 01 	call	0x3da	; 0x3da <leaveCritical>
			return;
     550:	ab c0       	rjmp	.+342    	; 0x6a8 <OSSemPend+0x1d4>
		} else if(currentTask == -1){	// when possibly os not run
     552:	80 91 0a 01 	lds	r24, 0x010A
     556:	90 91 0b 01 	lds	r25, 0x010B
     55a:	ff ef       	ldi	r31, 0xFF	; 255
     55c:	8f 3f       	cpi	r24, 0xFF	; 255
     55e:	9f 07       	cpc	r25, r31
     560:	61 f4       	brne	.+24     	; 0x57a <OSSemPend+0xa6>
			PORTD |= 0b00010000;	// signal error
     562:	8b e2       	ldi	r24, 0x2B	; 43
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	2b e2       	ldi	r18, 0x2B	; 43
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	f9 01       	movw	r30, r18
     56c:	20 81       	ld	r18, Z
     56e:	20 61       	ori	r18, 0x10	; 16
     570:	fc 01       	movw	r30, r24
     572:	20 83       	st	Z, r18
			leaveCritical();
     574:	0e 94 ed 01 	call	0x3da	; 0x3da <leaveCritical>
			return;
     578:	97 c0       	rjmp	.+302    	; 0x6a8 <OSSemPend+0x1d4>
		}
		
		// set current task to block state, save the # of current task
		
		// current blocked by this semaphore
		taskTable[currentTask].sem_counter++;
     57a:	80 91 0a 01 	lds	r24, 0x010A
     57e:	90 91 0b 01 	lds	r25, 0x010B
     582:	4f e0       	ldi	r20, 0x0F	; 15
     584:	51 e0       	ldi	r21, 0x01	; 1
     586:	84 9f       	mul	r24, r20
     588:	90 01       	movw	r18, r0
     58a:	85 9f       	mul	r24, r21
     58c:	30 0d       	add	r19, r0
     58e:	94 9f       	mul	r25, r20
     590:	30 0d       	add	r19, r0
     592:	11 24       	eor	r1, r1
     594:	27 58       	subi	r18, 0x87	; 135
     596:	3d 4f       	sbci	r19, 0xFD	; 253
     598:	f9 01       	movw	r30, r18
     59a:	20 81       	ld	r18, Z
     59c:	31 81       	ldd	r19, Z+1	; 0x01
     59e:	2f 5f       	subi	r18, 0xFF	; 255
     5a0:	3f 4f       	sbci	r19, 0xFF	; 255
     5a2:	6f e0       	ldi	r22, 0x0F	; 15
     5a4:	71 e0       	ldi	r23, 0x01	; 1
     5a6:	86 9f       	mul	r24, r22
     5a8:	a0 01       	movw	r20, r0
     5aa:	87 9f       	mul	r24, r23
     5ac:	50 0d       	add	r21, r0
     5ae:	96 9f       	mul	r25, r22
     5b0:	50 0d       	add	r21, r0
     5b2:	11 24       	eor	r1, r1
     5b4:	ca 01       	movw	r24, r20
     5b6:	87 58       	subi	r24, 0x87	; 135
     5b8:	9d 4f       	sbci	r25, 0xFD	; 253
     5ba:	fc 01       	movw	r30, r24
     5bc:	31 83       	std	Z+1, r19	; 0x01
     5be:	20 83       	st	Z, r18
		
		unsigned shift = 
			(unsigned)(sema->head - sema->start + (-sema->num * sema->esize)) %
     5c0:	8d 81       	ldd	r24, Y+5	; 0x05
     5c2:	9e 81       	ldd	r25, Y+6	; 0x06
     5c4:	fc 01       	movw	r30, r24
     5c6:	82 85       	ldd	r24, Z+10	; 0x0a
     5c8:	93 85       	ldd	r25, Z+11	; 0x0b
     5ca:	9c 01       	movw	r18, r24
     5cc:	8d 81       	ldd	r24, Y+5	; 0x05
     5ce:	9e 81       	ldd	r25, Y+6	; 0x06
     5d0:	fc 01       	movw	r30, r24
     5d2:	80 85       	ldd	r24, Z+8	; 0x08
     5d4:	91 85       	ldd	r25, Z+9	; 0x09
     5d6:	a9 01       	movw	r20, r18
     5d8:	48 1b       	sub	r20, r24
     5da:	59 0b       	sbc	r21, r25
     5dc:	ca 01       	movw	r24, r20
     5de:	95 95       	asr	r25
     5e0:	87 95       	ror	r24
     5e2:	9c 01       	movw	r18, r24
     5e4:	8d 81       	ldd	r24, Y+5	; 0x05
     5e6:	9e 81       	ldd	r25, Y+6	; 0x06
     5e8:	fc 01       	movw	r30, r24
     5ea:	82 81       	ldd	r24, Z+2	; 0x02
     5ec:	93 81       	ldd	r25, Z+3	; 0x03
     5ee:	66 27       	eor	r22, r22
     5f0:	77 27       	eor	r23, r23
     5f2:	68 1b       	sub	r22, r24
     5f4:	79 0b       	sbc	r23, r25
     5f6:	8d 81       	ldd	r24, Y+5	; 0x05
     5f8:	9e 81       	ldd	r25, Y+6	; 0x06
     5fa:	fc 01       	movw	r30, r24
     5fc:	44 81       	ldd	r20, Z+4	; 0x04
     5fe:	55 81       	ldd	r21, Z+5	; 0x05
     600:	64 9f       	mul	r22, r20
     602:	c0 01       	movw	r24, r0
     604:	65 9f       	mul	r22, r21
     606:	90 0d       	add	r25, r0
     608:	74 9f       	mul	r23, r20
     60a:	90 0d       	add	r25, r0
     60c:	11 24       	eor	r1, r1
     60e:	82 0f       	add	r24, r18
     610:	93 1f       	adc	r25, r19
			(unsigned)(sema->size * sema->esize);
     612:	2d 81       	ldd	r18, Y+5	; 0x05
     614:	3e 81       	ldd	r19, Y+6	; 0x06
     616:	f9 01       	movw	r30, r18
     618:	66 81       	ldd	r22, Z+6	; 0x06
     61a:	77 81       	ldd	r23, Z+7	; 0x07
     61c:	2d 81       	ldd	r18, Y+5	; 0x05
     61e:	3e 81       	ldd	r19, Y+6	; 0x06
     620:	f9 01       	movw	r30, r18
     622:	44 81       	ldd	r20, Z+4	; 0x04
     624:	55 81       	ldd	r21, Z+5	; 0x05
     626:	64 9f       	mul	r22, r20
     628:	90 01       	movw	r18, r0
     62a:	65 9f       	mul	r22, r21
     62c:	30 0d       	add	r19, r0
     62e:	74 9f       	mul	r23, r20
     630:	30 0d       	add	r19, r0
     632:	11 24       	eor	r1, r1
		// set current task to block state, save the # of current task
		
		// current blocked by this semaphore
		taskTable[currentTask].sem_counter++;
		
		unsigned shift = 
     634:	b9 01       	movw	r22, r18
     636:	0e 94 75 10 	call	0x20ea	; 0x20ea <__udivmodhi4>
     63a:	9a 83       	std	Y+2, r25	; 0x02
     63c:	89 83       	std	Y+1, r24	; 0x01
			(unsigned)(sema->head - sema->start + (-sema->num * sema->esize)) %
			(unsigned)(sema->size * sema->esize);
		void *currentPos = sema->start + shift;
     63e:	8d 81       	ldd	r24, Y+5	; 0x05
     640:	9e 81       	ldd	r25, Y+6	; 0x06
     642:	fc 01       	movw	r30, r24
     644:	20 85       	ldd	r18, Z+8	; 0x08
     646:	31 85       	ldd	r19, Z+9	; 0x09
     648:	89 81       	ldd	r24, Y+1	; 0x01
     64a:	9a 81       	ldd	r25, Y+2	; 0x02
     64c:	88 0f       	add	r24, r24
     64e:	99 1f       	adc	r25, r25
     650:	82 0f       	add	r24, r18
     652:	93 1f       	adc	r25, r19
     654:	9c 83       	std	Y+4, r25	; 0x04
     656:	8b 83       	std	Y+3, r24	; 0x03
		
		// then push the currentTask id into queue
		*(int*)(currentPos) = currentTask;
     658:	8b 81       	ldd	r24, Y+3	; 0x03
     65a:	9c 81       	ldd	r25, Y+4	; 0x04
     65c:	20 91 0a 01 	lds	r18, 0x010A
     660:	30 91 0b 01 	lds	r19, 0x010B
     664:	fc 01       	movw	r30, r24
     666:	31 83       	std	Z+1, r19	; 0x01
     668:	20 83       	st	Z, r18
		
		sema->num--;
     66a:	8d 81       	ldd	r24, Y+5	; 0x05
     66c:	9e 81       	ldd	r25, Y+6	; 0x06
     66e:	fc 01       	movw	r30, r24
     670:	82 81       	ldd	r24, Z+2	; 0x02
     672:	93 81       	ldd	r25, Z+3	; 0x03
     674:	9c 01       	movw	r18, r24
     676:	21 50       	subi	r18, 0x01	; 1
     678:	30 40       	sbci	r19, 0x00	; 0
     67a:	8d 81       	ldd	r24, Y+5	; 0x05
     67c:	9e 81       	ldd	r25, Y+6	; 0x06
     67e:	fc 01       	movw	r30, r24
     680:	33 83       	std	Z+3, r19	; 0x03
     682:	22 83       	std	Z+2, r18	; 0x02

		OSSwapTask();
     684:	0e 94 de 07 	call	0xfbc	; 0xfbc <OSSwapTask>
     688:	0d c0       	rjmp	.+26     	; 0x6a4 <OSSemPend+0x1d0>
	} else (sema->num)--;
     68a:	8d 81       	ldd	r24, Y+5	; 0x05
     68c:	9e 81       	ldd	r25, Y+6	; 0x06
     68e:	fc 01       	movw	r30, r24
     690:	82 81       	ldd	r24, Z+2	; 0x02
     692:	93 81       	ldd	r25, Z+3	; 0x03
     694:	9c 01       	movw	r18, r24
     696:	21 50       	subi	r18, 0x01	; 1
     698:	30 40       	sbci	r19, 0x00	; 0
     69a:	8d 81       	ldd	r24, Y+5	; 0x05
     69c:	9e 81       	ldd	r25, Y+6	; 0x06
     69e:	fc 01       	movw	r30, r24
     6a0:	33 83       	std	Z+3, r19	; 0x03
     6a2:	22 83       	std	Z+2, r18	; 0x02
	
	leaveCritical();
     6a4:	0e 94 ed 01 	call	0x3da	; 0x3da <leaveCritical>
}
     6a8:	26 96       	adiw	r28, 0x06	; 6
     6aa:	0f b6       	in	r0, 0x3f	; 63
     6ac:	f8 94       	cli
     6ae:	de bf       	out	0x3e, r29	; 62
     6b0:	0f be       	out	0x3f, r0	; 63
     6b2:	cd bf       	out	0x3d, r28	; 61
     6b4:	cf 91       	pop	r28
     6b6:	df 91       	pop	r29
     6b8:	08 95       	ret

000006ba <OSSemPost>:

// Posts a semaphore.
void OSSemPost(OSSignal *sema)
{
     6ba:	df 93       	push	r29
     6bc:	cf 93       	push	r28
     6be:	00 d0       	rcall	.+0      	; 0x6c0 <OSSemPost+0x6>
     6c0:	00 d0       	rcall	.+0      	; 0x6c2 <OSSemPost+0x8>
     6c2:	cd b7       	in	r28, 0x3d	; 61
     6c4:	de b7       	in	r29, 0x3e	; 62
     6c6:	9c 83       	std	Y+4, r25	; 0x04
     6c8:	8b 83       	std	Y+3, r24	; 0x03
	enterCritical();
     6ca:	0e 94 e5 01 	call	0x3ca	; 0x3ca <enterCritical>
	
	// wrong type no use
	if(sema == NULL || sema->type != SEMAPHORE_TYPE){
     6ce:	8b 81       	ldd	r24, Y+3	; 0x03
     6d0:	9c 81       	ldd	r25, Y+4	; 0x04
     6d2:	00 97       	sbiw	r24, 0x00	; 0
     6d4:	41 f0       	breq	.+16     	; 0x6e6 <OSSemPost+0x2c>
     6d6:	8b 81       	ldd	r24, Y+3	; 0x03
     6d8:	9c 81       	ldd	r25, Y+4	; 0x04
     6da:	dc 01       	movw	r26, r24
     6dc:	8d 91       	ld	r24, X+
     6de:	9c 91       	ld	r25, X
     6e0:	11 97       	sbiw	r26, 0x01	; 1
     6e2:	00 97       	sbiw	r24, 0x00	; 0
     6e4:	19 f0       	breq	.+6      	; 0x6ec <OSSemPost+0x32>
		leaveCritical();
     6e6:	0e 94 ed 01 	call	0x3da	; 0x3da <leaveCritical>
		return;
     6ea:	bb c0       	rjmp	.+374    	; 0x862 <OSSemPost+0x1a8>
	}
	
	if(sema->num < 0){	// only when queue has element
     6ec:	8b 81       	ldd	r24, Y+3	; 0x03
     6ee:	9c 81       	ldd	r25, Y+4	; 0x04
     6f0:	fc 01       	movw	r30, r24
     6f2:	82 81       	ldd	r24, Z+2	; 0x02
     6f4:	93 81       	ldd	r25, Z+3	; 0x03
     6f6:	99 23       	and	r25, r25
     6f8:	0c f0       	brlt	.+2      	; 0x6fc <OSSemPost+0x42>
     6fa:	99 c0       	rjmp	.+306    	; 0x82e <OSSemPost+0x174>
		if(currentTask == -1){	// when possibly os not run
     6fc:	80 91 0a 01 	lds	r24, 0x010A
     700:	90 91 0b 01 	lds	r25, 0x010B
     704:	ff ef       	ldi	r31, 0xFF	; 255
     706:	8f 3f       	cpi	r24, 0xFF	; 255
     708:	9f 07       	cpc	r25, r31
     70a:	19 f4       	brne	.+6      	; 0x712 <OSSemPost+0x58>
			//PORTD |= 0b00010000;	// signal error	TODO
			leaveCritical();
     70c:	0e 94 ed 01 	call	0x3da	; 0x3da <leaveCritical>
			return;
     710:	a8 c0       	rjmp	.+336    	; 0x862 <OSSemPost+0x1a8>
		}
		
		// pop the element from the head
		int taskId = *(int*)sema->head;
     712:	8b 81       	ldd	r24, Y+3	; 0x03
     714:	9c 81       	ldd	r25, Y+4	; 0x04
     716:	dc 01       	movw	r26, r24
     718:	1a 96       	adiw	r26, 0x0a	; 10
     71a:	8d 91       	ld	r24, X+
     71c:	9c 91       	ld	r25, X
     71e:	1b 97       	sbiw	r26, 0x0b	; 11
     720:	fc 01       	movw	r30, r24
     722:	80 81       	ld	r24, Z
     724:	91 81       	ldd	r25, Z+1	; 0x01
     726:	9a 83       	std	Y+2, r25	; 0x02
     728:	89 83       	std	Y+1, r24	; 0x01
		
		// decrease the counter because of current semaphore
		taskTable[taskId].sem_counter--;
     72a:	49 81       	ldd	r20, Y+1	; 0x01
     72c:	5a 81       	ldd	r21, Y+2	; 0x02
     72e:	2f e0       	ldi	r18, 0x0F	; 15
     730:	31 e0       	ldi	r19, 0x01	; 1
     732:	42 9f       	mul	r20, r18
     734:	c0 01       	movw	r24, r0
     736:	43 9f       	mul	r20, r19
     738:	90 0d       	add	r25, r0
     73a:	52 9f       	mul	r21, r18
     73c:	90 0d       	add	r25, r0
     73e:	11 24       	eor	r1, r1
     740:	87 58       	subi	r24, 0x87	; 135
     742:	9d 4f       	sbci	r25, 0xFD	; 253
     744:	dc 01       	movw	r26, r24
     746:	8d 91       	ld	r24, X+
     748:	9c 91       	ld	r25, X
     74a:	9c 01       	movw	r18, r24
     74c:	21 50       	subi	r18, 0x01	; 1
     74e:	30 40       	sbci	r19, 0x00	; 0
     750:	69 81       	ldd	r22, Y+1	; 0x01
     752:	7a 81       	ldd	r23, Y+2	; 0x02
     754:	4f e0       	ldi	r20, 0x0F	; 15
     756:	51 e0       	ldi	r21, 0x01	; 1
     758:	64 9f       	mul	r22, r20
     75a:	c0 01       	movw	r24, r0
     75c:	65 9f       	mul	r22, r21
     75e:	90 0d       	add	r25, r0
     760:	74 9f       	mul	r23, r20
     762:	90 0d       	add	r25, r0
     764:	11 24       	eor	r1, r1
     766:	87 58       	subi	r24, 0x87	; 135
     768:	9d 4f       	sbci	r25, 0xFD	; 253
     76a:	fc 01       	movw	r30, r24
     76c:	31 83       	std	Z+1, r19	; 0x01
     76e:	20 83       	st	Z, r18
		
		// then update the queue
		sema->num++;
     770:	8b 81       	ldd	r24, Y+3	; 0x03
     772:	9c 81       	ldd	r25, Y+4	; 0x04
     774:	dc 01       	movw	r26, r24
     776:	12 96       	adiw	r26, 0x02	; 2
     778:	8d 91       	ld	r24, X+
     77a:	9c 91       	ld	r25, X
     77c:	13 97       	sbiw	r26, 0x03	; 3
     77e:	9c 01       	movw	r18, r24
     780:	2f 5f       	subi	r18, 0xFF	; 255
     782:	3f 4f       	sbci	r19, 0xFF	; 255
     784:	8b 81       	ldd	r24, Y+3	; 0x03
     786:	9c 81       	ldd	r25, Y+4	; 0x04
     788:	fc 01       	movw	r30, r24
     78a:	33 83       	std	Z+3, r19	; 0x03
     78c:	22 83       	std	Z+2, r18	; 0x02
		
		sema->head += sema->esize;
     78e:	8b 81       	ldd	r24, Y+3	; 0x03
     790:	9c 81       	ldd	r25, Y+4	; 0x04
     792:	dc 01       	movw	r26, r24
     794:	1a 96       	adiw	r26, 0x0a	; 10
     796:	2d 91       	ld	r18, X+
     798:	3c 91       	ld	r19, X
     79a:	1b 97       	sbiw	r26, 0x0b	; 11
     79c:	8b 81       	ldd	r24, Y+3	; 0x03
     79e:	9c 81       	ldd	r25, Y+4	; 0x04
     7a0:	fc 01       	movw	r30, r24
     7a2:	84 81       	ldd	r24, Z+4	; 0x04
     7a4:	95 81       	ldd	r25, Z+5	; 0x05
     7a6:	88 0f       	add	r24, r24
     7a8:	99 1f       	adc	r25, r25
     7aa:	28 0f       	add	r18, r24
     7ac:	39 1f       	adc	r19, r25
     7ae:	8b 81       	ldd	r24, Y+3	; 0x03
     7b0:	9c 81       	ldd	r25, Y+4	; 0x04
     7b2:	dc 01       	movw	r26, r24
     7b4:	1b 96       	adiw	r26, 0x0b	; 11
     7b6:	3c 93       	st	X, r19
     7b8:	2e 93       	st	-X, r18
     7ba:	1a 97       	sbiw	r26, 0x0a	; 10
		if(sema->head == sema->start + (-sema->num * sema->esize) ){
     7bc:	8b 81       	ldd	r24, Y+3	; 0x03
     7be:	9c 81       	ldd	r25, Y+4	; 0x04
     7c0:	fc 01       	movw	r30, r24
     7c2:	22 85       	ldd	r18, Z+10	; 0x0a
     7c4:	33 85       	ldd	r19, Z+11	; 0x0b
     7c6:	8b 81       	ldd	r24, Y+3	; 0x03
     7c8:	9c 81       	ldd	r25, Y+4	; 0x04
     7ca:	dc 01       	movw	r26, r24
     7cc:	18 96       	adiw	r26, 0x08	; 8
     7ce:	4d 91       	ld	r20, X+
     7d0:	5c 91       	ld	r21, X
     7d2:	19 97       	sbiw	r26, 0x09	; 9
     7d4:	8b 81       	ldd	r24, Y+3	; 0x03
     7d6:	9c 81       	ldd	r25, Y+4	; 0x04
     7d8:	fc 01       	movw	r30, r24
     7da:	82 81       	ldd	r24, Z+2	; 0x02
     7dc:	93 81       	ldd	r25, Z+3	; 0x03
     7de:	ee 27       	eor	r30, r30
     7e0:	ff 27       	eor	r31, r31
     7e2:	e8 1b       	sub	r30, r24
     7e4:	f9 0b       	sbc	r31, r25
     7e6:	8b 81       	ldd	r24, Y+3	; 0x03
     7e8:	9c 81       	ldd	r25, Y+4	; 0x04
     7ea:	dc 01       	movw	r26, r24
     7ec:	14 96       	adiw	r26, 0x04	; 4
     7ee:	6d 91       	ld	r22, X+
     7f0:	7c 91       	ld	r23, X
     7f2:	15 97       	sbiw	r26, 0x05	; 5
     7f4:	e6 9f       	mul	r30, r22
     7f6:	c0 01       	movw	r24, r0
     7f8:	e7 9f       	mul	r30, r23
     7fa:	90 0d       	add	r25, r0
     7fc:	f6 9f       	mul	r31, r22
     7fe:	90 0d       	add	r25, r0
     800:	11 24       	eor	r1, r1
     802:	88 0f       	add	r24, r24
     804:	99 1f       	adc	r25, r25
     806:	84 0f       	add	r24, r20
     808:	95 1f       	adc	r25, r21
     80a:	28 17       	cp	r18, r24
     80c:	39 07       	cpc	r19, r25
     80e:	61 f4       	brne	.+24     	; 0x828 <OSSemPost+0x16e>
			sema->head = sema->start;
     810:	8b 81       	ldd	r24, Y+3	; 0x03
     812:	9c 81       	ldd	r25, Y+4	; 0x04
     814:	fc 01       	movw	r30, r24
     816:	20 85       	ldd	r18, Z+8	; 0x08
     818:	31 85       	ldd	r19, Z+9	; 0x09
     81a:	8b 81       	ldd	r24, Y+3	; 0x03
     81c:	9c 81       	ldd	r25, Y+4	; 0x04
     81e:	dc 01       	movw	r26, r24
     820:	1b 96       	adiw	r26, 0x0b	; 11
     822:	3c 93       	st	X, r19
     824:	2e 93       	st	-X, r18
     826:	1a 97       	sbiw	r26, 0x0a	; 10
		}
		
		OSSwapTask();
     828:	0e 94 de 07 	call	0xfbc	; 0xfbc <OSSwapTask>
     82c:	18 c0       	rjmp	.+48     	; 0x85e <OSSemPost+0x1a4>
	} else{
		// set an upper limit to avoid overflow
		if(sema->num <= 10000)	(sema->num)++;
     82e:	8b 81       	ldd	r24, Y+3	; 0x03
     830:	9c 81       	ldd	r25, Y+4	; 0x04
     832:	fc 01       	movw	r30, r24
     834:	82 81       	ldd	r24, Z+2	; 0x02
     836:	93 81       	ldd	r25, Z+3	; 0x03
     838:	f7 e2       	ldi	r31, 0x27	; 39
     83a:	81 31       	cpi	r24, 0x11	; 17
     83c:	9f 07       	cpc	r25, r31
     83e:	7c f4       	brge	.+30     	; 0x85e <OSSemPost+0x1a4>
     840:	8b 81       	ldd	r24, Y+3	; 0x03
     842:	9c 81       	ldd	r25, Y+4	; 0x04
     844:	dc 01       	movw	r26, r24
     846:	12 96       	adiw	r26, 0x02	; 2
     848:	8d 91       	ld	r24, X+
     84a:	9c 91       	ld	r25, X
     84c:	13 97       	sbiw	r26, 0x03	; 3
     84e:	9c 01       	movw	r18, r24
     850:	2f 5f       	subi	r18, 0xFF	; 255
     852:	3f 4f       	sbci	r19, 0xFF	; 255
     854:	8b 81       	ldd	r24, Y+3	; 0x03
     856:	9c 81       	ldd	r25, Y+4	; 0x04
     858:	fc 01       	movw	r30, r24
     85a:	33 83       	std	Z+3, r19	; 0x03
     85c:	22 83       	std	Z+2, r18	; 0x02
	}
	
	leaveCritical();
     85e:	0e 94 ed 01 	call	0x3da	; 0x3da <leaveCritical>
}
     862:	0f 90       	pop	r0
     864:	0f 90       	pop	r0
     866:	0f 90       	pop	r0
     868:	0f 90       	pop	r0
     86a:	cf 91       	pop	r28
     86c:	df 91       	pop	r29
     86e:	08 95       	ret

00000870 <OSmakeQ>:
#ifdef OSIncludeQueues

// qsize=number of elements in the queue. esize=size of each element. So calling makeQ(10, sizeof(int)) would produce a queue of 10 elements, 
// with each element being the size of an integer.
OSSignal *OSmakeQ(int qsize, int esize)
{
     870:	df 93       	push	r29
     872:	cf 93       	push	r28
     874:	00 d0       	rcall	.+0      	; 0x876 <OSmakeQ+0x6>
     876:	00 d0       	rcall	.+0      	; 0x878 <OSmakeQ+0x8>
     878:	00 d0       	rcall	.+0      	; 0x87a <OSmakeQ+0xa>
     87a:	cd b7       	in	r28, 0x3d	; 61
     87c:	de b7       	in	r29, 0x3e	; 62
     87e:	9c 83       	std	Y+4, r25	; 0x04
     880:	8b 83       	std	Y+3, r24	; 0x03
     882:	7e 83       	std	Y+6, r23	; 0x06
     884:	6d 83       	std	Y+5, r22	; 0x05
	// use the q_sema
	if(q_sema_empty == NULL)	q_sema_empty = (OSSignal*)OSmakeSema(0);
     886:	80 91 62 01 	lds	r24, 0x0162
     88a:	90 91 63 01 	lds	r25, 0x0163
     88e:	00 97       	sbiw	r24, 0x00	; 0
     890:	41 f4       	brne	.+16     	; 0x8a2 <OSmakeQ+0x32>
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	0e 94 f5 01 	call	0x3ea	; 0x3ea <OSmakeSema>
     89a:	90 93 63 01 	sts	0x0163, r25
     89e:	80 93 62 01 	sts	0x0162, r24
	if(q_sema_full == NULL)		q_sema_full  = (OSSignal*)OSmakeSema(0);
     8a2:	80 91 64 01 	lds	r24, 0x0164
     8a6:	90 91 65 01 	lds	r25, 0x0165
     8aa:	00 97       	sbiw	r24, 0x00	; 0
     8ac:	41 f4       	brne	.+16     	; 0x8be <OSmakeQ+0x4e>
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	0e 94 f5 01 	call	0x3ea	; 0x3ea <OSmakeSema>
     8b6:	90 93 65 01 	sts	0x0165, r25
     8ba:	80 93 64 01 	sts	0x0164, r24
	if(q_sema_empty == NULL	||	q_sema_full == NULL){	// semaphore creation failed
     8be:	80 91 62 01 	lds	r24, 0x0162
     8c2:	90 91 63 01 	lds	r25, 0x0163
     8c6:	00 97       	sbiw	r24, 0x00	; 0
     8c8:	31 f0       	breq	.+12     	; 0x8d6 <OSmakeQ+0x66>
     8ca:	80 91 64 01 	lds	r24, 0x0164
     8ce:	90 91 65 01 	lds	r25, 0x0165
     8d2:	00 97       	sbiw	r24, 0x00	; 0
     8d4:	61 f4       	brne	.+24     	; 0x8ee <OSmakeQ+0x7e>
		PORTD |= 0b00010000;
     8d6:	8b e2       	ldi	r24, 0x2B	; 43
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	2b e2       	ldi	r18, 0x2B	; 43
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	f9 01       	movw	r30, r18
     8e0:	20 81       	ld	r18, Z
     8e2:	20 61       	ori	r18, 0x10	; 16
     8e4:	fc 01       	movw	r30, r24
     8e6:	20 83       	st	Z, r18
		return NULL;
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	69 c0       	rjmp	.+210    	; 0x9c0 <__stack+0xc1>
	}
	
	OSSignal *que = (OSSignal *) malloc(sizeof(OSSignal));
     8ee:	8c e0       	ldi	r24, 0x0C	; 12
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	0e 94 f7 10 	call	0x21ee	; 0x21ee <malloc>
     8f6:	9a 83       	std	Y+2, r25	; 0x02
     8f8:	89 83       	std	Y+1, r24	; 0x01
	if(!que){	// when the space allocation is not successful
     8fa:	89 81       	ldd	r24, Y+1	; 0x01
     8fc:	9a 81       	ldd	r25, Y+2	; 0x02
     8fe:	00 97       	sbiw	r24, 0x00	; 0
     900:	61 f4       	brne	.+24     	; 0x91a <__stack+0x1b>
		PORTD |= 0b00010000;	// signal error
     902:	8b e2       	ldi	r24, 0x2B	; 43
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	2b e2       	ldi	r18, 0x2B	; 43
     908:	30 e0       	ldi	r19, 0x00	; 0
     90a:	f9 01       	movw	r30, r18
     90c:	20 81       	ld	r18, Z
     90e:	20 61       	ori	r18, 0x10	; 16
     910:	fc 01       	movw	r30, r24
     912:	20 83       	st	Z, r18
		return NULL;
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	53 c0       	rjmp	.+166    	; 0x9c0 <__stack+0xc1>
	}
	
	que->type	= QUEUE_TYPE;
     91a:	89 81       	ldd	r24, Y+1	; 0x01
     91c:	9a 81       	ldd	r25, Y+2	; 0x02
     91e:	21 e0       	ldi	r18, 0x01	; 1
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	fc 01       	movw	r30, r24
     924:	31 83       	std	Z+1, r19	; 0x01
     926:	20 83       	st	Z, r18
	que->num	= 0;	// initially empty
     928:	89 81       	ldd	r24, Y+1	; 0x01
     92a:	9a 81       	ldd	r25, Y+2	; 0x02
     92c:	fc 01       	movw	r30, r24
     92e:	13 82       	std	Z+3, r1	; 0x03
     930:	12 82       	std	Z+2, r1	; 0x02
	que->esize	= esize/sizeof(int);	// store the task id
     932:	8d 81       	ldd	r24, Y+5	; 0x05
     934:	9e 81       	ldd	r25, Y+6	; 0x06
     936:	96 95       	lsr	r25
     938:	87 95       	ror	r24
     93a:	9c 01       	movw	r18, r24
     93c:	89 81       	ldd	r24, Y+1	; 0x01
     93e:	9a 81       	ldd	r25, Y+2	; 0x02
     940:	fc 01       	movw	r30, r24
     942:	35 83       	std	Z+5, r19	; 0x05
     944:	24 83       	std	Z+4, r18	; 0x04
	que->size	= qsize;	// the maximum is the number of tasks system has
     946:	89 81       	ldd	r24, Y+1	; 0x01
     948:	9a 81       	ldd	r25, Y+2	; 0x02
     94a:	2b 81       	ldd	r18, Y+3	; 0x03
     94c:	3c 81       	ldd	r19, Y+4	; 0x04
     94e:	fc 01       	movw	r30, r24
     950:	37 83       	std	Z+7, r19	; 0x07
     952:	26 83       	std	Z+6, r18	; 0x06
	que->start	= calloc(que->size,que->esize);
     954:	89 81       	ldd	r24, Y+1	; 0x01
     956:	9a 81       	ldd	r25, Y+2	; 0x02
     958:	fc 01       	movw	r30, r24
     95a:	86 81       	ldd	r24, Z+6	; 0x06
     95c:	97 81       	ldd	r25, Z+7	; 0x07
     95e:	29 81       	ldd	r18, Y+1	; 0x01
     960:	3a 81       	ldd	r19, Y+2	; 0x02
     962:	f9 01       	movw	r30, r18
     964:	24 81       	ldd	r18, Z+4	; 0x04
     966:	35 81       	ldd	r19, Z+5	; 0x05
     968:	b9 01       	movw	r22, r18
     96a:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <calloc>
     96e:	9c 01       	movw	r18, r24
     970:	89 81       	ldd	r24, Y+1	; 0x01
     972:	9a 81       	ldd	r25, Y+2	; 0x02
     974:	fc 01       	movw	r30, r24
     976:	31 87       	std	Z+9, r19	; 0x09
     978:	20 87       	std	Z+8, r18	; 0x08
	
	if(!(que->start)){	// when the space allocation is not successful
     97a:	89 81       	ldd	r24, Y+1	; 0x01
     97c:	9a 81       	ldd	r25, Y+2	; 0x02
     97e:	fc 01       	movw	r30, r24
     980:	80 85       	ldd	r24, Z+8	; 0x08
     982:	91 85       	ldd	r25, Z+9	; 0x09
     984:	00 97       	sbiw	r24, 0x00	; 0
     986:	81 f4       	brne	.+32     	; 0x9a8 <__stack+0xa9>
		free(que);
     988:	89 81       	ldd	r24, Y+1	; 0x01
     98a:	9a 81       	ldd	r25, Y+2	; 0x02
     98c:	0e 94 91 11 	call	0x2322	; 0x2322 <free>
		PORTD |= 0b00010000;	// signal error
     990:	8b e2       	ldi	r24, 0x2B	; 43
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	2b e2       	ldi	r18, 0x2B	; 43
     996:	30 e0       	ldi	r19, 0x00	; 0
     998:	f9 01       	movw	r30, r18
     99a:	20 81       	ld	r18, Z
     99c:	20 61       	ori	r18, 0x10	; 16
     99e:	fc 01       	movw	r30, r24
     9a0:	20 83       	st	Z, r18
		return NULL;
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	0c c0       	rjmp	.+24     	; 0x9c0 <__stack+0xc1>
	}
	
	que->head	= que->start;
     9a8:	89 81       	ldd	r24, Y+1	; 0x01
     9aa:	9a 81       	ldd	r25, Y+2	; 0x02
     9ac:	fc 01       	movw	r30, r24
     9ae:	20 85       	ldd	r18, Z+8	; 0x08
     9b0:	31 85       	ldd	r19, Z+9	; 0x09
     9b2:	89 81       	ldd	r24, Y+1	; 0x01
     9b4:	9a 81       	ldd	r25, Y+2	; 0x02
     9b6:	fc 01       	movw	r30, r24
     9b8:	33 87       	std	Z+11, r19	; 0x0b
     9ba:	22 87       	std	Z+10, r18	; 0x0a
	
	return que;
     9bc:	89 81       	ldd	r24, Y+1	; 0x01
     9be:	9a 81       	ldd	r25, Y+2	; 0x02
}
     9c0:	26 96       	adiw	r28, 0x06	; 6
     9c2:	0f b6       	in	r0, 0x3f	; 63
     9c4:	f8 94       	cli
     9c6:	de bf       	out	0x3e, r29	; 62
     9c8:	0f be       	out	0x3f, r0	; 63
     9ca:	cd bf       	out	0x3d, r28	; 61
     9cc:	cf 91       	pop	r28
     9ce:	df 91       	pop	r29
     9d0:	08 95       	ret

000009d2 <OSenq>:

// Inserts item into queue q
void OSenq(OSSignal *q, void *item)
{
     9d2:	df 93       	push	r29
     9d4:	cf 93       	push	r28
     9d6:	cd b7       	in	r28, 0x3d	; 61
     9d8:	de b7       	in	r29, 0x3e	; 62
     9da:	2a 97       	sbiw	r28, 0x0a	; 10
     9dc:	0f b6       	in	r0, 0x3f	; 63
     9de:	f8 94       	cli
     9e0:	de bf       	out	0x3e, r29	; 62
     9e2:	0f be       	out	0x3f, r0	; 63
     9e4:	cd bf       	out	0x3d, r28	; 61
     9e6:	98 87       	std	Y+8, r25	; 0x08
     9e8:	8f 83       	std	Y+7, r24	; 0x07
     9ea:	7a 87       	std	Y+10, r23	; 0x0a
     9ec:	69 87       	std	Y+9, r22	; 0x09
	enterCritical();
     9ee:	0e 94 e5 01 	call	0x3ca	; 0x3ca <enterCritical>
	
	// wrong type no use
	if(q == NULL || q->type != QUEUE_TYPE){
     9f2:	8f 81       	ldd	r24, Y+7	; 0x07
     9f4:	98 85       	ldd	r25, Y+8	; 0x08
     9f6:	00 97       	sbiw	r24, 0x00	; 0
     9f8:	41 f0       	breq	.+16     	; 0xa0a <OSenq+0x38>
     9fa:	8f 81       	ldd	r24, Y+7	; 0x07
     9fc:	98 85       	ldd	r25, Y+8	; 0x08
     9fe:	fc 01       	movw	r30, r24
     a00:	80 81       	ld	r24, Z
     a02:	91 81       	ldd	r25, Z+1	; 0x01
     a04:	81 30       	cpi	r24, 0x01	; 1
     a06:	91 05       	cpc	r25, r1
     a08:	61 f0       	breq	.+24     	; 0xa22 <OSenq+0x50>
		leaveCritical();
     a0a:	0e 94 ed 01 	call	0x3da	; 0x3da <leaveCritical>
		return;
     a0e:	98 c0       	rjmp	.+304    	; 0xb40 <OSenq+0x16e>
	}
	
	while(q->num == q->size){	// queue full
		//leaveCritical();	// can let others to run here
		OSSemPend(q_sema_full);
     a10:	80 91 64 01 	lds	r24, 0x0164
     a14:	90 91 65 01 	lds	r25, 0x0165
     a18:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <OSSemPend>
		enterCritical();	// but after the pend, would go back to run
     a1c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <enterCritical>
     a20:	01 c0       	rjmp	.+2      	; 0xa24 <OSenq+0x52>
	if(q == NULL || q->type != QUEUE_TYPE){
		leaveCritical();
		return;
	}
	
	while(q->num == q->size){	// queue full
     a22:	00 00       	nop
     a24:	8f 81       	ldd	r24, Y+7	; 0x07
     a26:	98 85       	ldd	r25, Y+8	; 0x08
     a28:	fc 01       	movw	r30, r24
     a2a:	22 81       	ldd	r18, Z+2	; 0x02
     a2c:	33 81       	ldd	r19, Z+3	; 0x03
     a2e:	8f 81       	ldd	r24, Y+7	; 0x07
     a30:	98 85       	ldd	r25, Y+8	; 0x08
     a32:	fc 01       	movw	r30, r24
     a34:	86 81       	ldd	r24, Z+6	; 0x06
     a36:	97 81       	ldd	r25, Z+7	; 0x07
     a38:	28 17       	cp	r18, r24
     a3a:	39 07       	cpc	r19, r25
     a3c:	49 f3       	breq	.-46     	; 0xa10 <OSenq+0x3e>
		OSSemPend(q_sema_full);
		enterCritical();	// but after the pend, would go back to run
	}
	
	unsigned shift = 
		(unsigned)(q->head - q->start + (q->num * q->esize)) %
     a3e:	8f 81       	ldd	r24, Y+7	; 0x07
     a40:	98 85       	ldd	r25, Y+8	; 0x08
     a42:	fc 01       	movw	r30, r24
     a44:	82 85       	ldd	r24, Z+10	; 0x0a
     a46:	93 85       	ldd	r25, Z+11	; 0x0b
     a48:	9c 01       	movw	r18, r24
     a4a:	8f 81       	ldd	r24, Y+7	; 0x07
     a4c:	98 85       	ldd	r25, Y+8	; 0x08
     a4e:	fc 01       	movw	r30, r24
     a50:	80 85       	ldd	r24, Z+8	; 0x08
     a52:	91 85       	ldd	r25, Z+9	; 0x09
     a54:	a9 01       	movw	r20, r18
     a56:	48 1b       	sub	r20, r24
     a58:	59 0b       	sbc	r21, r25
     a5a:	ca 01       	movw	r24, r20
     a5c:	95 95       	asr	r25
     a5e:	87 95       	ror	r24
     a60:	9c 01       	movw	r18, r24
     a62:	8f 81       	ldd	r24, Y+7	; 0x07
     a64:	98 85       	ldd	r25, Y+8	; 0x08
     a66:	fc 01       	movw	r30, r24
     a68:	62 81       	ldd	r22, Z+2	; 0x02
     a6a:	73 81       	ldd	r23, Z+3	; 0x03
     a6c:	8f 81       	ldd	r24, Y+7	; 0x07
     a6e:	98 85       	ldd	r25, Y+8	; 0x08
     a70:	fc 01       	movw	r30, r24
     a72:	44 81       	ldd	r20, Z+4	; 0x04
     a74:	55 81       	ldd	r21, Z+5	; 0x05
     a76:	64 9f       	mul	r22, r20
     a78:	c0 01       	movw	r24, r0
     a7a:	65 9f       	mul	r22, r21
     a7c:	90 0d       	add	r25, r0
     a7e:	74 9f       	mul	r23, r20
     a80:	90 0d       	add	r25, r0
     a82:	11 24       	eor	r1, r1
     a84:	82 0f       	add	r24, r18
     a86:	93 1f       	adc	r25, r19
		(unsigned)(q->size * q->esize);
     a88:	2f 81       	ldd	r18, Y+7	; 0x07
     a8a:	38 85       	ldd	r19, Y+8	; 0x08
     a8c:	f9 01       	movw	r30, r18
     a8e:	66 81       	ldd	r22, Z+6	; 0x06
     a90:	77 81       	ldd	r23, Z+7	; 0x07
     a92:	2f 81       	ldd	r18, Y+7	; 0x07
     a94:	38 85       	ldd	r19, Y+8	; 0x08
     a96:	f9 01       	movw	r30, r18
     a98:	44 81       	ldd	r20, Z+4	; 0x04
     a9a:	55 81       	ldd	r21, Z+5	; 0x05
     a9c:	64 9f       	mul	r22, r20
     a9e:	90 01       	movw	r18, r0
     aa0:	65 9f       	mul	r22, r21
     aa2:	30 0d       	add	r19, r0
     aa4:	74 9f       	mul	r23, r20
     aa6:	30 0d       	add	r19, r0
     aa8:	11 24       	eor	r1, r1
		//leaveCritical();	// can let others to run here
		OSSemPend(q_sema_full);
		enterCritical();	// but after the pend, would go back to run
	}
	
	unsigned shift = 
     aaa:	b9 01       	movw	r22, r18
     aac:	0e 94 75 10 	call	0x20ea	; 0x20ea <__udivmodhi4>
     ab0:	9c 83       	std	Y+4, r25	; 0x04
     ab2:	8b 83       	std	Y+3, r24	; 0x03
		(unsigned)(q->head - q->start + (q->num * q->esize)) %
		(unsigned)(q->size * q->esize);
	void *currentPos = q->start + shift;
     ab4:	8f 81       	ldd	r24, Y+7	; 0x07
     ab6:	98 85       	ldd	r25, Y+8	; 0x08
     ab8:	fc 01       	movw	r30, r24
     aba:	20 85       	ldd	r18, Z+8	; 0x08
     abc:	31 85       	ldd	r19, Z+9	; 0x09
     abe:	8b 81       	ldd	r24, Y+3	; 0x03
     ac0:	9c 81       	ldd	r25, Y+4	; 0x04
     ac2:	88 0f       	add	r24, r24
     ac4:	99 1f       	adc	r25, r25
     ac6:	82 0f       	add	r24, r18
     ac8:	93 1f       	adc	r25, r19
     aca:	9e 83       	std	Y+6, r25	; 0x06
     acc:	8d 83       	std	Y+5, r24	; 0x05
	
	// then copy the element into queue
	for(int i=0;i< q->esize; i++){
     ace:	1a 82       	std	Y+2, r1	; 0x02
     ad0:	19 82       	std	Y+1, r1	; 0x01
     ad2:	17 c0       	rjmp	.+46     	; 0xb02 <OSenq+0x130>
		//*(char*)(currentPos + i) = *(char*)(item + i);
		*(int*)(currentPos + i) = *(int*)(item + i);
     ad4:	2d 81       	ldd	r18, Y+5	; 0x05
     ad6:	3e 81       	ldd	r19, Y+6	; 0x06
     ad8:	89 81       	ldd	r24, Y+1	; 0x01
     ada:	9a 81       	ldd	r25, Y+2	; 0x02
     adc:	82 0f       	add	r24, r18
     ade:	93 1f       	adc	r25, r19
     ae0:	49 85       	ldd	r20, Y+9	; 0x09
     ae2:	5a 85       	ldd	r21, Y+10	; 0x0a
     ae4:	29 81       	ldd	r18, Y+1	; 0x01
     ae6:	3a 81       	ldd	r19, Y+2	; 0x02
     ae8:	24 0f       	add	r18, r20
     aea:	35 1f       	adc	r19, r21
     aec:	f9 01       	movw	r30, r18
     aee:	20 81       	ld	r18, Z
     af0:	31 81       	ldd	r19, Z+1	; 0x01
     af2:	fc 01       	movw	r30, r24
     af4:	31 83       	std	Z+1, r19	; 0x01
     af6:	20 83       	st	Z, r18
		(unsigned)(q->head - q->start + (q->num * q->esize)) %
		(unsigned)(q->size * q->esize);
	void *currentPos = q->start + shift;
	
	// then copy the element into queue
	for(int i=0;i< q->esize; i++){
     af8:	89 81       	ldd	r24, Y+1	; 0x01
     afa:	9a 81       	ldd	r25, Y+2	; 0x02
     afc:	01 96       	adiw	r24, 0x01	; 1
     afe:	9a 83       	std	Y+2, r25	; 0x02
     b00:	89 83       	std	Y+1, r24	; 0x01
     b02:	8f 81       	ldd	r24, Y+7	; 0x07
     b04:	98 85       	ldd	r25, Y+8	; 0x08
     b06:	fc 01       	movw	r30, r24
     b08:	24 81       	ldd	r18, Z+4	; 0x04
     b0a:	35 81       	ldd	r19, Z+5	; 0x05
     b0c:	89 81       	ldd	r24, Y+1	; 0x01
     b0e:	9a 81       	ldd	r25, Y+2	; 0x02
     b10:	82 17       	cp	r24, r18
     b12:	93 07       	cpc	r25, r19
     b14:	fc f2       	brlt	.-66     	; 0xad4 <OSenq+0x102>
		//*(char*)(currentPos + i) = *(char*)(item + i);
		*(int*)(currentPos + i) = *(int*)(item + i);
	}
		
	q->num++;
     b16:	8f 81       	ldd	r24, Y+7	; 0x07
     b18:	98 85       	ldd	r25, Y+8	; 0x08
     b1a:	fc 01       	movw	r30, r24
     b1c:	82 81       	ldd	r24, Z+2	; 0x02
     b1e:	93 81       	ldd	r25, Z+3	; 0x03
     b20:	9c 01       	movw	r18, r24
     b22:	2f 5f       	subi	r18, 0xFF	; 255
     b24:	3f 4f       	sbci	r19, 0xFF	; 255
     b26:	8f 81       	ldd	r24, Y+7	; 0x07
     b28:	98 85       	ldd	r25, Y+8	; 0x08
     b2a:	fc 01       	movw	r30, r24
     b2c:	33 83       	std	Z+3, r19	; 0x03
     b2e:	22 83       	std	Z+2, r18	; 0x02
	
	// produced one
	OSSemPost(q_sema_empty);
     b30:	80 91 62 01 	lds	r24, 0x0162
     b34:	90 91 63 01 	lds	r25, 0x0163
     b38:	0e 94 5d 03 	call	0x6ba	; 0x6ba <OSSemPost>
	
	leaveCritical();
     b3c:	0e 94 ed 01 	call	0x3da	; 0x3da <leaveCritical>
}
     b40:	2a 96       	adiw	r28, 0x0a	; 10
     b42:	0f b6       	in	r0, 0x3f	; 63
     b44:	f8 94       	cli
     b46:	de bf       	out	0x3e, r29	; 62
     b48:	0f be       	out	0x3f, r0	; 63
     b4a:	cd bf       	out	0x3d, r28	; 61
     b4c:	cf 91       	pop	r28
     b4e:	df 91       	pop	r29
     b50:	08 95       	ret

00000b52 <OSdeq>:

// Removes and returns item from head of queue. Process blocks if queue is empty.
void *OSdeq(OSSignal *q)
{
     b52:	df 93       	push	r29
     b54:	cf 93       	push	r28
     b56:	00 d0       	rcall	.+0      	; 0xb58 <OSdeq+0x6>
     b58:	00 d0       	rcall	.+0      	; 0xb5a <OSdeq+0x8>
     b5a:	cd b7       	in	r28, 0x3d	; 61
     b5c:	de b7       	in	r29, 0x3e	; 62
     b5e:	9c 83       	std	Y+4, r25	; 0x04
     b60:	8b 83       	std	Y+3, r24	; 0x03
	enterCritical();
     b62:	0e 94 e5 01 	call	0x3ca	; 0x3ca <enterCritical>
	
	// wrong type no use
	if(q == NULL || q->type != QUEUE_TYPE){
     b66:	8b 81       	ldd	r24, Y+3	; 0x03
     b68:	9c 81       	ldd	r25, Y+4	; 0x04
     b6a:	00 97       	sbiw	r24, 0x00	; 0
     b6c:	49 f0       	breq	.+18     	; 0xb80 <OSdeq+0x2e>
     b6e:	8b 81       	ldd	r24, Y+3	; 0x03
     b70:	9c 81       	ldd	r25, Y+4	; 0x04
     b72:	dc 01       	movw	r26, r24
     b74:	8d 91       	ld	r24, X+
     b76:	9c 91       	ld	r25, X
     b78:	11 97       	sbiw	r26, 0x01	; 1
     b7a:	81 30       	cpi	r24, 0x01	; 1
     b7c:	91 05       	cpc	r25, r1
     b7e:	71 f0       	breq	.+28     	; 0xb9c <OSdeq+0x4a>
		leaveCritical();
     b80:	0e 94 ed 01 	call	0x3da	; 0x3da <leaveCritical>
     b84:	7f c0       	rjmp	.+254    	; 0xc84 <OSdeq+0x132>
		return;
	}
	
	while(q->num <= 0){	// queue empty
		leaveCritical();	// can let others to run here
     b86:	0e 94 ed 01 	call	0x3da	; 0x3da <leaveCritical>
		OSSemPend(q_sema_empty);
     b8a:	80 91 62 01 	lds	r24, 0x0162
     b8e:	90 91 63 01 	lds	r25, 0x0163
     b92:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <OSSemPend>
		enterCritical();	// but after the pend, would go back to run
     b96:	0e 94 e5 01 	call	0x3ca	; 0x3ca <enterCritical>
     b9a:	01 c0       	rjmp	.+2      	; 0xb9e <OSdeq+0x4c>
	if(q == NULL || q->type != QUEUE_TYPE){
		leaveCritical();
		return;
	}
	
	while(q->num <= 0){	// queue empty
     b9c:	00 00       	nop
     b9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ba0:	9c 81       	ldd	r25, Y+4	; 0x04
     ba2:	fc 01       	movw	r30, r24
     ba4:	82 81       	ldd	r24, Z+2	; 0x02
     ba6:	93 81       	ldd	r25, Z+3	; 0x03
     ba8:	18 16       	cp	r1, r24
     baa:	19 06       	cpc	r1, r25
     bac:	64 f7       	brge	.-40     	; 0xb86 <OSdeq+0x34>
		leaveCritical();	// can let others to run here
		OSSemPend(q_sema_empty);
		enterCritical();	// but after the pend, would go back to run
	}

	void* res = q->head;
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	9c 81       	ldd	r25, Y+4	; 0x04
     bb2:	dc 01       	movw	r26, r24
     bb4:	1a 96       	adiw	r26, 0x0a	; 10
     bb6:	8d 91       	ld	r24, X+
     bb8:	9c 91       	ld	r25, X
     bba:	1b 97       	sbiw	r26, 0x0b	; 11
     bbc:	9a 83       	std	Y+2, r25	; 0x02
     bbe:	89 83       	std	Y+1, r24	; 0x01
	
	q->head += q->esize;
     bc0:	8b 81       	ldd	r24, Y+3	; 0x03
     bc2:	9c 81       	ldd	r25, Y+4	; 0x04
     bc4:	fc 01       	movw	r30, r24
     bc6:	22 85       	ldd	r18, Z+10	; 0x0a
     bc8:	33 85       	ldd	r19, Z+11	; 0x0b
     bca:	8b 81       	ldd	r24, Y+3	; 0x03
     bcc:	9c 81       	ldd	r25, Y+4	; 0x04
     bce:	dc 01       	movw	r26, r24
     bd0:	14 96       	adiw	r26, 0x04	; 4
     bd2:	8d 91       	ld	r24, X+
     bd4:	9c 91       	ld	r25, X
     bd6:	15 97       	sbiw	r26, 0x05	; 5
     bd8:	88 0f       	add	r24, r24
     bda:	99 1f       	adc	r25, r25
     bdc:	28 0f       	add	r18, r24
     bde:	39 1f       	adc	r19, r25
     be0:	8b 81       	ldd	r24, Y+3	; 0x03
     be2:	9c 81       	ldd	r25, Y+4	; 0x04
     be4:	fc 01       	movw	r30, r24
     be6:	33 87       	std	Z+11, r19	; 0x0b
     be8:	22 87       	std	Z+10, r18	; 0x0a
	if(q->head == q->start + (q->num * q->esize) ){
     bea:	8b 81       	ldd	r24, Y+3	; 0x03
     bec:	9c 81       	ldd	r25, Y+4	; 0x04
     bee:	dc 01       	movw	r26, r24
     bf0:	1a 96       	adiw	r26, 0x0a	; 10
     bf2:	2d 91       	ld	r18, X+
     bf4:	3c 91       	ld	r19, X
     bf6:	1b 97       	sbiw	r26, 0x0b	; 11
     bf8:	8b 81       	ldd	r24, Y+3	; 0x03
     bfa:	9c 81       	ldd	r25, Y+4	; 0x04
     bfc:	fc 01       	movw	r30, r24
     bfe:	40 85       	ldd	r20, Z+8	; 0x08
     c00:	51 85       	ldd	r21, Z+9	; 0x09
     c02:	8b 81       	ldd	r24, Y+3	; 0x03
     c04:	9c 81       	ldd	r25, Y+4	; 0x04
     c06:	dc 01       	movw	r26, r24
     c08:	12 96       	adiw	r26, 0x02	; 2
     c0a:	ed 91       	ld	r30, X+
     c0c:	fc 91       	ld	r31, X
     c0e:	13 97       	sbiw	r26, 0x03	; 3
     c10:	8b 81       	ldd	r24, Y+3	; 0x03
     c12:	9c 81       	ldd	r25, Y+4	; 0x04
     c14:	dc 01       	movw	r26, r24
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	6d 91       	ld	r22, X+
     c1a:	7c 91       	ld	r23, X
     c1c:	15 97       	sbiw	r26, 0x05	; 5
     c1e:	e6 9f       	mul	r30, r22
     c20:	c0 01       	movw	r24, r0
     c22:	e7 9f       	mul	r30, r23
     c24:	90 0d       	add	r25, r0
     c26:	f6 9f       	mul	r31, r22
     c28:	90 0d       	add	r25, r0
     c2a:	11 24       	eor	r1, r1
     c2c:	88 0f       	add	r24, r24
     c2e:	99 1f       	adc	r25, r25
     c30:	84 0f       	add	r24, r20
     c32:	95 1f       	adc	r25, r21
     c34:	28 17       	cp	r18, r24
     c36:	39 07       	cpc	r19, r25
     c38:	61 f4       	brne	.+24     	; 0xc52 <OSdeq+0x100>
		q->head = q->start;
     c3a:	8b 81       	ldd	r24, Y+3	; 0x03
     c3c:	9c 81       	ldd	r25, Y+4	; 0x04
     c3e:	fc 01       	movw	r30, r24
     c40:	20 85       	ldd	r18, Z+8	; 0x08
     c42:	31 85       	ldd	r19, Z+9	; 0x09
     c44:	8b 81       	ldd	r24, Y+3	; 0x03
     c46:	9c 81       	ldd	r25, Y+4	; 0x04
     c48:	dc 01       	movw	r26, r24
     c4a:	1b 96       	adiw	r26, 0x0b	; 11
     c4c:	3c 93       	st	X, r19
     c4e:	2e 93       	st	-X, r18
     c50:	1a 97       	sbiw	r26, 0x0a	; 10
	}
	
	q->num--;
     c52:	8b 81       	ldd	r24, Y+3	; 0x03
     c54:	9c 81       	ldd	r25, Y+4	; 0x04
     c56:	fc 01       	movw	r30, r24
     c58:	82 81       	ldd	r24, Z+2	; 0x02
     c5a:	93 81       	ldd	r25, Z+3	; 0x03
     c5c:	9c 01       	movw	r18, r24
     c5e:	21 50       	subi	r18, 0x01	; 1
     c60:	30 40       	sbci	r19, 0x00	; 0
     c62:	8b 81       	ldd	r24, Y+3	; 0x03
     c64:	9c 81       	ldd	r25, Y+4	; 0x04
     c66:	dc 01       	movw	r26, r24
     c68:	13 96       	adiw	r26, 0x03	; 3
     c6a:	3c 93       	st	X, r19
     c6c:	2e 93       	st	-X, r18
     c6e:	12 97       	sbiw	r26, 0x02	; 2
	
	// consumed one
	OSSemPost(q_sema_full);
     c70:	80 91 64 01 	lds	r24, 0x0164
     c74:	90 91 65 01 	lds	r25, 0x0165
     c78:	0e 94 5d 03 	call	0x6ba	; 0x6ba <OSSemPost>
	
	leaveCritical();
     c7c:	0e 94 ed 01 	call	0x3da	; 0x3da <leaveCritical>
	return res;
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	9a 81       	ldd	r25, Y+2	; 0x02
}
     c84:	0f 90       	pop	r0
     c86:	0f 90       	pop	r0
     c88:	0f 90       	pop	r0
     c8a:	0f 90       	pop	r0
     c8c:	cf 91       	pop	r28
     c8e:	df 91       	pop	r29
     c90:	08 95       	ret

00000c92 <OSdestroyQ>:

// Destroys the queue
void *OSdestroyQ(OSSignal *q)
{
     c92:	df 93       	push	r29
     c94:	cf 93       	push	r28
     c96:	00 d0       	rcall	.+0      	; 0xc98 <OSdestroyQ+0x6>
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
     c9c:	9a 83       	std	Y+2, r25	; 0x02
     c9e:	89 83       	std	Y+1, r24	; 0x01
	enterCritical();
     ca0:	0e 94 e5 01 	call	0x3ca	; 0x3ca <enterCritical>
	if(q != NULL){
     ca4:	89 81       	ldd	r24, Y+1	; 0x01
     ca6:	9a 81       	ldd	r25, Y+2	; 0x02
     ca8:	00 97       	sbiw	r24, 0x00	; 0
     caa:	91 f0       	breq	.+36     	; 0xcd0 <OSdestroyQ+0x3e>
		if(q->start != NULL)	free(q->start);
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	9a 81       	ldd	r25, Y+2	; 0x02
     cb0:	fc 01       	movw	r30, r24
     cb2:	80 85       	ldd	r24, Z+8	; 0x08
     cb4:	91 85       	ldd	r25, Z+9	; 0x09
     cb6:	00 97       	sbiw	r24, 0x00	; 0
     cb8:	39 f0       	breq	.+14     	; 0xcc8 <OSdestroyQ+0x36>
     cba:	89 81       	ldd	r24, Y+1	; 0x01
     cbc:	9a 81       	ldd	r25, Y+2	; 0x02
     cbe:	fc 01       	movw	r30, r24
     cc0:	80 85       	ldd	r24, Z+8	; 0x08
     cc2:	91 85       	ldd	r25, Z+9	; 0x09
     cc4:	0e 94 91 11 	call	0x2322	; 0x2322 <free>
		free(q);
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
     cca:	9a 81       	ldd	r25, Y+2	; 0x02
     ccc:	0e 94 91 11 	call	0x2322	; 0x2322 <free>
	}
	leaveCritical();
     cd0:	0e 94 ed 01 	call	0x3da	; 0x3da <leaveCritical>
}
     cd4:	0f 90       	pop	r0
     cd6:	0f 90       	pop	r0
     cd8:	cf 91       	pop	r28
     cda:	df 91       	pop	r29
     cdc:	08 95       	ret

00000cde <runTaskFirstTime>:
	"pop r0	\n\t"\
	"out __SREG__, r0\n\t"\
	"pop r0	\n\t": : "r" (pxCurrentTCB):\
	);

void runTaskFirstTime(int i){
     cde:	df 93       	push	r29
     ce0:	cf 93       	push	r28
     ce2:	00 d0       	rcall	.+0      	; 0xce4 <runTaskFirstTime+0x6>
     ce4:	cd b7       	in	r28, 0x3d	; 61
     ce6:	de b7       	in	r29, 0x3e	; 62
     ce8:	9a 83       	std	Y+2, r25	; 0x02
     cea:	89 83       	std	Y+1, r24	; 0x01
	cli();
     cec:	f8 94       	cli
	currentTask = i;
     cee:	89 81       	ldd	r24, Y+1	; 0x01
     cf0:	9a 81       	ldd	r25, Y+2	; 0x02
     cf2:	90 93 0b 01 	sts	0x010B, r25
     cf6:	80 93 0a 01 	sts	0x010A, r24
	taskTable[currentTask].runflag = 1;
     cfa:	40 91 0a 01 	lds	r20, 0x010A
     cfe:	50 91 0b 01 	lds	r21, 0x010B
     d02:	2f e0       	ldi	r18, 0x0F	; 15
     d04:	31 e0       	ldi	r19, 0x01	; 1
     d06:	42 9f       	mul	r20, r18
     d08:	c0 01       	movw	r24, r0
     d0a:	43 9f       	mul	r20, r19
     d0c:	90 0d       	add	r25, r0
     d0e:	52 9f       	mul	r21, r18
     d10:	90 0d       	add	r25, r0
     d12:	11 24       	eor	r1, r1
     d14:	84 59       	subi	r24, 0x94	; 148
     d16:	9e 4f       	sbci	r25, 0xFE	; 254
     d18:	21 e0       	ldi	r18, 0x01	; 1
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	fc 01       	movw	r30, r24
     d1e:	31 83       	std	Z+1, r19	; 0x01
     d20:	20 83       	st	Z, r18
	taskTable[currentTask].skipedTimes = 0;
     d22:	40 91 0a 01 	lds	r20, 0x010A
     d26:	50 91 0b 01 	lds	r21, 0x010B
     d2a:	2f e0       	ldi	r18, 0x0F	; 15
     d2c:	31 e0       	ldi	r19, 0x01	; 1
     d2e:	42 9f       	mul	r20, r18
     d30:	c0 01       	movw	r24, r0
     d32:	43 9f       	mul	r20, r19
     d34:	90 0d       	add	r25, r0
     d36:	52 9f       	mul	r21, r18
     d38:	90 0d       	add	r25, r0
     d3a:	11 24       	eor	r1, r1
     d3c:	89 58       	subi	r24, 0x89	; 137
     d3e:	9d 4f       	sbci	r25, 0xFD	; 253
     d40:	fc 01       	movw	r30, r24
     d42:	11 82       	std	Z+1, r1	; 0x01
     d44:	10 82       	st	Z, r1
    
	pxCurrentTCB = (unsigned long)(taskTable[currentTask].stack + TASK_STACK_SIZE - 1);
     d46:	40 91 0a 01 	lds	r20, 0x010A
     d4a:	50 91 0b 01 	lds	r21, 0x010B
     d4e:	2f e0       	ldi	r18, 0x0F	; 15
     d50:	31 e0       	ldi	r19, 0x01	; 1
     d52:	42 9f       	mul	r20, r18
     d54:	c0 01       	movw	r24, r0
     d56:	43 9f       	mul	r20, r19
     d58:	90 0d       	add	r25, r0
     d5a:	52 9f       	mul	r21, r18
     d5c:	90 0d       	add	r25, r0
     d5e:	11 24       	eor	r1, r1
     d60:	86 5f       	subi	r24, 0xF6	; 246
     d62:	9e 4f       	sbci	r25, 0xFE	; 254
     d64:	84 59       	subi	r24, 0x94	; 148
     d66:	9e 4f       	sbci	r25, 0xFE	; 254
     d68:	aa 27       	eor	r26, r26
     d6a:	97 fd       	sbrc	r25, 7
     d6c:	a0 95       	com	r26
     d6e:	ba 2f       	mov	r27, r26
     d70:	80 93 66 01 	sts	0x0166, r24
     d74:	90 93 67 01 	sts	0x0167, r25
     d78:	a0 93 68 01 	sts	0x0168, r26
     d7c:	b0 93 69 01 	sts	0x0169, r27
	
    asm volatile ("\n\t"\
     d80:	a0 91 66 01 	lds	r26, 0x0166
     d84:	b0 91 67 01 	lds	r27, 0x0167
     d88:	ad bf       	out	0x3d, r26	; 61
     d8a:	be bf       	out	0x3e, r27	; 62
                  "lds r26, pxCurrentTCB \n\t"\
                  "lds r27, pxCurrentTCB+1 \n\t"\
                  "out __SP_L__, r26 \n\t"\
                  "out __SP_H__, r27 \n\t"\
                  );
	sei();
     d8c:	78 94       	sei
    taskTable[currentTask].fptr(taskTable[currentTask].arg);
     d8e:	40 91 0a 01 	lds	r20, 0x010A
     d92:	50 91 0b 01 	lds	r21, 0x010B
     d96:	2f e0       	ldi	r18, 0x0F	; 15
     d98:	31 e0       	ldi	r19, 0x01	; 1
     d9a:	42 9f       	mul	r20, r18
     d9c:	c0 01       	movw	r24, r0
     d9e:	43 9f       	mul	r20, r19
     da0:	90 0d       	add	r25, r0
     da2:	52 9f       	mul	r21, r18
     da4:	90 0d       	add	r25, r0
     da6:	11 24       	eor	r1, r1
     da8:	80 59       	subi	r24, 0x90	; 144
     daa:	9e 4f       	sbci	r25, 0xFE	; 254
     dac:	fc 01       	movw	r30, r24
     dae:	20 81       	ld	r18, Z
     db0:	31 81       	ldd	r19, Z+1	; 0x01
     db2:	60 91 0a 01 	lds	r22, 0x010A
     db6:	70 91 0b 01 	lds	r23, 0x010B
     dba:	4f e0       	ldi	r20, 0x0F	; 15
     dbc:	51 e0       	ldi	r21, 0x01	; 1
     dbe:	64 9f       	mul	r22, r20
     dc0:	c0 01       	movw	r24, r0
     dc2:	65 9f       	mul	r22, r21
     dc4:	90 0d       	add	r25, r0
     dc6:	74 9f       	mul	r23, r20
     dc8:	90 0d       	add	r25, r0
     dca:	11 24       	eor	r1, r1
     dcc:	8e 58       	subi	r24, 0x8E	; 142
     dce:	9e 4f       	sbci	r25, 0xFE	; 254
     dd0:	fc 01       	movw	r30, r24
     dd2:	80 81       	ld	r24, Z
     dd4:	91 81       	ldd	r25, Z+1	; 0x01
     dd6:	f9 01       	movw	r30, r18
     dd8:	09 95       	icall
}
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
     dde:	cf 91       	pop	r28
     de0:	df 91       	pop	r29
     de2:	08 95       	ret

00000de4 <OSMakeAtomic>:



void OSMakeAtomic()
{
     de4:	df 93       	push	r29
     de6:	cf 93       	push	r28
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
	// Disables interrupts to create an atomic section.
	cli();
     dec:	f8 94       	cli
}
     dee:	cf 91       	pop	r28
     df0:	df 91       	pop	r29
     df2:	08 95       	ret

00000df4 <OSLeaveAtomic>:

void OSLeaveAtomic()
{
     df4:	df 93       	push	r29
     df6:	cf 93       	push	r28
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
	// Leaves atomic section by re-enabling interrupts.
	sei();
     dfc:	78 94       	sei
}
     dfe:	cf 91       	pop	r28
     e00:	df 91       	pop	r29
     e02:	08 95       	ret

00000e04 <findNextTask>:
// DO NOT modify this!
void OSSwapTask() __attribute__ ((naked));


int findNextTask()
{
     e04:	df 93       	push	r29
     e06:	cf 93       	push	r28
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
	// signal of current task overflow
	if(currentTask > OS_NUM_TASKS || currentTask < -1)	PORTD |= 0b00010000;
     e0c:	80 91 0a 01 	lds	r24, 0x010A
     e10:	90 91 0b 01 	lds	r25, 0x010B
     e14:	85 30       	cpi	r24, 0x05	; 5
     e16:	91 05       	cpc	r25, r1
     e18:	44 f4       	brge	.+16     	; 0xe2a <findNextTask+0x26>
     e1a:	80 91 0a 01 	lds	r24, 0x010A
     e1e:	90 91 0b 01 	lds	r25, 0x010B
     e22:	2f ef       	ldi	r18, 0xFF	; 255
     e24:	8f 3f       	cpi	r24, 0xFF	; 255
     e26:	92 07       	cpc	r25, r18
     e28:	4c f4       	brge	.+18     	; 0xe3c <findNextTask+0x38>
     e2a:	8b e2       	ldi	r24, 0x2B	; 43
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	2b e2       	ldi	r18, 0x2B	; 43
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	f9 01       	movw	r30, r18
     e34:	20 81       	ld	r18, Z
     e36:	20 61       	ori	r18, 0x10	; 16
     e38:	fc 01       	movw	r30, r24
     e3a:	20 83       	st	Z, r18
	// Note that OS_NUM_TASKS in kernel.h is the MAXIMUM number of tasks that can be created, not the actual number
	// created. So OS_NUM_TASKS can be 10 although in actual fact only 4 tasks were created. You should pick only amongst
	// these 4 tasks.
	
	// find the one being skipped the most of the times
	maxVal = -1;tempTaskNum = -1;
     e3c:	8f ef       	ldi	r24, 0xFF	; 255
     e3e:	9f ef       	ldi	r25, 0xFF	; 255
     e40:	90 93 1d 01 	sts	0x011D, r25
     e44:	80 93 1c 01 	sts	0x011C, r24
     e48:	8f ef       	ldi	r24, 0xFF	; 255
     e4a:	9f ef       	ldi	r25, 0xFF	; 255
     e4c:	90 93 09 01 	sts	0x0109, r25
     e50:	80 93 08 01 	sts	0x0108, r24
	for(iter = 0; iter < task_counter; iter++){
     e54:	10 92 6b 01 	sts	0x016B, r1
     e58:	10 92 6a 01 	sts	0x016A, r1
     e5c:	9c c0       	rjmp	.+312    	; 0xf96 <findNextTask+0x192>
		if(taskTable[iter].sem_counter){
     e5e:	40 91 6a 01 	lds	r20, 0x016A
     e62:	50 91 6b 01 	lds	r21, 0x016B
     e66:	2f e0       	ldi	r18, 0x0F	; 15
     e68:	31 e0       	ldi	r19, 0x01	; 1
     e6a:	42 9f       	mul	r20, r18
     e6c:	c0 01       	movw	r24, r0
     e6e:	43 9f       	mul	r20, r19
     e70:	90 0d       	add	r25, r0
     e72:	52 9f       	mul	r21, r18
     e74:	90 0d       	add	r25, r0
     e76:	11 24       	eor	r1, r1
     e78:	87 58       	subi	r24, 0x87	; 135
     e7a:	9d 4f       	sbci	r25, 0xFD	; 253
     e7c:	fc 01       	movw	r30, r24
     e7e:	80 81       	ld	r24, Z
     e80:	91 81       	ldd	r25, Z+1	; 0x01
     e82:	00 97       	sbiw	r24, 0x00	; 0
     e84:	21 f1       	breq	.+72     	; 0xece <findNextTask+0xca>
			taskTable[iter].skipedTimes++;
     e86:	80 91 6a 01 	lds	r24, 0x016A
     e8a:	90 91 6b 01 	lds	r25, 0x016B
     e8e:	4f e0       	ldi	r20, 0x0F	; 15
     e90:	51 e0       	ldi	r21, 0x01	; 1
     e92:	84 9f       	mul	r24, r20
     e94:	90 01       	movw	r18, r0
     e96:	85 9f       	mul	r24, r21
     e98:	30 0d       	add	r19, r0
     e9a:	94 9f       	mul	r25, r20
     e9c:	30 0d       	add	r19, r0
     e9e:	11 24       	eor	r1, r1
     ea0:	29 58       	subi	r18, 0x89	; 137
     ea2:	3d 4f       	sbci	r19, 0xFD	; 253
     ea4:	f9 01       	movw	r30, r18
     ea6:	20 81       	ld	r18, Z
     ea8:	31 81       	ldd	r19, Z+1	; 0x01
     eaa:	2f 5f       	subi	r18, 0xFF	; 255
     eac:	3f 4f       	sbci	r19, 0xFF	; 255
     eae:	6f e0       	ldi	r22, 0x0F	; 15
     eb0:	71 e0       	ldi	r23, 0x01	; 1
     eb2:	86 9f       	mul	r24, r22
     eb4:	a0 01       	movw	r20, r0
     eb6:	87 9f       	mul	r24, r23
     eb8:	50 0d       	add	r21, r0
     eba:	96 9f       	mul	r25, r22
     ebc:	50 0d       	add	r21, r0
     ebe:	11 24       	eor	r1, r1
     ec0:	ca 01       	movw	r24, r20
     ec2:	89 58       	subi	r24, 0x89	; 137
     ec4:	9d 4f       	sbci	r25, 0xFD	; 253
     ec6:	fc 01       	movw	r30, r24
     ec8:	31 83       	std	Z+1, r19	; 0x01
     eca:	20 83       	st	Z, r18
			continue;
     ecc:	5b c0       	rjmp	.+182    	; 0xf84 <findNextTask+0x180>
		} else if(taskTable[iter].skipedTimes > maxVal){
     ece:	40 91 6a 01 	lds	r20, 0x016A
     ed2:	50 91 6b 01 	lds	r21, 0x016B
     ed6:	2f e0       	ldi	r18, 0x0F	; 15
     ed8:	31 e0       	ldi	r19, 0x01	; 1
     eda:	42 9f       	mul	r20, r18
     edc:	c0 01       	movw	r24, r0
     ede:	43 9f       	mul	r20, r19
     ee0:	90 0d       	add	r25, r0
     ee2:	52 9f       	mul	r21, r18
     ee4:	90 0d       	add	r25, r0
     ee6:	11 24       	eor	r1, r1
     ee8:	89 58       	subi	r24, 0x89	; 137
     eea:	9d 4f       	sbci	r25, 0xFD	; 253
     eec:	fc 01       	movw	r30, r24
     eee:	20 81       	ld	r18, Z
     ef0:	31 81       	ldd	r19, Z+1	; 0x01
     ef2:	80 91 1c 01 	lds	r24, 0x011C
     ef6:	90 91 1d 01 	lds	r25, 0x011D
     efa:	82 17       	cp	r24, r18
     efc:	93 07       	cpc	r25, r19
     efe:	fc f4       	brge	.+62     	; 0xf3e <findNextTask+0x13a>
			tempTaskNum = iter;
     f00:	80 91 6a 01 	lds	r24, 0x016A
     f04:	90 91 6b 01 	lds	r25, 0x016B
     f08:	90 93 09 01 	sts	0x0109, r25
     f0c:	80 93 08 01 	sts	0x0108, r24
			maxVal = taskTable[iter].skipedTimes;
     f10:	40 91 6a 01 	lds	r20, 0x016A
     f14:	50 91 6b 01 	lds	r21, 0x016B
     f18:	2f e0       	ldi	r18, 0x0F	; 15
     f1a:	31 e0       	ldi	r19, 0x01	; 1
     f1c:	42 9f       	mul	r20, r18
     f1e:	c0 01       	movw	r24, r0
     f20:	43 9f       	mul	r20, r19
     f22:	90 0d       	add	r25, r0
     f24:	52 9f       	mul	r21, r18
     f26:	90 0d       	add	r25, r0
     f28:	11 24       	eor	r1, r1
     f2a:	89 58       	subi	r24, 0x89	; 137
     f2c:	9d 4f       	sbci	r25, 0xFD	; 253
     f2e:	fc 01       	movw	r30, r24
     f30:	80 81       	ld	r24, Z
     f32:	91 81       	ldd	r25, Z+1	; 0x01
     f34:	90 93 1d 01 	sts	0x011D, r25
     f38:	80 93 1c 01 	sts	0x011C, r24
     f3c:	23 c0       	rjmp	.+70     	; 0xf84 <findNextTask+0x180>
		} else{
			taskTable[iter].skipedTimes++;
     f3e:	80 91 6a 01 	lds	r24, 0x016A
     f42:	90 91 6b 01 	lds	r25, 0x016B
     f46:	4f e0       	ldi	r20, 0x0F	; 15
     f48:	51 e0       	ldi	r21, 0x01	; 1
     f4a:	84 9f       	mul	r24, r20
     f4c:	90 01       	movw	r18, r0
     f4e:	85 9f       	mul	r24, r21
     f50:	30 0d       	add	r19, r0
     f52:	94 9f       	mul	r25, r20
     f54:	30 0d       	add	r19, r0
     f56:	11 24       	eor	r1, r1
     f58:	29 58       	subi	r18, 0x89	; 137
     f5a:	3d 4f       	sbci	r19, 0xFD	; 253
     f5c:	f9 01       	movw	r30, r18
     f5e:	20 81       	ld	r18, Z
     f60:	31 81       	ldd	r19, Z+1	; 0x01
     f62:	2f 5f       	subi	r18, 0xFF	; 255
     f64:	3f 4f       	sbci	r19, 0xFF	; 255
     f66:	6f e0       	ldi	r22, 0x0F	; 15
     f68:	71 e0       	ldi	r23, 0x01	; 1
     f6a:	86 9f       	mul	r24, r22
     f6c:	a0 01       	movw	r20, r0
     f6e:	87 9f       	mul	r24, r23
     f70:	50 0d       	add	r21, r0
     f72:	96 9f       	mul	r25, r22
     f74:	50 0d       	add	r21, r0
     f76:	11 24       	eor	r1, r1
     f78:	ca 01       	movw	r24, r20
     f7a:	89 58       	subi	r24, 0x89	; 137
     f7c:	9d 4f       	sbci	r25, 0xFD	; 253
     f7e:	fc 01       	movw	r30, r24
     f80:	31 83       	std	Z+1, r19	; 0x01
     f82:	20 83       	st	Z, r18
	// created. So OS_NUM_TASKS can be 10 although in actual fact only 4 tasks were created. You should pick only amongst
	// these 4 tasks.
	
	// find the one being skipped the most of the times
	maxVal = -1;tempTaskNum = -1;
	for(iter = 0; iter < task_counter; iter++){
     f84:	80 91 6a 01 	lds	r24, 0x016A
     f88:	90 91 6b 01 	lds	r25, 0x016B
     f8c:	01 96       	adiw	r24, 0x01	; 1
     f8e:	90 93 6b 01 	sts	0x016B, r25
     f92:	80 93 6a 01 	sts	0x016A, r24
     f96:	20 91 6a 01 	lds	r18, 0x016A
     f9a:	30 91 6b 01 	lds	r19, 0x016B
     f9e:	80 91 1e 01 	lds	r24, 0x011E
     fa2:	90 91 1f 01 	lds	r25, 0x011F
     fa6:	28 17       	cp	r18, r24
     fa8:	39 07       	cpc	r19, r25
     faa:	0c f4       	brge	.+2      	; 0xfae <findNextTask+0x1aa>
     fac:	58 cf       	rjmp	.-336    	; 0xe5e <findNextTask+0x5a>
		} else{
			taskTable[iter].skipedTimes++;
		}
	}
	
	return tempTaskNum;	// unsuccessful
     fae:	80 91 08 01 	lds	r24, 0x0108
     fb2:	90 91 09 01 	lds	r25, 0x0109
}
     fb6:	cf 91       	pop	r28
     fb8:	df 91       	pop	r29
     fba:	08 95       	ret

00000fbc <OSSwapTask>:
 {
	// assumption: when this method is being called, there's always a running task; otherwise it would do nothing
	//if(currentTask < 0)	return;
	
	// assumption: when this method is being called, there's always a running task; otherwise it would do nothing
	if(currentTask > OS_NUM_TASKS || currentTask < -1){
     fbc:	80 91 0a 01 	lds	r24, 0x010A
     fc0:	90 91 0b 01 	lds	r25, 0x010B
     fc4:	85 30       	cpi	r24, 0x05	; 5
     fc6:	91 05       	cpc	r25, r1
     fc8:	44 f4       	brge	.+16     	; 0xfda <OSSwapTask+0x1e>
     fca:	80 91 0a 01 	lds	r24, 0x010A
     fce:	90 91 0b 01 	lds	r25, 0x010B
     fd2:	2f ef       	ldi	r18, 0xFF	; 255
     fd4:	8f 3f       	cpi	r24, 0xFF	; 255
     fd6:	92 07       	cpc	r25, r18
     fd8:	64 f4       	brge	.+24     	; 0xff2 <OSSwapTask+0x36>
		// use this code to test overflow
		// value of current task over flow
		PORTD ^= 0b00010000;
     fda:	8b e2       	ldi	r24, 0x2B	; 43
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	2b e2       	ldi	r18, 0x2B	; 43
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	f9 01       	movw	r30, r18
     fe4:	30 81       	ld	r19, Z
     fe6:	20 e1       	ldi	r18, 0x10	; 16
     fe8:	23 27       	eor	r18, r19
     fea:	fc 01       	movw	r30, r24
     fec:	20 83       	st	Z, r18
		asm("ret");
     fee:	08 95       	ret
     ff0:	09 c0       	rjmp	.+18     	; 0x1004 <OSSwapTask+0x48>
	} else if(currentTask == -1){
     ff2:	80 91 0a 01 	lds	r24, 0x010A
     ff6:	90 91 0b 01 	lds	r25, 0x010B
     ffa:	ff ef       	ldi	r31, 0xFF	; 255
     ffc:	8f 3f       	cpi	r24, 0xFF	; 255
     ffe:	9f 07       	cpc	r25, r31
    1000:	09 f4       	brne	.+2      	; 0x1004 <OSSwapTask+0x48>
		asm("ret");	// never got any task run
    1002:	08 95       	ret
	}
	
	// Call findNextTask to decide which task to run next.
	tempTaskNum = findNextTask();
    1004:	0e 94 02 07 	call	0xe04	; 0xe04 <findNextTask>
    1008:	90 93 09 01 	sts	0x0109, r25
    100c:	80 93 08 01 	sts	0x0108, r24
	if(tempTaskNum < 0)	asm("ret");	// no task to swap
    1010:	80 91 08 01 	lds	r24, 0x0108
    1014:	90 91 09 01 	lds	r25, 0x0109
    1018:	99 23       	and	r25, r25
    101a:	0c f4       	brge	.+2      	; 0x101e <OSSwapTask+0x62>
    101c:	08 95       	ret
	cli();
    101e:	f8 94       	cli
	// Save the context of the current task, and copy the task stack pointer to the task's entry in the Task Control Block (tcb).
	portSAVE_CONTEXT();
    1020:	0f 92       	push	r0
    1022:	0f b6       	in	r0, 0x3f	; 63
    1024:	0f 92       	push	r0
    1026:	1f 92       	push	r1
    1028:	11 24       	eor	r1, r1
    102a:	2f 92       	push	r2
    102c:	3f 92       	push	r3
    102e:	4f 92       	push	r4
    1030:	5f 92       	push	r5
    1032:	6f 92       	push	r6
    1034:	7f 92       	push	r7
    1036:	8f 92       	push	r8
    1038:	9f 92       	push	r9
    103a:	af 92       	push	r10
    103c:	bf 92       	push	r11
    103e:	cf 92       	push	r12
    1040:	df 92       	push	r13
    1042:	ef 92       	push	r14
    1044:	ff 92       	push	r15
    1046:	0f 93       	push	r16
    1048:	1f 93       	push	r17
    104a:	2f 93       	push	r18
    104c:	3f 93       	push	r19
    104e:	4f 93       	push	r20
    1050:	5f 93       	push	r21
    1052:	6f 93       	push	r22
    1054:	7f 93       	push	r23
    1056:	8f 93       	push	r24
    1058:	9f 93       	push	r25
    105a:	af 93       	push	r26
    105c:	bf 93       	push	r27
    105e:	cf 93       	push	r28
    1060:	df 93       	push	r29
    1062:	ef 93       	push	r30
    1064:	ff 93       	push	r31
    1066:	ad b7       	in	r26, 0x3d	; 61
    1068:	be b7       	in	r27, 0x3e	; 62
    106a:	b0 93 67 01 	sts	0x0167, r27
    106e:	a0 93 66 01 	sts	0x0166, r26
	
	// save the current stack pointer
	taskTable[currentTask].stack_ptr = pxCurrentTCB;
    1072:	60 91 0a 01 	lds	r22, 0x010A
    1076:	70 91 0b 01 	lds	r23, 0x010B
    107a:	80 91 66 01 	lds	r24, 0x0166
    107e:	90 91 67 01 	lds	r25, 0x0167
    1082:	a0 91 68 01 	lds	r26, 0x0168
    1086:	b0 91 69 01 	lds	r27, 0x0169
    108a:	4f e0       	ldi	r20, 0x0F	; 15
    108c:	51 e0       	ldi	r21, 0x01	; 1
    108e:	64 9f       	mul	r22, r20
    1090:	90 01       	movw	r18, r0
    1092:	65 9f       	mul	r22, r21
    1094:	30 0d       	add	r19, r0
    1096:	74 9f       	mul	r23, r20
    1098:	30 0d       	add	r19, r0
    109a:	11 24       	eor	r1, r1
    109c:	2c 58       	subi	r18, 0x8C	; 140
    109e:	3e 4f       	sbci	r19, 0xFE	; 254
    10a0:	f9 01       	movw	r30, r18
    10a2:	80 83       	st	Z, r24
    10a4:	91 83       	std	Z+1, r25	; 0x01
    10a6:	a2 83       	std	Z+2, r26	; 0x02
    10a8:	b3 83       	std	Z+3, r27	; 0x03
	
	// update the "currentTask" to be the next task to run
	currentTask = tempTaskNum;
    10aa:	80 91 08 01 	lds	r24, 0x0108
    10ae:	90 91 09 01 	lds	r25, 0x0109
    10b2:	90 93 0b 01 	sts	0x010B, r25
    10b6:	80 93 0a 01 	sts	0x010A, r24
	
	TTaskBlock *t = &taskTable[currentTask];
    10ba:	80 91 0a 01 	lds	r24, 0x010A
    10be:	90 91 0b 01 	lds	r25, 0x010B
    10c2:	ac 01       	movw	r20, r24
    10c4:	2f e0       	ldi	r18, 0x0F	; 15
    10c6:	31 e0       	ldi	r19, 0x01	; 1
    10c8:	42 9f       	mul	r20, r18
    10ca:	c0 01       	movw	r24, r0
    10cc:	43 9f       	mul	r20, r19
    10ce:	90 0d       	add	r25, r0
    10d0:	52 9f       	mul	r21, r18
    10d2:	90 0d       	add	r25, r0
    10d4:	11 24       	eor	r1, r1
    10d6:	84 59       	subi	r24, 0x94	; 148
    10d8:	9e 4f       	sbci	r25, 0xFE	; 254
    10da:	9a 83       	std	Y+2, r25	; 0x02
    10dc:	89 83       	std	Y+1, r24	; 0x01
	
	if(t->runflag){	// has been run
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	9a 81       	ldd	r25, Y+2	; 0x02
    10e2:	fc 01       	movw	r30, r24
    10e4:	80 81       	ld	r24, Z
    10e6:	91 81       	ldd	r25, Z+1	; 0x01
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	09 f4       	brne	.+2      	; 0x10ee <OSSwapTask+0x132>
    10ec:	51 c0       	rjmp	.+162    	; 0x1190 <OSSwapTask+0x1d4>
		// reset the skiped times flag
		t->skipedTimes = 0;
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    10f0:	9a 81       	ldd	r25, Y+2	; 0x02
    10f2:	85 5f       	subi	r24, 0xF5	; 245
    10f4:	9e 4f       	sbci	r25, 0xFE	; 254
    10f6:	fc 01       	movw	r30, r24
    10f8:	11 82       	std	Z+1, r1	; 0x01
    10fa:	10 82       	st	Z, r1
		
		// get the stack pointer saved
		pxCurrentTCB = taskTable[currentTask].stack_ptr;
    10fc:	40 91 0a 01 	lds	r20, 0x010A
    1100:	50 91 0b 01 	lds	r21, 0x010B
    1104:	2f e0       	ldi	r18, 0x0F	; 15
    1106:	31 e0       	ldi	r19, 0x01	; 1
    1108:	42 9f       	mul	r20, r18
    110a:	c0 01       	movw	r24, r0
    110c:	43 9f       	mul	r20, r19
    110e:	90 0d       	add	r25, r0
    1110:	52 9f       	mul	r21, r18
    1112:	90 0d       	add	r25, r0
    1114:	11 24       	eor	r1, r1
    1116:	8c 58       	subi	r24, 0x8C	; 140
    1118:	9e 4f       	sbci	r25, 0xFE	; 254
    111a:	fc 01       	movw	r30, r24
    111c:	80 81       	ld	r24, Z
    111e:	91 81       	ldd	r25, Z+1	; 0x01
    1120:	a2 81       	ldd	r26, Z+2	; 0x02
    1122:	b3 81       	ldd	r27, Z+3	; 0x03
    1124:	80 93 66 01 	sts	0x0166, r24
    1128:	90 93 67 01 	sts	0x0167, r25
    112c:	a0 93 68 01 	sts	0x0168, r26
    1130:	b0 93 69 01 	sts	0x0169, r27
		portRESTORE_CONTEXT();
    1134:	80 91 66 01 	lds	r24, 0x0166
    1138:	90 91 67 01 	lds	r25, 0x0167
    113c:	a0 91 68 01 	lds	r26, 0x0168
    1140:	b0 91 69 01 	lds	r27, 0x0169
    1144:	8d bf       	out	0x3d, r24	; 61
    1146:	9e bf       	out	0x3e, r25	; 62
    1148:	ff 91       	pop	r31
    114a:	ef 91       	pop	r30
    114c:	df 91       	pop	r29
    114e:	cf 91       	pop	r28
    1150:	bf 91       	pop	r27
    1152:	af 91       	pop	r26
    1154:	9f 91       	pop	r25
    1156:	8f 91       	pop	r24
    1158:	7f 91       	pop	r23
    115a:	6f 91       	pop	r22
    115c:	5f 91       	pop	r21
    115e:	4f 91       	pop	r20
    1160:	3f 91       	pop	r19
    1162:	2f 91       	pop	r18
    1164:	1f 91       	pop	r17
    1166:	0f 91       	pop	r16
    1168:	ff 90       	pop	r15
    116a:	ef 90       	pop	r14
    116c:	df 90       	pop	r13
    116e:	cf 90       	pop	r12
    1170:	bf 90       	pop	r11
    1172:	af 90       	pop	r10
    1174:	9f 90       	pop	r9
    1176:	8f 90       	pop	r8
    1178:	7f 90       	pop	r7
    117a:	6f 90       	pop	r6
    117c:	5f 90       	pop	r5
    117e:	4f 90       	pop	r4
    1180:	3f 90       	pop	r3
    1182:	2f 90       	pop	r2
    1184:	1f 90       	pop	r1
    1186:	0f 90       	pop	r0
    1188:	0f be       	out	0x3f, r0	; 63
    118a:	0f 90       	pop	r0
		sei();
    118c:	78 94       	sei
    118e:	06 c0       	rjmp	.+12     	; 0x119c <OSSwapTask+0x1e0>
	}else{	// never run -> then run
		runTaskFirstTime(currentTask);
    1190:	80 91 0a 01 	lds	r24, 0x010A
    1194:	90 91 0b 01 	lds	r25, 0x010B
    1198:	0e 94 6f 06 	call	0xcde	; 0xcde <runTaskFirstTime>
	}
	
	// Do not modify the line below!	
	asm("ret");
    119c:	08 95       	ret

0000119e <__vector_14>:
// ISR for the timer. IMPLEMENT ONLY IN PART 2!


ISR(TIMER0_COMPA_vect, ISR_NAKED)
{
	cli();
    119e:	f8 94       	cli
	
	OSSwapTask();
    11a0:	0e 94 de 07 	call	0xfbc	; 0xfbc <OSSwapTask>
	
	// Do not change this!
	asm("reti");
    11a4:	18 95       	reti

000011a6 <OSInit>:
}

void OSInit()
{ 
    11a6:	df 93       	push	r29
    11a8:	cf 93       	push	r28
    11aa:	cd b7       	in	r28, 0x3d	; 61
    11ac:	de b7       	in	r29, 0x3e	; 62
	// Initialize all OS state variables, hardware used DIRECTLY by the OS, etc etc. Do not initialize variables or hardware
	// used by the application. Only those used by the OS.
	int i;
	
	// initialize timer 0
	TCNT0 = 0; OCR0A = 100;
    11ae:	86 e4       	ldi	r24, 0x46	; 70
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	fc 01       	movw	r30, r24
    11b4:	10 82       	st	Z, r1
    11b6:	87 e4       	ldi	r24, 0x47	; 71
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	24 e6       	ldi	r18, 0x64	; 100
    11bc:	fc 01       	movw	r30, r24
    11be:	20 83       	st	Z, r18
	TCCR0A = 0b00000010;
    11c0:	84 e4       	ldi	r24, 0x44	; 68
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	22 e0       	ldi	r18, 0x02	; 2
    11c6:	fc 01       	movw	r30, r24
    11c8:	20 83       	st	Z, r18
	TCCR0B = 0b00000101;
    11ca:	85 e4       	ldi	r24, 0x45	; 69
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	25 e0       	ldi	r18, 0x05	; 5
    11d0:	fc 01       	movw	r30, r24
    11d2:	20 83       	st	Z, r18
}
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	08 95       	ret

000011da <OSAddTask>:
// First argument is a pointer to the task's function code, the second is a priority number (0=highest priority)
// and the 3rd argument is an argument that will be passed to the task function the first time it is run.
// E.g. OSAddTask(task1, 0, (void *) 5) causes a task called task1 to be created with priority 0, and the integer
// 5 is passed to task1 when it is first called. See app.c to fully understand how OSAddTask is used.
int OSAddTask(void (*taskptr)(void *), int prio, void* arg)
{
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
    11e2:	28 97       	sbiw	r28, 0x08	; 8
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	f8 94       	cli
    11e8:	de bf       	out	0x3e, r29	; 62
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	cd bf       	out	0x3d, r28	; 61
    11ee:	9c 83       	std	Y+4, r25	; 0x04
    11f0:	8b 83       	std	Y+3, r24	; 0x03
    11f2:	7e 83       	std	Y+6, r23	; 0x06
    11f4:	6d 83       	std	Y+5, r22	; 0x05
    11f6:	58 87       	std	Y+8, r21	; 0x08
    11f8:	4f 83       	std	Y+7, r20	; 0x07
	// Adds a new entry to the TCB. Returns a -1 if # of tasks > OS_NUM_TASKS. Note that OS_NUM_TASKS is the MAXIMUM
	// number of tasks that can be created, not the actual number.
	if(task_counter >= OS_NUM_TASKS)	return -1;
    11fa:	80 91 1e 01 	lds	r24, 0x011E
    11fe:	90 91 1f 01 	lds	r25, 0x011F
    1202:	84 30       	cpi	r24, 0x04	; 4
    1204:	91 05       	cpc	r25, r1
    1206:	1c f0       	brlt	.+6      	; 0x120e <OSAddTask+0x34>
    1208:	8f ef       	ldi	r24, 0xFF	; 255
    120a:	9f ef       	ldi	r25, 0xFF	; 255
    120c:	3a c0       	rjmp	.+116    	; 0x1282 <OSAddTask+0xa8>
	TTaskBlock *t = &taskTable[task_counter++];
    120e:	80 91 1e 01 	lds	r24, 0x011E
    1212:	90 91 1f 01 	lds	r25, 0x011F
    1216:	bc 01       	movw	r22, r24
    1218:	4f e0       	ldi	r20, 0x0F	; 15
    121a:	51 e0       	ldi	r21, 0x01	; 1
    121c:	64 9f       	mul	r22, r20
    121e:	90 01       	movw	r18, r0
    1220:	65 9f       	mul	r22, r21
    1222:	30 0d       	add	r19, r0
    1224:	74 9f       	mul	r23, r20
    1226:	30 0d       	add	r19, r0
    1228:	11 24       	eor	r1, r1
    122a:	24 59       	subi	r18, 0x94	; 148
    122c:	3e 4f       	sbci	r19, 0xFE	; 254
    122e:	3a 83       	std	Y+2, r19	; 0x02
    1230:	29 83       	std	Y+1, r18	; 0x01
    1232:	01 96       	adiw	r24, 0x01	; 1
    1234:	90 93 1f 01 	sts	0x011F, r25
    1238:	80 93 1e 01 	sts	0x011E, r24
	t->fptr = taskptr;
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	9a 81       	ldd	r25, Y+2	; 0x02
    1240:	2b 81       	ldd	r18, Y+3	; 0x03
    1242:	3c 81       	ldd	r19, Y+4	; 0x04
    1244:	fc 01       	movw	r30, r24
    1246:	35 83       	std	Z+5, r19	; 0x05
    1248:	24 83       	std	Z+4, r18	; 0x04
	t->prio = prio;
    124a:	89 81       	ldd	r24, Y+1	; 0x01
    124c:	9a 81       	ldd	r25, Y+2	; 0x02
    124e:	2d 81       	ldd	r18, Y+5	; 0x05
    1250:	3e 81       	ldd	r19, Y+6	; 0x06
    1252:	fc 01       	movw	r30, r24
    1254:	33 83       	std	Z+3, r19	; 0x03
    1256:	22 83       	std	Z+2, r18	; 0x02
	t->arg = arg;
    1258:	89 81       	ldd	r24, Y+1	; 0x01
    125a:	9a 81       	ldd	r25, Y+2	; 0x02
    125c:	2f 81       	ldd	r18, Y+7	; 0x07
    125e:	38 85       	ldd	r19, Y+8	; 0x08
    1260:	fc 01       	movw	r30, r24
    1262:	37 83       	std	Z+7, r19	; 0x07
    1264:	26 83       	std	Z+6, r18	; 0x06
	t->runflag = 0;
    1266:	89 81       	ldd	r24, Y+1	; 0x01
    1268:	9a 81       	ldd	r25, Y+2	; 0x02
    126a:	fc 01       	movw	r30, r24
    126c:	11 82       	std	Z+1, r1	; 0x01
    126e:	10 82       	st	Z, r1
	t->sem_counter = 0;
    1270:	89 81       	ldd	r24, Y+1	; 0x01
    1272:	9a 81       	ldd	r25, Y+2	; 0x02
    1274:	83 5f       	subi	r24, 0xF3	; 243
    1276:	9e 4f       	sbci	r25, 0xFE	; 254
    1278:	fc 01       	movw	r30, r24
    127a:	11 82       	std	Z+1, r1	; 0x01
    127c:	10 82       	st	Z, r1
	
	return 0;
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	90 e0       	ldi	r25, 0x00	; 0
}
    1282:	28 96       	adiw	r28, 0x08	; 8
    1284:	0f b6       	in	r0, 0x3f	; 63
    1286:	f8 94       	cli
    1288:	de bf       	out	0x3e, r29	; 62
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	cd bf       	out	0x3d, r28	; 61
    128e:	cf 91       	pop	r28
    1290:	df 91       	pop	r29
    1292:	08 95       	ret

00001294 <OSRun>:

void OSRun()
{
    1294:	df 93       	push	r29
    1296:	cf 93       	push	r28
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
	// start timer 0
	TIMSK0 |= 0b10;
    129c:	8e e6       	ldi	r24, 0x6E	; 110
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	2e e6       	ldi	r18, 0x6E	; 110
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	f9 01       	movw	r30, r18
    12a6:	20 81       	ld	r18, Z
    12a8:	22 60       	ori	r18, 0x02	; 2
    12aa:	fc 01       	movw	r30, r24
    12ac:	20 83       	st	Z, r18
	// enable global interrupt
	sei();
    12ae:	78 94       	sei
	
	// Starts by executing the first task
	currentTask = 0;
    12b0:	10 92 0b 01 	sts	0x010B, r1
    12b4:	10 92 0a 01 	sts	0x010A, r1
	runTaskFirstTime(currentTask);
    12b8:	80 91 0a 01 	lds	r24, 0x010A
    12bc:	90 91 0b 01 	lds	r25, 0x010B
    12c0:	0e 94 6f 06 	call	0xcde	; 0xcde <runTaskFirstTime>
    12c4:	cf 91       	pop	r28
    12c6:	df 91       	pop	r29
    12c8:	08 95       	ret

000012ca <setupSerial>:
#define enter_atomic() cli()
#define leave_atomic() sei()

// Set up for 9600 8N1
void setupSerial()
{
    12ca:	df 93       	push	r29
    12cc:	cf 93       	push	r28
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
	enter_atomic();
    12d2:	f8 94       	cli
	qcount=0;
    12d4:	10 92 f3 05 	sts	0x05F3, r1
    12d8:	10 92 f2 05 	sts	0x05F2, r1
	qhead=0;
    12dc:	10 92 37 06 	sts	0x0637, r1
    12e0:	10 92 36 06 	sts	0x0636, r1
	qtail=0;
    12e4:	10 92 f5 05 	sts	0x05F5, r1
    12e8:	10 92 f4 05 	sts	0x05F4, r1
	lqhead=0;
    12ec:	10 92 ef 05 	sts	0x05EF, r1
    12f0:	10 92 ee 05 	sts	0x05EE, r1
	lqtail=0;
    12f4:	10 92 f1 05 	sts	0x05F1, r1
    12f8:	10 92 f0 05 	sts	0x05F0, r1
	lqcount=0;
    12fc:	10 92 ed 05 	sts	0x05ED, r1
    1300:	10 92 ec 05 	sts	0x05EC, r1

	// Set up baud rate generator. UBBR=16000000/(16*9600)-1 = 103
	UBRR0L=103;
    1304:	84 ec       	ldi	r24, 0xC4	; 196
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	27 e6       	ldi	r18, 0x67	; 103
    130a:	fc 01       	movw	r30, r24
    130c:	20 83       	st	Z, r18
	UBRR0H=0;
    130e:	85 ec       	ldi	r24, 0xC5	; 197
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	fc 01       	movw	r30, r24
    1314:	10 82       	st	Z, r1
	
	// Set up 8N1
	UCSR0C=0b110;
    1316:	82 ec       	ldi	r24, 0xC2	; 194
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	26 e0       	ldi	r18, 0x06	; 6
    131c:	fc 01       	movw	r30, r24
    131e:	20 83       	st	Z, r18
	
	// Enable RX and TX.
	UCSR0B=0b10011000;
    1320:	81 ec       	ldi	r24, 0xC1	; 193
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	28 e9       	ldi	r18, 0x98	; 152
    1326:	fc 01       	movw	r30, r24
    1328:	20 83       	st	Z, r18
	UCSR0A=0;
    132a:	80 ec       	ldi	r24, 0xC0	; 192
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	fc 01       	movw	r30, r24
    1330:	10 82       	st	Z, r1
	leave_atomic();
    1332:	78 94       	sei
}
    1334:	cf 91       	pop	r28
    1336:	df 91       	pop	r29
    1338:	08 95       	ret

0000133a <__vector_20>:

// ISR for transmit end.
ISR(USART_TX_vect)
{
    133a:	1f 92       	push	r1
    133c:	0f 92       	push	r0
    133e:	0f b6       	in	r0, 0x3f	; 63
    1340:	0f 92       	push	r0
    1342:	11 24       	eor	r1, r1
    1344:	2f 93       	push	r18
    1346:	3f 93       	push	r19
    1348:	5f 93       	push	r21
    134a:	6f 93       	push	r22
    134c:	7f 93       	push	r23
    134e:	8f 93       	push	r24
    1350:	9f 93       	push	r25
    1352:	af 93       	push	r26
    1354:	bf 93       	push	r27
    1356:	ef 93       	push	r30
    1358:	ff 93       	push	r31
    135a:	df 93       	push	r29
    135c:	cf 93       	push	r28
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62

	enter_atomic();
    1362:	f8 94       	cli
	// Disable interrupts. 
	if(qcount==0)
    1364:	80 91 f2 05 	lds	r24, 0x05F2
    1368:	90 91 f3 05 	lds	r25, 0x05F3
    136c:	00 97       	sbiw	r24, 0x00	; 0
    136e:	51 f4       	brne	.+20     	; 0x1384 <__vector_20+0x4a>
		UCSR0B&=0b10111111;
    1370:	81 ec       	ldi	r24, 0xC1	; 193
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	21 ec       	ldi	r18, 0xC1	; 193
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	f9 01       	movw	r30, r18
    137a:	20 81       	ld	r18, Z
    137c:	2f 7b       	andi	r18, 0xBF	; 191
    137e:	fc 01       	movw	r30, r24
    1380:	20 83       	st	Z, r18
    1382:	23 c0       	rjmp	.+70     	; 0x13ca <__vector_20+0x90>
	else
	{
		UDR0=q[qtail];
    1384:	86 ec       	ldi	r24, 0xC6	; 198
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	20 91 f4 05 	lds	r18, 0x05F4
    138c:	30 91 f5 05 	lds	r19, 0x05F5
    1390:	2a 50       	subi	r18, 0x0A	; 10
    1392:	3a 4f       	sbci	r19, 0xFA	; 250
    1394:	f9 01       	movw	r30, r18
    1396:	20 81       	ld	r18, Z
    1398:	fc 01       	movw	r30, r24
    139a:	20 83       	st	Z, r18
		qtail=(qtail+1)%QLEN;
    139c:	80 91 f4 05 	lds	r24, 0x05F4
    13a0:	90 91 f5 05 	lds	r25, 0x05F5
    13a4:	01 96       	adiw	r24, 0x01	; 1
    13a6:	20 e4       	ldi	r18, 0x40	; 64
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	b9 01       	movw	r22, r18
    13ac:	0e 94 89 10 	call	0x2112	; 0x2112 <__divmodhi4>
    13b0:	90 93 f5 05 	sts	0x05F5, r25
    13b4:	80 93 f4 05 	sts	0x05F4, r24
		qcount--;
    13b8:	80 91 f2 05 	lds	r24, 0x05F2
    13bc:	90 91 f3 05 	lds	r25, 0x05F3
    13c0:	01 97       	sbiw	r24, 0x01	; 1
    13c2:	90 93 f3 05 	sts	0x05F3, r25
    13c6:	80 93 f2 05 	sts	0x05F2, r24
	}	
	leave_atomic();
    13ca:	78 94       	sei
}
    13cc:	cf 91       	pop	r28
    13ce:	df 91       	pop	r29
    13d0:	ff 91       	pop	r31
    13d2:	ef 91       	pop	r30
    13d4:	bf 91       	pop	r27
    13d6:	af 91       	pop	r26
    13d8:	9f 91       	pop	r25
    13da:	8f 91       	pop	r24
    13dc:	7f 91       	pop	r23
    13de:	6f 91       	pop	r22
    13e0:	5f 91       	pop	r21
    13e2:	3f 91       	pop	r19
    13e4:	2f 91       	pop	r18
    13e6:	0f 90       	pop	r0
    13e8:	0f be       	out	0x3f, r0	; 63
    13ea:	0f 90       	pop	r0
    13ec:	1f 90       	pop	r1
    13ee:	18 95       	reti

000013f0 <__vector_18>:

// Listener
ISR(USART_RX_vect)
{
    13f0:	1f 92       	push	r1
    13f2:	0f 92       	push	r0
    13f4:	0f b6       	in	r0, 0x3f	; 63
    13f6:	0f 92       	push	r0
    13f8:	11 24       	eor	r1, r1
    13fa:	2f 93       	push	r18
    13fc:	3f 93       	push	r19
    13fe:	5f 93       	push	r21
    1400:	6f 93       	push	r22
    1402:	7f 93       	push	r23
    1404:	8f 93       	push	r24
    1406:	9f 93       	push	r25
    1408:	af 93       	push	r26
    140a:	bf 93       	push	r27
    140c:	ef 93       	push	r30
    140e:	ff 93       	push	r31
    1410:	df 93       	push	r29
    1412:	cf 93       	push	r28
    1414:	0f 92       	push	r0
    1416:	cd b7       	in	r28, 0x3d	; 61
    1418:	de b7       	in	r29, 0x3e	; 62
	// Guarantee atomicity
	enter_atomic();
    141a:	f8 94       	cli
		
	// Get the character
	char ch=UDR0;
    141c:	86 ec       	ldi	r24, 0xC6	; 198
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	fc 01       	movw	r30, r24
    1422:	80 81       	ld	r24, Z
    1424:	89 83       	std	Y+1, r24	; 0x01
	if(lqcount<LQLEN)
    1426:	80 91 ec 05 	lds	r24, 0x05EC
    142a:	90 91 ed 05 	lds	r25, 0x05ED
    142e:	80 38       	cpi	r24, 0x80	; 128
    1430:	91 05       	cpc	r25, r1
    1432:	04 f5       	brge	.+64     	; 0x1474 <__vector_18+0x84>
	{
		lq[lqhead]=ch;
    1434:	80 91 ee 05 	lds	r24, 0x05EE
    1438:	90 91 ef 05 	lds	r25, 0x05EF
    143c:	84 55       	subi	r24, 0x54	; 84
    143e:	9a 4f       	sbci	r25, 0xFA	; 250
    1440:	29 81       	ldd	r18, Y+1	; 0x01
    1442:	fc 01       	movw	r30, r24
    1444:	20 83       	st	Z, r18
		lqhead=(lqhead+1)%LQLEN;
    1446:	80 91 ee 05 	lds	r24, 0x05EE
    144a:	90 91 ef 05 	lds	r25, 0x05EF
    144e:	01 96       	adiw	r24, 0x01	; 1
    1450:	20 e8       	ldi	r18, 0x80	; 128
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	b9 01       	movw	r22, r18
    1456:	0e 94 89 10 	call	0x2112	; 0x2112 <__divmodhi4>
    145a:	90 93 ef 05 	sts	0x05EF, r25
    145e:	80 93 ee 05 	sts	0x05EE, r24
		lqcount++;
    1462:	80 91 ec 05 	lds	r24, 0x05EC
    1466:	90 91 ed 05 	lds	r25, 0x05ED
    146a:	01 96       	adiw	r24, 0x01	; 1
    146c:	90 93 ed 05 	sts	0x05ED, r25
    1470:	80 93 ec 05 	sts	0x05EC, r24
	}	
	
	leave_atomic();
    1474:	78 94       	sei
}
    1476:	0f 90       	pop	r0
    1478:	cf 91       	pop	r28
    147a:	df 91       	pop	r29
    147c:	ff 91       	pop	r31
    147e:	ef 91       	pop	r30
    1480:	bf 91       	pop	r27
    1482:	af 91       	pop	r26
    1484:	9f 91       	pop	r25
    1486:	8f 91       	pop	r24
    1488:	7f 91       	pop	r23
    148a:	6f 91       	pop	r22
    148c:	5f 91       	pop	r21
    148e:	3f 91       	pop	r19
    1490:	2f 91       	pop	r18
    1492:	0f 90       	pop	r0
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	0f 90       	pop	r0
    1498:	1f 90       	pop	r1
    149a:	18 95       	reti

0000149c <hear>:

void hear(char *str, int *len)
{
    149c:	df 93       	push	r29
    149e:	cf 93       	push	r28
    14a0:	00 d0       	rcall	.+0      	; 0x14a2 <hear+0x6>
    14a2:	00 d0       	rcall	.+0      	; 0x14a4 <hear+0x8>
    14a4:	00 d0       	rcall	.+0      	; 0x14a6 <hear+0xa>
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
    14aa:	9c 83       	std	Y+4, r25	; 0x04
    14ac:	8b 83       	std	Y+3, r24	; 0x03
    14ae:	7e 83       	std	Y+6, r23	; 0x06
    14b0:	6d 83       	std	Y+5, r22	; 0x05
	int i;
	
	enter_atomic();
    14b2:	f8 94       	cli
	for(i=0; i<lqcount; i++)
    14b4:	1a 82       	std	Y+2, r1	; 0x02
    14b6:	19 82       	std	Y+1, r1	; 0x01
    14b8:	23 c0       	rjmp	.+70     	; 0x1500 <hear+0x64>
	{
		str[i]=lq[lqtail];
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	9a 81       	ldd	r25, Y+2	; 0x02
    14be:	2b 81       	ldd	r18, Y+3	; 0x03
    14c0:	3c 81       	ldd	r19, Y+4	; 0x04
    14c2:	82 0f       	add	r24, r18
    14c4:	93 1f       	adc	r25, r19
    14c6:	20 91 f0 05 	lds	r18, 0x05F0
    14ca:	30 91 f1 05 	lds	r19, 0x05F1
    14ce:	24 55       	subi	r18, 0x54	; 84
    14d0:	3a 4f       	sbci	r19, 0xFA	; 250
    14d2:	f9 01       	movw	r30, r18
    14d4:	20 81       	ld	r18, Z
    14d6:	fc 01       	movw	r30, r24
    14d8:	20 83       	st	Z, r18
		lqtail=(lqtail+1)%LQLEN;
    14da:	80 91 f0 05 	lds	r24, 0x05F0
    14de:	90 91 f1 05 	lds	r25, 0x05F1
    14e2:	01 96       	adiw	r24, 0x01	; 1
    14e4:	20 e8       	ldi	r18, 0x80	; 128
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	b9 01       	movw	r22, r18
    14ea:	0e 94 89 10 	call	0x2112	; 0x2112 <__divmodhi4>
    14ee:	90 93 f1 05 	sts	0x05F1, r25
    14f2:	80 93 f0 05 	sts	0x05F0, r24
void hear(char *str, int *len)
{
	int i;
	
	enter_atomic();
	for(i=0; i<lqcount; i++)
    14f6:	89 81       	ldd	r24, Y+1	; 0x01
    14f8:	9a 81       	ldd	r25, Y+2	; 0x02
    14fa:	01 96       	adiw	r24, 0x01	; 1
    14fc:	9a 83       	std	Y+2, r25	; 0x02
    14fe:	89 83       	std	Y+1, r24	; 0x01
    1500:	80 91 ec 05 	lds	r24, 0x05EC
    1504:	90 91 ed 05 	lds	r25, 0x05ED
    1508:	29 81       	ldd	r18, Y+1	; 0x01
    150a:	3a 81       	ldd	r19, Y+2	; 0x02
    150c:	28 17       	cp	r18, r24
    150e:	39 07       	cpc	r19, r25
    1510:	a4 f2       	brlt	.-88     	; 0x14ba <hear+0x1e>
	{
		str[i]=lq[lqtail];
		lqtail=(lqtail+1)%LQLEN;
	}	
	
	str[lqtail]=0;
    1512:	80 91 f0 05 	lds	r24, 0x05F0
    1516:	90 91 f1 05 	lds	r25, 0x05F1
    151a:	2b 81       	ldd	r18, Y+3	; 0x03
    151c:	3c 81       	ldd	r19, Y+4	; 0x04
    151e:	82 0f       	add	r24, r18
    1520:	93 1f       	adc	r25, r19
    1522:	fc 01       	movw	r30, r24
    1524:	10 82       	st	Z, r1
	
	*len=lqcount;
    1526:	20 91 ec 05 	lds	r18, 0x05EC
    152a:	30 91 ed 05 	lds	r19, 0x05ED
    152e:	8d 81       	ldd	r24, Y+5	; 0x05
    1530:	9e 81       	ldd	r25, Y+6	; 0x06
    1532:	fc 01       	movw	r30, r24
    1534:	31 83       	std	Z+1, r19	; 0x01
    1536:	20 83       	st	Z, r18
	lqcount=0;
    1538:	10 92 ed 05 	sts	0x05ED, r1
    153c:	10 92 ec 05 	sts	0x05EC, r1
	
	leave_atomic();
    1540:	78 94       	sei
}
    1542:	26 96       	adiw	r28, 0x06	; 6
    1544:	0f b6       	in	r0, 0x3f	; 63
    1546:	f8 94       	cli
    1548:	de bf       	out	0x3e, r29	; 62
    154a:	0f be       	out	0x3f, r0	; 63
    154c:	cd bf       	out	0x3d, r28	; 61
    154e:	cf 91       	pop	r28
    1550:	df 91       	pop	r29
    1552:	08 95       	ret

00001554 <say>:

void say(char *str)
{
    1554:	0f 93       	push	r16
    1556:	1f 93       	push	r17
    1558:	df 93       	push	r29
    155a:	cf 93       	push	r28
    155c:	00 d0       	rcall	.+0      	; 0x155e <say+0xa>
    155e:	00 d0       	rcall	.+0      	; 0x1560 <say+0xc>
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
    1564:	9c 83       	std	Y+4, r25	; 0x04
    1566:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	
	// Guarantee atomicity
	enter_atomic();
    1568:	f8 94       	cli
	for(i=0; i<strlen(str) && qcount < QLEN; i++)
    156a:	1a 82       	std	Y+2, r1	; 0x02
    156c:	19 82       	std	Y+1, r1	; 0x01
    156e:	62 c0       	rjmp	.+196    	; 0x1634 <say+0xe0>
	{
		q[qhead]=str[i];
    1570:	80 91 36 06 	lds	r24, 0x0636
    1574:	90 91 37 06 	lds	r25, 0x0637
    1578:	29 81       	ldd	r18, Y+1	; 0x01
    157a:	3a 81       	ldd	r19, Y+2	; 0x02
    157c:	4b 81       	ldd	r20, Y+3	; 0x03
    157e:	5c 81       	ldd	r21, Y+4	; 0x04
    1580:	24 0f       	add	r18, r20
    1582:	35 1f       	adc	r19, r21
    1584:	f9 01       	movw	r30, r18
    1586:	20 81       	ld	r18, Z
    1588:	8a 50       	subi	r24, 0x0A	; 10
    158a:	9a 4f       	sbci	r25, 0xFA	; 250
    158c:	fc 01       	movw	r30, r24
    158e:	20 83       	st	Z, r18
		qhead=(qhead+1) %QLEN;
    1590:	80 91 36 06 	lds	r24, 0x0636
    1594:	90 91 37 06 	lds	r25, 0x0637
    1598:	01 96       	adiw	r24, 0x01	; 1
    159a:	20 e4       	ldi	r18, 0x40	; 64
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	b9 01       	movw	r22, r18
    15a0:	0e 94 89 10 	call	0x2112	; 0x2112 <__divmodhi4>
    15a4:	90 93 37 06 	sts	0x0637, r25
    15a8:	80 93 36 06 	sts	0x0636, r24
		qcount++;			
    15ac:	80 91 f2 05 	lds	r24, 0x05F2
    15b0:	90 91 f3 05 	lds	r25, 0x05F3
    15b4:	01 96       	adiw	r24, 0x01	; 1
    15b6:	90 93 f3 05 	sts	0x05F3, r25
    15ba:	80 93 f2 05 	sts	0x05F2, r24
	
		if(!(UCSR0B & 0b01000000))
    15be:	81 ec       	ldi	r24, 0xC1	; 193
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	fc 01       	movw	r30, r24
    15c4:	80 81       	ld	r24, Z
    15c6:	88 2f       	mov	r24, r24
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	80 74       	andi	r24, 0x40	; 64
    15cc:	90 70       	andi	r25, 0x00	; 0
    15ce:	00 97       	sbiw	r24, 0x00	; 0
    15d0:	61 f5       	brne	.+88     	; 0x162a <say+0xd6>
		{
			UDR0=q[qtail];
    15d2:	86 ec       	ldi	r24, 0xC6	; 198
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	20 91 f4 05 	lds	r18, 0x05F4
    15da:	30 91 f5 05 	lds	r19, 0x05F5
    15de:	2a 50       	subi	r18, 0x0A	; 10
    15e0:	3a 4f       	sbci	r19, 0xFA	; 250
    15e2:	f9 01       	movw	r30, r18
    15e4:	20 81       	ld	r18, Z
    15e6:	fc 01       	movw	r30, r24
    15e8:	20 83       	st	Z, r18
			qtail=(qtail+1)%QLEN;
    15ea:	80 91 f4 05 	lds	r24, 0x05F4
    15ee:	90 91 f5 05 	lds	r25, 0x05F5
    15f2:	01 96       	adiw	r24, 0x01	; 1
    15f4:	20 e4       	ldi	r18, 0x40	; 64
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	b9 01       	movw	r22, r18
    15fa:	0e 94 89 10 	call	0x2112	; 0x2112 <__divmodhi4>
    15fe:	90 93 f5 05 	sts	0x05F5, r25
    1602:	80 93 f4 05 	sts	0x05F4, r24
			qcount--;
    1606:	80 91 f2 05 	lds	r24, 0x05F2
    160a:	90 91 f3 05 	lds	r25, 0x05F3
    160e:	01 97       	sbiw	r24, 0x01	; 1
    1610:	90 93 f3 05 	sts	0x05F3, r25
    1614:	80 93 f2 05 	sts	0x05F2, r24
			UCSR0B|=0b01000000;
    1618:	81 ec       	ldi	r24, 0xC1	; 193
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	21 ec       	ldi	r18, 0xC1	; 193
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	f9 01       	movw	r30, r18
    1622:	20 81       	ld	r18, Z
    1624:	20 64       	ori	r18, 0x40	; 64
    1626:	fc 01       	movw	r30, r24
    1628:	20 83       	st	Z, r18
{
	int i;
	
	// Guarantee atomicity
	enter_atomic();
	for(i=0; i<strlen(str) && qcount < QLEN; i++)
    162a:	89 81       	ldd	r24, Y+1	; 0x01
    162c:	9a 81       	ldd	r25, Y+2	; 0x02
    162e:	01 96       	adiw	r24, 0x01	; 1
    1630:	9a 83       	std	Y+2, r25	; 0x02
    1632:	89 83       	std	Y+1, r24	; 0x01
    1634:	09 81       	ldd	r16, Y+1	; 0x01
    1636:	1a 81       	ldd	r17, Y+2	; 0x02
    1638:	8b 81       	ldd	r24, Y+3	; 0x03
    163a:	9c 81       	ldd	r25, Y+4	; 0x04
    163c:	0e 94 31 12 	call	0x2462	; 0x2462 <strlen>
    1640:	08 17       	cp	r16, r24
    1642:	19 07       	cpc	r17, r25
    1644:	40 f4       	brcc	.+16     	; 0x1656 <say+0x102>
    1646:	80 91 f2 05 	lds	r24, 0x05F2
    164a:	90 91 f3 05 	lds	r25, 0x05F3
    164e:	80 34       	cpi	r24, 0x40	; 64
    1650:	91 05       	cpc	r25, r1
    1652:	0c f4       	brge	.+2      	; 0x1656 <say+0x102>
    1654:	8d cf       	rjmp	.-230    	; 0x1570 <say+0x1c>
			qtail=(qtail+1)%QLEN;
			qcount--;
			UCSR0B|=0b01000000;
		}
	}
	leave_atomic();
    1656:	78 94       	sei
}
    1658:	0f 90       	pop	r0
    165a:	0f 90       	pop	r0
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
    1660:	cf 91       	pop	r28
    1662:	df 91       	pop	r29
    1664:	1f 91       	pop	r17
    1666:	0f 91       	pop	r16
    1668:	08 95       	ret

0000166a <__fixunssfsi>:
    166a:	ef 92       	push	r14
    166c:	ff 92       	push	r15
    166e:	0f 93       	push	r16
    1670:	1f 93       	push	r17
    1672:	7b 01       	movw	r14, r22
    1674:	8c 01       	movw	r16, r24
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	40 e0       	ldi	r20, 0x00	; 0
    167c:	5f e4       	ldi	r21, 0x4F	; 79
    167e:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <__gesf2>
    1682:	87 fd       	sbrc	r24, 7
    1684:	11 c0       	rjmp	.+34     	; 0x16a8 <__fixunssfsi+0x3e>
    1686:	c8 01       	movw	r24, r16
    1688:	b7 01       	movw	r22, r14
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	40 e0       	ldi	r20, 0x00	; 0
    1690:	5f e4       	ldi	r21, 0x4F	; 79
    1692:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <__subsf3>
    1696:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <__fixsfsi>
    169a:	9b 01       	movw	r18, r22
    169c:	ac 01       	movw	r20, r24
    169e:	20 50       	subi	r18, 0x00	; 0
    16a0:	30 40       	sbci	r19, 0x00	; 0
    16a2:	40 40       	sbci	r20, 0x00	; 0
    16a4:	50 48       	sbci	r21, 0x80	; 128
    16a6:	06 c0       	rjmp	.+12     	; 0x16b4 <__fixunssfsi+0x4a>
    16a8:	c8 01       	movw	r24, r16
    16aa:	b7 01       	movw	r22, r14
    16ac:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <__fixsfsi>
    16b0:	9b 01       	movw	r18, r22
    16b2:	ac 01       	movw	r20, r24
    16b4:	b9 01       	movw	r22, r18
    16b6:	ca 01       	movw	r24, r20
    16b8:	1f 91       	pop	r17
    16ba:	0f 91       	pop	r16
    16bc:	ff 90       	pop	r15
    16be:	ef 90       	pop	r14
    16c0:	08 95       	ret

000016c2 <_fpadd_parts>:
    16c2:	a0 e0       	ldi	r26, 0x00	; 0
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	e7 e6       	ldi	r30, 0x67	; 103
    16c8:	fb e0       	ldi	r31, 0x0B	; 11
    16ca:	0c 94 a0 10 	jmp	0x2140	; 0x2140 <__prologue_saves__+0x8>
    16ce:	fc 01       	movw	r30, r24
    16d0:	ea 01       	movw	r28, r20
    16d2:	80 81       	ld	r24, Z
    16d4:	82 30       	cpi	r24, 0x02	; 2
    16d6:	08 f4       	brcc	.+2      	; 0x16da <_fpadd_parts+0x18>
    16d8:	38 c1       	rjmp	.+624    	; 0x194a <_fpadd_parts+0x288>
    16da:	db 01       	movw	r26, r22
    16dc:	9c 91       	ld	r25, X
    16de:	92 30       	cpi	r25, 0x02	; 2
    16e0:	08 f4       	brcc	.+2      	; 0x16e4 <_fpadd_parts+0x22>
    16e2:	30 c1       	rjmp	.+608    	; 0x1944 <_fpadd_parts+0x282>
    16e4:	84 30       	cpi	r24, 0x04	; 4
    16e6:	59 f4       	brne	.+22     	; 0x16fe <_fpadd_parts+0x3c>
    16e8:	94 30       	cpi	r25, 0x04	; 4
    16ea:	09 f0       	breq	.+2      	; 0x16ee <_fpadd_parts+0x2c>
    16ec:	2e c1       	rjmp	.+604    	; 0x194a <_fpadd_parts+0x288>
    16ee:	91 81       	ldd	r25, Z+1	; 0x01
    16f0:	11 96       	adiw	r26, 0x01	; 1
    16f2:	8c 91       	ld	r24, X
    16f4:	11 97       	sbiw	r26, 0x01	; 1
    16f6:	98 17       	cp	r25, r24
    16f8:	09 f0       	breq	.+2      	; 0x16fc <_fpadd_parts+0x3a>
    16fa:	21 c1       	rjmp	.+578    	; 0x193e <_fpadd_parts+0x27c>
    16fc:	26 c1       	rjmp	.+588    	; 0x194a <_fpadd_parts+0x288>
    16fe:	94 30       	cpi	r25, 0x04	; 4
    1700:	09 f4       	brne	.+2      	; 0x1704 <_fpadd_parts+0x42>
    1702:	20 c1       	rjmp	.+576    	; 0x1944 <_fpadd_parts+0x282>
    1704:	92 30       	cpi	r25, 0x02	; 2
    1706:	b1 f4       	brne	.+44     	; 0x1734 <_fpadd_parts+0x72>
    1708:	82 30       	cpi	r24, 0x02	; 2
    170a:	09 f0       	breq	.+2      	; 0x170e <_fpadd_parts+0x4c>
    170c:	1e c1       	rjmp	.+572    	; 0x194a <_fpadd_parts+0x288>
    170e:	ca 01       	movw	r24, r20
    1710:	af 01       	movw	r20, r30
    1712:	28 e0       	ldi	r18, 0x08	; 8
    1714:	da 01       	movw	r26, r20
    1716:	0d 90       	ld	r0, X+
    1718:	ad 01       	movw	r20, r26
    171a:	dc 01       	movw	r26, r24
    171c:	0d 92       	st	X+, r0
    171e:	cd 01       	movw	r24, r26
    1720:	21 50       	subi	r18, 0x01	; 1
    1722:	c1 f7       	brne	.-16     	; 0x1714 <_fpadd_parts+0x52>
    1724:	db 01       	movw	r26, r22
    1726:	11 96       	adiw	r26, 0x01	; 1
    1728:	8c 91       	ld	r24, X
    172a:	11 97       	sbiw	r26, 0x01	; 1
    172c:	91 81       	ldd	r25, Z+1	; 0x01
    172e:	89 23       	and	r24, r25
    1730:	89 83       	std	Y+1, r24	; 0x01
    1732:	0a c1       	rjmp	.+532    	; 0x1948 <_fpadd_parts+0x286>
    1734:	82 30       	cpi	r24, 0x02	; 2
    1736:	09 f4       	brne	.+2      	; 0x173a <_fpadd_parts+0x78>
    1738:	05 c1       	rjmp	.+522    	; 0x1944 <_fpadd_parts+0x282>
    173a:	c2 80       	ldd	r12, Z+2	; 0x02
    173c:	d3 80       	ldd	r13, Z+3	; 0x03
    173e:	db 01       	movw	r26, r22
    1740:	12 96       	adiw	r26, 0x02	; 2
    1742:	6d 90       	ld	r6, X+
    1744:	7c 90       	ld	r7, X
    1746:	13 97       	sbiw	r26, 0x03	; 3
    1748:	24 81       	ldd	r18, Z+4	; 0x04
    174a:	35 81       	ldd	r19, Z+5	; 0x05
    174c:	46 81       	ldd	r20, Z+6	; 0x06
    174e:	57 81       	ldd	r21, Z+7	; 0x07
    1750:	14 96       	adiw	r26, 0x04	; 4
    1752:	ed 90       	ld	r14, X+
    1754:	fd 90       	ld	r15, X+
    1756:	0d 91       	ld	r16, X+
    1758:	1c 91       	ld	r17, X
    175a:	17 97       	sbiw	r26, 0x07	; 7
    175c:	c6 01       	movw	r24, r12
    175e:	86 19       	sub	r24, r6
    1760:	97 09       	sbc	r25, r7
    1762:	5c 01       	movw	r10, r24
    1764:	97 ff       	sbrs	r25, 7
    1766:	04 c0       	rjmp	.+8      	; 0x1770 <_fpadd_parts+0xae>
    1768:	aa 24       	eor	r10, r10
    176a:	bb 24       	eor	r11, r11
    176c:	a8 1a       	sub	r10, r24
    176e:	b9 0a       	sbc	r11, r25
    1770:	b0 e2       	ldi	r27, 0x20	; 32
    1772:	ab 16       	cp	r10, r27
    1774:	b1 04       	cpc	r11, r1
    1776:	0c f0       	brlt	.+2      	; 0x177a <_fpadd_parts+0xb8>
    1778:	61 c0       	rjmp	.+194    	; 0x183c <_fpadd_parts+0x17a>
    177a:	18 16       	cp	r1, r24
    177c:	19 06       	cpc	r1, r25
    177e:	6c f5       	brge	.+90     	; 0x17da <_fpadd_parts+0x118>
    1780:	37 01       	movw	r6, r14
    1782:	48 01       	movw	r8, r16
    1784:	0a 2c       	mov	r0, r10
    1786:	04 c0       	rjmp	.+8      	; 0x1790 <_fpadd_parts+0xce>
    1788:	96 94       	lsr	r9
    178a:	87 94       	ror	r8
    178c:	77 94       	ror	r7
    178e:	67 94       	ror	r6
    1790:	0a 94       	dec	r0
    1792:	d2 f7       	brpl	.-12     	; 0x1788 <_fpadd_parts+0xc6>
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	a0 e0       	ldi	r26, 0x00	; 0
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	0a 2c       	mov	r0, r10
    179e:	04 c0       	rjmp	.+8      	; 0x17a8 <_fpadd_parts+0xe6>
    17a0:	88 0f       	add	r24, r24
    17a2:	99 1f       	adc	r25, r25
    17a4:	aa 1f       	adc	r26, r26
    17a6:	bb 1f       	adc	r27, r27
    17a8:	0a 94       	dec	r0
    17aa:	d2 f7       	brpl	.-12     	; 0x17a0 <_fpadd_parts+0xde>
    17ac:	01 97       	sbiw	r24, 0x01	; 1
    17ae:	a1 09       	sbc	r26, r1
    17b0:	b1 09       	sbc	r27, r1
    17b2:	8e 21       	and	r24, r14
    17b4:	9f 21       	and	r25, r15
    17b6:	a0 23       	and	r26, r16
    17b8:	b1 23       	and	r27, r17
    17ba:	ee 24       	eor	r14, r14
    17bc:	ff 24       	eor	r15, r15
    17be:	87 01       	movw	r16, r14
    17c0:	e3 94       	inc	r14
    17c2:	00 97       	sbiw	r24, 0x00	; 0
    17c4:	a1 05       	cpc	r26, r1
    17c6:	b1 05       	cpc	r27, r1
    17c8:	19 f4       	brne	.+6      	; 0x17d0 <_fpadd_parts+0x10e>
    17ca:	ee 24       	eor	r14, r14
    17cc:	ff 24       	eor	r15, r15
    17ce:	87 01       	movw	r16, r14
    17d0:	e6 28       	or	r14, r6
    17d2:	f7 28       	or	r15, r7
    17d4:	08 29       	or	r16, r8
    17d6:	19 29       	or	r17, r9
    17d8:	3c c0       	rjmp	.+120    	; 0x1852 <_fpadd_parts+0x190>
    17da:	00 97       	sbiw	r24, 0x00	; 0
    17dc:	d1 f1       	breq	.+116    	; 0x1852 <_fpadd_parts+0x190>
    17de:	ca 0c       	add	r12, r10
    17e0:	db 1c       	adc	r13, r11
    17e2:	39 01       	movw	r6, r18
    17e4:	4a 01       	movw	r8, r20
    17e6:	0a 2c       	mov	r0, r10
    17e8:	04 c0       	rjmp	.+8      	; 0x17f2 <_fpadd_parts+0x130>
    17ea:	96 94       	lsr	r9
    17ec:	87 94       	ror	r8
    17ee:	77 94       	ror	r7
    17f0:	67 94       	ror	r6
    17f2:	0a 94       	dec	r0
    17f4:	d2 f7       	brpl	.-12     	; 0x17ea <_fpadd_parts+0x128>
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	a0 e0       	ldi	r26, 0x00	; 0
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	0a 2c       	mov	r0, r10
    1800:	04 c0       	rjmp	.+8      	; 0x180a <_fpadd_parts+0x148>
    1802:	88 0f       	add	r24, r24
    1804:	99 1f       	adc	r25, r25
    1806:	aa 1f       	adc	r26, r26
    1808:	bb 1f       	adc	r27, r27
    180a:	0a 94       	dec	r0
    180c:	d2 f7       	brpl	.-12     	; 0x1802 <_fpadd_parts+0x140>
    180e:	01 97       	sbiw	r24, 0x01	; 1
    1810:	a1 09       	sbc	r26, r1
    1812:	b1 09       	sbc	r27, r1
    1814:	82 23       	and	r24, r18
    1816:	93 23       	and	r25, r19
    1818:	a4 23       	and	r26, r20
    181a:	b5 23       	and	r27, r21
    181c:	21 e0       	ldi	r18, 0x01	; 1
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	40 e0       	ldi	r20, 0x00	; 0
    1822:	50 e0       	ldi	r21, 0x00	; 0
    1824:	00 97       	sbiw	r24, 0x00	; 0
    1826:	a1 05       	cpc	r26, r1
    1828:	b1 05       	cpc	r27, r1
    182a:	19 f4       	brne	.+6      	; 0x1832 <_fpadd_parts+0x170>
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	a9 01       	movw	r20, r18
    1832:	26 29       	or	r18, r6
    1834:	37 29       	or	r19, r7
    1836:	48 29       	or	r20, r8
    1838:	59 29       	or	r21, r9
    183a:	0b c0       	rjmp	.+22     	; 0x1852 <_fpadd_parts+0x190>
    183c:	6c 14       	cp	r6, r12
    183e:	7d 04       	cpc	r7, r13
    1840:	24 f4       	brge	.+8      	; 0x184a <_fpadd_parts+0x188>
    1842:	ee 24       	eor	r14, r14
    1844:	ff 24       	eor	r15, r15
    1846:	87 01       	movw	r16, r14
    1848:	04 c0       	rjmp	.+8      	; 0x1852 <_fpadd_parts+0x190>
    184a:	63 01       	movw	r12, r6
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	a9 01       	movw	r20, r18
    1852:	81 81       	ldd	r24, Z+1	; 0x01
    1854:	fb 01       	movw	r30, r22
    1856:	91 81       	ldd	r25, Z+1	; 0x01
    1858:	89 17       	cp	r24, r25
    185a:	09 f4       	brne	.+2      	; 0x185e <_fpadd_parts+0x19c>
    185c:	45 c0       	rjmp	.+138    	; 0x18e8 <_fpadd_parts+0x226>
    185e:	88 23       	and	r24, r24
    1860:	49 f0       	breq	.+18     	; 0x1874 <_fpadd_parts+0x1b2>
    1862:	d8 01       	movw	r26, r16
    1864:	c7 01       	movw	r24, r14
    1866:	82 1b       	sub	r24, r18
    1868:	93 0b       	sbc	r25, r19
    186a:	a4 0b       	sbc	r26, r20
    186c:	b5 0b       	sbc	r27, r21
    186e:	9c 01       	movw	r18, r24
    1870:	ad 01       	movw	r20, r26
    1872:	04 c0       	rjmp	.+8      	; 0x187c <_fpadd_parts+0x1ba>
    1874:	2e 19       	sub	r18, r14
    1876:	3f 09       	sbc	r19, r15
    1878:	40 0b       	sbc	r20, r16
    187a:	51 0b       	sbc	r21, r17
    187c:	57 fd       	sbrc	r21, 7
    187e:	04 c0       	rjmp	.+8      	; 0x1888 <_fpadd_parts+0x1c6>
    1880:	19 82       	std	Y+1, r1	; 0x01
    1882:	db 82       	std	Y+3, r13	; 0x03
    1884:	ca 82       	std	Y+2, r12	; 0x02
    1886:	0b c0       	rjmp	.+22     	; 0x189e <_fpadd_parts+0x1dc>
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	89 83       	std	Y+1, r24	; 0x01
    188c:	db 82       	std	Y+3, r13	; 0x03
    188e:	ca 82       	std	Y+2, r12	; 0x02
    1890:	50 95       	com	r21
    1892:	40 95       	com	r20
    1894:	30 95       	com	r19
    1896:	21 95       	neg	r18
    1898:	3f 4f       	sbci	r19, 0xFF	; 255
    189a:	4f 4f       	sbci	r20, 0xFF	; 255
    189c:	5f 4f       	sbci	r21, 0xFF	; 255
    189e:	2c 83       	std	Y+4, r18	; 0x04
    18a0:	3d 83       	std	Y+5, r19	; 0x05
    18a2:	4e 83       	std	Y+6, r20	; 0x06
    18a4:	5f 83       	std	Y+7, r21	; 0x07
    18a6:	0d c0       	rjmp	.+26     	; 0x18c2 <_fpadd_parts+0x200>
    18a8:	88 0f       	add	r24, r24
    18aa:	99 1f       	adc	r25, r25
    18ac:	aa 1f       	adc	r26, r26
    18ae:	bb 1f       	adc	r27, r27
    18b0:	8c 83       	std	Y+4, r24	; 0x04
    18b2:	9d 83       	std	Y+5, r25	; 0x05
    18b4:	ae 83       	std	Y+6, r26	; 0x06
    18b6:	bf 83       	std	Y+7, r27	; 0x07
    18b8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ba:	9b 81       	ldd	r25, Y+3	; 0x03
    18bc:	01 97       	sbiw	r24, 0x01	; 1
    18be:	9b 83       	std	Y+3, r25	; 0x03
    18c0:	8a 83       	std	Y+2, r24	; 0x02
    18c2:	8c 81       	ldd	r24, Y+4	; 0x04
    18c4:	9d 81       	ldd	r25, Y+5	; 0x05
    18c6:	ae 81       	ldd	r26, Y+6	; 0x06
    18c8:	bf 81       	ldd	r27, Y+7	; 0x07
    18ca:	9c 01       	movw	r18, r24
    18cc:	ad 01       	movw	r20, r26
    18ce:	21 50       	subi	r18, 0x01	; 1
    18d0:	30 40       	sbci	r19, 0x00	; 0
    18d2:	40 40       	sbci	r20, 0x00	; 0
    18d4:	50 40       	sbci	r21, 0x00	; 0
    18d6:	2f 3f       	cpi	r18, 0xFF	; 255
    18d8:	ef ef       	ldi	r30, 0xFF	; 255
    18da:	3e 07       	cpc	r19, r30
    18dc:	ef ef       	ldi	r30, 0xFF	; 255
    18de:	4e 07       	cpc	r20, r30
    18e0:	ef e3       	ldi	r30, 0x3F	; 63
    18e2:	5e 07       	cpc	r21, r30
    18e4:	08 f3       	brcs	.-62     	; 0x18a8 <_fpadd_parts+0x1e6>
    18e6:	0b c0       	rjmp	.+22     	; 0x18fe <_fpadd_parts+0x23c>
    18e8:	89 83       	std	Y+1, r24	; 0x01
    18ea:	db 82       	std	Y+3, r13	; 0x03
    18ec:	ca 82       	std	Y+2, r12	; 0x02
    18ee:	2e 0d       	add	r18, r14
    18f0:	3f 1d       	adc	r19, r15
    18f2:	40 1f       	adc	r20, r16
    18f4:	51 1f       	adc	r21, r17
    18f6:	2c 83       	std	Y+4, r18	; 0x04
    18f8:	3d 83       	std	Y+5, r19	; 0x05
    18fa:	4e 83       	std	Y+6, r20	; 0x06
    18fc:	5f 83       	std	Y+7, r21	; 0x07
    18fe:	83 e0       	ldi	r24, 0x03	; 3
    1900:	88 83       	st	Y, r24
    1902:	2c 81       	ldd	r18, Y+4	; 0x04
    1904:	3d 81       	ldd	r19, Y+5	; 0x05
    1906:	4e 81       	ldd	r20, Y+6	; 0x06
    1908:	5f 81       	ldd	r21, Y+7	; 0x07
    190a:	57 ff       	sbrs	r21, 7
    190c:	1d c0       	rjmp	.+58     	; 0x1948 <_fpadd_parts+0x286>
    190e:	da 01       	movw	r26, r20
    1910:	c9 01       	movw	r24, r18
    1912:	81 70       	andi	r24, 0x01	; 1
    1914:	90 70       	andi	r25, 0x00	; 0
    1916:	a0 70       	andi	r26, 0x00	; 0
    1918:	b0 70       	andi	r27, 0x00	; 0
    191a:	56 95       	lsr	r21
    191c:	47 95       	ror	r20
    191e:	37 95       	ror	r19
    1920:	27 95       	ror	r18
    1922:	82 2b       	or	r24, r18
    1924:	93 2b       	or	r25, r19
    1926:	a4 2b       	or	r26, r20
    1928:	b5 2b       	or	r27, r21
    192a:	8c 83       	std	Y+4, r24	; 0x04
    192c:	9d 83       	std	Y+5, r25	; 0x05
    192e:	ae 83       	std	Y+6, r26	; 0x06
    1930:	bf 83       	std	Y+7, r27	; 0x07
    1932:	8a 81       	ldd	r24, Y+2	; 0x02
    1934:	9b 81       	ldd	r25, Y+3	; 0x03
    1936:	01 96       	adiw	r24, 0x01	; 1
    1938:	9b 83       	std	Y+3, r25	; 0x03
    193a:	8a 83       	std	Y+2, r24	; 0x02
    193c:	05 c0       	rjmp	.+10     	; 0x1948 <_fpadd_parts+0x286>
    193e:	ec e0       	ldi	r30, 0x0C	; 12
    1940:	f1 e0       	ldi	r31, 0x01	; 1
    1942:	03 c0       	rjmp	.+6      	; 0x194a <_fpadd_parts+0x288>
    1944:	fb 01       	movw	r30, r22
    1946:	01 c0       	rjmp	.+2      	; 0x194a <_fpadd_parts+0x288>
    1948:	fe 01       	movw	r30, r28
    194a:	cf 01       	movw	r24, r30
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
    1950:	ee e0       	ldi	r30, 0x0E	; 14
    1952:	0c 94 bc 10 	jmp	0x2178	; 0x2178 <__epilogue_restores__+0x8>

00001956 <__addsf3>:
    1956:	a0 e2       	ldi	r26, 0x20	; 32
    1958:	b0 e0       	ldi	r27, 0x00	; 0
    195a:	e1 eb       	ldi	r30, 0xB1	; 177
    195c:	fc e0       	ldi	r31, 0x0C	; 12
    195e:	0c 94 a8 10 	jmp	0x2150	; 0x2150 <__prologue_saves__+0x18>
    1962:	69 83       	std	Y+1, r22	; 0x01
    1964:	7a 83       	std	Y+2, r23	; 0x02
    1966:	8b 83       	std	Y+3, r24	; 0x03
    1968:	9c 83       	std	Y+4, r25	; 0x04
    196a:	2d 83       	std	Y+5, r18	; 0x05
    196c:	3e 83       	std	Y+6, r19	; 0x06
    196e:	4f 83       	std	Y+7, r20	; 0x07
    1970:	58 87       	std	Y+8, r21	; 0x08
    1972:	89 e0       	ldi	r24, 0x09	; 9
    1974:	e8 2e       	mov	r14, r24
    1976:	f1 2c       	mov	r15, r1
    1978:	ec 0e       	add	r14, r28
    197a:	fd 1e       	adc	r15, r29
    197c:	ce 01       	movw	r24, r28
    197e:	01 96       	adiw	r24, 0x01	; 1
    1980:	b7 01       	movw	r22, r14
    1982:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <__unpack_f>
    1986:	8e 01       	movw	r16, r28
    1988:	0f 5e       	subi	r16, 0xEF	; 239
    198a:	1f 4f       	sbci	r17, 0xFF	; 255
    198c:	ce 01       	movw	r24, r28
    198e:	05 96       	adiw	r24, 0x05	; 5
    1990:	b8 01       	movw	r22, r16
    1992:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <__unpack_f>
    1996:	c7 01       	movw	r24, r14
    1998:	b8 01       	movw	r22, r16
    199a:	ae 01       	movw	r20, r28
    199c:	47 5e       	subi	r20, 0xE7	; 231
    199e:	5f 4f       	sbci	r21, 0xFF	; 255
    19a0:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <_fpadd_parts>
    19a4:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__pack_f>
    19a8:	a0 96       	adiw	r28, 0x20	; 32
    19aa:	e6 e0       	ldi	r30, 0x06	; 6
    19ac:	0c 94 c4 10 	jmp	0x2188	; 0x2188 <__epilogue_restores__+0x18>

000019b0 <__subsf3>:
    19b0:	a0 e2       	ldi	r26, 0x20	; 32
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	ee ed       	ldi	r30, 0xDE	; 222
    19b6:	fc e0       	ldi	r31, 0x0C	; 12
    19b8:	0c 94 a8 10 	jmp	0x2150	; 0x2150 <__prologue_saves__+0x18>
    19bc:	69 83       	std	Y+1, r22	; 0x01
    19be:	7a 83       	std	Y+2, r23	; 0x02
    19c0:	8b 83       	std	Y+3, r24	; 0x03
    19c2:	9c 83       	std	Y+4, r25	; 0x04
    19c4:	2d 83       	std	Y+5, r18	; 0x05
    19c6:	3e 83       	std	Y+6, r19	; 0x06
    19c8:	4f 83       	std	Y+7, r20	; 0x07
    19ca:	58 87       	std	Y+8, r21	; 0x08
    19cc:	8e 01       	movw	r16, r28
    19ce:	07 5f       	subi	r16, 0xF7	; 247
    19d0:	1f 4f       	sbci	r17, 0xFF	; 255
    19d2:	ce 01       	movw	r24, r28
    19d4:	01 96       	adiw	r24, 0x01	; 1
    19d6:	b8 01       	movw	r22, r16
    19d8:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <__unpack_f>
    19dc:	91 e1       	ldi	r25, 0x11	; 17
    19de:	e9 2e       	mov	r14, r25
    19e0:	f1 2c       	mov	r15, r1
    19e2:	ec 0e       	add	r14, r28
    19e4:	fd 1e       	adc	r15, r29
    19e6:	ce 01       	movw	r24, r28
    19e8:	05 96       	adiw	r24, 0x05	; 5
    19ea:	b7 01       	movw	r22, r14
    19ec:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <__unpack_f>
    19f0:	8a 89       	ldd	r24, Y+18	; 0x12
    19f2:	91 e0       	ldi	r25, 0x01	; 1
    19f4:	89 27       	eor	r24, r25
    19f6:	8a 8b       	std	Y+18, r24	; 0x12
    19f8:	c8 01       	movw	r24, r16
    19fa:	b7 01       	movw	r22, r14
    19fc:	ae 01       	movw	r20, r28
    19fe:	47 5e       	subi	r20, 0xE7	; 231
    1a00:	5f 4f       	sbci	r21, 0xFF	; 255
    1a02:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <_fpadd_parts>
    1a06:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__pack_f>
    1a0a:	a0 96       	adiw	r28, 0x20	; 32
    1a0c:	e6 e0       	ldi	r30, 0x06	; 6
    1a0e:	0c 94 c4 10 	jmp	0x2188	; 0x2188 <__epilogue_restores__+0x18>

00001a12 <__mulsf3>:
    1a12:	a0 e2       	ldi	r26, 0x20	; 32
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	ef e0       	ldi	r30, 0x0F	; 15
    1a18:	fd e0       	ldi	r31, 0x0D	; 13
    1a1a:	0c 94 9c 10 	jmp	0x2138	; 0x2138 <__prologue_saves__>
    1a1e:	69 83       	std	Y+1, r22	; 0x01
    1a20:	7a 83       	std	Y+2, r23	; 0x02
    1a22:	8b 83       	std	Y+3, r24	; 0x03
    1a24:	9c 83       	std	Y+4, r25	; 0x04
    1a26:	2d 83       	std	Y+5, r18	; 0x05
    1a28:	3e 83       	std	Y+6, r19	; 0x06
    1a2a:	4f 83       	std	Y+7, r20	; 0x07
    1a2c:	58 87       	std	Y+8, r21	; 0x08
    1a2e:	ce 01       	movw	r24, r28
    1a30:	01 96       	adiw	r24, 0x01	; 1
    1a32:	be 01       	movw	r22, r28
    1a34:	67 5f       	subi	r22, 0xF7	; 247
    1a36:	7f 4f       	sbci	r23, 0xFF	; 255
    1a38:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <__unpack_f>
    1a3c:	ce 01       	movw	r24, r28
    1a3e:	05 96       	adiw	r24, 0x05	; 5
    1a40:	be 01       	movw	r22, r28
    1a42:	6f 5e       	subi	r22, 0xEF	; 239
    1a44:	7f 4f       	sbci	r23, 0xFF	; 255
    1a46:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <__unpack_f>
    1a4a:	99 85       	ldd	r25, Y+9	; 0x09
    1a4c:	92 30       	cpi	r25, 0x02	; 2
    1a4e:	78 f0       	brcs	.+30     	; 0x1a6e <__mulsf3+0x5c>
    1a50:	89 89       	ldd	r24, Y+17	; 0x11
    1a52:	82 30       	cpi	r24, 0x02	; 2
    1a54:	c0 f0       	brcs	.+48     	; 0x1a86 <__mulsf3+0x74>
    1a56:	94 30       	cpi	r25, 0x04	; 4
    1a58:	19 f4       	brne	.+6      	; 0x1a60 <__mulsf3+0x4e>
    1a5a:	82 30       	cpi	r24, 0x02	; 2
    1a5c:	41 f4       	brne	.+16     	; 0x1a6e <__mulsf3+0x5c>
    1a5e:	cb c0       	rjmp	.+406    	; 0x1bf6 <__mulsf3+0x1e4>
    1a60:	84 30       	cpi	r24, 0x04	; 4
    1a62:	19 f4       	brne	.+6      	; 0x1a6a <__mulsf3+0x58>
    1a64:	92 30       	cpi	r25, 0x02	; 2
    1a66:	79 f4       	brne	.+30     	; 0x1a86 <__mulsf3+0x74>
    1a68:	c6 c0       	rjmp	.+396    	; 0x1bf6 <__mulsf3+0x1e4>
    1a6a:	92 30       	cpi	r25, 0x02	; 2
    1a6c:	51 f4       	brne	.+20     	; 0x1a82 <__mulsf3+0x70>
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a72:	9a 89       	ldd	r25, Y+18	; 0x12
    1a74:	29 17       	cp	r18, r25
    1a76:	09 f4       	brne	.+2      	; 0x1a7a <__mulsf3+0x68>
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	8a 87       	std	Y+10, r24	; 0x0a
    1a7c:	ce 01       	movw	r24, r28
    1a7e:	09 96       	adiw	r24, 0x09	; 9
    1a80:	bc c0       	rjmp	.+376    	; 0x1bfa <__mulsf3+0x1e8>
    1a82:	82 30       	cpi	r24, 0x02	; 2
    1a84:	51 f4       	brne	.+20     	; 0x1a9a <__mulsf3+0x88>
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a8a:	9a 89       	ldd	r25, Y+18	; 0x12
    1a8c:	29 17       	cp	r18, r25
    1a8e:	09 f4       	brne	.+2      	; 0x1a92 <__mulsf3+0x80>
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	8a 8b       	std	Y+18, r24	; 0x12
    1a94:	ce 01       	movw	r24, r28
    1a96:	41 96       	adiw	r24, 0x11	; 17
    1a98:	b0 c0       	rjmp	.+352    	; 0x1bfa <__mulsf3+0x1e8>
    1a9a:	6d 84       	ldd	r6, Y+13	; 0x0d
    1a9c:	7e 84       	ldd	r7, Y+14	; 0x0e
    1a9e:	8f 84       	ldd	r8, Y+15	; 0x0f
    1aa0:	98 88       	ldd	r9, Y+16	; 0x10
    1aa2:	ed 88       	ldd	r14, Y+21	; 0x15
    1aa4:	fe 88       	ldd	r15, Y+22	; 0x16
    1aa6:	0f 89       	ldd	r16, Y+23	; 0x17
    1aa8:	18 8d       	ldd	r17, Y+24	; 0x18
    1aaa:	e0 e2       	ldi	r30, 0x20	; 32
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 e0       	ldi	r24, 0x00	; 0
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	aa 24       	eor	r10, r10
    1ab6:	bb 24       	eor	r11, r11
    1ab8:	65 01       	movw	r12, r10
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	a9 01       	movw	r20, r18
    1ac0:	b3 01       	movw	r22, r6
    1ac2:	61 70       	andi	r22, 0x01	; 1
    1ac4:	70 70       	andi	r23, 0x00	; 0
    1ac6:	61 15       	cp	r22, r1
    1ac8:	71 05       	cpc	r23, r1
    1aca:	d1 f0       	breq	.+52     	; 0x1b00 <__mulsf3+0xee>
    1acc:	2e 0d       	add	r18, r14
    1ace:	3f 1d       	adc	r19, r15
    1ad0:	40 1f       	adc	r20, r16
    1ad2:	51 1f       	adc	r21, r17
    1ad4:	15 01       	movw	r2, r10
    1ad6:	26 01       	movw	r4, r12
    1ad8:	28 0e       	add	r2, r24
    1ada:	39 1e       	adc	r3, r25
    1adc:	4a 1e       	adc	r4, r26
    1ade:	5b 1e       	adc	r5, r27
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	a0 e0       	ldi	r26, 0x00	; 0
    1ae6:	b0 e0       	ldi	r27, 0x00	; 0
    1ae8:	2e 15       	cp	r18, r14
    1aea:	3f 05       	cpc	r19, r15
    1aec:	40 07       	cpc	r20, r16
    1aee:	51 07       	cpc	r21, r17
    1af0:	18 f0       	brcs	.+6      	; 0x1af8 <__mulsf3+0xe6>
    1af2:	80 e0       	ldi	r24, 0x00	; 0
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	dc 01       	movw	r26, r24
    1af8:	82 0d       	add	r24, r2
    1afa:	93 1d       	adc	r25, r3
    1afc:	a4 1d       	adc	r26, r4
    1afe:	b5 1d       	adc	r27, r5
    1b00:	aa 0c       	add	r10, r10
    1b02:	bb 1c       	adc	r11, r11
    1b04:	cc 1c       	adc	r12, r12
    1b06:	dd 1c       	adc	r13, r13
    1b08:	17 ff       	sbrs	r17, 7
    1b0a:	09 c0       	rjmp	.+18     	; 0x1b1e <__mulsf3+0x10c>
    1b0c:	61 e0       	ldi	r22, 0x01	; 1
    1b0e:	26 2e       	mov	r2, r22
    1b10:	31 2c       	mov	r3, r1
    1b12:	41 2c       	mov	r4, r1
    1b14:	51 2c       	mov	r5, r1
    1b16:	a2 28       	or	r10, r2
    1b18:	b3 28       	or	r11, r3
    1b1a:	c4 28       	or	r12, r4
    1b1c:	d5 28       	or	r13, r5
    1b1e:	31 97       	sbiw	r30, 0x01	; 1
    1b20:	49 f0       	breq	.+18     	; 0x1b34 <__mulsf3+0x122>
    1b22:	ee 0c       	add	r14, r14
    1b24:	ff 1c       	adc	r15, r15
    1b26:	00 1f       	adc	r16, r16
    1b28:	11 1f       	adc	r17, r17
    1b2a:	96 94       	lsr	r9
    1b2c:	87 94       	ror	r8
    1b2e:	77 94       	ror	r7
    1b30:	67 94       	ror	r6
    1b32:	c6 cf       	rjmp	.-116    	; 0x1ac0 <__mulsf3+0xae>
    1b34:	6b 89       	ldd	r22, Y+19	; 0x13
    1b36:	7c 89       	ldd	r23, Y+20	; 0x14
    1b38:	eb 85       	ldd	r30, Y+11	; 0x0b
    1b3a:	fc 85       	ldd	r31, Y+12	; 0x0c
    1b3c:	6e 0f       	add	r22, r30
    1b3e:	7f 1f       	adc	r23, r31
    1b40:	6e 5f       	subi	r22, 0xFE	; 254
    1b42:	7f 4f       	sbci	r23, 0xFF	; 255
    1b44:	7c 8f       	std	Y+28, r23	; 0x1c
    1b46:	6b 8f       	std	Y+27, r22	; 0x1b
    1b48:	61 e0       	ldi	r22, 0x01	; 1
    1b4a:	ea 85       	ldd	r30, Y+10	; 0x0a
    1b4c:	7a 89       	ldd	r23, Y+18	; 0x12
    1b4e:	e7 17       	cp	r30, r23
    1b50:	09 f4       	brne	.+2      	; 0x1b54 <__mulsf3+0x142>
    1b52:	60 e0       	ldi	r22, 0x00	; 0
    1b54:	6a 8f       	std	Y+26, r22	; 0x1a
    1b56:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1b58:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1b5a:	10 c0       	rjmp	.+32     	; 0x1b7c <__mulsf3+0x16a>
    1b5c:	fc 01       	movw	r30, r24
    1b5e:	e1 70       	andi	r30, 0x01	; 1
    1b60:	f0 70       	andi	r31, 0x00	; 0
    1b62:	30 97       	sbiw	r30, 0x00	; 0
    1b64:	29 f0       	breq	.+10     	; 0x1b70 <__mulsf3+0x15e>
    1b66:	56 95       	lsr	r21
    1b68:	47 95       	ror	r20
    1b6a:	37 95       	ror	r19
    1b6c:	27 95       	ror	r18
    1b6e:	50 68       	ori	r21, 0x80	; 128
    1b70:	b6 95       	lsr	r27
    1b72:	a7 95       	ror	r26
    1b74:	97 95       	ror	r25
    1b76:	87 95       	ror	r24
    1b78:	6f 5f       	subi	r22, 0xFF	; 255
    1b7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b7c:	b7 fd       	sbrc	r27, 7
    1b7e:	ee cf       	rjmp	.-36     	; 0x1b5c <__mulsf3+0x14a>
    1b80:	0c c0       	rjmp	.+24     	; 0x1b9a <__mulsf3+0x188>
    1b82:	88 0f       	add	r24, r24
    1b84:	99 1f       	adc	r25, r25
    1b86:	aa 1f       	adc	r26, r26
    1b88:	bb 1f       	adc	r27, r27
    1b8a:	57 fd       	sbrc	r21, 7
    1b8c:	81 60       	ori	r24, 0x01	; 1
    1b8e:	22 0f       	add	r18, r18
    1b90:	33 1f       	adc	r19, r19
    1b92:	44 1f       	adc	r20, r20
    1b94:	55 1f       	adc	r21, r21
    1b96:	61 50       	subi	r22, 0x01	; 1
    1b98:	70 40       	sbci	r23, 0x00	; 0
    1b9a:	80 30       	cpi	r24, 0x00	; 0
    1b9c:	e0 e0       	ldi	r30, 0x00	; 0
    1b9e:	9e 07       	cpc	r25, r30
    1ba0:	e0 e0       	ldi	r30, 0x00	; 0
    1ba2:	ae 07       	cpc	r26, r30
    1ba4:	e0 e4       	ldi	r30, 0x40	; 64
    1ba6:	be 07       	cpc	r27, r30
    1ba8:	60 f3       	brcs	.-40     	; 0x1b82 <__mulsf3+0x170>
    1baa:	6b 8f       	std	Y+27, r22	; 0x1b
    1bac:	7c 8f       	std	Y+28, r23	; 0x1c
    1bae:	6f e7       	ldi	r22, 0x7F	; 127
    1bb0:	e6 2e       	mov	r14, r22
    1bb2:	f1 2c       	mov	r15, r1
    1bb4:	01 2d       	mov	r16, r1
    1bb6:	11 2d       	mov	r17, r1
    1bb8:	e8 22       	and	r14, r24
    1bba:	f9 22       	and	r15, r25
    1bbc:	0a 23       	and	r16, r26
    1bbe:	1b 23       	and	r17, r27
    1bc0:	60 e4       	ldi	r22, 0x40	; 64
    1bc2:	e6 16       	cp	r14, r22
    1bc4:	f1 04       	cpc	r15, r1
    1bc6:	01 05       	cpc	r16, r1
    1bc8:	11 05       	cpc	r17, r1
    1bca:	61 f4       	brne	.+24     	; 0x1be4 <__mulsf3+0x1d2>
    1bcc:	87 fd       	sbrc	r24, 7
    1bce:	0a c0       	rjmp	.+20     	; 0x1be4 <__mulsf3+0x1d2>
    1bd0:	21 15       	cp	r18, r1
    1bd2:	31 05       	cpc	r19, r1
    1bd4:	41 05       	cpc	r20, r1
    1bd6:	51 05       	cpc	r21, r1
    1bd8:	29 f0       	breq	.+10     	; 0x1be4 <__mulsf3+0x1d2>
    1bda:	80 5c       	subi	r24, 0xC0	; 192
    1bdc:	9f 4f       	sbci	r25, 0xFF	; 255
    1bde:	af 4f       	sbci	r26, 0xFF	; 255
    1be0:	bf 4f       	sbci	r27, 0xFF	; 255
    1be2:	80 78       	andi	r24, 0x80	; 128
    1be4:	8d 8f       	std	Y+29, r24	; 0x1d
    1be6:	9e 8f       	std	Y+30, r25	; 0x1e
    1be8:	af 8f       	std	Y+31, r26	; 0x1f
    1bea:	b8 a3       	std	Y+32, r27	; 0x20
    1bec:	83 e0       	ldi	r24, 0x03	; 3
    1bee:	89 8f       	std	Y+25, r24	; 0x19
    1bf0:	ce 01       	movw	r24, r28
    1bf2:	49 96       	adiw	r24, 0x19	; 25
    1bf4:	02 c0       	rjmp	.+4      	; 0x1bfa <__mulsf3+0x1e8>
    1bf6:	8c e0       	ldi	r24, 0x0C	; 12
    1bf8:	91 e0       	ldi	r25, 0x01	; 1
    1bfa:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__pack_f>
    1bfe:	a0 96       	adiw	r28, 0x20	; 32
    1c00:	e2 e1       	ldi	r30, 0x12	; 18
    1c02:	0c 94 b8 10 	jmp	0x2170	; 0x2170 <__epilogue_restores__>

00001c06 <__gtsf2>:
    1c06:	a8 e1       	ldi	r26, 0x18	; 24
    1c08:	b0 e0       	ldi	r27, 0x00	; 0
    1c0a:	e9 e0       	ldi	r30, 0x09	; 9
    1c0c:	fe e0       	ldi	r31, 0x0E	; 14
    1c0e:	0c 94 a8 10 	jmp	0x2150	; 0x2150 <__prologue_saves__+0x18>
    1c12:	69 83       	std	Y+1, r22	; 0x01
    1c14:	7a 83       	std	Y+2, r23	; 0x02
    1c16:	8b 83       	std	Y+3, r24	; 0x03
    1c18:	9c 83       	std	Y+4, r25	; 0x04
    1c1a:	2d 83       	std	Y+5, r18	; 0x05
    1c1c:	3e 83       	std	Y+6, r19	; 0x06
    1c1e:	4f 83       	std	Y+7, r20	; 0x07
    1c20:	58 87       	std	Y+8, r21	; 0x08
    1c22:	8e 01       	movw	r16, r28
    1c24:	07 5f       	subi	r16, 0xF7	; 247
    1c26:	1f 4f       	sbci	r17, 0xFF	; 255
    1c28:	ce 01       	movw	r24, r28
    1c2a:	01 96       	adiw	r24, 0x01	; 1
    1c2c:	b8 01       	movw	r22, r16
    1c2e:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <__unpack_f>
    1c32:	81 e1       	ldi	r24, 0x11	; 17
    1c34:	e8 2e       	mov	r14, r24
    1c36:	f1 2c       	mov	r15, r1
    1c38:	ec 0e       	add	r14, r28
    1c3a:	fd 1e       	adc	r15, r29
    1c3c:	ce 01       	movw	r24, r28
    1c3e:	05 96       	adiw	r24, 0x05	; 5
    1c40:	b7 01       	movw	r22, r14
    1c42:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <__unpack_f>
    1c46:	89 85       	ldd	r24, Y+9	; 0x09
    1c48:	82 30       	cpi	r24, 0x02	; 2
    1c4a:	40 f0       	brcs	.+16     	; 0x1c5c <__gtsf2+0x56>
    1c4c:	89 89       	ldd	r24, Y+17	; 0x11
    1c4e:	82 30       	cpi	r24, 0x02	; 2
    1c50:	28 f0       	brcs	.+10     	; 0x1c5c <__gtsf2+0x56>
    1c52:	c8 01       	movw	r24, r16
    1c54:	b7 01       	movw	r22, r14
    1c56:	0e 94 1c 10 	call	0x2038	; 0x2038 <__fpcmp_parts_f>
    1c5a:	01 c0       	rjmp	.+2      	; 0x1c5e <__gtsf2+0x58>
    1c5c:	8f ef       	ldi	r24, 0xFF	; 255
    1c5e:	68 96       	adiw	r28, 0x18	; 24
    1c60:	e6 e0       	ldi	r30, 0x06	; 6
    1c62:	0c 94 c4 10 	jmp	0x2188	; 0x2188 <__epilogue_restores__+0x18>

00001c66 <__gesf2>:
    1c66:	a8 e1       	ldi	r26, 0x18	; 24
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	e9 e3       	ldi	r30, 0x39	; 57
    1c6c:	fe e0       	ldi	r31, 0x0E	; 14
    1c6e:	0c 94 a8 10 	jmp	0x2150	; 0x2150 <__prologue_saves__+0x18>
    1c72:	69 83       	std	Y+1, r22	; 0x01
    1c74:	7a 83       	std	Y+2, r23	; 0x02
    1c76:	8b 83       	std	Y+3, r24	; 0x03
    1c78:	9c 83       	std	Y+4, r25	; 0x04
    1c7a:	2d 83       	std	Y+5, r18	; 0x05
    1c7c:	3e 83       	std	Y+6, r19	; 0x06
    1c7e:	4f 83       	std	Y+7, r20	; 0x07
    1c80:	58 87       	std	Y+8, r21	; 0x08
    1c82:	8e 01       	movw	r16, r28
    1c84:	07 5f       	subi	r16, 0xF7	; 247
    1c86:	1f 4f       	sbci	r17, 0xFF	; 255
    1c88:	ce 01       	movw	r24, r28
    1c8a:	01 96       	adiw	r24, 0x01	; 1
    1c8c:	b8 01       	movw	r22, r16
    1c8e:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <__unpack_f>
    1c92:	81 e1       	ldi	r24, 0x11	; 17
    1c94:	e8 2e       	mov	r14, r24
    1c96:	f1 2c       	mov	r15, r1
    1c98:	ec 0e       	add	r14, r28
    1c9a:	fd 1e       	adc	r15, r29
    1c9c:	ce 01       	movw	r24, r28
    1c9e:	05 96       	adiw	r24, 0x05	; 5
    1ca0:	b7 01       	movw	r22, r14
    1ca2:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <__unpack_f>
    1ca6:	89 85       	ldd	r24, Y+9	; 0x09
    1ca8:	82 30       	cpi	r24, 0x02	; 2
    1caa:	40 f0       	brcs	.+16     	; 0x1cbc <__gesf2+0x56>
    1cac:	89 89       	ldd	r24, Y+17	; 0x11
    1cae:	82 30       	cpi	r24, 0x02	; 2
    1cb0:	28 f0       	brcs	.+10     	; 0x1cbc <__gesf2+0x56>
    1cb2:	c8 01       	movw	r24, r16
    1cb4:	b7 01       	movw	r22, r14
    1cb6:	0e 94 1c 10 	call	0x2038	; 0x2038 <__fpcmp_parts_f>
    1cba:	01 c0       	rjmp	.+2      	; 0x1cbe <__gesf2+0x58>
    1cbc:	8f ef       	ldi	r24, 0xFF	; 255
    1cbe:	68 96       	adiw	r28, 0x18	; 24
    1cc0:	e6 e0       	ldi	r30, 0x06	; 6
    1cc2:	0c 94 c4 10 	jmp	0x2188	; 0x2188 <__epilogue_restores__+0x18>

00001cc6 <__ltsf2>:
    1cc6:	a8 e1       	ldi	r26, 0x18	; 24
    1cc8:	b0 e0       	ldi	r27, 0x00	; 0
    1cca:	e9 e6       	ldi	r30, 0x69	; 105
    1ccc:	fe e0       	ldi	r31, 0x0E	; 14
    1cce:	0c 94 a8 10 	jmp	0x2150	; 0x2150 <__prologue_saves__+0x18>
    1cd2:	69 83       	std	Y+1, r22	; 0x01
    1cd4:	7a 83       	std	Y+2, r23	; 0x02
    1cd6:	8b 83       	std	Y+3, r24	; 0x03
    1cd8:	9c 83       	std	Y+4, r25	; 0x04
    1cda:	2d 83       	std	Y+5, r18	; 0x05
    1cdc:	3e 83       	std	Y+6, r19	; 0x06
    1cde:	4f 83       	std	Y+7, r20	; 0x07
    1ce0:	58 87       	std	Y+8, r21	; 0x08
    1ce2:	8e 01       	movw	r16, r28
    1ce4:	07 5f       	subi	r16, 0xF7	; 247
    1ce6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce8:	ce 01       	movw	r24, r28
    1cea:	01 96       	adiw	r24, 0x01	; 1
    1cec:	b8 01       	movw	r22, r16
    1cee:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <__unpack_f>
    1cf2:	81 e1       	ldi	r24, 0x11	; 17
    1cf4:	e8 2e       	mov	r14, r24
    1cf6:	f1 2c       	mov	r15, r1
    1cf8:	ec 0e       	add	r14, r28
    1cfa:	fd 1e       	adc	r15, r29
    1cfc:	ce 01       	movw	r24, r28
    1cfe:	05 96       	adiw	r24, 0x05	; 5
    1d00:	b7 01       	movw	r22, r14
    1d02:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <__unpack_f>
    1d06:	89 85       	ldd	r24, Y+9	; 0x09
    1d08:	82 30       	cpi	r24, 0x02	; 2
    1d0a:	40 f0       	brcs	.+16     	; 0x1d1c <__ltsf2+0x56>
    1d0c:	89 89       	ldd	r24, Y+17	; 0x11
    1d0e:	82 30       	cpi	r24, 0x02	; 2
    1d10:	28 f0       	brcs	.+10     	; 0x1d1c <__ltsf2+0x56>
    1d12:	c8 01       	movw	r24, r16
    1d14:	b7 01       	movw	r22, r14
    1d16:	0e 94 1c 10 	call	0x2038	; 0x2038 <__fpcmp_parts_f>
    1d1a:	01 c0       	rjmp	.+2      	; 0x1d1e <__ltsf2+0x58>
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	68 96       	adiw	r28, 0x18	; 24
    1d20:	e6 e0       	ldi	r30, 0x06	; 6
    1d22:	0c 94 c4 10 	jmp	0x2188	; 0x2188 <__epilogue_restores__+0x18>

00001d26 <__fixsfsi>:
    1d26:	ac e0       	ldi	r26, 0x0C	; 12
    1d28:	b0 e0       	ldi	r27, 0x00	; 0
    1d2a:	e9 e9       	ldi	r30, 0x99	; 153
    1d2c:	fe e0       	ldi	r31, 0x0E	; 14
    1d2e:	0c 94 ac 10 	jmp	0x2158	; 0x2158 <__prologue_saves__+0x20>
    1d32:	69 83       	std	Y+1, r22	; 0x01
    1d34:	7a 83       	std	Y+2, r23	; 0x02
    1d36:	8b 83       	std	Y+3, r24	; 0x03
    1d38:	9c 83       	std	Y+4, r25	; 0x04
    1d3a:	ce 01       	movw	r24, r28
    1d3c:	01 96       	adiw	r24, 0x01	; 1
    1d3e:	be 01       	movw	r22, r28
    1d40:	6b 5f       	subi	r22, 0xFB	; 251
    1d42:	7f 4f       	sbci	r23, 0xFF	; 255
    1d44:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <__unpack_f>
    1d48:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4a:	82 30       	cpi	r24, 0x02	; 2
    1d4c:	81 f1       	breq	.+96     	; 0x1dae <__fixsfsi+0x88>
    1d4e:	82 30       	cpi	r24, 0x02	; 2
    1d50:	70 f1       	brcs	.+92     	; 0x1dae <__fixsfsi+0x88>
    1d52:	84 30       	cpi	r24, 0x04	; 4
    1d54:	21 f4       	brne	.+8      	; 0x1d5e <__fixsfsi+0x38>
    1d56:	8e 81       	ldd	r24, Y+6	; 0x06
    1d58:	88 23       	and	r24, r24
    1d5a:	69 f1       	breq	.+90     	; 0x1db6 <__fixsfsi+0x90>
    1d5c:	0a c0       	rjmp	.+20     	; 0x1d72 <__fixsfsi+0x4c>
    1d5e:	2f 81       	ldd	r18, Y+7	; 0x07
    1d60:	38 85       	ldd	r19, Y+8	; 0x08
    1d62:	37 fd       	sbrc	r19, 7
    1d64:	24 c0       	rjmp	.+72     	; 0x1dae <__fixsfsi+0x88>
    1d66:	6e 81       	ldd	r22, Y+6	; 0x06
    1d68:	2f 31       	cpi	r18, 0x1F	; 31
    1d6a:	31 05       	cpc	r19, r1
    1d6c:	3c f0       	brlt	.+14     	; 0x1d7c <__fixsfsi+0x56>
    1d6e:	66 23       	and	r22, r22
    1d70:	11 f1       	breq	.+68     	; 0x1db6 <__fixsfsi+0x90>
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	40 e0       	ldi	r20, 0x00	; 0
    1d78:	50 e8       	ldi	r21, 0x80	; 128
    1d7a:	21 c0       	rjmp	.+66     	; 0x1dbe <__fixsfsi+0x98>
    1d7c:	8e e1       	ldi	r24, 0x1E	; 30
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	82 1b       	sub	r24, r18
    1d82:	93 0b       	sbc	r25, r19
    1d84:	29 85       	ldd	r18, Y+9	; 0x09
    1d86:	3a 85       	ldd	r19, Y+10	; 0x0a
    1d88:	4b 85       	ldd	r20, Y+11	; 0x0b
    1d8a:	5c 85       	ldd	r21, Y+12	; 0x0c
    1d8c:	04 c0       	rjmp	.+8      	; 0x1d96 <__fixsfsi+0x70>
    1d8e:	56 95       	lsr	r21
    1d90:	47 95       	ror	r20
    1d92:	37 95       	ror	r19
    1d94:	27 95       	ror	r18
    1d96:	8a 95       	dec	r24
    1d98:	d2 f7       	brpl	.-12     	; 0x1d8e <__fixsfsi+0x68>
    1d9a:	66 23       	and	r22, r22
    1d9c:	81 f0       	breq	.+32     	; 0x1dbe <__fixsfsi+0x98>
    1d9e:	50 95       	com	r21
    1da0:	40 95       	com	r20
    1da2:	30 95       	com	r19
    1da4:	21 95       	neg	r18
    1da6:	3f 4f       	sbci	r19, 0xFF	; 255
    1da8:	4f 4f       	sbci	r20, 0xFF	; 255
    1daa:	5f 4f       	sbci	r21, 0xFF	; 255
    1dac:	08 c0       	rjmp	.+16     	; 0x1dbe <__fixsfsi+0x98>
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	a9 01       	movw	r20, r18
    1db4:	04 c0       	rjmp	.+8      	; 0x1dbe <__fixsfsi+0x98>
    1db6:	2f ef       	ldi	r18, 0xFF	; 255
    1db8:	3f ef       	ldi	r19, 0xFF	; 255
    1dba:	4f ef       	ldi	r20, 0xFF	; 255
    1dbc:	5f e7       	ldi	r21, 0x7F	; 127
    1dbe:	b9 01       	movw	r22, r18
    1dc0:	ca 01       	movw	r24, r20
    1dc2:	2c 96       	adiw	r28, 0x0c	; 12
    1dc4:	e2 e0       	ldi	r30, 0x02	; 2
    1dc6:	0c 94 c8 10 	jmp	0x2190	; 0x2190 <__epilogue_restores__+0x20>

00001dca <__pack_f>:
    1dca:	ef 92       	push	r14
    1dcc:	ff 92       	push	r15
    1dce:	0f 93       	push	r16
    1dd0:	1f 93       	push	r17
    1dd2:	cf 93       	push	r28
    1dd4:	df 93       	push	r29
    1dd6:	fc 01       	movw	r30, r24
    1dd8:	24 81       	ldd	r18, Z+4	; 0x04
    1dda:	35 81       	ldd	r19, Z+5	; 0x05
    1ddc:	46 81       	ldd	r20, Z+6	; 0x06
    1dde:	57 81       	ldd	r21, Z+7	; 0x07
    1de0:	61 81       	ldd	r22, Z+1	; 0x01
    1de2:	80 81       	ld	r24, Z
    1de4:	82 30       	cpi	r24, 0x02	; 2
    1de6:	20 f4       	brcc	.+8      	; 0x1df0 <__pack_f+0x26>
    1de8:	40 61       	ori	r20, 0x10	; 16
    1dea:	ef ef       	ldi	r30, 0xFF	; 255
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	a3 c0       	rjmp	.+326    	; 0x1f36 <__pack_f+0x16c>
    1df0:	84 30       	cpi	r24, 0x04	; 4
    1df2:	09 f4       	brne	.+2      	; 0x1df6 <__pack_f+0x2c>
    1df4:	9b c0       	rjmp	.+310    	; 0x1f2c <__pack_f+0x162>
    1df6:	82 30       	cpi	r24, 0x02	; 2
    1df8:	09 f4       	brne	.+2      	; 0x1dfc <__pack_f+0x32>
    1dfa:	92 c0       	rjmp	.+292    	; 0x1f20 <__pack_f+0x156>
    1dfc:	21 15       	cp	r18, r1
    1dfe:	31 05       	cpc	r19, r1
    1e00:	41 05       	cpc	r20, r1
    1e02:	51 05       	cpc	r21, r1
    1e04:	09 f4       	brne	.+2      	; 0x1e08 <__pack_f+0x3e>
    1e06:	8f c0       	rjmp	.+286    	; 0x1f26 <__pack_f+0x15c>
    1e08:	02 80       	ldd	r0, Z+2	; 0x02
    1e0a:	f3 81       	ldd	r31, Z+3	; 0x03
    1e0c:	e0 2d       	mov	r30, r0
    1e0e:	8f ef       	ldi	r24, 0xFF	; 255
    1e10:	e2 38       	cpi	r30, 0x82	; 130
    1e12:	f8 07       	cpc	r31, r24
    1e14:	0c f0       	brlt	.+2      	; 0x1e18 <__pack_f+0x4e>
    1e16:	5a c0       	rjmp	.+180    	; 0x1ecc <__pack_f+0x102>
    1e18:	c2 e8       	ldi	r28, 0x82	; 130
    1e1a:	df ef       	ldi	r29, 0xFF	; 255
    1e1c:	ce 1b       	sub	r28, r30
    1e1e:	df 0b       	sbc	r29, r31
    1e20:	ca 31       	cpi	r28, 0x1A	; 26
    1e22:	d1 05       	cpc	r29, r1
    1e24:	6c f5       	brge	.+90     	; 0x1e80 <__pack_f+0xb6>
    1e26:	79 01       	movw	r14, r18
    1e28:	8a 01       	movw	r16, r20
    1e2a:	0c 2e       	mov	r0, r28
    1e2c:	04 c0       	rjmp	.+8      	; 0x1e36 <__pack_f+0x6c>
    1e2e:	16 95       	lsr	r17
    1e30:	07 95       	ror	r16
    1e32:	f7 94       	ror	r15
    1e34:	e7 94       	ror	r14
    1e36:	0a 94       	dec	r0
    1e38:	d2 f7       	brpl	.-12     	; 0x1e2e <__pack_f+0x64>
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	a0 e0       	ldi	r26, 0x00	; 0
    1e40:	b0 e0       	ldi	r27, 0x00	; 0
    1e42:	0c 2e       	mov	r0, r28
    1e44:	04 c0       	rjmp	.+8      	; 0x1e4e <__pack_f+0x84>
    1e46:	88 0f       	add	r24, r24
    1e48:	99 1f       	adc	r25, r25
    1e4a:	aa 1f       	adc	r26, r26
    1e4c:	bb 1f       	adc	r27, r27
    1e4e:	0a 94       	dec	r0
    1e50:	d2 f7       	brpl	.-12     	; 0x1e46 <__pack_f+0x7c>
    1e52:	01 97       	sbiw	r24, 0x01	; 1
    1e54:	a1 09       	sbc	r26, r1
    1e56:	b1 09       	sbc	r27, r1
    1e58:	82 23       	and	r24, r18
    1e5a:	93 23       	and	r25, r19
    1e5c:	a4 23       	and	r26, r20
    1e5e:	b5 23       	and	r27, r21
    1e60:	21 e0       	ldi	r18, 0x01	; 1
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	40 e0       	ldi	r20, 0x00	; 0
    1e66:	50 e0       	ldi	r21, 0x00	; 0
    1e68:	00 97       	sbiw	r24, 0x00	; 0
    1e6a:	a1 05       	cpc	r26, r1
    1e6c:	b1 05       	cpc	r27, r1
    1e6e:	19 f4       	brne	.+6      	; 0x1e76 <__pack_f+0xac>
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	a9 01       	movw	r20, r18
    1e76:	2e 29       	or	r18, r14
    1e78:	3f 29       	or	r19, r15
    1e7a:	40 2b       	or	r20, r16
    1e7c:	51 2b       	or	r21, r17
    1e7e:	03 c0       	rjmp	.+6      	; 0x1e86 <__pack_f+0xbc>
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	a9 01       	movw	r20, r18
    1e86:	da 01       	movw	r26, r20
    1e88:	c9 01       	movw	r24, r18
    1e8a:	8f 77       	andi	r24, 0x7F	; 127
    1e8c:	90 70       	andi	r25, 0x00	; 0
    1e8e:	a0 70       	andi	r26, 0x00	; 0
    1e90:	b0 70       	andi	r27, 0x00	; 0
    1e92:	80 34       	cpi	r24, 0x40	; 64
    1e94:	91 05       	cpc	r25, r1
    1e96:	a1 05       	cpc	r26, r1
    1e98:	b1 05       	cpc	r27, r1
    1e9a:	39 f4       	brne	.+14     	; 0x1eaa <__pack_f+0xe0>
    1e9c:	27 ff       	sbrs	r18, 7
    1e9e:	09 c0       	rjmp	.+18     	; 0x1eb2 <__pack_f+0xe8>
    1ea0:	20 5c       	subi	r18, 0xC0	; 192
    1ea2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ea4:	4f 4f       	sbci	r20, 0xFF	; 255
    1ea6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ea8:	04 c0       	rjmp	.+8      	; 0x1eb2 <__pack_f+0xe8>
    1eaa:	21 5c       	subi	r18, 0xC1	; 193
    1eac:	3f 4f       	sbci	r19, 0xFF	; 255
    1eae:	4f 4f       	sbci	r20, 0xFF	; 255
    1eb0:	5f 4f       	sbci	r21, 0xFF	; 255
    1eb2:	e1 e0       	ldi	r30, 0x01	; 1
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	20 30       	cpi	r18, 0x00	; 0
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	38 07       	cpc	r19, r24
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	48 07       	cpc	r20, r24
    1ec0:	80 e4       	ldi	r24, 0x40	; 64
    1ec2:	58 07       	cpc	r21, r24
    1ec4:	28 f5       	brcc	.+74     	; 0x1f10 <__pack_f+0x146>
    1ec6:	e0 e0       	ldi	r30, 0x00	; 0
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	22 c0       	rjmp	.+68     	; 0x1f10 <__pack_f+0x146>
    1ecc:	e0 38       	cpi	r30, 0x80	; 128
    1ece:	f1 05       	cpc	r31, r1
    1ed0:	6c f5       	brge	.+90     	; 0x1f2c <__pack_f+0x162>
    1ed2:	e1 58       	subi	r30, 0x81	; 129
    1ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed6:	da 01       	movw	r26, r20
    1ed8:	c9 01       	movw	r24, r18
    1eda:	8f 77       	andi	r24, 0x7F	; 127
    1edc:	90 70       	andi	r25, 0x00	; 0
    1ede:	a0 70       	andi	r26, 0x00	; 0
    1ee0:	b0 70       	andi	r27, 0x00	; 0
    1ee2:	80 34       	cpi	r24, 0x40	; 64
    1ee4:	91 05       	cpc	r25, r1
    1ee6:	a1 05       	cpc	r26, r1
    1ee8:	b1 05       	cpc	r27, r1
    1eea:	39 f4       	brne	.+14     	; 0x1efa <__pack_f+0x130>
    1eec:	27 ff       	sbrs	r18, 7
    1eee:	09 c0       	rjmp	.+18     	; 0x1f02 <__pack_f+0x138>
    1ef0:	20 5c       	subi	r18, 0xC0	; 192
    1ef2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef4:	4f 4f       	sbci	r20, 0xFF	; 255
    1ef6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ef8:	04 c0       	rjmp	.+8      	; 0x1f02 <__pack_f+0x138>
    1efa:	21 5c       	subi	r18, 0xC1	; 193
    1efc:	3f 4f       	sbci	r19, 0xFF	; 255
    1efe:	4f 4f       	sbci	r20, 0xFF	; 255
    1f00:	5f 4f       	sbci	r21, 0xFF	; 255
    1f02:	57 ff       	sbrs	r21, 7
    1f04:	05 c0       	rjmp	.+10     	; 0x1f10 <__pack_f+0x146>
    1f06:	56 95       	lsr	r21
    1f08:	47 95       	ror	r20
    1f0a:	37 95       	ror	r19
    1f0c:	27 95       	ror	r18
    1f0e:	31 96       	adiw	r30, 0x01	; 1
    1f10:	87 e0       	ldi	r24, 0x07	; 7
    1f12:	56 95       	lsr	r21
    1f14:	47 95       	ror	r20
    1f16:	37 95       	ror	r19
    1f18:	27 95       	ror	r18
    1f1a:	8a 95       	dec	r24
    1f1c:	d1 f7       	brne	.-12     	; 0x1f12 <__pack_f+0x148>
    1f1e:	0b c0       	rjmp	.+22     	; 0x1f36 <__pack_f+0x16c>
    1f20:	e0 e0       	ldi	r30, 0x00	; 0
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	05 c0       	rjmp	.+10     	; 0x1f30 <__pack_f+0x166>
    1f26:	e0 e0       	ldi	r30, 0x00	; 0
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	05 c0       	rjmp	.+10     	; 0x1f36 <__pack_f+0x16c>
    1f2c:	ef ef       	ldi	r30, 0xFF	; 255
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	a9 01       	movw	r20, r18
    1f36:	8e 2f       	mov	r24, r30
    1f38:	87 95       	ror	r24
    1f3a:	88 27       	eor	r24, r24
    1f3c:	87 95       	ror	r24
    1f3e:	94 2f       	mov	r25, r20
    1f40:	9f 77       	andi	r25, 0x7F	; 127
    1f42:	67 95       	ror	r22
    1f44:	66 27       	eor	r22, r22
    1f46:	67 95       	ror	r22
    1f48:	e6 95       	lsr	r30
    1f4a:	e2 2e       	mov	r14, r18
    1f4c:	a9 2f       	mov	r26, r25
    1f4e:	a8 2b       	or	r26, r24
    1f50:	fe 2f       	mov	r31, r30
    1f52:	f6 2b       	or	r31, r22
    1f54:	62 2f       	mov	r22, r18
    1f56:	73 2f       	mov	r23, r19
    1f58:	8a 2f       	mov	r24, r26
    1f5a:	9f 2f       	mov	r25, r31
    1f5c:	cd b7       	in	r28, 0x3d	; 61
    1f5e:	de b7       	in	r29, 0x3e	; 62
    1f60:	e6 e0       	ldi	r30, 0x06	; 6
    1f62:	0c 94 c4 10 	jmp	0x2188	; 0x2188 <__epilogue_restores__+0x18>

00001f66 <__unpack_f>:
    1f66:	dc 01       	movw	r26, r24
    1f68:	fb 01       	movw	r30, r22
    1f6a:	2c 91       	ld	r18, X
    1f6c:	11 96       	adiw	r26, 0x01	; 1
    1f6e:	3c 91       	ld	r19, X
    1f70:	11 97       	sbiw	r26, 0x01	; 1
    1f72:	12 96       	adiw	r26, 0x02	; 2
    1f74:	8c 91       	ld	r24, X
    1f76:	12 97       	sbiw	r26, 0x02	; 2
    1f78:	48 2f       	mov	r20, r24
    1f7a:	4f 77       	andi	r20, 0x7F	; 127
    1f7c:	50 e0       	ldi	r21, 0x00	; 0
    1f7e:	98 2f       	mov	r25, r24
    1f80:	99 1f       	adc	r25, r25
    1f82:	99 27       	eor	r25, r25
    1f84:	99 1f       	adc	r25, r25
    1f86:	13 96       	adiw	r26, 0x03	; 3
    1f88:	6c 91       	ld	r22, X
    1f8a:	13 97       	sbiw	r26, 0x03	; 3
    1f8c:	86 2f       	mov	r24, r22
    1f8e:	88 0f       	add	r24, r24
    1f90:	89 2b       	or	r24, r25
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	66 1f       	adc	r22, r22
    1f96:	66 27       	eor	r22, r22
    1f98:	66 1f       	adc	r22, r22
    1f9a:	61 83       	std	Z+1, r22	; 0x01
    1f9c:	00 97       	sbiw	r24, 0x00	; 0
    1f9e:	39 f5       	brne	.+78     	; 0x1fee <__unpack_f+0x88>
    1fa0:	21 15       	cp	r18, r1
    1fa2:	31 05       	cpc	r19, r1
    1fa4:	41 05       	cpc	r20, r1
    1fa6:	51 05       	cpc	r21, r1
    1fa8:	11 f4       	brne	.+4      	; 0x1fae <__unpack_f+0x48>
    1faa:	82 e0       	ldi	r24, 0x02	; 2
    1fac:	29 c0       	rjmp	.+82     	; 0x2000 <__unpack_f+0x9a>
    1fae:	82 e8       	ldi	r24, 0x82	; 130
    1fb0:	9f ef       	ldi	r25, 0xFF	; 255
    1fb2:	93 83       	std	Z+3, r25	; 0x03
    1fb4:	82 83       	std	Z+2, r24	; 0x02
    1fb6:	67 e0       	ldi	r22, 0x07	; 7
    1fb8:	22 0f       	add	r18, r18
    1fba:	33 1f       	adc	r19, r19
    1fbc:	44 1f       	adc	r20, r20
    1fbe:	55 1f       	adc	r21, r21
    1fc0:	6a 95       	dec	r22
    1fc2:	d1 f7       	brne	.-12     	; 0x1fb8 <__unpack_f+0x52>
    1fc4:	83 e0       	ldi	r24, 0x03	; 3
    1fc6:	80 83       	st	Z, r24
    1fc8:	09 c0       	rjmp	.+18     	; 0x1fdc <__unpack_f+0x76>
    1fca:	22 0f       	add	r18, r18
    1fcc:	33 1f       	adc	r19, r19
    1fce:	44 1f       	adc	r20, r20
    1fd0:	55 1f       	adc	r21, r21
    1fd2:	82 81       	ldd	r24, Z+2	; 0x02
    1fd4:	93 81       	ldd	r25, Z+3	; 0x03
    1fd6:	01 97       	sbiw	r24, 0x01	; 1
    1fd8:	93 83       	std	Z+3, r25	; 0x03
    1fda:	82 83       	std	Z+2, r24	; 0x02
    1fdc:	20 30       	cpi	r18, 0x00	; 0
    1fde:	80 e0       	ldi	r24, 0x00	; 0
    1fe0:	38 07       	cpc	r19, r24
    1fe2:	80 e0       	ldi	r24, 0x00	; 0
    1fe4:	48 07       	cpc	r20, r24
    1fe6:	80 e4       	ldi	r24, 0x40	; 64
    1fe8:	58 07       	cpc	r21, r24
    1fea:	78 f3       	brcs	.-34     	; 0x1fca <__unpack_f+0x64>
    1fec:	20 c0       	rjmp	.+64     	; 0x202e <__unpack_f+0xc8>
    1fee:	8f 3f       	cpi	r24, 0xFF	; 255
    1ff0:	91 05       	cpc	r25, r1
    1ff2:	79 f4       	brne	.+30     	; 0x2012 <__unpack_f+0xac>
    1ff4:	21 15       	cp	r18, r1
    1ff6:	31 05       	cpc	r19, r1
    1ff8:	41 05       	cpc	r20, r1
    1ffa:	51 05       	cpc	r21, r1
    1ffc:	19 f4       	brne	.+6      	; 0x2004 <__unpack_f+0x9e>
    1ffe:	84 e0       	ldi	r24, 0x04	; 4
    2000:	80 83       	st	Z, r24
    2002:	08 95       	ret
    2004:	44 ff       	sbrs	r20, 4
    2006:	03 c0       	rjmp	.+6      	; 0x200e <__unpack_f+0xa8>
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	80 83       	st	Z, r24
    200c:	10 c0       	rjmp	.+32     	; 0x202e <__unpack_f+0xc8>
    200e:	10 82       	st	Z, r1
    2010:	0e c0       	rjmp	.+28     	; 0x202e <__unpack_f+0xc8>
    2012:	8f 57       	subi	r24, 0x7F	; 127
    2014:	90 40       	sbci	r25, 0x00	; 0
    2016:	93 83       	std	Z+3, r25	; 0x03
    2018:	82 83       	std	Z+2, r24	; 0x02
    201a:	83 e0       	ldi	r24, 0x03	; 3
    201c:	80 83       	st	Z, r24
    201e:	87 e0       	ldi	r24, 0x07	; 7
    2020:	22 0f       	add	r18, r18
    2022:	33 1f       	adc	r19, r19
    2024:	44 1f       	adc	r20, r20
    2026:	55 1f       	adc	r21, r21
    2028:	8a 95       	dec	r24
    202a:	d1 f7       	brne	.-12     	; 0x2020 <__unpack_f+0xba>
    202c:	50 64       	ori	r21, 0x40	; 64
    202e:	24 83       	std	Z+4, r18	; 0x04
    2030:	35 83       	std	Z+5, r19	; 0x05
    2032:	46 83       	std	Z+6, r20	; 0x06
    2034:	57 83       	std	Z+7, r21	; 0x07
    2036:	08 95       	ret

00002038 <__fpcmp_parts_f>:
    2038:	fc 01       	movw	r30, r24
    203a:	db 01       	movw	r26, r22
    203c:	90 81       	ld	r25, Z
    203e:	92 30       	cpi	r25, 0x02	; 2
    2040:	08 f4       	brcc	.+2      	; 0x2044 <__fpcmp_parts_f+0xc>
    2042:	49 c0       	rjmp	.+146    	; 0x20d6 <__fpcmp_parts_f+0x9e>
    2044:	8c 91       	ld	r24, X
    2046:	82 30       	cpi	r24, 0x02	; 2
    2048:	08 f4       	brcc	.+2      	; 0x204c <__fpcmp_parts_f+0x14>
    204a:	45 c0       	rjmp	.+138    	; 0x20d6 <__fpcmp_parts_f+0x9e>
    204c:	94 30       	cpi	r25, 0x04	; 4
    204e:	51 f4       	brne	.+20     	; 0x2064 <__fpcmp_parts_f+0x2c>
    2050:	61 81       	ldd	r22, Z+1	; 0x01
    2052:	84 30       	cpi	r24, 0x04	; 4
    2054:	b1 f5       	brne	.+108    	; 0x20c2 <__fpcmp_parts_f+0x8a>
    2056:	11 96       	adiw	r26, 0x01	; 1
    2058:	2c 91       	ld	r18, X
    205a:	11 97       	sbiw	r26, 0x01	; 1
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	26 1b       	sub	r18, r22
    2060:	31 09       	sbc	r19, r1
    2062:	41 c0       	rjmp	.+130    	; 0x20e6 <__fpcmp_parts_f+0xae>
    2064:	84 30       	cpi	r24, 0x04	; 4
    2066:	21 f0       	breq	.+8      	; 0x2070 <__fpcmp_parts_f+0x38>
    2068:	92 30       	cpi	r25, 0x02	; 2
    206a:	41 f4       	brne	.+16     	; 0x207c <__fpcmp_parts_f+0x44>
    206c:	82 30       	cpi	r24, 0x02	; 2
    206e:	b1 f1       	breq	.+108    	; 0x20dc <__fpcmp_parts_f+0xa4>
    2070:	11 96       	adiw	r26, 0x01	; 1
    2072:	8c 91       	ld	r24, X
    2074:	11 97       	sbiw	r26, 0x01	; 1
    2076:	88 23       	and	r24, r24
    2078:	a1 f1       	breq	.+104    	; 0x20e2 <__fpcmp_parts_f+0xaa>
    207a:	2d c0       	rjmp	.+90     	; 0x20d6 <__fpcmp_parts_f+0x9e>
    207c:	61 81       	ldd	r22, Z+1	; 0x01
    207e:	82 30       	cpi	r24, 0x02	; 2
    2080:	01 f1       	breq	.+64     	; 0x20c2 <__fpcmp_parts_f+0x8a>
    2082:	11 96       	adiw	r26, 0x01	; 1
    2084:	8c 91       	ld	r24, X
    2086:	11 97       	sbiw	r26, 0x01	; 1
    2088:	68 17       	cp	r22, r24
    208a:	d9 f4       	brne	.+54     	; 0x20c2 <__fpcmp_parts_f+0x8a>
    208c:	22 81       	ldd	r18, Z+2	; 0x02
    208e:	33 81       	ldd	r19, Z+3	; 0x03
    2090:	12 96       	adiw	r26, 0x02	; 2
    2092:	8d 91       	ld	r24, X+
    2094:	9c 91       	ld	r25, X
    2096:	13 97       	sbiw	r26, 0x03	; 3
    2098:	82 17       	cp	r24, r18
    209a:	93 07       	cpc	r25, r19
    209c:	94 f0       	brlt	.+36     	; 0x20c2 <__fpcmp_parts_f+0x8a>
    209e:	28 17       	cp	r18, r24
    20a0:	39 07       	cpc	r19, r25
    20a2:	bc f0       	brlt	.+46     	; 0x20d2 <__fpcmp_parts_f+0x9a>
    20a4:	24 81       	ldd	r18, Z+4	; 0x04
    20a6:	35 81       	ldd	r19, Z+5	; 0x05
    20a8:	46 81       	ldd	r20, Z+6	; 0x06
    20aa:	57 81       	ldd	r21, Z+7	; 0x07
    20ac:	14 96       	adiw	r26, 0x04	; 4
    20ae:	8d 91       	ld	r24, X+
    20b0:	9d 91       	ld	r25, X+
    20b2:	0d 90       	ld	r0, X+
    20b4:	bc 91       	ld	r27, X
    20b6:	a0 2d       	mov	r26, r0
    20b8:	82 17       	cp	r24, r18
    20ba:	93 07       	cpc	r25, r19
    20bc:	a4 07       	cpc	r26, r20
    20be:	b5 07       	cpc	r27, r21
    20c0:	18 f4       	brcc	.+6      	; 0x20c8 <__fpcmp_parts_f+0x90>
    20c2:	66 23       	and	r22, r22
    20c4:	41 f0       	breq	.+16     	; 0x20d6 <__fpcmp_parts_f+0x9e>
    20c6:	0d c0       	rjmp	.+26     	; 0x20e2 <__fpcmp_parts_f+0xaa>
    20c8:	28 17       	cp	r18, r24
    20ca:	39 07       	cpc	r19, r25
    20cc:	4a 07       	cpc	r20, r26
    20ce:	5b 07       	cpc	r21, r27
    20d0:	28 f4       	brcc	.+10     	; 0x20dc <__fpcmp_parts_f+0xa4>
    20d2:	66 23       	and	r22, r22
    20d4:	31 f0       	breq	.+12     	; 0x20e2 <__fpcmp_parts_f+0xaa>
    20d6:	21 e0       	ldi	r18, 0x01	; 1
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	05 c0       	rjmp	.+10     	; 0x20e6 <__fpcmp_parts_f+0xae>
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	02 c0       	rjmp	.+4      	; 0x20e6 <__fpcmp_parts_f+0xae>
    20e2:	2f ef       	ldi	r18, 0xFF	; 255
    20e4:	3f ef       	ldi	r19, 0xFF	; 255
    20e6:	c9 01       	movw	r24, r18
    20e8:	08 95       	ret

000020ea <__udivmodhi4>:
    20ea:	aa 1b       	sub	r26, r26
    20ec:	bb 1b       	sub	r27, r27
    20ee:	51 e1       	ldi	r21, 0x11	; 17
    20f0:	07 c0       	rjmp	.+14     	; 0x2100 <__udivmodhi4_ep>

000020f2 <__udivmodhi4_loop>:
    20f2:	aa 1f       	adc	r26, r26
    20f4:	bb 1f       	adc	r27, r27
    20f6:	a6 17       	cp	r26, r22
    20f8:	b7 07       	cpc	r27, r23
    20fa:	10 f0       	brcs	.+4      	; 0x2100 <__udivmodhi4_ep>
    20fc:	a6 1b       	sub	r26, r22
    20fe:	b7 0b       	sbc	r27, r23

00002100 <__udivmodhi4_ep>:
    2100:	88 1f       	adc	r24, r24
    2102:	99 1f       	adc	r25, r25
    2104:	5a 95       	dec	r21
    2106:	a9 f7       	brne	.-22     	; 0x20f2 <__udivmodhi4_loop>
    2108:	80 95       	com	r24
    210a:	90 95       	com	r25
    210c:	bc 01       	movw	r22, r24
    210e:	cd 01       	movw	r24, r26
    2110:	08 95       	ret

00002112 <__divmodhi4>:
    2112:	97 fb       	bst	r25, 7
    2114:	09 2e       	mov	r0, r25
    2116:	07 26       	eor	r0, r23
    2118:	0a d0       	rcall	.+20     	; 0x212e <__divmodhi4_neg1>
    211a:	77 fd       	sbrc	r23, 7
    211c:	04 d0       	rcall	.+8      	; 0x2126 <__divmodhi4_neg2>
    211e:	e5 df       	rcall	.-54     	; 0x20ea <__udivmodhi4>
    2120:	06 d0       	rcall	.+12     	; 0x212e <__divmodhi4_neg1>
    2122:	00 20       	and	r0, r0
    2124:	1a f4       	brpl	.+6      	; 0x212c <__divmodhi4_exit>

00002126 <__divmodhi4_neg2>:
    2126:	70 95       	com	r23
    2128:	61 95       	neg	r22
    212a:	7f 4f       	sbci	r23, 0xFF	; 255

0000212c <__divmodhi4_exit>:
    212c:	08 95       	ret

0000212e <__divmodhi4_neg1>:
    212e:	f6 f7       	brtc	.-4      	; 0x212c <__divmodhi4_exit>
    2130:	90 95       	com	r25
    2132:	81 95       	neg	r24
    2134:	9f 4f       	sbci	r25, 0xFF	; 255
    2136:	08 95       	ret

00002138 <__prologue_saves__>:
    2138:	2f 92       	push	r2
    213a:	3f 92       	push	r3
    213c:	4f 92       	push	r4
    213e:	5f 92       	push	r5
    2140:	6f 92       	push	r6
    2142:	7f 92       	push	r7
    2144:	8f 92       	push	r8
    2146:	9f 92       	push	r9
    2148:	af 92       	push	r10
    214a:	bf 92       	push	r11
    214c:	cf 92       	push	r12
    214e:	df 92       	push	r13
    2150:	ef 92       	push	r14
    2152:	ff 92       	push	r15
    2154:	0f 93       	push	r16
    2156:	1f 93       	push	r17
    2158:	cf 93       	push	r28
    215a:	df 93       	push	r29
    215c:	cd b7       	in	r28, 0x3d	; 61
    215e:	de b7       	in	r29, 0x3e	; 62
    2160:	ca 1b       	sub	r28, r26
    2162:	db 0b       	sbc	r29, r27
    2164:	0f b6       	in	r0, 0x3f	; 63
    2166:	f8 94       	cli
    2168:	de bf       	out	0x3e, r29	; 62
    216a:	0f be       	out	0x3f, r0	; 63
    216c:	cd bf       	out	0x3d, r28	; 61
    216e:	09 94       	ijmp

00002170 <__epilogue_restores__>:
    2170:	2a 88       	ldd	r2, Y+18	; 0x12
    2172:	39 88       	ldd	r3, Y+17	; 0x11
    2174:	48 88       	ldd	r4, Y+16	; 0x10
    2176:	5f 84       	ldd	r5, Y+15	; 0x0f
    2178:	6e 84       	ldd	r6, Y+14	; 0x0e
    217a:	7d 84       	ldd	r7, Y+13	; 0x0d
    217c:	8c 84       	ldd	r8, Y+12	; 0x0c
    217e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2180:	aa 84       	ldd	r10, Y+10	; 0x0a
    2182:	b9 84       	ldd	r11, Y+9	; 0x09
    2184:	c8 84       	ldd	r12, Y+8	; 0x08
    2186:	df 80       	ldd	r13, Y+7	; 0x07
    2188:	ee 80       	ldd	r14, Y+6	; 0x06
    218a:	fd 80       	ldd	r15, Y+5	; 0x05
    218c:	0c 81       	ldd	r16, Y+4	; 0x04
    218e:	1b 81       	ldd	r17, Y+3	; 0x03
    2190:	aa 81       	ldd	r26, Y+2	; 0x02
    2192:	b9 81       	ldd	r27, Y+1	; 0x01
    2194:	ce 0f       	add	r28, r30
    2196:	d1 1d       	adc	r29, r1
    2198:	0f b6       	in	r0, 0x3f	; 63
    219a:	f8 94       	cli
    219c:	de bf       	out	0x3e, r29	; 62
    219e:	0f be       	out	0x3f, r0	; 63
    21a0:	cd bf       	out	0x3d, r28	; 61
    21a2:	ed 01       	movw	r28, r26
    21a4:	08 95       	ret

000021a6 <calloc>:
    21a6:	ef 92       	push	r14
    21a8:	ff 92       	push	r15
    21aa:	0f 93       	push	r16
    21ac:	1f 93       	push	r17
    21ae:	cf 93       	push	r28
    21b0:	df 93       	push	r29
    21b2:	68 9f       	mul	r22, r24
    21b4:	80 01       	movw	r16, r0
    21b6:	69 9f       	mul	r22, r25
    21b8:	10 0d       	add	r17, r0
    21ba:	78 9f       	mul	r23, r24
    21bc:	10 0d       	add	r17, r0
    21be:	11 24       	eor	r1, r1
    21c0:	c8 01       	movw	r24, r16
    21c2:	0e 94 f7 10 	call	0x21ee	; 0x21ee <malloc>
    21c6:	e8 2e       	mov	r14, r24
    21c8:	e7 01       	movw	r28, r14
    21ca:	7e 01       	movw	r14, r28
    21cc:	f9 2e       	mov	r15, r25
    21ce:	e7 01       	movw	r28, r14
    21d0:	20 97       	sbiw	r28, 0x00	; 0
    21d2:	31 f0       	breq	.+12     	; 0x21e0 <calloc+0x3a>
    21d4:	8e 2d       	mov	r24, r14
    21d6:	60 e0       	ldi	r22, 0x00	; 0
    21d8:	70 e0       	ldi	r23, 0x00	; 0
    21da:	a8 01       	movw	r20, r16
    21dc:	0e 94 2a 12 	call	0x2454	; 0x2454 <memset>
    21e0:	7e 01       	movw	r14, r28
    21e2:	ce 01       	movw	r24, r28
    21e4:	cd b7       	in	r28, 0x3d	; 61
    21e6:	de b7       	in	r29, 0x3e	; 62
    21e8:	e6 e0       	ldi	r30, 0x06	; 6
    21ea:	0c 94 c4 10 	jmp	0x2188	; 0x2188 <__epilogue_restores__+0x18>

000021ee <malloc>:
    21ee:	cf 93       	push	r28
    21f0:	df 93       	push	r29
    21f2:	82 30       	cpi	r24, 0x02	; 2
    21f4:	91 05       	cpc	r25, r1
    21f6:	10 f4       	brcc	.+4      	; 0x21fc <malloc+0xe>
    21f8:	82 e0       	ldi	r24, 0x02	; 2
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	e0 91 3a 06 	lds	r30, 0x063A
    2200:	f0 91 3b 06 	lds	r31, 0x063B
    2204:	40 e0       	ldi	r20, 0x00	; 0
    2206:	50 e0       	ldi	r21, 0x00	; 0
    2208:	20 e0       	ldi	r18, 0x00	; 0
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	26 c0       	rjmp	.+76     	; 0x225a <malloc+0x6c>
    220e:	60 81       	ld	r22, Z
    2210:	71 81       	ldd	r23, Z+1	; 0x01
    2212:	68 17       	cp	r22, r24
    2214:	79 07       	cpc	r23, r25
    2216:	e0 f0       	brcs	.+56     	; 0x2250 <malloc+0x62>
    2218:	68 17       	cp	r22, r24
    221a:	79 07       	cpc	r23, r25
    221c:	81 f4       	brne	.+32     	; 0x223e <malloc+0x50>
    221e:	82 81       	ldd	r24, Z+2	; 0x02
    2220:	93 81       	ldd	r25, Z+3	; 0x03
    2222:	21 15       	cp	r18, r1
    2224:	31 05       	cpc	r19, r1
    2226:	31 f0       	breq	.+12     	; 0x2234 <malloc+0x46>
    2228:	d9 01       	movw	r26, r18
    222a:	13 96       	adiw	r26, 0x03	; 3
    222c:	9c 93       	st	X, r25
    222e:	8e 93       	st	-X, r24
    2230:	12 97       	sbiw	r26, 0x02	; 2
    2232:	2b c0       	rjmp	.+86     	; 0x228a <malloc+0x9c>
    2234:	90 93 3b 06 	sts	0x063B, r25
    2238:	80 93 3a 06 	sts	0x063A, r24
    223c:	26 c0       	rjmp	.+76     	; 0x228a <malloc+0x9c>
    223e:	41 15       	cp	r20, r1
    2240:	51 05       	cpc	r21, r1
    2242:	19 f0       	breq	.+6      	; 0x224a <malloc+0x5c>
    2244:	64 17       	cp	r22, r20
    2246:	75 07       	cpc	r23, r21
    2248:	18 f4       	brcc	.+6      	; 0x2250 <malloc+0x62>
    224a:	ab 01       	movw	r20, r22
    224c:	e9 01       	movw	r28, r18
    224e:	df 01       	movw	r26, r30
    2250:	9f 01       	movw	r18, r30
    2252:	72 81       	ldd	r23, Z+2	; 0x02
    2254:	63 81       	ldd	r22, Z+3	; 0x03
    2256:	e7 2f       	mov	r30, r23
    2258:	f6 2f       	mov	r31, r22
    225a:	30 97       	sbiw	r30, 0x00	; 0
    225c:	c1 f6       	brne	.-80     	; 0x220e <malloc+0x20>
    225e:	41 15       	cp	r20, r1
    2260:	51 05       	cpc	r21, r1
    2262:	01 f1       	breq	.+64     	; 0x22a4 <malloc+0xb6>
    2264:	48 1b       	sub	r20, r24
    2266:	59 0b       	sbc	r21, r25
    2268:	44 30       	cpi	r20, 0x04	; 4
    226a:	51 05       	cpc	r21, r1
    226c:	80 f4       	brcc	.+32     	; 0x228e <malloc+0xa0>
    226e:	12 96       	adiw	r26, 0x02	; 2
    2270:	8d 91       	ld	r24, X+
    2272:	9c 91       	ld	r25, X
    2274:	13 97       	sbiw	r26, 0x03	; 3
    2276:	20 97       	sbiw	r28, 0x00	; 0
    2278:	19 f0       	breq	.+6      	; 0x2280 <malloc+0x92>
    227a:	9b 83       	std	Y+3, r25	; 0x03
    227c:	8a 83       	std	Y+2, r24	; 0x02
    227e:	04 c0       	rjmp	.+8      	; 0x2288 <malloc+0x9a>
    2280:	90 93 3b 06 	sts	0x063B, r25
    2284:	80 93 3a 06 	sts	0x063A, r24
    2288:	fd 01       	movw	r30, r26
    228a:	32 96       	adiw	r30, 0x02	; 2
    228c:	46 c0       	rjmp	.+140    	; 0x231a <malloc+0x12c>
    228e:	fd 01       	movw	r30, r26
    2290:	e4 0f       	add	r30, r20
    2292:	f5 1f       	adc	r31, r21
    2294:	81 93       	st	Z+, r24
    2296:	91 93       	st	Z+, r25
    2298:	42 50       	subi	r20, 0x02	; 2
    229a:	50 40       	sbci	r21, 0x00	; 0
    229c:	11 96       	adiw	r26, 0x01	; 1
    229e:	5c 93       	st	X, r21
    22a0:	4e 93       	st	-X, r20
    22a2:	3b c0       	rjmp	.+118    	; 0x231a <malloc+0x12c>
    22a4:	20 91 38 06 	lds	r18, 0x0638
    22a8:	30 91 39 06 	lds	r19, 0x0639
    22ac:	21 15       	cp	r18, r1
    22ae:	31 05       	cpc	r19, r1
    22b0:	41 f4       	brne	.+16     	; 0x22c2 <malloc+0xd4>
    22b2:	20 91 16 01 	lds	r18, 0x0116
    22b6:	30 91 17 01 	lds	r19, 0x0117
    22ba:	30 93 39 06 	sts	0x0639, r19
    22be:	20 93 38 06 	sts	0x0638, r18
    22c2:	20 91 18 01 	lds	r18, 0x0118
    22c6:	30 91 19 01 	lds	r19, 0x0119
    22ca:	21 15       	cp	r18, r1
    22cc:	31 05       	cpc	r19, r1
    22ce:	41 f4       	brne	.+16     	; 0x22e0 <malloc+0xf2>
    22d0:	2d b7       	in	r18, 0x3d	; 61
    22d2:	3e b7       	in	r19, 0x3e	; 62
    22d4:	40 91 14 01 	lds	r20, 0x0114
    22d8:	50 91 15 01 	lds	r21, 0x0115
    22dc:	24 1b       	sub	r18, r20
    22de:	35 0b       	sbc	r19, r21
    22e0:	e0 91 38 06 	lds	r30, 0x0638
    22e4:	f0 91 39 06 	lds	r31, 0x0639
    22e8:	e2 17       	cp	r30, r18
    22ea:	f3 07       	cpc	r31, r19
    22ec:	a0 f4       	brcc	.+40     	; 0x2316 <malloc+0x128>
    22ee:	2e 1b       	sub	r18, r30
    22f0:	3f 0b       	sbc	r19, r31
    22f2:	28 17       	cp	r18, r24
    22f4:	39 07       	cpc	r19, r25
    22f6:	78 f0       	brcs	.+30     	; 0x2316 <malloc+0x128>
    22f8:	ac 01       	movw	r20, r24
    22fa:	4e 5f       	subi	r20, 0xFE	; 254
    22fc:	5f 4f       	sbci	r21, 0xFF	; 255
    22fe:	24 17       	cp	r18, r20
    2300:	35 07       	cpc	r19, r21
    2302:	48 f0       	brcs	.+18     	; 0x2316 <malloc+0x128>
    2304:	4e 0f       	add	r20, r30
    2306:	5f 1f       	adc	r21, r31
    2308:	50 93 39 06 	sts	0x0639, r21
    230c:	40 93 38 06 	sts	0x0638, r20
    2310:	81 93       	st	Z+, r24
    2312:	91 93       	st	Z+, r25
    2314:	02 c0       	rjmp	.+4      	; 0x231a <malloc+0x12c>
    2316:	e0 e0       	ldi	r30, 0x00	; 0
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	cf 01       	movw	r24, r30
    231c:	df 91       	pop	r29
    231e:	cf 91       	pop	r28
    2320:	08 95       	ret

00002322 <free>:
    2322:	cf 93       	push	r28
    2324:	df 93       	push	r29
    2326:	00 97       	sbiw	r24, 0x00	; 0
    2328:	09 f4       	brne	.+2      	; 0x232c <free+0xa>
    232a:	91 c0       	rjmp	.+290    	; 0x244e <free+0x12c>
    232c:	fc 01       	movw	r30, r24
    232e:	32 97       	sbiw	r30, 0x02	; 2
    2330:	13 82       	std	Z+3, r1	; 0x03
    2332:	12 82       	std	Z+2, r1	; 0x02
    2334:	60 91 3a 06 	lds	r22, 0x063A
    2338:	70 91 3b 06 	lds	r23, 0x063B
    233c:	61 15       	cp	r22, r1
    233e:	71 05       	cpc	r23, r1
    2340:	81 f4       	brne	.+32     	; 0x2362 <free+0x40>
    2342:	20 81       	ld	r18, Z
    2344:	31 81       	ldd	r19, Z+1	; 0x01
    2346:	28 0f       	add	r18, r24
    2348:	39 1f       	adc	r19, r25
    234a:	80 91 38 06 	lds	r24, 0x0638
    234e:	90 91 39 06 	lds	r25, 0x0639
    2352:	82 17       	cp	r24, r18
    2354:	93 07       	cpc	r25, r19
    2356:	99 f5       	brne	.+102    	; 0x23be <free+0x9c>
    2358:	f0 93 39 06 	sts	0x0639, r31
    235c:	e0 93 38 06 	sts	0x0638, r30
    2360:	76 c0       	rjmp	.+236    	; 0x244e <free+0x12c>
    2362:	db 01       	movw	r26, r22
    2364:	80 e0       	ldi	r24, 0x00	; 0
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	02 c0       	rjmp	.+4      	; 0x236e <free+0x4c>
    236a:	cd 01       	movw	r24, r26
    236c:	d9 01       	movw	r26, r18
    236e:	ae 17       	cp	r26, r30
    2370:	bf 07       	cpc	r27, r31
    2372:	48 f4       	brcc	.+18     	; 0x2386 <free+0x64>
    2374:	12 96       	adiw	r26, 0x02	; 2
    2376:	2d 91       	ld	r18, X+
    2378:	3c 91       	ld	r19, X
    237a:	13 97       	sbiw	r26, 0x03	; 3
    237c:	21 15       	cp	r18, r1
    237e:	31 05       	cpc	r19, r1
    2380:	a1 f7       	brne	.-24     	; 0x236a <free+0x48>
    2382:	cd 01       	movw	r24, r26
    2384:	21 c0       	rjmp	.+66     	; 0x23c8 <free+0xa6>
    2386:	b3 83       	std	Z+3, r27	; 0x03
    2388:	a2 83       	std	Z+2, r26	; 0x02
    238a:	ef 01       	movw	r28, r30
    238c:	49 91       	ld	r20, Y+
    238e:	59 91       	ld	r21, Y+
    2390:	9e 01       	movw	r18, r28
    2392:	24 0f       	add	r18, r20
    2394:	35 1f       	adc	r19, r21
    2396:	a2 17       	cp	r26, r18
    2398:	b3 07       	cpc	r27, r19
    239a:	79 f4       	brne	.+30     	; 0x23ba <free+0x98>
    239c:	2d 91       	ld	r18, X+
    239e:	3c 91       	ld	r19, X
    23a0:	11 97       	sbiw	r26, 0x01	; 1
    23a2:	24 0f       	add	r18, r20
    23a4:	35 1f       	adc	r19, r21
    23a6:	2e 5f       	subi	r18, 0xFE	; 254
    23a8:	3f 4f       	sbci	r19, 0xFF	; 255
    23aa:	31 83       	std	Z+1, r19	; 0x01
    23ac:	20 83       	st	Z, r18
    23ae:	12 96       	adiw	r26, 0x02	; 2
    23b0:	2d 91       	ld	r18, X+
    23b2:	3c 91       	ld	r19, X
    23b4:	13 97       	sbiw	r26, 0x03	; 3
    23b6:	33 83       	std	Z+3, r19	; 0x03
    23b8:	22 83       	std	Z+2, r18	; 0x02
    23ba:	00 97       	sbiw	r24, 0x00	; 0
    23bc:	29 f4       	brne	.+10     	; 0x23c8 <free+0xa6>
    23be:	f0 93 3b 06 	sts	0x063B, r31
    23c2:	e0 93 3a 06 	sts	0x063A, r30
    23c6:	43 c0       	rjmp	.+134    	; 0x244e <free+0x12c>
    23c8:	dc 01       	movw	r26, r24
    23ca:	13 96       	adiw	r26, 0x03	; 3
    23cc:	fc 93       	st	X, r31
    23ce:	ee 93       	st	-X, r30
    23d0:	12 97       	sbiw	r26, 0x02	; 2
    23d2:	4d 91       	ld	r20, X+
    23d4:	5d 91       	ld	r21, X+
    23d6:	a4 0f       	add	r26, r20
    23d8:	b5 1f       	adc	r27, r21
    23da:	ea 17       	cp	r30, r26
    23dc:	fb 07       	cpc	r31, r27
    23de:	69 f4       	brne	.+26     	; 0x23fa <free+0xd8>
    23e0:	20 81       	ld	r18, Z
    23e2:	31 81       	ldd	r19, Z+1	; 0x01
    23e4:	24 0f       	add	r18, r20
    23e6:	35 1f       	adc	r19, r21
    23e8:	2e 5f       	subi	r18, 0xFE	; 254
    23ea:	3f 4f       	sbci	r19, 0xFF	; 255
    23ec:	ec 01       	movw	r28, r24
    23ee:	39 83       	std	Y+1, r19	; 0x01
    23f0:	28 83       	st	Y, r18
    23f2:	22 81       	ldd	r18, Z+2	; 0x02
    23f4:	33 81       	ldd	r19, Z+3	; 0x03
    23f6:	3b 83       	std	Y+3, r19	; 0x03
    23f8:	2a 83       	std	Y+2, r18	; 0x02
    23fa:	e0 e0       	ldi	r30, 0x00	; 0
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	02 c0       	rjmp	.+4      	; 0x2404 <free+0xe2>
    2400:	fb 01       	movw	r30, r22
    2402:	bc 01       	movw	r22, r24
    2404:	db 01       	movw	r26, r22
    2406:	12 96       	adiw	r26, 0x02	; 2
    2408:	8d 91       	ld	r24, X+
    240a:	9c 91       	ld	r25, X
    240c:	13 97       	sbiw	r26, 0x03	; 3
    240e:	00 97       	sbiw	r24, 0x00	; 0
    2410:	b9 f7       	brne	.-18     	; 0x2400 <free+0xde>
    2412:	9b 01       	movw	r18, r22
    2414:	2e 5f       	subi	r18, 0xFE	; 254
    2416:	3f 4f       	sbci	r19, 0xFF	; 255
    2418:	8d 91       	ld	r24, X+
    241a:	9c 91       	ld	r25, X
    241c:	11 97       	sbiw	r26, 0x01	; 1
    241e:	82 0f       	add	r24, r18
    2420:	93 1f       	adc	r25, r19
    2422:	40 91 38 06 	lds	r20, 0x0638
    2426:	50 91 39 06 	lds	r21, 0x0639
    242a:	48 17       	cp	r20, r24
    242c:	59 07       	cpc	r21, r25
    242e:	79 f4       	brne	.+30     	; 0x244e <free+0x12c>
    2430:	30 97       	sbiw	r30, 0x00	; 0
    2432:	29 f4       	brne	.+10     	; 0x243e <free+0x11c>
    2434:	10 92 3b 06 	sts	0x063B, r1
    2438:	10 92 3a 06 	sts	0x063A, r1
    243c:	02 c0       	rjmp	.+4      	; 0x2442 <free+0x120>
    243e:	13 82       	std	Z+3, r1	; 0x03
    2440:	12 82       	std	Z+2, r1	; 0x02
    2442:	22 50       	subi	r18, 0x02	; 2
    2444:	30 40       	sbci	r19, 0x00	; 0
    2446:	30 93 39 06 	sts	0x0639, r19
    244a:	20 93 38 06 	sts	0x0638, r18
    244e:	df 91       	pop	r29
    2450:	cf 91       	pop	r28
    2452:	08 95       	ret

00002454 <memset>:
    2454:	dc 01       	movw	r26, r24
    2456:	01 c0       	rjmp	.+2      	; 0x245a <memset+0x6>
    2458:	6d 93       	st	X+, r22
    245a:	41 50       	subi	r20, 0x01	; 1
    245c:	50 40       	sbci	r21, 0x00	; 0
    245e:	e0 f7       	brcc	.-8      	; 0x2458 <memset+0x4>
    2460:	08 95       	ret

00002462 <strlen>:
    2462:	fc 01       	movw	r30, r24
    2464:	01 90       	ld	r0, Z+
    2466:	00 20       	and	r0, r0
    2468:	e9 f7       	brne	.-6      	; 0x2464 <strlen+0x2>
    246a:	80 95       	com	r24
    246c:	90 95       	com	r25
    246e:	8e 0f       	add	r24, r30
    2470:	9f 1f       	adc	r25, r31
    2472:	08 95       	ret

00002474 <sprintf>:
    2474:	ae e0       	ldi	r26, 0x0E	; 14
    2476:	b0 e0       	ldi	r27, 0x00	; 0
    2478:	e0 e4       	ldi	r30, 0x40	; 64
    247a:	f2 e1       	ldi	r31, 0x12	; 18
    247c:	0c 94 aa 10 	jmp	0x2154	; 0x2154 <__prologue_saves__+0x1c>
    2480:	0d 89       	ldd	r16, Y+21	; 0x15
    2482:	1e 89       	ldd	r17, Y+22	; 0x16
    2484:	86 e0       	ldi	r24, 0x06	; 6
    2486:	8c 83       	std	Y+4, r24	; 0x04
    2488:	1a 83       	std	Y+2, r17	; 0x02
    248a:	09 83       	std	Y+1, r16	; 0x01
    248c:	8f ef       	ldi	r24, 0xFF	; 255
    248e:	9f e7       	ldi	r25, 0x7F	; 127
    2490:	9e 83       	std	Y+6, r25	; 0x06
    2492:	8d 83       	std	Y+5, r24	; 0x05
    2494:	9e 01       	movw	r18, r28
    2496:	27 5e       	subi	r18, 0xE7	; 231
    2498:	3f 4f       	sbci	r19, 0xFF	; 255
    249a:	ce 01       	movw	r24, r28
    249c:	01 96       	adiw	r24, 0x01	; 1
    249e:	6f 89       	ldd	r22, Y+23	; 0x17
    24a0:	78 8d       	ldd	r23, Y+24	; 0x18
    24a2:	a9 01       	movw	r20, r18
    24a4:	0e 94 5d 12 	call	0x24ba	; 0x24ba <vfprintf>
    24a8:	ef 81       	ldd	r30, Y+7	; 0x07
    24aa:	f8 85       	ldd	r31, Y+8	; 0x08
    24ac:	e0 0f       	add	r30, r16
    24ae:	f1 1f       	adc	r31, r17
    24b0:	10 82       	st	Z, r1
    24b2:	2e 96       	adiw	r28, 0x0e	; 14
    24b4:	e4 e0       	ldi	r30, 0x04	; 4
    24b6:	0c 94 c6 10 	jmp	0x218c	; 0x218c <__epilogue_restores__+0x1c>

000024ba <vfprintf>:
    24ba:	ac e0       	ldi	r26, 0x0C	; 12
    24bc:	b0 e0       	ldi	r27, 0x00	; 0
    24be:	e3 e6       	ldi	r30, 0x63	; 99
    24c0:	f2 e1       	ldi	r31, 0x12	; 18
    24c2:	0c 94 9c 10 	jmp	0x2138	; 0x2138 <__prologue_saves__>
    24c6:	6c 01       	movw	r12, r24
    24c8:	1b 01       	movw	r2, r22
    24ca:	8a 01       	movw	r16, r20
    24cc:	fc 01       	movw	r30, r24
    24ce:	17 82       	std	Z+7, r1	; 0x07
    24d0:	16 82       	std	Z+6, r1	; 0x06
    24d2:	83 81       	ldd	r24, Z+3	; 0x03
    24d4:	81 ff       	sbrs	r24, 1
    24d6:	d1 c1       	rjmp	.+930    	; 0x287a <vfprintf+0x3c0>
    24d8:	2e 01       	movw	r4, r28
    24da:	08 94       	sec
    24dc:	41 1c       	adc	r4, r1
    24de:	51 1c       	adc	r5, r1
    24e0:	f6 01       	movw	r30, r12
    24e2:	93 81       	ldd	r25, Z+3	; 0x03
    24e4:	f1 01       	movw	r30, r2
    24e6:	93 fd       	sbrc	r25, 3
    24e8:	85 91       	lpm	r24, Z+
    24ea:	93 ff       	sbrs	r25, 3
    24ec:	81 91       	ld	r24, Z+
    24ee:	1f 01       	movw	r2, r30
    24f0:	88 23       	and	r24, r24
    24f2:	09 f4       	brne	.+2      	; 0x24f6 <vfprintf+0x3c>
    24f4:	be c1       	rjmp	.+892    	; 0x2872 <vfprintf+0x3b8>
    24f6:	85 32       	cpi	r24, 0x25	; 37
    24f8:	39 f4       	brne	.+14     	; 0x2508 <vfprintf+0x4e>
    24fa:	93 fd       	sbrc	r25, 3
    24fc:	85 91       	lpm	r24, Z+
    24fe:	93 ff       	sbrs	r25, 3
    2500:	81 91       	ld	r24, Z+
    2502:	1f 01       	movw	r2, r30
    2504:	85 32       	cpi	r24, 0x25	; 37
    2506:	29 f4       	brne	.+10     	; 0x2512 <vfprintf+0x58>
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	b6 01       	movw	r22, r12
    250c:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <fputc>
    2510:	e7 cf       	rjmp	.-50     	; 0x24e0 <vfprintf+0x26>
    2512:	ee 24       	eor	r14, r14
    2514:	ff 24       	eor	r15, r15
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	20 32       	cpi	r18, 0x20	; 32
    251a:	b0 f4       	brcc	.+44     	; 0x2548 <vfprintf+0x8e>
    251c:	8b 32       	cpi	r24, 0x2B	; 43
    251e:	69 f0       	breq	.+26     	; 0x253a <vfprintf+0x80>
    2520:	8c 32       	cpi	r24, 0x2C	; 44
    2522:	28 f4       	brcc	.+10     	; 0x252e <vfprintf+0x74>
    2524:	80 32       	cpi	r24, 0x20	; 32
    2526:	51 f0       	breq	.+20     	; 0x253c <vfprintf+0x82>
    2528:	83 32       	cpi	r24, 0x23	; 35
    252a:	71 f4       	brne	.+28     	; 0x2548 <vfprintf+0x8e>
    252c:	0b c0       	rjmp	.+22     	; 0x2544 <vfprintf+0x8a>
    252e:	8d 32       	cpi	r24, 0x2D	; 45
    2530:	39 f0       	breq	.+14     	; 0x2540 <vfprintf+0x86>
    2532:	80 33       	cpi	r24, 0x30	; 48
    2534:	49 f4       	brne	.+18     	; 0x2548 <vfprintf+0x8e>
    2536:	21 60       	ori	r18, 0x01	; 1
    2538:	2c c0       	rjmp	.+88     	; 0x2592 <vfprintf+0xd8>
    253a:	22 60       	ori	r18, 0x02	; 2
    253c:	24 60       	ori	r18, 0x04	; 4
    253e:	29 c0       	rjmp	.+82     	; 0x2592 <vfprintf+0xd8>
    2540:	28 60       	ori	r18, 0x08	; 8
    2542:	27 c0       	rjmp	.+78     	; 0x2592 <vfprintf+0xd8>
    2544:	20 61       	ori	r18, 0x10	; 16
    2546:	25 c0       	rjmp	.+74     	; 0x2592 <vfprintf+0xd8>
    2548:	27 fd       	sbrc	r18, 7
    254a:	2c c0       	rjmp	.+88     	; 0x25a4 <vfprintf+0xea>
    254c:	38 2f       	mov	r19, r24
    254e:	30 53       	subi	r19, 0x30	; 48
    2550:	3a 30       	cpi	r19, 0x0A	; 10
    2552:	98 f4       	brcc	.+38     	; 0x257a <vfprintf+0xc0>
    2554:	26 ff       	sbrs	r18, 6
    2556:	08 c0       	rjmp	.+16     	; 0x2568 <vfprintf+0xae>
    2558:	8e 2d       	mov	r24, r14
    255a:	88 0f       	add	r24, r24
    255c:	e8 2e       	mov	r14, r24
    255e:	ee 0c       	add	r14, r14
    2560:	ee 0c       	add	r14, r14
    2562:	e8 0e       	add	r14, r24
    2564:	e3 0e       	add	r14, r19
    2566:	15 c0       	rjmp	.+42     	; 0x2592 <vfprintf+0xd8>
    2568:	8f 2d       	mov	r24, r15
    256a:	88 0f       	add	r24, r24
    256c:	f8 2e       	mov	r15, r24
    256e:	ff 0c       	add	r15, r15
    2570:	ff 0c       	add	r15, r15
    2572:	f8 0e       	add	r15, r24
    2574:	f3 0e       	add	r15, r19
    2576:	20 62       	ori	r18, 0x20	; 32
    2578:	0c c0       	rjmp	.+24     	; 0x2592 <vfprintf+0xd8>
    257a:	8e 32       	cpi	r24, 0x2E	; 46
    257c:	21 f4       	brne	.+8      	; 0x2586 <vfprintf+0xcc>
    257e:	26 fd       	sbrc	r18, 6
    2580:	78 c1       	rjmp	.+752    	; 0x2872 <vfprintf+0x3b8>
    2582:	20 64       	ori	r18, 0x40	; 64
    2584:	06 c0       	rjmp	.+12     	; 0x2592 <vfprintf+0xd8>
    2586:	8c 36       	cpi	r24, 0x6C	; 108
    2588:	11 f4       	brne	.+4      	; 0x258e <vfprintf+0xd4>
    258a:	20 68       	ori	r18, 0x80	; 128
    258c:	02 c0       	rjmp	.+4      	; 0x2592 <vfprintf+0xd8>
    258e:	88 36       	cpi	r24, 0x68	; 104
    2590:	49 f4       	brne	.+18     	; 0x25a4 <vfprintf+0xea>
    2592:	f1 01       	movw	r30, r2
    2594:	93 fd       	sbrc	r25, 3
    2596:	85 91       	lpm	r24, Z+
    2598:	93 ff       	sbrs	r25, 3
    259a:	81 91       	ld	r24, Z+
    259c:	1f 01       	movw	r2, r30
    259e:	88 23       	and	r24, r24
    25a0:	09 f0       	breq	.+2      	; 0x25a4 <vfprintf+0xea>
    25a2:	ba cf       	rjmp	.-140    	; 0x2518 <vfprintf+0x5e>
    25a4:	98 2f       	mov	r25, r24
    25a6:	95 54       	subi	r25, 0x45	; 69
    25a8:	93 30       	cpi	r25, 0x03	; 3
    25aa:	18 f0       	brcs	.+6      	; 0x25b2 <vfprintf+0xf8>
    25ac:	90 52       	subi	r25, 0x20	; 32
    25ae:	93 30       	cpi	r25, 0x03	; 3
    25b0:	28 f4       	brcc	.+10     	; 0x25bc <vfprintf+0x102>
    25b2:	0c 5f       	subi	r16, 0xFC	; 252
    25b4:	1f 4f       	sbci	r17, 0xFF	; 255
    25b6:	ff e3       	ldi	r31, 0x3F	; 63
    25b8:	f9 83       	std	Y+1, r31	; 0x01
    25ba:	0d c0       	rjmp	.+26     	; 0x25d6 <vfprintf+0x11c>
    25bc:	83 36       	cpi	r24, 0x63	; 99
    25be:	31 f0       	breq	.+12     	; 0x25cc <vfprintf+0x112>
    25c0:	83 37       	cpi	r24, 0x73	; 115
    25c2:	71 f0       	breq	.+28     	; 0x25e0 <vfprintf+0x126>
    25c4:	83 35       	cpi	r24, 0x53	; 83
    25c6:	09 f0       	breq	.+2      	; 0x25ca <vfprintf+0x110>
    25c8:	60 c0       	rjmp	.+192    	; 0x268a <vfprintf+0x1d0>
    25ca:	22 c0       	rjmp	.+68     	; 0x2610 <vfprintf+0x156>
    25cc:	f8 01       	movw	r30, r16
    25ce:	80 81       	ld	r24, Z
    25d0:	89 83       	std	Y+1, r24	; 0x01
    25d2:	0e 5f       	subi	r16, 0xFE	; 254
    25d4:	1f 4f       	sbci	r17, 0xFF	; 255
    25d6:	42 01       	movw	r8, r4
    25d8:	71 e0       	ldi	r23, 0x01	; 1
    25da:	a7 2e       	mov	r10, r23
    25dc:	b1 2c       	mov	r11, r1
    25de:	16 c0       	rjmp	.+44     	; 0x260c <vfprintf+0x152>
    25e0:	62 e0       	ldi	r22, 0x02	; 2
    25e2:	66 2e       	mov	r6, r22
    25e4:	71 2c       	mov	r7, r1
    25e6:	60 0e       	add	r6, r16
    25e8:	71 1e       	adc	r7, r17
    25ea:	f8 01       	movw	r30, r16
    25ec:	80 80       	ld	r8, Z
    25ee:	91 80       	ldd	r9, Z+1	; 0x01
    25f0:	26 ff       	sbrs	r18, 6
    25f2:	03 c0       	rjmp	.+6      	; 0x25fa <vfprintf+0x140>
    25f4:	6e 2d       	mov	r22, r14
    25f6:	70 e0       	ldi	r23, 0x00	; 0
    25f8:	02 c0       	rjmp	.+4      	; 0x25fe <vfprintf+0x144>
    25fa:	6f ef       	ldi	r22, 0xFF	; 255
    25fc:	7f ef       	ldi	r23, 0xFF	; 255
    25fe:	c4 01       	movw	r24, r8
    2600:	2c 87       	std	Y+12, r18	; 0x0c
    2602:	0e 94 4f 14 	call	0x289e	; 0x289e <strnlen>
    2606:	5c 01       	movw	r10, r24
    2608:	83 01       	movw	r16, r6
    260a:	2c 85       	ldd	r18, Y+12	; 0x0c
    260c:	2f 77       	andi	r18, 0x7F	; 127
    260e:	17 c0       	rjmp	.+46     	; 0x263e <vfprintf+0x184>
    2610:	52 e0       	ldi	r21, 0x02	; 2
    2612:	65 2e       	mov	r6, r21
    2614:	71 2c       	mov	r7, r1
    2616:	60 0e       	add	r6, r16
    2618:	71 1e       	adc	r7, r17
    261a:	f8 01       	movw	r30, r16
    261c:	80 80       	ld	r8, Z
    261e:	91 80       	ldd	r9, Z+1	; 0x01
    2620:	26 ff       	sbrs	r18, 6
    2622:	03 c0       	rjmp	.+6      	; 0x262a <vfprintf+0x170>
    2624:	6e 2d       	mov	r22, r14
    2626:	70 e0       	ldi	r23, 0x00	; 0
    2628:	02 c0       	rjmp	.+4      	; 0x262e <vfprintf+0x174>
    262a:	6f ef       	ldi	r22, 0xFF	; 255
    262c:	7f ef       	ldi	r23, 0xFF	; 255
    262e:	c4 01       	movw	r24, r8
    2630:	2c 87       	std	Y+12, r18	; 0x0c
    2632:	0e 94 44 14 	call	0x2888	; 0x2888 <strnlen_P>
    2636:	5c 01       	movw	r10, r24
    2638:	2c 85       	ldd	r18, Y+12	; 0x0c
    263a:	20 68       	ori	r18, 0x80	; 128
    263c:	83 01       	movw	r16, r6
    263e:	23 fd       	sbrc	r18, 3
    2640:	20 c0       	rjmp	.+64     	; 0x2682 <vfprintf+0x1c8>
    2642:	08 c0       	rjmp	.+16     	; 0x2654 <vfprintf+0x19a>
    2644:	80 e2       	ldi	r24, 0x20	; 32
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	b6 01       	movw	r22, r12
    264a:	2c 87       	std	Y+12, r18	; 0x0c
    264c:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <fputc>
    2650:	fa 94       	dec	r15
    2652:	2c 85       	ldd	r18, Y+12	; 0x0c
    2654:	8f 2d       	mov	r24, r15
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	a8 16       	cp	r10, r24
    265a:	b9 06       	cpc	r11, r25
    265c:	98 f3       	brcs	.-26     	; 0x2644 <vfprintf+0x18a>
    265e:	11 c0       	rjmp	.+34     	; 0x2682 <vfprintf+0x1c8>
    2660:	f4 01       	movw	r30, r8
    2662:	27 fd       	sbrc	r18, 7
    2664:	85 91       	lpm	r24, Z+
    2666:	27 ff       	sbrs	r18, 7
    2668:	81 91       	ld	r24, Z+
    266a:	4f 01       	movw	r8, r30
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	b6 01       	movw	r22, r12
    2670:	2c 87       	std	Y+12, r18	; 0x0c
    2672:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <fputc>
    2676:	2c 85       	ldd	r18, Y+12	; 0x0c
    2678:	f1 10       	cpse	r15, r1
    267a:	fa 94       	dec	r15
    267c:	08 94       	sec
    267e:	a1 08       	sbc	r10, r1
    2680:	b1 08       	sbc	r11, r1
    2682:	a1 14       	cp	r10, r1
    2684:	b1 04       	cpc	r11, r1
    2686:	61 f7       	brne	.-40     	; 0x2660 <vfprintf+0x1a6>
    2688:	f1 c0       	rjmp	.+482    	; 0x286c <vfprintf+0x3b2>
    268a:	84 36       	cpi	r24, 0x64	; 100
    268c:	11 f0       	breq	.+4      	; 0x2692 <vfprintf+0x1d8>
    268e:	89 36       	cpi	r24, 0x69	; 105
    2690:	49 f5       	brne	.+82     	; 0x26e4 <vfprintf+0x22a>
    2692:	27 ff       	sbrs	r18, 7
    2694:	08 c0       	rjmp	.+16     	; 0x26a6 <vfprintf+0x1ec>
    2696:	f8 01       	movw	r30, r16
    2698:	60 81       	ld	r22, Z
    269a:	71 81       	ldd	r23, Z+1	; 0x01
    269c:	82 81       	ldd	r24, Z+2	; 0x02
    269e:	93 81       	ldd	r25, Z+3	; 0x03
    26a0:	0c 5f       	subi	r16, 0xFC	; 252
    26a2:	1f 4f       	sbci	r17, 0xFF	; 255
    26a4:	09 c0       	rjmp	.+18     	; 0x26b8 <vfprintf+0x1fe>
    26a6:	f8 01       	movw	r30, r16
    26a8:	60 81       	ld	r22, Z
    26aa:	71 81       	ldd	r23, Z+1	; 0x01
    26ac:	88 27       	eor	r24, r24
    26ae:	77 fd       	sbrc	r23, 7
    26b0:	80 95       	com	r24
    26b2:	98 2f       	mov	r25, r24
    26b4:	0e 5f       	subi	r16, 0xFE	; 254
    26b6:	1f 4f       	sbci	r17, 0xFF	; 255
    26b8:	4f e6       	ldi	r20, 0x6F	; 111
    26ba:	b4 2e       	mov	r11, r20
    26bc:	b2 22       	and	r11, r18
    26be:	97 ff       	sbrs	r25, 7
    26c0:	09 c0       	rjmp	.+18     	; 0x26d4 <vfprintf+0x21a>
    26c2:	90 95       	com	r25
    26c4:	80 95       	com	r24
    26c6:	70 95       	com	r23
    26c8:	61 95       	neg	r22
    26ca:	7f 4f       	sbci	r23, 0xFF	; 255
    26cc:	8f 4f       	sbci	r24, 0xFF	; 255
    26ce:	9f 4f       	sbci	r25, 0xFF	; 255
    26d0:	f0 e8       	ldi	r31, 0x80	; 128
    26d2:	bf 2a       	or	r11, r31
    26d4:	a2 01       	movw	r20, r4
    26d6:	2a e0       	ldi	r18, 0x0A	; 10
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	0e 94 86 14 	call	0x290c	; 0x290c <__ultoa_invert>
    26de:	78 2e       	mov	r7, r24
    26e0:	74 18       	sub	r7, r4
    26e2:	45 c0       	rjmp	.+138    	; 0x276e <vfprintf+0x2b4>
    26e4:	85 37       	cpi	r24, 0x75	; 117
    26e6:	31 f4       	brne	.+12     	; 0x26f4 <vfprintf+0x23a>
    26e8:	3f ee       	ldi	r19, 0xEF	; 239
    26ea:	b3 2e       	mov	r11, r19
    26ec:	b2 22       	and	r11, r18
    26ee:	2a e0       	ldi	r18, 0x0A	; 10
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	25 c0       	rjmp	.+74     	; 0x273e <vfprintf+0x284>
    26f4:	99 ef       	ldi	r25, 0xF9	; 249
    26f6:	b9 2e       	mov	r11, r25
    26f8:	b2 22       	and	r11, r18
    26fa:	8f 36       	cpi	r24, 0x6F	; 111
    26fc:	c1 f0       	breq	.+48     	; 0x272e <vfprintf+0x274>
    26fe:	80 37       	cpi	r24, 0x70	; 112
    2700:	20 f4       	brcc	.+8      	; 0x270a <vfprintf+0x250>
    2702:	88 35       	cpi	r24, 0x58	; 88
    2704:	09 f0       	breq	.+2      	; 0x2708 <vfprintf+0x24e>
    2706:	b5 c0       	rjmp	.+362    	; 0x2872 <vfprintf+0x3b8>
    2708:	0d c0       	rjmp	.+26     	; 0x2724 <vfprintf+0x26a>
    270a:	80 37       	cpi	r24, 0x70	; 112
    270c:	21 f0       	breq	.+8      	; 0x2716 <vfprintf+0x25c>
    270e:	88 37       	cpi	r24, 0x78	; 120
    2710:	09 f0       	breq	.+2      	; 0x2714 <vfprintf+0x25a>
    2712:	af c0       	rjmp	.+350    	; 0x2872 <vfprintf+0x3b8>
    2714:	02 c0       	rjmp	.+4      	; 0x271a <vfprintf+0x260>
    2716:	20 e1       	ldi	r18, 0x10	; 16
    2718:	b2 2a       	or	r11, r18
    271a:	b4 fe       	sbrs	r11, 4
    271c:	0b c0       	rjmp	.+22     	; 0x2734 <vfprintf+0x27a>
    271e:	84 e0       	ldi	r24, 0x04	; 4
    2720:	b8 2a       	or	r11, r24
    2722:	08 c0       	rjmp	.+16     	; 0x2734 <vfprintf+0x27a>
    2724:	b4 fe       	sbrs	r11, 4
    2726:	09 c0       	rjmp	.+18     	; 0x273a <vfprintf+0x280>
    2728:	e6 e0       	ldi	r30, 0x06	; 6
    272a:	be 2a       	or	r11, r30
    272c:	06 c0       	rjmp	.+12     	; 0x273a <vfprintf+0x280>
    272e:	28 e0       	ldi	r18, 0x08	; 8
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	05 c0       	rjmp	.+10     	; 0x273e <vfprintf+0x284>
    2734:	20 e1       	ldi	r18, 0x10	; 16
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	02 c0       	rjmp	.+4      	; 0x273e <vfprintf+0x284>
    273a:	20 e1       	ldi	r18, 0x10	; 16
    273c:	32 e0       	ldi	r19, 0x02	; 2
    273e:	b7 fe       	sbrs	r11, 7
    2740:	08 c0       	rjmp	.+16     	; 0x2752 <vfprintf+0x298>
    2742:	f8 01       	movw	r30, r16
    2744:	60 81       	ld	r22, Z
    2746:	71 81       	ldd	r23, Z+1	; 0x01
    2748:	82 81       	ldd	r24, Z+2	; 0x02
    274a:	93 81       	ldd	r25, Z+3	; 0x03
    274c:	0c 5f       	subi	r16, 0xFC	; 252
    274e:	1f 4f       	sbci	r17, 0xFF	; 255
    2750:	07 c0       	rjmp	.+14     	; 0x2760 <vfprintf+0x2a6>
    2752:	f8 01       	movw	r30, r16
    2754:	60 81       	ld	r22, Z
    2756:	71 81       	ldd	r23, Z+1	; 0x01
    2758:	80 e0       	ldi	r24, 0x00	; 0
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	0e 5f       	subi	r16, 0xFE	; 254
    275e:	1f 4f       	sbci	r17, 0xFF	; 255
    2760:	a2 01       	movw	r20, r4
    2762:	0e 94 86 14 	call	0x290c	; 0x290c <__ultoa_invert>
    2766:	78 2e       	mov	r7, r24
    2768:	74 18       	sub	r7, r4
    276a:	ff e7       	ldi	r31, 0x7F	; 127
    276c:	bf 22       	and	r11, r31
    276e:	b6 fe       	sbrs	r11, 6
    2770:	0b c0       	rjmp	.+22     	; 0x2788 <vfprintf+0x2ce>
    2772:	2e ef       	ldi	r18, 0xFE	; 254
    2774:	b2 22       	and	r11, r18
    2776:	7e 14       	cp	r7, r14
    2778:	38 f4       	brcc	.+14     	; 0x2788 <vfprintf+0x2ce>
    277a:	b4 fe       	sbrs	r11, 4
    277c:	07 c0       	rjmp	.+14     	; 0x278c <vfprintf+0x2d2>
    277e:	b2 fc       	sbrc	r11, 2
    2780:	05 c0       	rjmp	.+10     	; 0x278c <vfprintf+0x2d2>
    2782:	8f ee       	ldi	r24, 0xEF	; 239
    2784:	b8 22       	and	r11, r24
    2786:	02 c0       	rjmp	.+4      	; 0x278c <vfprintf+0x2d2>
    2788:	a7 2c       	mov	r10, r7
    278a:	01 c0       	rjmp	.+2      	; 0x278e <vfprintf+0x2d4>
    278c:	ae 2c       	mov	r10, r14
    278e:	8b 2d       	mov	r24, r11
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	b4 fe       	sbrs	r11, 4
    2794:	0d c0       	rjmp	.+26     	; 0x27b0 <vfprintf+0x2f6>
    2796:	fe 01       	movw	r30, r28
    2798:	e7 0d       	add	r30, r7
    279a:	f1 1d       	adc	r31, r1
    279c:	20 81       	ld	r18, Z
    279e:	20 33       	cpi	r18, 0x30	; 48
    27a0:	19 f4       	brne	.+6      	; 0x27a8 <vfprintf+0x2ee>
    27a2:	e9 ee       	ldi	r30, 0xE9	; 233
    27a4:	be 22       	and	r11, r30
    27a6:	09 c0       	rjmp	.+18     	; 0x27ba <vfprintf+0x300>
    27a8:	a3 94       	inc	r10
    27aa:	b2 fe       	sbrs	r11, 2
    27ac:	06 c0       	rjmp	.+12     	; 0x27ba <vfprintf+0x300>
    27ae:	04 c0       	rjmp	.+8      	; 0x27b8 <vfprintf+0x2fe>
    27b0:	86 78       	andi	r24, 0x86	; 134
    27b2:	90 70       	andi	r25, 0x00	; 0
    27b4:	00 97       	sbiw	r24, 0x00	; 0
    27b6:	09 f0       	breq	.+2      	; 0x27ba <vfprintf+0x300>
    27b8:	a3 94       	inc	r10
    27ba:	8b 2c       	mov	r8, r11
    27bc:	99 24       	eor	r9, r9
    27be:	b3 fc       	sbrc	r11, 3
    27c0:	14 c0       	rjmp	.+40     	; 0x27ea <vfprintf+0x330>
    27c2:	b0 fe       	sbrs	r11, 0
    27c4:	0f c0       	rjmp	.+30     	; 0x27e4 <vfprintf+0x32a>
    27c6:	af 14       	cp	r10, r15
    27c8:	28 f4       	brcc	.+10     	; 0x27d4 <vfprintf+0x31a>
    27ca:	e7 2c       	mov	r14, r7
    27cc:	ef 0c       	add	r14, r15
    27ce:	ea 18       	sub	r14, r10
    27d0:	af 2c       	mov	r10, r15
    27d2:	08 c0       	rjmp	.+16     	; 0x27e4 <vfprintf+0x32a>
    27d4:	e7 2c       	mov	r14, r7
    27d6:	06 c0       	rjmp	.+12     	; 0x27e4 <vfprintf+0x32a>
    27d8:	80 e2       	ldi	r24, 0x20	; 32
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	b6 01       	movw	r22, r12
    27de:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <fputc>
    27e2:	a3 94       	inc	r10
    27e4:	af 14       	cp	r10, r15
    27e6:	c0 f3       	brcs	.-16     	; 0x27d8 <vfprintf+0x31e>
    27e8:	04 c0       	rjmp	.+8      	; 0x27f2 <vfprintf+0x338>
    27ea:	af 14       	cp	r10, r15
    27ec:	10 f4       	brcc	.+4      	; 0x27f2 <vfprintf+0x338>
    27ee:	fa 18       	sub	r15, r10
    27f0:	01 c0       	rjmp	.+2      	; 0x27f4 <vfprintf+0x33a>
    27f2:	ff 24       	eor	r15, r15
    27f4:	84 fe       	sbrs	r8, 4
    27f6:	0f c0       	rjmp	.+30     	; 0x2816 <vfprintf+0x35c>
    27f8:	80 e3       	ldi	r24, 0x30	; 48
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	b6 01       	movw	r22, r12
    27fe:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <fputc>
    2802:	82 fe       	sbrs	r8, 2
    2804:	1f c0       	rjmp	.+62     	; 0x2844 <vfprintf+0x38a>
    2806:	81 fe       	sbrs	r8, 1
    2808:	03 c0       	rjmp	.+6      	; 0x2810 <vfprintf+0x356>
    280a:	88 e5       	ldi	r24, 0x58	; 88
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	10 c0       	rjmp	.+32     	; 0x2830 <vfprintf+0x376>
    2810:	88 e7       	ldi	r24, 0x78	; 120
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	0d c0       	rjmp	.+26     	; 0x2830 <vfprintf+0x376>
    2816:	c4 01       	movw	r24, r8
    2818:	86 78       	andi	r24, 0x86	; 134
    281a:	90 70       	andi	r25, 0x00	; 0
    281c:	00 97       	sbiw	r24, 0x00	; 0
    281e:	91 f0       	breq	.+36     	; 0x2844 <vfprintf+0x38a>
    2820:	81 fc       	sbrc	r8, 1
    2822:	02 c0       	rjmp	.+4      	; 0x2828 <vfprintf+0x36e>
    2824:	80 e2       	ldi	r24, 0x20	; 32
    2826:	01 c0       	rjmp	.+2      	; 0x282a <vfprintf+0x370>
    2828:	8b e2       	ldi	r24, 0x2B	; 43
    282a:	b7 fc       	sbrc	r11, 7
    282c:	8d e2       	ldi	r24, 0x2D	; 45
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	b6 01       	movw	r22, r12
    2832:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <fputc>
    2836:	06 c0       	rjmp	.+12     	; 0x2844 <vfprintf+0x38a>
    2838:	80 e3       	ldi	r24, 0x30	; 48
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	b6 01       	movw	r22, r12
    283e:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <fputc>
    2842:	ea 94       	dec	r14
    2844:	7e 14       	cp	r7, r14
    2846:	c0 f3       	brcs	.-16     	; 0x2838 <vfprintf+0x37e>
    2848:	7a 94       	dec	r7
    284a:	f2 01       	movw	r30, r4
    284c:	e7 0d       	add	r30, r7
    284e:	f1 1d       	adc	r31, r1
    2850:	80 81       	ld	r24, Z
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	b6 01       	movw	r22, r12
    2856:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <fputc>
    285a:	77 20       	and	r7, r7
    285c:	a9 f7       	brne	.-22     	; 0x2848 <vfprintf+0x38e>
    285e:	06 c0       	rjmp	.+12     	; 0x286c <vfprintf+0x3b2>
    2860:	80 e2       	ldi	r24, 0x20	; 32
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	b6 01       	movw	r22, r12
    2866:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <fputc>
    286a:	fa 94       	dec	r15
    286c:	ff 20       	and	r15, r15
    286e:	c1 f7       	brne	.-16     	; 0x2860 <vfprintf+0x3a6>
    2870:	37 ce       	rjmp	.-914    	; 0x24e0 <vfprintf+0x26>
    2872:	f6 01       	movw	r30, r12
    2874:	26 81       	ldd	r18, Z+6	; 0x06
    2876:	37 81       	ldd	r19, Z+7	; 0x07
    2878:	02 c0       	rjmp	.+4      	; 0x287e <vfprintf+0x3c4>
    287a:	2f ef       	ldi	r18, 0xFF	; 255
    287c:	3f ef       	ldi	r19, 0xFF	; 255
    287e:	c9 01       	movw	r24, r18
    2880:	2c 96       	adiw	r28, 0x0c	; 12
    2882:	e2 e1       	ldi	r30, 0x12	; 18
    2884:	0c 94 b8 10 	jmp	0x2170	; 0x2170 <__epilogue_restores__>

00002888 <strnlen_P>:
    2888:	fc 01       	movw	r30, r24
    288a:	05 90       	lpm	r0, Z+
    288c:	61 50       	subi	r22, 0x01	; 1
    288e:	70 40       	sbci	r23, 0x00	; 0
    2890:	01 10       	cpse	r0, r1
    2892:	d8 f7       	brcc	.-10     	; 0x288a <strnlen_P+0x2>
    2894:	80 95       	com	r24
    2896:	90 95       	com	r25
    2898:	8e 0f       	add	r24, r30
    289a:	9f 1f       	adc	r25, r31
    289c:	08 95       	ret

0000289e <strnlen>:
    289e:	fc 01       	movw	r30, r24
    28a0:	61 50       	subi	r22, 0x01	; 1
    28a2:	70 40       	sbci	r23, 0x00	; 0
    28a4:	01 90       	ld	r0, Z+
    28a6:	01 10       	cpse	r0, r1
    28a8:	d8 f7       	brcc	.-10     	; 0x28a0 <strnlen+0x2>
    28aa:	80 95       	com	r24
    28ac:	90 95       	com	r25
    28ae:	8e 0f       	add	r24, r30
    28b0:	9f 1f       	adc	r25, r31
    28b2:	08 95       	ret

000028b4 <fputc>:
    28b4:	0f 93       	push	r16
    28b6:	1f 93       	push	r17
    28b8:	cf 93       	push	r28
    28ba:	df 93       	push	r29
    28bc:	8c 01       	movw	r16, r24
    28be:	eb 01       	movw	r28, r22
    28c0:	8b 81       	ldd	r24, Y+3	; 0x03
    28c2:	81 ff       	sbrs	r24, 1
    28c4:	1b c0       	rjmp	.+54     	; 0x28fc <fputc+0x48>
    28c6:	82 ff       	sbrs	r24, 2
    28c8:	0d c0       	rjmp	.+26     	; 0x28e4 <fputc+0x30>
    28ca:	2e 81       	ldd	r18, Y+6	; 0x06
    28cc:	3f 81       	ldd	r19, Y+7	; 0x07
    28ce:	8c 81       	ldd	r24, Y+4	; 0x04
    28d0:	9d 81       	ldd	r25, Y+5	; 0x05
    28d2:	28 17       	cp	r18, r24
    28d4:	39 07       	cpc	r19, r25
    28d6:	64 f4       	brge	.+24     	; 0x28f0 <fputc+0x3c>
    28d8:	e8 81       	ld	r30, Y
    28da:	f9 81       	ldd	r31, Y+1	; 0x01
    28dc:	01 93       	st	Z+, r16
    28de:	f9 83       	std	Y+1, r31	; 0x01
    28e0:	e8 83       	st	Y, r30
    28e2:	06 c0       	rjmp	.+12     	; 0x28f0 <fputc+0x3c>
    28e4:	e8 85       	ldd	r30, Y+8	; 0x08
    28e6:	f9 85       	ldd	r31, Y+9	; 0x09
    28e8:	80 2f       	mov	r24, r16
    28ea:	09 95       	icall
    28ec:	00 97       	sbiw	r24, 0x00	; 0
    28ee:	31 f4       	brne	.+12     	; 0x28fc <fputc+0x48>
    28f0:	8e 81       	ldd	r24, Y+6	; 0x06
    28f2:	9f 81       	ldd	r25, Y+7	; 0x07
    28f4:	01 96       	adiw	r24, 0x01	; 1
    28f6:	9f 83       	std	Y+7, r25	; 0x07
    28f8:	8e 83       	std	Y+6, r24	; 0x06
    28fa:	02 c0       	rjmp	.+4      	; 0x2900 <fputc+0x4c>
    28fc:	0f ef       	ldi	r16, 0xFF	; 255
    28fe:	1f ef       	ldi	r17, 0xFF	; 255
    2900:	c8 01       	movw	r24, r16
    2902:	df 91       	pop	r29
    2904:	cf 91       	pop	r28
    2906:	1f 91       	pop	r17
    2908:	0f 91       	pop	r16
    290a:	08 95       	ret

0000290c <__ultoa_invert>:
    290c:	fa 01       	movw	r30, r20
    290e:	aa 27       	eor	r26, r26
    2910:	28 30       	cpi	r18, 0x08	; 8
    2912:	51 f1       	breq	.+84     	; 0x2968 <__ultoa_invert+0x5c>
    2914:	20 31       	cpi	r18, 0x10	; 16
    2916:	81 f1       	breq	.+96     	; 0x2978 <__ultoa_invert+0x6c>
    2918:	e8 94       	clt
    291a:	6f 93       	push	r22
    291c:	6e 7f       	andi	r22, 0xFE	; 254
    291e:	6e 5f       	subi	r22, 0xFE	; 254
    2920:	7f 4f       	sbci	r23, 0xFF	; 255
    2922:	8f 4f       	sbci	r24, 0xFF	; 255
    2924:	9f 4f       	sbci	r25, 0xFF	; 255
    2926:	af 4f       	sbci	r26, 0xFF	; 255
    2928:	b1 e0       	ldi	r27, 0x01	; 1
    292a:	3e d0       	rcall	.+124    	; 0x29a8 <__ultoa_invert+0x9c>
    292c:	b4 e0       	ldi	r27, 0x04	; 4
    292e:	3c d0       	rcall	.+120    	; 0x29a8 <__ultoa_invert+0x9c>
    2930:	67 0f       	add	r22, r23
    2932:	78 1f       	adc	r23, r24
    2934:	89 1f       	adc	r24, r25
    2936:	9a 1f       	adc	r25, r26
    2938:	a1 1d       	adc	r26, r1
    293a:	68 0f       	add	r22, r24
    293c:	79 1f       	adc	r23, r25
    293e:	8a 1f       	adc	r24, r26
    2940:	91 1d       	adc	r25, r1
    2942:	a1 1d       	adc	r26, r1
    2944:	6a 0f       	add	r22, r26
    2946:	71 1d       	adc	r23, r1
    2948:	81 1d       	adc	r24, r1
    294a:	91 1d       	adc	r25, r1
    294c:	a1 1d       	adc	r26, r1
    294e:	20 d0       	rcall	.+64     	; 0x2990 <__ultoa_invert+0x84>
    2950:	09 f4       	brne	.+2      	; 0x2954 <__ultoa_invert+0x48>
    2952:	68 94       	set
    2954:	3f 91       	pop	r19
    2956:	2a e0       	ldi	r18, 0x0A	; 10
    2958:	26 9f       	mul	r18, r22
    295a:	11 24       	eor	r1, r1
    295c:	30 19       	sub	r19, r0
    295e:	30 5d       	subi	r19, 0xD0	; 208
    2960:	31 93       	st	Z+, r19
    2962:	de f6       	brtc	.-74     	; 0x291a <__ultoa_invert+0xe>
    2964:	cf 01       	movw	r24, r30
    2966:	08 95       	ret
    2968:	46 2f       	mov	r20, r22
    296a:	47 70       	andi	r20, 0x07	; 7
    296c:	40 5d       	subi	r20, 0xD0	; 208
    296e:	41 93       	st	Z+, r20
    2970:	b3 e0       	ldi	r27, 0x03	; 3
    2972:	0f d0       	rcall	.+30     	; 0x2992 <__ultoa_invert+0x86>
    2974:	c9 f7       	brne	.-14     	; 0x2968 <__ultoa_invert+0x5c>
    2976:	f6 cf       	rjmp	.-20     	; 0x2964 <__ultoa_invert+0x58>
    2978:	46 2f       	mov	r20, r22
    297a:	4f 70       	andi	r20, 0x0F	; 15
    297c:	40 5d       	subi	r20, 0xD0	; 208
    297e:	4a 33       	cpi	r20, 0x3A	; 58
    2980:	18 f0       	brcs	.+6      	; 0x2988 <__ultoa_invert+0x7c>
    2982:	49 5d       	subi	r20, 0xD9	; 217
    2984:	31 fd       	sbrc	r19, 1
    2986:	40 52       	subi	r20, 0x20	; 32
    2988:	41 93       	st	Z+, r20
    298a:	02 d0       	rcall	.+4      	; 0x2990 <__ultoa_invert+0x84>
    298c:	a9 f7       	brne	.-22     	; 0x2978 <__ultoa_invert+0x6c>
    298e:	ea cf       	rjmp	.-44     	; 0x2964 <__ultoa_invert+0x58>
    2990:	b4 e0       	ldi	r27, 0x04	; 4
    2992:	a6 95       	lsr	r26
    2994:	97 95       	ror	r25
    2996:	87 95       	ror	r24
    2998:	77 95       	ror	r23
    299a:	67 95       	ror	r22
    299c:	ba 95       	dec	r27
    299e:	c9 f7       	brne	.-14     	; 0x2992 <__ultoa_invert+0x86>
    29a0:	00 97       	sbiw	r24, 0x00	; 0
    29a2:	61 05       	cpc	r22, r1
    29a4:	71 05       	cpc	r23, r1
    29a6:	08 95       	ret
    29a8:	9b 01       	movw	r18, r22
    29aa:	ac 01       	movw	r20, r24
    29ac:	0a 2e       	mov	r0, r26
    29ae:	06 94       	lsr	r0
    29b0:	57 95       	ror	r21
    29b2:	47 95       	ror	r20
    29b4:	37 95       	ror	r19
    29b6:	27 95       	ror	r18
    29b8:	ba 95       	dec	r27
    29ba:	c9 f7       	brne	.-14     	; 0x29ae <__ultoa_invert+0xa2>
    29bc:	62 0f       	add	r22, r18
    29be:	73 1f       	adc	r23, r19
    29c0:	84 1f       	adc	r24, r20
    29c2:	95 1f       	adc	r25, r21
    29c4:	a0 1d       	adc	r26, r0
    29c6:	08 95       	ret

000029c8 <_exit>:
    29c8:	f8 94       	cli

000029ca <__stop_program>:
    29ca:	ff cf       	rjmp	.-2      	; 0x29ca <__stop_program>
