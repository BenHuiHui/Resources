
assignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00001f06  00001f9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000564  00800128  00800128  00001fc2  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  00001fc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  00002714  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e8  00000000  00000000  000027fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000004a4  00000000  00000000  000029e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002b1b  00000000  00000000  00002e87  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001480  00000000  00000000  000059a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001fbb  00000000  00000000  00006e22  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000390  00000000  00000000  00008de0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000072c  00000000  00000000  00009170  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000ea2  00000000  00000000  0000989c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000673  00000000  00000000  0000a73e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000048  00000000  00000000  0000adb1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 6a 07 	jmp	0xed4	; 0xed4 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 0f 07 	jmp	0xe1e	; 0xe1e <__vector_20>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 e0       	ldi	r30, 0x06	; 6
      7c:	ff e1       	ldi	r31, 0x1F	; 31
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 32       	cpi	r26, 0x28	; 40
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	16 e0       	ldi	r17, 0x06	; 6
      8c:	a8 e2       	ldi	r26, 0x28	; 40
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ac 38       	cpi	r26, 0x8C	; 140
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <main>
      9e:	0c 94 81 0f 	jmp	0x1f02	; 0x1f02 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <task1>:
// Tasks 1 and 2 will increment a global variable ctr, and every 10 increments task 1 will send the resulting value in ctr to task3 via a queue.
// Task 3 will then send it via serial to the PC. 

// In addition, do something fun and creative with this program, the serial port and the components you have. Describe it in your report. :)
void task1(void *p)
{
      a6:	df 93       	push	r29
      a8:	cf 93       	push	r28
      aa:	00 d0       	rcall	.+0      	; 0xac <task1+0x6>
      ac:	00 d0       	rcall	.+0      	; 0xae <task1+0x8>
      ae:	cd b7       	in	r28, 0x3d	; 61
      b0:	de b7       	in	r29, 0x3e	; 62
      b2:	9c 83       	std	Y+4, r25	; 0x04
      b4:	8b 83       	std	Y+3, r24	; 0x03
	int count = 0;
      b6:	1a 82       	std	Y+2, r1	; 0x02
      b8:	19 82       	std	Y+1, r1	; 0x01
      ba:	01 c0       	rjmp	.+2      	; 0xbe <task1+0x18>
		//_delay_ms(100);
		*/
		// test if it's running correctly
		count ++;
		if(count % 10000 == 0)	PORTD ^= 0b00100000;
	}
      bc:	00 00       	nop
		leaveCritical();
		//say("0\r\n");
		//_delay_ms(100);
		*/
		// test if it's running correctly
		count ++;
      be:	89 81       	ldd	r24, Y+1	; 0x01
      c0:	9a 81       	ldd	r25, Y+2	; 0x02
      c2:	01 96       	adiw	r24, 0x01	; 1
      c4:	9a 83       	std	Y+2, r25	; 0x02
      c6:	89 83       	std	Y+1, r24	; 0x01
		if(count % 10000 == 0)	PORTD ^= 0b00100000;
      c8:	89 81       	ldd	r24, Y+1	; 0x01
      ca:	9a 81       	ldd	r25, Y+2	; 0x02
      cc:	20 e1       	ldi	r18, 0x10	; 16
      ce:	37 e2       	ldi	r19, 0x27	; 39
      d0:	b9 01       	movw	r22, r18
      d2:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <__divmodhi4>
      d6:	00 97       	sbiw	r24, 0x00	; 0
      d8:	89 f7       	brne	.-30     	; 0xbc <task1+0x16>
      da:	8b e2       	ldi	r24, 0x2B	; 43
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	2b e2       	ldi	r18, 0x2B	; 43
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	f9 01       	movw	r30, r18
      e4:	30 81       	ld	r19, Z
      e6:	20 e2       	ldi	r18, 0x20	; 32
      e8:	23 27       	eor	r18, r19
      ea:	fc 01       	movw	r30, r24
      ec:	20 83       	st	Z, r18
	}
      ee:	e7 cf       	rjmp	.-50     	; 0xbe <task1+0x18>

000000f0 <task2>:
}

void task2(void *p)
{
      f0:	df 93       	push	r29
      f2:	cf 93       	push	r28
      f4:	00 d0       	rcall	.+0      	; 0xf6 <task2+0x6>
      f6:	00 d0       	rcall	.+0      	; 0xf8 <task2+0x8>
      f8:	cd b7       	in	r28, 0x3d	; 61
      fa:	de b7       	in	r29, 0x3e	; 62
      fc:	9c 83       	std	Y+4, r25	; 0x04
      fe:	8b 83       	std	Y+3, r24	; 0x03
	int count = 0;
     100:	1a 82       	std	Y+2, r1	; 0x02
     102:	19 82       	std	Y+1, r1	; 0x01
		if(count == 10){
			//OSenq(queue,&variable);
			count = 0;
		}
		leaveCritical();*/
		PORTD ^= 0b00000100;
     104:	8b e2       	ldi	r24, 0x2B	; 43
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	2b e2       	ldi	r18, 0x2B	; 43
     10a:	30 e0       	ldi	r19, 0x00	; 0
     10c:	f9 01       	movw	r30, r18
     10e:	30 81       	ld	r19, Z
     110:	24 e0       	ldi	r18, 0x04	; 4
     112:	23 27       	eor	r18, r19
     114:	fc 01       	movw	r30, r24
     116:	20 83       	st	Z, r18
	}
     118:	f5 cf       	rjmp	.-22     	; 0x104 <task2+0x14>

0000011a <task3>:
}

void task3(void *p)
{
     11a:	0f 93       	push	r16
     11c:	1f 93       	push	r17
     11e:	df 93       	push	r29
     120:	cf 93       	push	r28
     122:	cd b7       	in	r28, 0x3d	; 61
     124:	de b7       	in	r29, 0x3e	; 62
     126:	60 97       	sbiw	r28, 0x10	; 16
     128:	0f b6       	in	r0, 0x3f	; 63
     12a:	f8 94       	cli
     12c:	de bf       	out	0x3e, r29	; 62
     12e:	0f be       	out	0x3f, r0	; 63
     130:	cd bf       	out	0x3d, r28	; 61
     132:	98 8b       	std	Y+16, r25	; 0x10
     134:	8f 87       	std	Y+15, r24	; 0x0f
     136:	01 c0       	rjmp	.+2      	; 0x13a <task3+0x20>
			//sprintf(saykBuf,"abx\n\r",res);
			_delay_ms(1000);
			say("lualla\n\r");
			leaveCritical();
		}
	}
     138:	00 00       	nop

void task3(void *p)
{
	while(1)
	{
		if(queue->num != 0){
     13a:	80 91 2c 01 	lds	r24, 0x012C
     13e:	90 91 2d 01 	lds	r25, 0x012D
     142:	fc 01       	movw	r30, r24
     144:	82 81       	ldd	r24, Z+2	; 0x02
     146:	93 81       	ldd	r25, Z+3	; 0x03
     148:	00 97       	sbiw	r24, 0x00	; 0
     14a:	b1 f3       	breq	.-20     	; 0x138 <task3+0x1e>
			enterCritical();
     14c:	0e 94 84 02 	call	0x508	; 0x508 <enterCritical>
     150:	80 e0       	ldi	r24, 0x00	; 0
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	aa e7       	ldi	r26, 0x7A	; 122
     156:	b4 e4       	ldi	r27, 0x44	; 68
     158:	89 83       	std	Y+1, r24	; 0x01
     15a:	9a 83       	std	Y+2, r25	; 0x02
     15c:	ab 83       	std	Y+3, r26	; 0x03
     15e:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     160:	69 81       	ldd	r22, Y+1	; 0x01
     162:	7a 81       	ldd	r23, Y+2	; 0x02
     164:	8b 81       	ldd	r24, Y+3	; 0x03
     166:	9c 81       	ldd	r25, Y+4	; 0x04
     168:	20 e0       	ldi	r18, 0x00	; 0
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	4a e7       	ldi	r20, 0x7A	; 122
     16e:	55 e4       	ldi	r21, 0x45	; 69
     170:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <__mulsf3>
     174:	dc 01       	movw	r26, r24
     176:	cb 01       	movw	r24, r22
     178:	8d 83       	std	Y+5, r24	; 0x05
     17a:	9e 83       	std	Y+6, r25	; 0x06
     17c:	af 83       	std	Y+7, r26	; 0x07
     17e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     180:	11 e0       	ldi	r17, 0x01	; 1
     182:	6d 81       	ldd	r22, Y+5	; 0x05
     184:	7e 81       	ldd	r23, Y+6	; 0x06
     186:	8f 81       	ldd	r24, Y+7	; 0x07
     188:	98 85       	ldd	r25, Y+8	; 0x08
     18a:	20 e0       	ldi	r18, 0x00	; 0
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	40 e8       	ldi	r20, 0x80	; 128
     190:	5f e3       	ldi	r21, 0x3F	; 63
     192:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__ltsf2>
     196:	88 23       	and	r24, r24
     198:	0c f0       	brlt	.+2      	; 0x19c <task3+0x82>
     19a:	10 e0       	ldi	r17, 0x00	; 0
     19c:	11 23       	and	r17, r17
     19e:	29 f0       	breq	.+10     	; 0x1aa <task3+0x90>
		__ticks = 1;
     1a0:	81 e0       	ldi	r24, 0x01	; 1
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	9a 87       	std	Y+10, r25	; 0x0a
     1a6:	89 87       	std	Y+9, r24	; 0x09
     1a8:	46 c0       	rjmp	.+140    	; 0x236 <task3+0x11c>
	else if (__tmp > 65535)
     1aa:	11 e0       	ldi	r17, 0x01	; 1
     1ac:	6d 81       	ldd	r22, Y+5	; 0x05
     1ae:	7e 81       	ldd	r23, Y+6	; 0x06
     1b0:	8f 81       	ldd	r24, Y+7	; 0x07
     1b2:	98 85       	ldd	r25, Y+8	; 0x08
     1b4:	20 e0       	ldi	r18, 0x00	; 0
     1b6:	3f ef       	ldi	r19, 0xFF	; 255
     1b8:	4f e7       	ldi	r20, 0x7F	; 127
     1ba:	57 e4       	ldi	r21, 0x47	; 71
     1bc:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__gtsf2>
     1c0:	18 16       	cp	r1, r24
     1c2:	0c f0       	brlt	.+2      	; 0x1c6 <task3+0xac>
     1c4:	10 e0       	ldi	r17, 0x00	; 0
     1c6:	11 23       	and	r17, r17
     1c8:	61 f1       	breq	.+88     	; 0x222 <task3+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1ca:	69 81       	ldd	r22, Y+1	; 0x01
     1cc:	7a 81       	ldd	r23, Y+2	; 0x02
     1ce:	8b 81       	ldd	r24, Y+3	; 0x03
     1d0:	9c 81       	ldd	r25, Y+4	; 0x04
     1d2:	20 e0       	ldi	r18, 0x00	; 0
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	40 e2       	ldi	r20, 0x20	; 32
     1d8:	51 e4       	ldi	r21, 0x41	; 65
     1da:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <__mulsf3>
     1de:	dc 01       	movw	r26, r24
     1e0:	cb 01       	movw	r24, r22
     1e2:	bc 01       	movw	r22, r24
     1e4:	cd 01       	movw	r24, r26
     1e6:	0e 94 a7 08 	call	0x114e	; 0x114e <__fixunssfsi>
     1ea:	dc 01       	movw	r26, r24
     1ec:	cb 01       	movw	r24, r22
     1ee:	9a 87       	std	Y+10, r25	; 0x0a
     1f0:	89 87       	std	Y+9, r24	; 0x09
     1f2:	12 c0       	rjmp	.+36     	; 0x218 <task3+0xfe>
     1f4:	80 e9       	ldi	r24, 0x90	; 144
     1f6:	91 e0       	ldi	r25, 0x01	; 1
     1f8:	9c 87       	std	Y+12, r25	; 0x0c
     1fa:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1fc:	8b 85       	ldd	r24, Y+11	; 0x0b
     1fe:	9c 85       	ldd	r25, Y+12	; 0x0c
     200:	8c 01       	movw	r16, r24
     202:	c8 01       	movw	r24, r16
     204:	01 97       	sbiw	r24, 0x01	; 1
     206:	f1 f7       	brne	.-4      	; 0x204 <task3+0xea>
     208:	8c 01       	movw	r16, r24
     20a:	1c 87       	std	Y+12, r17	; 0x0c
     20c:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     20e:	89 85       	ldd	r24, Y+9	; 0x09
     210:	9a 85       	ldd	r25, Y+10	; 0x0a
     212:	01 97       	sbiw	r24, 0x01	; 1
     214:	9a 87       	std	Y+10, r25	; 0x0a
     216:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     218:	89 85       	ldd	r24, Y+9	; 0x09
     21a:	9a 85       	ldd	r25, Y+10	; 0x0a
     21c:	00 97       	sbiw	r24, 0x00	; 0
     21e:	51 f7       	brne	.-44     	; 0x1f4 <task3+0xda>
     220:	17 c0       	rjmp	.+46     	; 0x250 <task3+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     222:	6d 81       	ldd	r22, Y+5	; 0x05
     224:	7e 81       	ldd	r23, Y+6	; 0x06
     226:	8f 81       	ldd	r24, Y+7	; 0x07
     228:	98 85       	ldd	r25, Y+8	; 0x08
     22a:	0e 94 a7 08 	call	0x114e	; 0x114e <__fixunssfsi>
     22e:	dc 01       	movw	r26, r24
     230:	cb 01       	movw	r24, r22
     232:	9a 87       	std	Y+10, r25	; 0x0a
     234:	89 87       	std	Y+9, r24	; 0x09
     236:	89 85       	ldd	r24, Y+9	; 0x09
     238:	9a 85       	ldd	r25, Y+10	; 0x0a
     23a:	9e 87       	std	Y+14, r25	; 0x0e
     23c:	8d 87       	std	Y+13, r24	; 0x0d
     23e:	8d 85       	ldd	r24, Y+13	; 0x0d
     240:	9e 85       	ldd	r25, Y+14	; 0x0e
     242:	8c 01       	movw	r16, r24
     244:	f8 01       	movw	r30, r16
     246:	31 97       	sbiw	r30, 0x01	; 1
     248:	f1 f7       	brne	.-4      	; 0x246 <task3+0x12c>
     24a:	8f 01       	movw	r16, r30
     24c:	1e 87       	std	Y+14, r17	; 0x0e
     24e:	0d 87       	std	Y+13, r16	; 0x0d
			//int res = *(int *)OSdeq(queue);
			//sprintf(saykBuf,"abx\n\r",res);
			_delay_ms(1000);
			say("lualla\n\r");
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	91 e0       	ldi	r25, 0x01	; 1
     254:	0e 94 1c 08 	call	0x1038	; 0x1038 <say>
			leaveCritical();
     258:	0e 94 8c 02 	call	0x518	; 0x518 <leaveCritical>
		}
	}
     25c:	6e cf       	rjmp	.-292    	; 0x13a <task3+0x20>

0000025e <setup>:
}

void setup()
{
     25e:	df 93       	push	r29
     260:	cf 93       	push	r28
     262:	cd b7       	in	r28, 0x3d	; 61
     264:	de b7       	in	r29, 0x3e	; 62
	// create a global queue
	sema = (OSSignal*)OSmakeSema(1);
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	0e 94 94 02 	call	0x528	; 0x528 <OSmakeSema>
     26e:	90 93 2f 01 	sts	0x012F, r25
     272:	80 93 2e 01 	sts	0x012E, r24
	queue = (OSSignal*)OSmakeQ(MAX_QUEUE_SIZE,sizeof(char));
     276:	84 e6       	ldi	r24, 0x64	; 100
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	61 e0       	ldi	r22, 0x01	; 1
     27c:	70 e0       	ldi	r23, 0x00	; 0
     27e:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <OSmakeQ>
     282:	90 93 2d 01 	sts	0x012D, r25
     286:	80 93 2c 01 	sts	0x012C, r24
	
	// for testing only
	DDRD |= 0b11111100;
     28a:	8a e2       	ldi	r24, 0x2A	; 42
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	2a e2       	ldi	r18, 0x2A	; 42
     290:	30 e0       	ldi	r19, 0x00	; 0
     292:	f9 01       	movw	r30, r18
     294:	20 81       	ld	r18, Z
     296:	2c 6f       	ori	r18, 0xFC	; 252
     298:	fc 01       	movw	r30, r24
     29a:	20 83       	st	Z, r18
}
     29c:	cf 91       	pop	r28
     29e:	df 91       	pop	r29
     2a0:	08 95       	ret

000002a2 <main>:


int main()
{
     2a2:	0f 93       	push	r16
     2a4:	1f 93       	push	r17
     2a6:	df 93       	push	r29
     2a8:	cf 93       	push	r28
     2aa:	cd b7       	in	r28, 0x3d	; 61
     2ac:	de b7       	in	r29, 0x3e	; 62
     2ae:	6c 97       	sbiw	r28, 0x1c	; 28
     2b0:	0f b6       	in	r0, 0x3f	; 63
     2b2:	f8 94       	cli
     2b4:	de bf       	out	0x3e, r29	; 62
     2b6:	0f be       	out	0x3f, r0	; 63
     2b8:	cd bf       	out	0x3d, r28	; 61
	//DDRD = 0b111111111;
	setupSerial();
     2ba:	0e 94 d7 06 	call	0xdae	; 0xdae <setupSerial>
	sei();
     2be:	78 94       	sei
	
	say("hEllo ^_^!\n\r");
     2c0:	89 e0       	ldi	r24, 0x09	; 9
     2c2:	91 e0       	ldi	r25, 0x01	; 1
     2c4:	0e 94 1c 08 	call	0x1038	; 0x1038 <say>
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	aa ef       	ldi	r26, 0xFA	; 250
     2ce:	b3 e4       	ldi	r27, 0x43	; 67
     2d0:	89 83       	std	Y+1, r24	; 0x01
     2d2:	9a 83       	std	Y+2, r25	; 0x02
     2d4:	ab 83       	std	Y+3, r26	; 0x03
     2d6:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     2d8:	69 81       	ldd	r22, Y+1	; 0x01
     2da:	7a 81       	ldd	r23, Y+2	; 0x02
     2dc:	8b 81       	ldd	r24, Y+3	; 0x03
     2de:	9c 81       	ldd	r25, Y+4	; 0x04
     2e0:	20 e0       	ldi	r18, 0x00	; 0
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	4a e7       	ldi	r20, 0x7A	; 122
     2e6:	55 e4       	ldi	r21, 0x45	; 69
     2e8:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <__mulsf3>
     2ec:	dc 01       	movw	r26, r24
     2ee:	cb 01       	movw	r24, r22
     2f0:	8d 83       	std	Y+5, r24	; 0x05
     2f2:	9e 83       	std	Y+6, r25	; 0x06
     2f4:	af 83       	std	Y+7, r26	; 0x07
     2f6:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     2f8:	11 e0       	ldi	r17, 0x01	; 1
     2fa:	6d 81       	ldd	r22, Y+5	; 0x05
     2fc:	7e 81       	ldd	r23, Y+6	; 0x06
     2fe:	8f 81       	ldd	r24, Y+7	; 0x07
     300:	98 85       	ldd	r25, Y+8	; 0x08
     302:	20 e0       	ldi	r18, 0x00	; 0
     304:	30 e0       	ldi	r19, 0x00	; 0
     306:	40 e8       	ldi	r20, 0x80	; 128
     308:	5f e3       	ldi	r21, 0x3F	; 63
     30a:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__ltsf2>
     30e:	88 23       	and	r24, r24
     310:	0c f0       	brlt	.+2      	; 0x314 <main+0x72>
     312:	10 e0       	ldi	r17, 0x00	; 0
     314:	11 23       	and	r17, r17
     316:	29 f0       	breq	.+10     	; 0x322 <main+0x80>
		__ticks = 1;
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	9a 87       	std	Y+10, r25	; 0x0a
     31e:	89 87       	std	Y+9, r24	; 0x09
     320:	46 c0       	rjmp	.+140    	; 0x3ae <main+0x10c>
	else if (__tmp > 65535)
     322:	11 e0       	ldi	r17, 0x01	; 1
     324:	6d 81       	ldd	r22, Y+5	; 0x05
     326:	7e 81       	ldd	r23, Y+6	; 0x06
     328:	8f 81       	ldd	r24, Y+7	; 0x07
     32a:	98 85       	ldd	r25, Y+8	; 0x08
     32c:	20 e0       	ldi	r18, 0x00	; 0
     32e:	3f ef       	ldi	r19, 0xFF	; 255
     330:	4f e7       	ldi	r20, 0x7F	; 127
     332:	57 e4       	ldi	r21, 0x47	; 71
     334:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__gtsf2>
     338:	18 16       	cp	r1, r24
     33a:	0c f0       	brlt	.+2      	; 0x33e <main+0x9c>
     33c:	10 e0       	ldi	r17, 0x00	; 0
     33e:	11 23       	and	r17, r17
     340:	61 f1       	breq	.+88     	; 0x39a <main+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     342:	69 81       	ldd	r22, Y+1	; 0x01
     344:	7a 81       	ldd	r23, Y+2	; 0x02
     346:	8b 81       	ldd	r24, Y+3	; 0x03
     348:	9c 81       	ldd	r25, Y+4	; 0x04
     34a:	20 e0       	ldi	r18, 0x00	; 0
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e2       	ldi	r20, 0x20	; 32
     350:	51 e4       	ldi	r21, 0x41	; 65
     352:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <__mulsf3>
     356:	dc 01       	movw	r26, r24
     358:	cb 01       	movw	r24, r22
     35a:	bc 01       	movw	r22, r24
     35c:	cd 01       	movw	r24, r26
     35e:	0e 94 a7 08 	call	0x114e	; 0x114e <__fixunssfsi>
     362:	dc 01       	movw	r26, r24
     364:	cb 01       	movw	r24, r22
     366:	9a 87       	std	Y+10, r25	; 0x0a
     368:	89 87       	std	Y+9, r24	; 0x09
     36a:	12 c0       	rjmp	.+36     	; 0x390 <main+0xee>
     36c:	80 e9       	ldi	r24, 0x90	; 144
     36e:	91 e0       	ldi	r25, 0x01	; 1
     370:	9c 87       	std	Y+12, r25	; 0x0c
     372:	8b 87       	std	Y+11, r24	; 0x0b
     374:	8b 85       	ldd	r24, Y+11	; 0x0b
     376:	9c 85       	ldd	r25, Y+12	; 0x0c
     378:	8c 01       	movw	r16, r24
     37a:	c8 01       	movw	r24, r16
     37c:	01 97       	sbiw	r24, 0x01	; 1
     37e:	f1 f7       	brne	.-4      	; 0x37c <main+0xda>
     380:	8c 01       	movw	r16, r24
     382:	1c 87       	std	Y+12, r17	; 0x0c
     384:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     386:	89 85       	ldd	r24, Y+9	; 0x09
     388:	9a 85       	ldd	r25, Y+10	; 0x0a
     38a:	01 97       	sbiw	r24, 0x01	; 1
     38c:	9a 87       	std	Y+10, r25	; 0x0a
     38e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     390:	89 85       	ldd	r24, Y+9	; 0x09
     392:	9a 85       	ldd	r25, Y+10	; 0x0a
     394:	00 97       	sbiw	r24, 0x00	; 0
     396:	51 f7       	brne	.-44     	; 0x36c <main+0xca>
     398:	17 c0       	rjmp	.+46     	; 0x3c8 <main+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     39a:	6d 81       	ldd	r22, Y+5	; 0x05
     39c:	7e 81       	ldd	r23, Y+6	; 0x06
     39e:	8f 81       	ldd	r24, Y+7	; 0x07
     3a0:	98 85       	ldd	r25, Y+8	; 0x08
     3a2:	0e 94 a7 08 	call	0x114e	; 0x114e <__fixunssfsi>
     3a6:	dc 01       	movw	r26, r24
     3a8:	cb 01       	movw	r24, r22
     3aa:	9a 87       	std	Y+10, r25	; 0x0a
     3ac:	89 87       	std	Y+9, r24	; 0x09
     3ae:	89 85       	ldd	r24, Y+9	; 0x09
     3b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     3b2:	9e 87       	std	Y+14, r25	; 0x0e
     3b4:	8d 87       	std	Y+13, r24	; 0x0d
     3b6:	8d 85       	ldd	r24, Y+13	; 0x0d
     3b8:	9e 85       	ldd	r25, Y+14	; 0x0e
     3ba:	8c 01       	movw	r16, r24
     3bc:	f8 01       	movw	r30, r16
     3be:	31 97       	sbiw	r30, 0x01	; 1
     3c0:	f1 f7       	brne	.-4      	; 0x3be <main+0x11c>
     3c2:	8f 01       	movw	r16, r30
     3c4:	1e 87       	std	Y+14, r17	; 0x0e
     3c6:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(500);
	
	OSInit();
     3c8:	0e 94 44 06 	call	0xc88	; 0xc88 <OSInit>
	
	setup();
     3cc:	0e 94 2f 01 	call	0x25e	; 0x25e <setup>
	
	// test if the system restarts
	PORTD |= 0b10000000;
     3d0:	8b e2       	ldi	r24, 0x2B	; 43
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	2b e2       	ldi	r18, 0x2B	; 43
     3d6:	30 e0       	ldi	r19, 0x00	; 0
     3d8:	f9 01       	movw	r30, r18
     3da:	20 81       	ld	r18, Z
     3dc:	20 68       	ori	r18, 0x80	; 128
     3de:	fc 01       	movw	r30, r24
     3e0:	20 83       	st	Z, r18
	
	// Create the tasks. Task1 is for the buzzer and we pass in the base frequency as an argument.
	
	OSAddTask(task1, 0, NULL);	
     3e2:	83 e5       	ldi	r24, 0x53	; 83
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	60 e0       	ldi	r22, 0x00	; 0
     3e8:	70 e0       	ldi	r23, 0x00	; 0
     3ea:	40 e0       	ldi	r20, 0x00	; 0
     3ec:	50 e0       	ldi	r21, 0x00	; 0
     3ee:	0e 94 5e 06 	call	0xcbc	; 0xcbc <OSAddTask>
	OSAddTask(task2, 0, NULL);
     3f2:	88 e7       	ldi	r24, 0x78	; 120
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	60 e0       	ldi	r22, 0x00	; 0
     3f8:	70 e0       	ldi	r23, 0x00	; 0
     3fa:	40 e0       	ldi	r20, 0x00	; 0
     3fc:	50 e0       	ldi	r21, 0x00	; 0
     3fe:	0e 94 5e 06 	call	0xcbc	; 0xcbc <OSAddTask>
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	aa e7       	ldi	r26, 0x7A	; 122
     408:	b4 e4       	ldi	r27, 0x44	; 68
     40a:	8f 87       	std	Y+15, r24	; 0x0f
     40c:	98 8b       	std	Y+16, r25	; 0x10
     40e:	a9 8b       	std	Y+17, r26	; 0x11
     410:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     412:	6f 85       	ldd	r22, Y+15	; 0x0f
     414:	78 89       	ldd	r23, Y+16	; 0x10
     416:	89 89       	ldd	r24, Y+17	; 0x11
     418:	9a 89       	ldd	r25, Y+18	; 0x12
     41a:	20 e0       	ldi	r18, 0x00	; 0
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	4a e7       	ldi	r20, 0x7A	; 122
     420:	55 e4       	ldi	r21, 0x45	; 69
     422:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <__mulsf3>
     426:	dc 01       	movw	r26, r24
     428:	cb 01       	movw	r24, r22
     42a:	8b 8b       	std	Y+19, r24	; 0x13
     42c:	9c 8b       	std	Y+20, r25	; 0x14
     42e:	ad 8b       	std	Y+21, r26	; 0x15
     430:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     432:	11 e0       	ldi	r17, 0x01	; 1
     434:	6b 89       	ldd	r22, Y+19	; 0x13
     436:	7c 89       	ldd	r23, Y+20	; 0x14
     438:	8d 89       	ldd	r24, Y+21	; 0x15
     43a:	9e 89       	ldd	r25, Y+22	; 0x16
     43c:	20 e0       	ldi	r18, 0x00	; 0
     43e:	30 e0       	ldi	r19, 0x00	; 0
     440:	40 e8       	ldi	r20, 0x80	; 128
     442:	5f e3       	ldi	r21, 0x3F	; 63
     444:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__ltsf2>
     448:	88 23       	and	r24, r24
     44a:	0c f0       	brlt	.+2      	; 0x44e <main+0x1ac>
     44c:	10 e0       	ldi	r17, 0x00	; 0
     44e:	11 23       	and	r17, r17
     450:	29 f0       	breq	.+10     	; 0x45c <main+0x1ba>
		__ticks = 1;
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	98 8f       	std	Y+24, r25	; 0x18
     458:	8f 8b       	std	Y+23, r24	; 0x17
     45a:	46 c0       	rjmp	.+140    	; 0x4e8 <main+0x246>
	else if (__tmp > 65535)
     45c:	11 e0       	ldi	r17, 0x01	; 1
     45e:	6b 89       	ldd	r22, Y+19	; 0x13
     460:	7c 89       	ldd	r23, Y+20	; 0x14
     462:	8d 89       	ldd	r24, Y+21	; 0x15
     464:	9e 89       	ldd	r25, Y+22	; 0x16
     466:	20 e0       	ldi	r18, 0x00	; 0
     468:	3f ef       	ldi	r19, 0xFF	; 255
     46a:	4f e7       	ldi	r20, 0x7F	; 127
     46c:	57 e4       	ldi	r21, 0x47	; 71
     46e:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__gtsf2>
     472:	18 16       	cp	r1, r24
     474:	0c f0       	brlt	.+2      	; 0x478 <main+0x1d6>
     476:	10 e0       	ldi	r17, 0x00	; 0
     478:	11 23       	and	r17, r17
     47a:	61 f1       	breq	.+88     	; 0x4d4 <main+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     47c:	6f 85       	ldd	r22, Y+15	; 0x0f
     47e:	78 89       	ldd	r23, Y+16	; 0x10
     480:	89 89       	ldd	r24, Y+17	; 0x11
     482:	9a 89       	ldd	r25, Y+18	; 0x12
     484:	20 e0       	ldi	r18, 0x00	; 0
     486:	30 e0       	ldi	r19, 0x00	; 0
     488:	40 e2       	ldi	r20, 0x20	; 32
     48a:	51 e4       	ldi	r21, 0x41	; 65
     48c:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <__mulsf3>
     490:	dc 01       	movw	r26, r24
     492:	cb 01       	movw	r24, r22
     494:	bc 01       	movw	r22, r24
     496:	cd 01       	movw	r24, r26
     498:	0e 94 a7 08 	call	0x114e	; 0x114e <__fixunssfsi>
     49c:	dc 01       	movw	r26, r24
     49e:	cb 01       	movw	r24, r22
     4a0:	98 8f       	std	Y+24, r25	; 0x18
     4a2:	8f 8b       	std	Y+23, r24	; 0x17
     4a4:	12 c0       	rjmp	.+36     	; 0x4ca <main+0x228>
     4a6:	80 e9       	ldi	r24, 0x90	; 144
     4a8:	91 e0       	ldi	r25, 0x01	; 1
     4aa:	9a 8f       	std	Y+26, r25	; 0x1a
     4ac:	89 8f       	std	Y+25, r24	; 0x19
     4ae:	89 8d       	ldd	r24, Y+25	; 0x19
     4b0:	9a 8d       	ldd	r25, Y+26	; 0x1a
     4b2:	8c 01       	movw	r16, r24
     4b4:	c8 01       	movw	r24, r16
     4b6:	01 97       	sbiw	r24, 0x01	; 1
     4b8:	f1 f7       	brne	.-4      	; 0x4b6 <main+0x214>
     4ba:	8c 01       	movw	r16, r24
     4bc:	1a 8f       	std	Y+26, r17	; 0x1a
     4be:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4c0:	8f 89       	ldd	r24, Y+23	; 0x17
     4c2:	98 8d       	ldd	r25, Y+24	; 0x18
     4c4:	01 97       	sbiw	r24, 0x01	; 1
     4c6:	98 8f       	std	Y+24, r25	; 0x18
     4c8:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4ca:	8f 89       	ldd	r24, Y+23	; 0x17
     4cc:	98 8d       	ldd	r25, Y+24	; 0x18
     4ce:	00 97       	sbiw	r24, 0x00	; 0
     4d0:	51 f7       	brne	.-44     	; 0x4a6 <main+0x204>
     4d2:	17 c0       	rjmp	.+46     	; 0x502 <main+0x260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4d4:	6b 89       	ldd	r22, Y+19	; 0x13
     4d6:	7c 89       	ldd	r23, Y+20	; 0x14
     4d8:	8d 89       	ldd	r24, Y+21	; 0x15
     4da:	9e 89       	ldd	r25, Y+22	; 0x16
     4dc:	0e 94 a7 08 	call	0x114e	; 0x114e <__fixunssfsi>
     4e0:	dc 01       	movw	r26, r24
     4e2:	cb 01       	movw	r24, r22
     4e4:	98 8f       	std	Y+24, r25	; 0x18
     4e6:	8f 8b       	std	Y+23, r24	; 0x17
     4e8:	8f 89       	ldd	r24, Y+23	; 0x17
     4ea:	98 8d       	ldd	r25, Y+24	; 0x18
     4ec:	9c 8f       	std	Y+28, r25	; 0x1c
     4ee:	8b 8f       	std	Y+27, r24	; 0x1b
     4f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     4f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     4f4:	8c 01       	movw	r16, r24
     4f6:	f8 01       	movw	r30, r16
     4f8:	31 97       	sbiw	r30, 0x01	; 1
     4fa:	f1 f7       	brne	.-4      	; 0x4f8 <main+0x256>
     4fc:	8f 01       	movw	r16, r30
     4fe:	1c 8f       	std	Y+28, r17	; 0x1c
     500:	0b 8f       	std	Y+27, r16	; 0x1b
	//OSAddTask(task2, 1, NULL);	// read for LED
	
	//OSAddTask(task3, 2, NULL);	// convert for buzzer
	
	// And start the OS
	OSRun();
     502:	0e 94 b4 06 	call	0xd68	; 0xd68 <OSRun>
	
	
	
	while(1);
     506:	ff cf       	rjmp	.-2      	; 0x506 <main+0x264>

00000508 <enterCritical>:

/* ======================================= */
/* Critical section management             */
/* ======================================= */
inline void enterCritical()
{
     508:	df 93       	push	r29
     50a:	cf 93       	push	r28
     50c:	cd b7       	in	r28, 0x3d	; 61
     50e:	de b7       	in	r29, 0x3e	; 62
	cli();
     510:	f8 94       	cli
}
     512:	cf 91       	pop	r28
     514:	df 91       	pop	r29
     516:	08 95       	ret

00000518 <leaveCritical>:

inline void leaveCritical()
{
     518:	df 93       	push	r29
     51a:	cf 93       	push	r28
     51c:	cd b7       	in	r28, 0x3d	; 61
     51e:	de b7       	in	r29, 0x3e	; 62
	sei();
     520:	78 94       	sei
}
     522:	cf 91       	pop	r28
     524:	df 91       	pop	r29
     526:	08 95       	ret

00000528 <OSmakeSema>:

#ifdef OSIncludeSema

// Creates a semaphore with initial value initval
OSSignal *OSmakeSema(int initval)
{
     528:	df 93       	push	r29
     52a:	cf 93       	push	r28
     52c:	00 d0       	rcall	.+0      	; 0x52e <OSmakeSema+0x6>
     52e:	00 d0       	rcall	.+0      	; 0x530 <OSmakeSema+0x8>
     530:	cd b7       	in	r28, 0x3d	; 61
     532:	de b7       	in	r29, 0x3e	; 62
     534:	9c 83       	std	Y+4, r25	; 0x04
     536:	8b 83       	std	Y+3, r24	; 0x03
	OSSignal *sem = (OSSignal *) malloc(sizeof(OSSignal));
     538:	8c e6       	ldi	r24, 0x6C	; 108
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <malloc>
     540:	9a 83       	std	Y+2, r25	; 0x02
     542:	89 83       	std	Y+1, r24	; 0x01
	sem->type	= SEMAPHORE_TYPE;
     544:	89 81       	ldd	r24, Y+1	; 0x01
     546:	9a 81       	ldd	r25, Y+2	; 0x02
     548:	fc 01       	movw	r30, r24
     54a:	11 82       	std	Z+1, r1	; 0x01
     54c:	10 82       	st	Z, r1
	sem->num	= initval;
     54e:	89 81       	ldd	r24, Y+1	; 0x01
     550:	9a 81       	ldd	r25, Y+2	; 0x02
     552:	2b 81       	ldd	r18, Y+3	; 0x03
     554:	3c 81       	ldd	r19, Y+4	; 0x04
     556:	fc 01       	movw	r30, r24
     558:	33 83       	std	Z+3, r19	; 0x03
     55a:	22 83       	std	Z+2, r18	; 0x02
	sem->qH		= 0;
     55c:	89 81       	ldd	r24, Y+1	; 0x01
     55e:	9a 81       	ldd	r25, Y+2	; 0x02
     560:	86 59       	subi	r24, 0x96	; 150
     562:	9f 4f       	sbci	r25, 0xFF	; 255
     564:	fc 01       	movw	r30, r24
     566:	11 82       	std	Z+1, r1	; 0x01
     568:	10 82       	st	Z, r1
	sem->size	= 0;
     56a:	89 81       	ldd	r24, Y+1	; 0x01
     56c:	9a 81       	ldd	r25, Y+2	; 0x02
     56e:	fc 01       	movw	r30, r24
     570:	15 82       	std	Z+5, r1	; 0x05
     572:	14 82       	std	Z+4, r1	; 0x04
}
     574:	0f 90       	pop	r0
     576:	0f 90       	pop	r0
     578:	0f 90       	pop	r0
     57a:	0f 90       	pop	r0
     57c:	cf 91       	pop	r28
     57e:	df 91       	pop	r29
     580:	08 95       	ret

00000582 <OSSemPend>:

// Takes a semaphore. Blocks if semaphore is 0.
void OSSemPend(OSSignal *sema)
{
     582:	df 93       	push	r29
     584:	cf 93       	push	r28
     586:	00 d0       	rcall	.+0      	; 0x588 <OSSemPend+0x6>
     588:	cd b7       	in	r28, 0x3d	; 61
     58a:	de b7       	in	r29, 0x3e	; 62
     58c:	9a 83       	std	Y+2, r25	; 0x02
     58e:	89 83       	std	Y+1, r24	; 0x01
	
}
     590:	0f 90       	pop	r0
     592:	0f 90       	pop	r0
     594:	cf 91       	pop	r28
     596:	df 91       	pop	r29
     598:	08 95       	ret

0000059a <OSSemPost>:

// Posts a semaphore.
void OSSemPost(OSSignal *sema)
{
     59a:	df 93       	push	r29
     59c:	cf 93       	push	r28
     59e:	00 d0       	rcall	.+0      	; 0x5a0 <OSSemPost+0x6>
     5a0:	cd b7       	in	r28, 0x3d	; 61
     5a2:	de b7       	in	r29, 0x3e	; 62
     5a4:	9a 83       	std	Y+2, r25	; 0x02
     5a6:	89 83       	std	Y+1, r24	; 0x01
	
}
     5a8:	0f 90       	pop	r0
     5aa:	0f 90       	pop	r0
     5ac:	cf 91       	pop	r28
     5ae:	df 91       	pop	r29
     5b0:	08 95       	ret

000005b2 <OSmakeQ>:
#ifdef OSIncludeQueues

// qsize=number of elements in the queue. esize=size of each element. So calling makeQ(10, sizeof(int)) would produce a queue of 10 elements, 
// with each element being the size of an integer.
OSSignal *OSmakeQ(int qsize, int esize)
{
     5b2:	df 93       	push	r29
     5b4:	cf 93       	push	r28
     5b6:	00 d0       	rcall	.+0      	; 0x5b8 <OSmakeQ+0x6>
     5b8:	00 d0       	rcall	.+0      	; 0x5ba <OSmakeQ+0x8>
     5ba:	00 d0       	rcall	.+0      	; 0x5bc <OSmakeQ+0xa>
     5bc:	cd b7       	in	r28, 0x3d	; 61
     5be:	de b7       	in	r29, 0x3e	; 62
     5c0:	9c 83       	std	Y+4, r25	; 0x04
     5c2:	8b 83       	std	Y+3, r24	; 0x03
     5c4:	7e 83       	std	Y+6, r23	; 0x06
     5c6:	6d 83       	std	Y+5, r22	; 0x05
	// when cannot hold such a huge queue
	if(qsize * esize > MAX_QUEUE_SIZE)	return 0;
     5c8:	4b 81       	ldd	r20, Y+3	; 0x03
     5ca:	5c 81       	ldd	r21, Y+4	; 0x04
     5cc:	2d 81       	ldd	r18, Y+5	; 0x05
     5ce:	3e 81       	ldd	r19, Y+6	; 0x06
     5d0:	42 9f       	mul	r20, r18
     5d2:	c0 01       	movw	r24, r0
     5d4:	43 9f       	mul	r20, r19
     5d6:	90 0d       	add	r25, r0
     5d8:	52 9f       	mul	r21, r18
     5da:	90 0d       	add	r25, r0
     5dc:	11 24       	eor	r1, r1
     5de:	85 36       	cpi	r24, 0x65	; 101
     5e0:	91 05       	cpc	r25, r1
     5e2:	1c f0       	brlt	.+6      	; 0x5ea <OSmakeQ+0x38>
     5e4:	80 e0       	ldi	r24, 0x00	; 0
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	20 c0       	rjmp	.+64     	; 0x62a <OSmakeQ+0x78>
	
	OSSignal *res = (OSSignal *) malloc(sizeof(OSSignal));
     5ea:	8c e6       	ldi	r24, 0x6C	; 108
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <malloc>
     5f2:	9a 83       	std	Y+2, r25	; 0x02
     5f4:	89 83       	std	Y+1, r24	; 0x01
	res->type	= QUEUE_TYPE;
     5f6:	89 81       	ldd	r24, Y+1	; 0x01
     5f8:	9a 81       	ldd	r25, Y+2	; 0x02
     5fa:	21 e0       	ldi	r18, 0x01	; 1
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	fc 01       	movw	r30, r24
     600:	31 83       	std	Z+1, r19	; 0x01
     602:	20 83       	st	Z, r18
	res->num	= esize;
     604:	89 81       	ldd	r24, Y+1	; 0x01
     606:	9a 81       	ldd	r25, Y+2	; 0x02
     608:	2d 81       	ldd	r18, Y+5	; 0x05
     60a:	3e 81       	ldd	r19, Y+6	; 0x06
     60c:	fc 01       	movw	r30, r24
     60e:	33 83       	std	Z+3, r19	; 0x03
     610:	22 83       	std	Z+2, r18	; 0x02
	res->qH		= 0;
     612:	89 81       	ldd	r24, Y+1	; 0x01
     614:	9a 81       	ldd	r25, Y+2	; 0x02
     616:	86 59       	subi	r24, 0x96	; 150
     618:	9f 4f       	sbci	r25, 0xFF	; 255
     61a:	fc 01       	movw	r30, r24
     61c:	11 82       	std	Z+1, r1	; 0x01
     61e:	10 82       	st	Z, r1
	res->size	= 0;
     620:	89 81       	ldd	r24, Y+1	; 0x01
     622:	9a 81       	ldd	r25, Y+2	; 0x02
     624:	fc 01       	movw	r30, r24
     626:	15 82       	std	Z+5, r1	; 0x05
     628:	14 82       	std	Z+4, r1	; 0x04
}
     62a:	26 96       	adiw	r28, 0x06	; 6
     62c:	0f b6       	in	r0, 0x3f	; 63
     62e:	f8 94       	cli
     630:	de bf       	out	0x3e, r29	; 62
     632:	0f be       	out	0x3f, r0	; 63
     634:	cd bf       	out	0x3d, r28	; 61
     636:	cf 91       	pop	r28
     638:	df 91       	pop	r29
     63a:	08 95       	ret

0000063c <OSenq>:

// Inserts item into queue q
void OSenq(OSSignal *q, void *item)
{
     63c:	df 93       	push	r29
     63e:	cf 93       	push	r28
     640:	cd b7       	in	r28, 0x3d	; 61
     642:	de b7       	in	r29, 0x3e	; 62
     644:	28 97       	sbiw	r28, 0x08	; 8
     646:	0f b6       	in	r0, 0x3f	; 63
     648:	f8 94       	cli
     64a:	de bf       	out	0x3e, r29	; 62
     64c:	0f be       	out	0x3f, r0	; 63
     64e:	cd bf       	out	0x3d, r28	; 61
     650:	9e 83       	std	Y+6, r25	; 0x06
     652:	8d 83       	std	Y+5, r24	; 0x05
     654:	78 87       	std	Y+8, r23	; 0x08
     656:	6f 83       	std	Y+7, r22	; 0x07
	int i, currentPos;
	while(q->size >= MAX_QUEUE_SIZE/q->num - 1){
     658:	16 c0       	rjmp	.+44     	; 0x686 <OSenq+0x4a>
		// block
		taskTable[currentTask].runflag = TASK_BLOCKED;
     65a:	40 91 18 01 	lds	r20, 0x0118
     65e:	50 91 19 01 	lds	r21, 0x0119
     662:	2b e0       	ldi	r18, 0x0B	; 11
     664:	31 e0       	ldi	r19, 0x01	; 1
     666:	42 9f       	mul	r20, r18
     668:	c0 01       	movw	r24, r0
     66a:	43 9f       	mul	r20, r19
     66c:	90 0d       	add	r25, r0
     66e:	52 9f       	mul	r21, r18
     670:	90 0d       	add	r25, r0
     672:	11 24       	eor	r1, r1
     674:	84 53       	subi	r24, 0x34	; 52
     676:	9e 4f       	sbci	r25, 0xFE	; 254
     678:	22 e0       	ldi	r18, 0x02	; 2
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	fc 01       	movw	r30, r24
     67e:	31 83       	std	Z+1, r19	; 0x01
     680:	20 83       	st	Z, r18
		OSSwapTask();
     682:	0e 94 45 05 	call	0xa8a	; 0xa8a <OSSwapTask>

// Inserts item into queue q
void OSenq(OSSignal *q, void *item)
{
	int i, currentPos;
	while(q->size >= MAX_QUEUE_SIZE/q->num - 1){
     686:	8d 81       	ldd	r24, Y+5	; 0x05
     688:	9e 81       	ldd	r25, Y+6	; 0x06
     68a:	fc 01       	movw	r30, r24
     68c:	24 81       	ldd	r18, Z+4	; 0x04
     68e:	35 81       	ldd	r19, Z+5	; 0x05
     690:	8d 81       	ldd	r24, Y+5	; 0x05
     692:	9e 81       	ldd	r25, Y+6	; 0x06
     694:	fc 01       	movw	r30, r24
     696:	42 81       	ldd	r20, Z+2	; 0x02
     698:	53 81       	ldd	r21, Z+3	; 0x03
     69a:	84 e6       	ldi	r24, 0x64	; 100
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	ba 01       	movw	r22, r20
     6a0:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <__divmodhi4>
     6a4:	ab 01       	movw	r20, r22
     6a6:	ca 01       	movw	r24, r20
     6a8:	01 97       	sbiw	r24, 0x01	; 1
     6aa:	28 17       	cp	r18, r24
     6ac:	39 07       	cpc	r19, r25
     6ae:	ac f6       	brge	.-86     	; 0x65a <OSenq+0x1e>
		// block
		taskTable[currentTask].runflag = TASK_BLOCKED;
		OSSwapTask();
	}
	
	cli();
     6b0:	f8 94       	cli
	
	for(i = 0, currentPos = q->qH + q->num * q->size ;i < q->num;i += sizeof(char),currentPos+= sizeof(char)){
     6b2:	1a 82       	std	Y+2, r1	; 0x02
     6b4:	19 82       	std	Y+1, r1	; 0x01
     6b6:	8d 81       	ldd	r24, Y+5	; 0x05
     6b8:	9e 81       	ldd	r25, Y+6	; 0x06
     6ba:	86 59       	subi	r24, 0x96	; 150
     6bc:	9f 4f       	sbci	r25, 0xFF	; 255
     6be:	fc 01       	movw	r30, r24
     6c0:	20 81       	ld	r18, Z
     6c2:	31 81       	ldd	r19, Z+1	; 0x01
     6c4:	8d 81       	ldd	r24, Y+5	; 0x05
     6c6:	9e 81       	ldd	r25, Y+6	; 0x06
     6c8:	fc 01       	movw	r30, r24
     6ca:	62 81       	ldd	r22, Z+2	; 0x02
     6cc:	73 81       	ldd	r23, Z+3	; 0x03
     6ce:	8d 81       	ldd	r24, Y+5	; 0x05
     6d0:	9e 81       	ldd	r25, Y+6	; 0x06
     6d2:	fc 01       	movw	r30, r24
     6d4:	44 81       	ldd	r20, Z+4	; 0x04
     6d6:	55 81       	ldd	r21, Z+5	; 0x05
     6d8:	64 9f       	mul	r22, r20
     6da:	c0 01       	movw	r24, r0
     6dc:	65 9f       	mul	r22, r21
     6de:	90 0d       	add	r25, r0
     6e0:	74 9f       	mul	r23, r20
     6e2:	90 0d       	add	r25, r0
     6e4:	11 24       	eor	r1, r1
     6e6:	82 0f       	add	r24, r18
     6e8:	93 1f       	adc	r25, r19
     6ea:	9c 83       	std	Y+4, r25	; 0x04
     6ec:	8b 83       	std	Y+3, r24	; 0x03
     6ee:	22 c0       	rjmp	.+68     	; 0x734 <OSenq+0xf8>
		if(currentPos == MAX_QUEUE_SIZE)	currentPos = 0;
     6f0:	8b 81       	ldd	r24, Y+3	; 0x03
     6f2:	9c 81       	ldd	r25, Y+4	; 0x04
     6f4:	84 36       	cpi	r24, 0x64	; 100
     6f6:	91 05       	cpc	r25, r1
     6f8:	11 f4       	brne	.+4      	; 0x6fe <OSenq+0xc2>
     6fa:	1c 82       	std	Y+4, r1	; 0x04
     6fc:	1b 82       	std	Y+3, r1	; 0x03
		q->q[currentPos] = *(char *)(item + i);
     6fe:	2f 81       	ldd	r18, Y+7	; 0x07
     700:	38 85       	ldd	r19, Y+8	; 0x08
     702:	89 81       	ldd	r24, Y+1	; 0x01
     704:	9a 81       	ldd	r25, Y+2	; 0x02
     706:	82 0f       	add	r24, r18
     708:	93 1f       	adc	r25, r19
     70a:	fc 01       	movw	r30, r24
     70c:	40 81       	ld	r20, Z
     70e:	2d 81       	ldd	r18, Y+5	; 0x05
     710:	3e 81       	ldd	r19, Y+6	; 0x06
     712:	8b 81       	ldd	r24, Y+3	; 0x03
     714:	9c 81       	ldd	r25, Y+4	; 0x04
     716:	82 0f       	add	r24, r18
     718:	93 1f       	adc	r25, r19
     71a:	06 96       	adiw	r24, 0x06	; 6
     71c:	fc 01       	movw	r30, r24
     71e:	40 83       	st	Z, r20
		OSSwapTask();
	}
	
	cli();
	
	for(i = 0, currentPos = q->qH + q->num * q->size ;i < q->num;i += sizeof(char),currentPos+= sizeof(char)){
     720:	89 81       	ldd	r24, Y+1	; 0x01
     722:	9a 81       	ldd	r25, Y+2	; 0x02
     724:	01 96       	adiw	r24, 0x01	; 1
     726:	9a 83       	std	Y+2, r25	; 0x02
     728:	89 83       	std	Y+1, r24	; 0x01
     72a:	8b 81       	ldd	r24, Y+3	; 0x03
     72c:	9c 81       	ldd	r25, Y+4	; 0x04
     72e:	01 96       	adiw	r24, 0x01	; 1
     730:	9c 83       	std	Y+4, r25	; 0x04
     732:	8b 83       	std	Y+3, r24	; 0x03
     734:	8d 81       	ldd	r24, Y+5	; 0x05
     736:	9e 81       	ldd	r25, Y+6	; 0x06
     738:	fc 01       	movw	r30, r24
     73a:	22 81       	ldd	r18, Z+2	; 0x02
     73c:	33 81       	ldd	r19, Z+3	; 0x03
     73e:	89 81       	ldd	r24, Y+1	; 0x01
     740:	9a 81       	ldd	r25, Y+2	; 0x02
     742:	82 17       	cp	r24, r18
     744:	93 07       	cpc	r25, r19
     746:	a4 f2       	brlt	.-88     	; 0x6f0 <OSenq+0xb4>
		if(currentPos == MAX_QUEUE_SIZE)	currentPos = 0;
		q->q[currentPos] = *(char *)(item + i);
	}
	
	q->size++;
     748:	8d 81       	ldd	r24, Y+5	; 0x05
     74a:	9e 81       	ldd	r25, Y+6	; 0x06
     74c:	fc 01       	movw	r30, r24
     74e:	84 81       	ldd	r24, Z+4	; 0x04
     750:	95 81       	ldd	r25, Z+5	; 0x05
     752:	9c 01       	movw	r18, r24
     754:	2f 5f       	subi	r18, 0xFF	; 255
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	8d 81       	ldd	r24, Y+5	; 0x05
     75a:	9e 81       	ldd	r25, Y+6	; 0x06
     75c:	fc 01       	movw	r30, r24
     75e:	35 83       	std	Z+5, r19	; 0x05
     760:	24 83       	std	Z+4, r18	; 0x04
	sei();
     762:	78 94       	sei
}
     764:	28 96       	adiw	r28, 0x08	; 8
     766:	0f b6       	in	r0, 0x3f	; 63
     768:	f8 94       	cli
     76a:	de bf       	out	0x3e, r29	; 62
     76c:	0f be       	out	0x3f, r0	; 63
     76e:	cd bf       	out	0x3d, r28	; 61
     770:	cf 91       	pop	r28
     772:	df 91       	pop	r29
     774:	08 95       	ret

00000776 <OSdeq>:

// Removes and returns item from head of queue. Process blocks if queue is empty.
void *OSdeq(OSSignal *q)
{
     776:	df 93       	push	r29
     778:	cf 93       	push	r28
     77a:	00 d0       	rcall	.+0      	; 0x77c <OSdeq+0x6>
     77c:	00 d0       	rcall	.+0      	; 0x77e <OSdeq+0x8>
     77e:	cd b7       	in	r28, 0x3d	; 61
     780:	de b7       	in	r29, 0x3e	; 62
     782:	9c 83       	std	Y+4, r25	; 0x04
     784:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	int iniqH = q->qH;
     786:	8b 81       	ldd	r24, Y+3	; 0x03
     788:	9c 81       	ldd	r25, Y+4	; 0x04
     78a:	86 59       	subi	r24, 0x96	; 150
     78c:	9f 4f       	sbci	r25, 0xFF	; 255
     78e:	fc 01       	movw	r30, r24
     790:	80 81       	ld	r24, Z
     792:	91 81       	ldd	r25, Z+1	; 0x01
     794:	9a 83       	std	Y+2, r25	; 0x02
     796:	89 83       	std	Y+1, r24	; 0x01
	
	// when the queue is empty
	while(q->size == 0){
     798:	16 c0       	rjmp	.+44     	; 0x7c6 <OSdeq+0x50>
		
		taskTable[currentTask].runflag = TASK_BLOCKED;
     79a:	40 91 18 01 	lds	r20, 0x0118
     79e:	50 91 19 01 	lds	r21, 0x0119
     7a2:	2b e0       	ldi	r18, 0x0B	; 11
     7a4:	31 e0       	ldi	r19, 0x01	; 1
     7a6:	42 9f       	mul	r20, r18
     7a8:	c0 01       	movw	r24, r0
     7aa:	43 9f       	mul	r20, r19
     7ac:	90 0d       	add	r25, r0
     7ae:	52 9f       	mul	r21, r18
     7b0:	90 0d       	add	r25, r0
     7b2:	11 24       	eor	r1, r1
     7b4:	84 53       	subi	r24, 0x34	; 52
     7b6:	9e 4f       	sbci	r25, 0xFE	; 254
     7b8:	22 e0       	ldi	r18, 0x02	; 2
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	fc 01       	movw	r30, r24
     7be:	31 83       	std	Z+1, r19	; 0x01
     7c0:	20 83       	st	Z, r18
		OSSwapTask();
     7c2:	0e 94 45 05 	call	0xa8a	; 0xa8a <OSSwapTask>
{
	int i;
	int iniqH = q->qH;
	
	// when the queue is empty
	while(q->size == 0){
     7c6:	8b 81       	ldd	r24, Y+3	; 0x03
     7c8:	9c 81       	ldd	r25, Y+4	; 0x04
     7ca:	fc 01       	movw	r30, r24
     7cc:	84 81       	ldd	r24, Z+4	; 0x04
     7ce:	95 81       	ldd	r25, Z+5	; 0x05
     7d0:	00 97       	sbiw	r24, 0x00	; 0
     7d2:	19 f3       	breq	.-58     	; 0x79a <OSdeq+0x24>
		
		taskTable[currentTask].runflag = TASK_BLOCKED;
		OSSwapTask();
	}
	
	cli();
     7d4:	f8 94       	cli
	q->qH += q->num * sizeof(char);
     7d6:	8b 81       	ldd	r24, Y+3	; 0x03
     7d8:	9c 81       	ldd	r25, Y+4	; 0x04
     7da:	86 59       	subi	r24, 0x96	; 150
     7dc:	9f 4f       	sbci	r25, 0xFF	; 255
     7de:	fc 01       	movw	r30, r24
     7e0:	80 81       	ld	r24, Z
     7e2:	91 81       	ldd	r25, Z+1	; 0x01
     7e4:	9c 01       	movw	r18, r24
     7e6:	8b 81       	ldd	r24, Y+3	; 0x03
     7e8:	9c 81       	ldd	r25, Y+4	; 0x04
     7ea:	fc 01       	movw	r30, r24
     7ec:	82 81       	ldd	r24, Z+2	; 0x02
     7ee:	93 81       	ldd	r25, Z+3	; 0x03
     7f0:	82 0f       	add	r24, r18
     7f2:	93 1f       	adc	r25, r19
     7f4:	9c 01       	movw	r18, r24
     7f6:	8b 81       	ldd	r24, Y+3	; 0x03
     7f8:	9c 81       	ldd	r25, Y+4	; 0x04
     7fa:	86 59       	subi	r24, 0x96	; 150
     7fc:	9f 4f       	sbci	r25, 0xFF	; 255
     7fe:	fc 01       	movw	r30, r24
     800:	31 83       	std	Z+1, r19	; 0x01
     802:	20 83       	st	Z, r18
	q->qH %= MAX_QUEUE_SIZE;
     804:	8b 81       	ldd	r24, Y+3	; 0x03
     806:	9c 81       	ldd	r25, Y+4	; 0x04
     808:	86 59       	subi	r24, 0x96	; 150
     80a:	9f 4f       	sbci	r25, 0xFF	; 255
     80c:	fc 01       	movw	r30, r24
     80e:	80 81       	ld	r24, Z
     810:	91 81       	ldd	r25, Z+1	; 0x01
     812:	24 e6       	ldi	r18, 0x64	; 100
     814:	30 e0       	ldi	r19, 0x00	; 0
     816:	b9 01       	movw	r22, r18
     818:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <__divmodhi4>
     81c:	9c 01       	movw	r18, r24
     81e:	8b 81       	ldd	r24, Y+3	; 0x03
     820:	9c 81       	ldd	r25, Y+4	; 0x04
     822:	86 59       	subi	r24, 0x96	; 150
     824:	9f 4f       	sbci	r25, 0xFF	; 255
     826:	fc 01       	movw	r30, r24
     828:	31 83       	std	Z+1, r19	; 0x01
     82a:	20 83       	st	Z, r18
	
	return (void *) &(q->q[iniqH]);
     82c:	8b 81       	ldd	r24, Y+3	; 0x03
     82e:	9c 81       	ldd	r25, Y+4	; 0x04
     830:	9c 01       	movw	r18, r24
     832:	2a 5f       	subi	r18, 0xFA	; 250
     834:	3f 4f       	sbci	r19, 0xFF	; 255
     836:	89 81       	ldd	r24, Y+1	; 0x01
     838:	9a 81       	ldd	r25, Y+2	; 0x02
     83a:	82 0f       	add	r24, r18
     83c:	93 1f       	adc	r25, r19
}
     83e:	0f 90       	pop	r0
     840:	0f 90       	pop	r0
     842:	0f 90       	pop	r0
     844:	0f 90       	pop	r0
     846:	cf 91       	pop	r28
     848:	df 91       	pop	r29
     84a:	08 95       	ret

0000084c <OSdestroyQ>:

// Destroys the queue
void *OSdestroyQ(OSSignal *q)
{
     84c:	df 93       	push	r29
     84e:	cf 93       	push	r28
     850:	00 d0       	rcall	.+0      	; 0x852 <OSdestroyQ+0x6>
     852:	cd b7       	in	r28, 0x3d	; 61
     854:	de b7       	in	r29, 0x3e	; 62
     856:	9a 83       	std	Y+2, r25	; 0x02
     858:	89 83       	std	Y+1, r24	; 0x01
	free(q);
     85a:	89 81       	ldd	r24, Y+1	; 0x01
     85c:	9a 81       	ldd	r25, Y+2	; 0x02
     85e:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <free>
}
     862:	0f 90       	pop	r0
     864:	0f 90       	pop	r0
     866:	cf 91       	pop	r28
     868:	df 91       	pop	r29
     86a:	08 95       	ret

0000086c <runTaskFirstTime>:
	"pop r0	\n\t"\
	"out __SREG__, r0\n\t"\
	"pop r0	\n\t": : "r" (pxCurrentTCB):\
	);

void runTaskFirstTime(int num){
     86c:	df 93       	push	r29
     86e:	cf 93       	push	r28
     870:	00 d0       	rcall	.+0      	; 0x872 <runTaskFirstTime+0x6>
     872:	cd b7       	in	r28, 0x3d	; 61
     874:	de b7       	in	r29, 0x3e	; 62
     876:	9a 83       	std	Y+2, r25	; 0x02
     878:	89 83       	std	Y+1, r24	; 0x01
	cli();
     87a:	f8 94       	cli
	currentTask = num;
     87c:	89 81       	ldd	r24, Y+1	; 0x01
     87e:	9a 81       	ldd	r25, Y+2	; 0x02
     880:	90 93 19 01 	sts	0x0119, r25
     884:	80 93 18 01 	sts	0x0118, r24
	// set the run flag to be running
	taskTable[currentTask].runflag = TASK_RUNNING;
     888:	40 91 18 01 	lds	r20, 0x0118
     88c:	50 91 19 01 	lds	r21, 0x0119
     890:	2b e0       	ldi	r18, 0x0B	; 11
     892:	31 e0       	ldi	r19, 0x01	; 1
     894:	42 9f       	mul	r20, r18
     896:	c0 01       	movw	r24, r0
     898:	43 9f       	mul	r20, r19
     89a:	90 0d       	add	r25, r0
     89c:	52 9f       	mul	r21, r18
     89e:	90 0d       	add	r25, r0
     8a0:	11 24       	eor	r1, r1
     8a2:	84 53       	subi	r24, 0x34	; 52
     8a4:	9e 4f       	sbci	r25, 0xFE	; 254
     8a6:	21 e0       	ldi	r18, 0x01	; 1
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	fc 01       	movw	r30, r24
     8ac:	31 83       	std	Z+1, r19	; 0x01
     8ae:	20 83       	st	Z, r18
	
	pxCurrentTCB = (unsigned long)(taskTable[currentTask].stack + TASK_STACK_SIZE - 1);
     8b0:	40 91 18 01 	lds	r20, 0x0118
     8b4:	50 91 19 01 	lds	r21, 0x0119
     8b8:	2b e0       	ldi	r18, 0x0B	; 11
     8ba:	31 e0       	ldi	r19, 0x01	; 1
     8bc:	42 9f       	mul	r20, r18
     8be:	c0 01       	movw	r24, r0
     8c0:	43 9f       	mul	r20, r19
     8c2:	90 0d       	add	r25, r0
     8c4:	52 9f       	mul	r21, r18
     8c6:	90 0d       	add	r25, r0
     8c8:	11 24       	eor	r1, r1
     8ca:	86 5f       	subi	r24, 0xF6	; 246
     8cc:	9e 4f       	sbci	r25, 0xFE	; 254
     8ce:	84 53       	subi	r24, 0x34	; 52
     8d0:	9e 4f       	sbci	r25, 0xFE	; 254
     8d2:	aa 27       	eor	r26, r26
     8d4:	97 fd       	sbrc	r25, 7
     8d6:	a0 95       	com	r26
     8d8:	ba 2f       	mov	r27, r26
     8da:	80 93 c6 01 	sts	0x01C6, r24
     8de:	90 93 c7 01 	sts	0x01C7, r25
     8e2:	a0 93 c8 01 	sts	0x01C8, r26
     8e6:	b0 93 c9 01 	sts	0x01C9, r27
		
    asm volatile ("\n\t"\
     8ea:	a0 91 c6 01 	lds	r26, 0x01C6
     8ee:	b0 91 c7 01 	lds	r27, 0x01C7
     8f2:	ad bf       	out	0x3d, r26	; 61
     8f4:	be bf       	out	0x3e, r27	; 62
                  "lds r26, pxCurrentTCB \n\t"\
                  "lds r27, pxCurrentTCB+1 \n\t"\
                  "out __SP_L__, r26 \n\t"\
                  "out __SP_H__, r27 \n\t"\
                  );
	sei();
     8f6:	78 94       	sei
	
	// start running the task
    taskTable[currentTask].fptr(taskTable[currentTask].arg);
     8f8:	40 91 18 01 	lds	r20, 0x0118
     8fc:	50 91 19 01 	lds	r21, 0x0119
     900:	2b e0       	ldi	r18, 0x0B	; 11
     902:	31 e0       	ldi	r19, 0x01	; 1
     904:	42 9f       	mul	r20, r18
     906:	c0 01       	movw	r24, r0
     908:	43 9f       	mul	r20, r19
     90a:	90 0d       	add	r25, r0
     90c:	52 9f       	mul	r21, r18
     90e:	90 0d       	add	r25, r0
     910:	11 24       	eor	r1, r1
     912:	80 53       	subi	r24, 0x30	; 48
     914:	9e 4f       	sbci	r25, 0xFE	; 254
     916:	fc 01       	movw	r30, r24
     918:	20 81       	ld	r18, Z
     91a:	31 81       	ldd	r19, Z+1	; 0x01
     91c:	60 91 18 01 	lds	r22, 0x0118
     920:	70 91 19 01 	lds	r23, 0x0119
     924:	4b e0       	ldi	r20, 0x0B	; 11
     926:	51 e0       	ldi	r21, 0x01	; 1
     928:	64 9f       	mul	r22, r20
     92a:	c0 01       	movw	r24, r0
     92c:	65 9f       	mul	r22, r21
     92e:	90 0d       	add	r25, r0
     930:	74 9f       	mul	r23, r20
     932:	90 0d       	add	r25, r0
     934:	11 24       	eor	r1, r1
     936:	8e 52       	subi	r24, 0x2E	; 46
     938:	9e 4f       	sbci	r25, 0xFE	; 254
     93a:	fc 01       	movw	r30, r24
     93c:	80 81       	ld	r24, Z
     93e:	91 81       	ldd	r25, Z+1	; 0x01
     940:	f9 01       	movw	r30, r18
     942:	09 95       	icall
}
     944:	0f 90       	pop	r0
     946:	0f 90       	pop	r0
     948:	cf 91       	pop	r28
     94a:	df 91       	pop	r29
     94c:	08 95       	ret

0000094e <OSMakeAtomic>:



void OSMakeAtomic()
{
     94e:	df 93       	push	r29
     950:	cf 93       	push	r28
     952:	cd b7       	in	r28, 0x3d	; 61
     954:	de b7       	in	r29, 0x3e	; 62
	// Disables interrupts to create an atomic section.
	cli();
     956:	f8 94       	cli
}
     958:	cf 91       	pop	r28
     95a:	df 91       	pop	r29
     95c:	08 95       	ret

0000095e <OSLeaveAtomic>:

void OSLeaveAtomic()
{
     95e:	df 93       	push	r29
     960:	cf 93       	push	r28
     962:	cd b7       	in	r28, 0x3d	; 61
     964:	de b7       	in	r29, 0x3e	; 62
	// Leaves atomic section by re-enabling interrupts.
	sei();
     966:	78 94       	sei
}
     968:	cf 91       	pop	r28
     96a:	df 91       	pop	r29
     96c:	08 95       	ret

0000096e <findNextTask>:
// DO NOT modify this!
void OSSwapTask() __attribute__ ((naked));


int findNextTask()
{	
     96e:	df 93       	push	r29
     970:	cf 93       	push	r28
     972:	cd b7       	in	r28, 0x3d	; 61
     974:	de b7       	in	r29, 0x3e	; 62
	// signal of current task overflow
	if(currentTask > 4 || currentTask < -1)	PORTD |= 0b00010000;
     976:	80 91 18 01 	lds	r24, 0x0118
     97a:	90 91 19 01 	lds	r25, 0x0119
     97e:	85 30       	cpi	r24, 0x05	; 5
     980:	91 05       	cpc	r25, r1
     982:	44 f4       	brge	.+16     	; 0x994 <findNextTask+0x26>
     984:	80 91 18 01 	lds	r24, 0x0118
     988:	90 91 19 01 	lds	r25, 0x0119
     98c:	2f ef       	ldi	r18, 0xFF	; 255
     98e:	8f 3f       	cpi	r24, 0xFF	; 255
     990:	92 07       	cpc	r25, r18
     992:	4c f4       	brge	.+18     	; 0x9a6 <findNextTask+0x38>
     994:	8b e2       	ldi	r24, 0x2B	; 43
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	2b e2       	ldi	r18, 0x2B	; 43
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	f9 01       	movw	r30, r18
     99e:	20 81       	ld	r18, Z
     9a0:	20 61       	ori	r18, 0x10	; 16
     9a2:	fc 01       	movw	r30, r24
     9a4:	20 83       	st	Z, r18
	
	// Apply scheduling algorithm to find next task to run, and returns the index number of that task.
	// Note that OS_NUM_TASKS in kernel.h is the MAXIMUM number of tasks that can be created, not the actual number
	// created. So OS_NUM_TASKS can be 10 although in actual fact only 4 tasks were created. You should pick only amongst
	// these 4 tasks.
	for(i = currentTask + 1; i< task_counter; i++){
     9a6:	80 91 18 01 	lds	r24, 0x0118
     9aa:	90 91 19 01 	lds	r25, 0x0119
     9ae:	01 96       	adiw	r24, 0x01	; 1
     9b0:	90 93 cb 01 	sts	0x01CB, r25
     9b4:	80 93 ca 01 	sts	0x01CA, r24
     9b8:	24 c0       	rjmp	.+72     	; 0xa02 <findNextTask+0x94>
		if(taskTable[i].runflag == TASK_BLOCKED)	continue;
     9ba:	40 91 ca 01 	lds	r20, 0x01CA
     9be:	50 91 cb 01 	lds	r21, 0x01CB
     9c2:	2b e0       	ldi	r18, 0x0B	; 11
     9c4:	31 e0       	ldi	r19, 0x01	; 1
     9c6:	42 9f       	mul	r20, r18
     9c8:	c0 01       	movw	r24, r0
     9ca:	43 9f       	mul	r20, r19
     9cc:	90 0d       	add	r25, r0
     9ce:	52 9f       	mul	r21, r18
     9d0:	90 0d       	add	r25, r0
     9d2:	11 24       	eor	r1, r1
     9d4:	84 53       	subi	r24, 0x34	; 52
     9d6:	9e 4f       	sbci	r25, 0xFE	; 254
     9d8:	fc 01       	movw	r30, r24
     9da:	80 81       	ld	r24, Z
     9dc:	91 81       	ldd	r25, Z+1	; 0x01
     9de:	82 30       	cpi	r24, 0x02	; 2
     9e0:	91 05       	cpc	r25, r1
     9e2:	51 f4       	brne	.+20     	; 0x9f8 <findNextTask+0x8a>
	
	// Apply scheduling algorithm to find next task to run, and returns the index number of that task.
	// Note that OS_NUM_TASKS in kernel.h is the MAXIMUM number of tasks that can be created, not the actual number
	// created. So OS_NUM_TASKS can be 10 although in actual fact only 4 tasks were created. You should pick only amongst
	// these 4 tasks.
	for(i = currentTask + 1; i< task_counter; i++){
     9e4:	80 91 ca 01 	lds	r24, 0x01CA
     9e8:	90 91 cb 01 	lds	r25, 0x01CB
     9ec:	01 96       	adiw	r24, 0x01	; 1
     9ee:	90 93 cb 01 	sts	0x01CB, r25
     9f2:	80 93 ca 01 	sts	0x01CA, r24
     9f6:	05 c0       	rjmp	.+10     	; 0xa02 <findNextTask+0x94>
		if(taskTable[i].runflag == TASK_BLOCKED)	continue;
		else	return i;
     9f8:	80 91 ca 01 	lds	r24, 0x01CA
     9fc:	90 91 cb 01 	lds	r25, 0x01CB
     a00:	41 c0       	rjmp	.+130    	; 0xa84 <findNextTask+0x116>
	
	// Apply scheduling algorithm to find next task to run, and returns the index number of that task.
	// Note that OS_NUM_TASKS in kernel.h is the MAXIMUM number of tasks that can be created, not the actual number
	// created. So OS_NUM_TASKS can be 10 although in actual fact only 4 tasks were created. You should pick only amongst
	// these 4 tasks.
	for(i = currentTask + 1; i< task_counter; i++){
     a02:	20 91 ca 01 	lds	r18, 0x01CA
     a06:	30 91 cb 01 	lds	r19, 0x01CB
     a0a:	80 91 2a 01 	lds	r24, 0x012A
     a0e:	90 91 2b 01 	lds	r25, 0x012B
     a12:	28 17       	cp	r18, r24
     a14:	39 07       	cpc	r19, r25
     a16:	8c f2       	brlt	.-94     	; 0x9ba <findNextTask+0x4c>
		if(taskTable[i].runflag == TASK_BLOCKED)	continue;
		else	return i;
	}
	
	for(i=0; i< currentTask; i++){
     a18:	10 92 cb 01 	sts	0x01CB, r1
     a1c:	10 92 ca 01 	sts	0x01CA, r1
     a20:	24 c0       	rjmp	.+72     	; 0xa6a <findNextTask+0xfc>
		if(taskTable[i].runflag == TASK_BLOCKED)	continue;
     a22:	40 91 ca 01 	lds	r20, 0x01CA
     a26:	50 91 cb 01 	lds	r21, 0x01CB
     a2a:	2b e0       	ldi	r18, 0x0B	; 11
     a2c:	31 e0       	ldi	r19, 0x01	; 1
     a2e:	42 9f       	mul	r20, r18
     a30:	c0 01       	movw	r24, r0
     a32:	43 9f       	mul	r20, r19
     a34:	90 0d       	add	r25, r0
     a36:	52 9f       	mul	r21, r18
     a38:	90 0d       	add	r25, r0
     a3a:	11 24       	eor	r1, r1
     a3c:	84 53       	subi	r24, 0x34	; 52
     a3e:	9e 4f       	sbci	r25, 0xFE	; 254
     a40:	fc 01       	movw	r30, r24
     a42:	80 81       	ld	r24, Z
     a44:	91 81       	ldd	r25, Z+1	; 0x01
     a46:	82 30       	cpi	r24, 0x02	; 2
     a48:	91 05       	cpc	r25, r1
     a4a:	51 f4       	brne	.+20     	; 0xa60 <findNextTask+0xf2>
	for(i = currentTask + 1; i< task_counter; i++){
		if(taskTable[i].runflag == TASK_BLOCKED)	continue;
		else	return i;
	}
	
	for(i=0; i< currentTask; i++){
     a4c:	80 91 ca 01 	lds	r24, 0x01CA
     a50:	90 91 cb 01 	lds	r25, 0x01CB
     a54:	01 96       	adiw	r24, 0x01	; 1
     a56:	90 93 cb 01 	sts	0x01CB, r25
     a5a:	80 93 ca 01 	sts	0x01CA, r24
     a5e:	05 c0       	rjmp	.+10     	; 0xa6a <findNextTask+0xfc>
		if(taskTable[i].runflag == TASK_BLOCKED)	continue;
		else	return i;
     a60:	80 91 ca 01 	lds	r24, 0x01CA
     a64:	90 91 cb 01 	lds	r25, 0x01CB
     a68:	0d c0       	rjmp	.+26     	; 0xa84 <findNextTask+0x116>
	for(i = currentTask + 1; i< task_counter; i++){
		if(taskTable[i].runflag == TASK_BLOCKED)	continue;
		else	return i;
	}
	
	for(i=0; i< currentTask; i++){
     a6a:	20 91 ca 01 	lds	r18, 0x01CA
     a6e:	30 91 cb 01 	lds	r19, 0x01CB
     a72:	80 91 18 01 	lds	r24, 0x0118
     a76:	90 91 19 01 	lds	r25, 0x0119
     a7a:	28 17       	cp	r18, r24
     a7c:	39 07       	cpc	r19, r25
     a7e:	8c f2       	brlt	.-94     	; 0xa22 <findNextTask+0xb4>
		if(taskTable[i].runflag == TASK_BLOCKED)	continue;
		else	return i;
	}
	
	return -1;	// unsuccessful
     a80:	8f ef       	ldi	r24, 0xFF	; 255
     a82:	9f ef       	ldi	r25, 0xFF	; 255
}
     a84:	cf 91       	pop	r28
     a86:	df 91       	pop	r29
     a88:	08 95       	ret

00000a8a <OSSwapTask>:


void OSSwapTask()
 {
	// assumption: when this method is being called, there's always a running task; otherwise it would do nothing
	if(currentTask < 0)	asm("ret");
     a8a:	80 91 18 01 	lds	r24, 0x0118
     a8e:	90 91 19 01 	lds	r25, 0x0119
     a92:	99 23       	and	r25, r25
     a94:	0c f4       	brge	.+2      	; 0xa98 <OSSwapTask+0xe>
     a96:	08 95       	ret
	
	// assumption: when this method is being called, there's always a running task; otherwise it would do nothing
	if(currentTask > OS_NUM_TASKS || currentTask < -1){
     a98:	80 91 18 01 	lds	r24, 0x0118
     a9c:	90 91 19 01 	lds	r25, 0x0119
     aa0:	85 30       	cpi	r24, 0x05	; 5
     aa2:	91 05       	cpc	r25, r1
     aa4:	44 f4       	brge	.+16     	; 0xab6 <OSSwapTask+0x2c>
     aa6:	80 91 18 01 	lds	r24, 0x0118
     aaa:	90 91 19 01 	lds	r25, 0x0119
     aae:	2f ef       	ldi	r18, 0xFF	; 255
     ab0:	8f 3f       	cpi	r24, 0xFF	; 255
     ab2:	92 07       	cpc	r25, r18
     ab4:	5c f4       	brge	.+22     	; 0xacc <OSSwapTask+0x42>
		// test overflow
		PORTD |= 0b00010000;
     ab6:	8b e2       	ldi	r24, 0x2B	; 43
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	2b e2       	ldi	r18, 0x2B	; 43
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	f9 01       	movw	r30, r18
     ac0:	20 81       	ld	r18, Z
     ac2:	20 61       	ori	r18, 0x10	; 16
     ac4:	fc 01       	movw	r30, r24
     ac6:	20 83       	st	Z, r18
		asm("ret");
     ac8:	08 95       	ret
     aca:	14 c0       	rjmp	.+40     	; 0xaf4 <OSSwapTask+0x6a>
	} else if(currentTask == -1){
     acc:	80 91 18 01 	lds	r24, 0x0118
     ad0:	90 91 19 01 	lds	r25, 0x0119
     ad4:	ff ef       	ldi	r31, 0xFF	; 255
     ad6:	8f 3f       	cpi	r24, 0xFF	; 255
     ad8:	9f 07       	cpc	r25, r31
     ada:	11 f4       	brne	.+4      	; 0xae0 <OSSwapTask+0x56>
		asm("ret");	// never got any task run
     adc:	08 95       	ret
     ade:	0a c0       	rjmp	.+20     	; 0xaf4 <OSSwapTask+0x6a>
	} else{
		// signal running normally
		PORTD ^= 0b01000000;
     ae0:	8b e2       	ldi	r24, 0x2B	; 43
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	2b e2       	ldi	r18, 0x2B	; 43
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	f9 01       	movw	r30, r18
     aea:	30 81       	ld	r19, Z
     aec:	20 e4       	ldi	r18, 0x40	; 64
     aee:	23 27       	eor	r18, r19
     af0:	fc 01       	movw	r30, r24
     af2:	20 83       	st	Z, r18
	}
	
	// Call findNextTask to decide which task to run next.
	tempTaskNum = findNextTask();
     af4:	0e 94 b7 04 	call	0x96e	; 0x96e <findNextTask>
     af8:	90 93 17 01 	sts	0x0117, r25
     afc:	80 93 16 01 	sts	0x0116, r24
	if(tempTaskNum < 0){
     b00:	80 91 16 01 	lds	r24, 0x0116
     b04:	90 91 17 01 	lds	r25, 0x0117
     b08:	99 23       	and	r25, r25
     b0a:	0c f4       	brge	.+2      	; 0xb0e <OSSwapTask+0x84>
		asm("ret");	// no task to swap
     b0c:	08 95       	ret
	}
	cli();
     b0e:	f8 94       	cli
	// Save the context of the current task, and copy the task stack pointer to the task's entry in the Task Control Block (tcb).
	portSAVE_CONTEXT();
     b10:	0f 92       	push	r0
     b12:	0f b6       	in	r0, 0x3f	; 63
     b14:	0f 92       	push	r0
     b16:	1f 92       	push	r1
     b18:	11 24       	eor	r1, r1
     b1a:	2f 92       	push	r2
     b1c:	3f 92       	push	r3
     b1e:	4f 92       	push	r4
     b20:	5f 92       	push	r5
     b22:	6f 92       	push	r6
     b24:	7f 92       	push	r7
     b26:	8f 92       	push	r8
     b28:	9f 92       	push	r9
     b2a:	af 92       	push	r10
     b2c:	bf 92       	push	r11
     b2e:	cf 92       	push	r12
     b30:	df 92       	push	r13
     b32:	ef 92       	push	r14
     b34:	ff 92       	push	r15
     b36:	0f 93       	push	r16
     b38:	1f 93       	push	r17
     b3a:	2f 93       	push	r18
     b3c:	3f 93       	push	r19
     b3e:	4f 93       	push	r20
     b40:	5f 93       	push	r21
     b42:	6f 93       	push	r22
     b44:	7f 93       	push	r23
     b46:	8f 93       	push	r24
     b48:	9f 93       	push	r25
     b4a:	af 93       	push	r26
     b4c:	bf 93       	push	r27
     b4e:	cf 93       	push	r28
     b50:	df 93       	push	r29
     b52:	ef 93       	push	r30
     b54:	ff 93       	push	r31
     b56:	ad b7       	in	r26, 0x3d	; 61
     b58:	be b7       	in	r27, 0x3e	; 62
     b5a:	b0 93 c7 01 	sts	0x01C7, r27
     b5e:	a0 93 c6 01 	sts	0x01C6, r26
	
	// save the current stack pointer
	taskTable[currentTask].stack_ptr = pxCurrentTCB;
     b62:	60 91 18 01 	lds	r22, 0x0118
     b66:	70 91 19 01 	lds	r23, 0x0119
     b6a:	80 91 c6 01 	lds	r24, 0x01C6
     b6e:	90 91 c7 01 	lds	r25, 0x01C7
     b72:	a0 91 c8 01 	lds	r26, 0x01C8
     b76:	b0 91 c9 01 	lds	r27, 0x01C9
     b7a:	4b e0       	ldi	r20, 0x0B	; 11
     b7c:	51 e0       	ldi	r21, 0x01	; 1
     b7e:	64 9f       	mul	r22, r20
     b80:	90 01       	movw	r18, r0
     b82:	65 9f       	mul	r22, r21
     b84:	30 0d       	add	r19, r0
     b86:	74 9f       	mul	r23, r20
     b88:	30 0d       	add	r19, r0
     b8a:	11 24       	eor	r1, r1
     b8c:	2c 52       	subi	r18, 0x2C	; 44
     b8e:	3e 4f       	sbci	r19, 0xFE	; 254
     b90:	f9 01       	movw	r30, r18
     b92:	80 83       	st	Z, r24
     b94:	91 83       	std	Z+1, r25	; 0x01
     b96:	a2 83       	std	Z+2, r26	; 0x02
     b98:	b3 83       	std	Z+3, r27	; 0x03
	
	// update the "currentTask" to be the next task to run
	currentTask = tempTaskNum;
     b9a:	80 91 16 01 	lds	r24, 0x0116
     b9e:	90 91 17 01 	lds	r25, 0x0117
     ba2:	90 93 19 01 	sts	0x0119, r25
     ba6:	80 93 18 01 	sts	0x0118, r24
	
	TTaskBlock *t = &taskTable[currentTask];
     baa:	80 91 18 01 	lds	r24, 0x0118
     bae:	90 91 19 01 	lds	r25, 0x0119
     bb2:	ac 01       	movw	r20, r24
     bb4:	2b e0       	ldi	r18, 0x0B	; 11
     bb6:	31 e0       	ldi	r19, 0x01	; 1
     bb8:	42 9f       	mul	r20, r18
     bba:	c0 01       	movw	r24, r0
     bbc:	43 9f       	mul	r20, r19
     bbe:	90 0d       	add	r25, r0
     bc0:	52 9f       	mul	r21, r18
     bc2:	90 0d       	add	r25, r0
     bc4:	11 24       	eor	r1, r1
     bc6:	84 53       	subi	r24, 0x34	; 52
     bc8:	9e 4f       	sbci	r25, 0xFE	; 254
     bca:	9a 83       	std	Y+2, r25	; 0x02
     bcc:	89 83       	std	Y+1, r24	; 0x01
	
	if(t->runflag){	// has been run
     bce:	89 81       	ldd	r24, Y+1	; 0x01
     bd0:	9a 81       	ldd	r25, Y+2	; 0x02
     bd2:	fc 01       	movw	r30, r24
     bd4:	80 81       	ld	r24, Z
     bd6:	91 81       	ldd	r25, Z+1	; 0x01
     bd8:	00 97       	sbiw	r24, 0x00	; 0
     bda:	09 f4       	brne	.+2      	; 0xbde <OSSwapTask+0x154>
     bdc:	4a c0       	rjmp	.+148    	; 0xc72 <OSSwapTask+0x1e8>
		// get the stack pointer saved
		pxCurrentTCB = taskTable[currentTask].stack_ptr;
     bde:	40 91 18 01 	lds	r20, 0x0118
     be2:	50 91 19 01 	lds	r21, 0x0119
     be6:	2b e0       	ldi	r18, 0x0B	; 11
     be8:	31 e0       	ldi	r19, 0x01	; 1
     bea:	42 9f       	mul	r20, r18
     bec:	c0 01       	movw	r24, r0
     bee:	43 9f       	mul	r20, r19
     bf0:	90 0d       	add	r25, r0
     bf2:	52 9f       	mul	r21, r18
     bf4:	90 0d       	add	r25, r0
     bf6:	11 24       	eor	r1, r1
     bf8:	8c 52       	subi	r24, 0x2C	; 44
     bfa:	9e 4f       	sbci	r25, 0xFE	; 254
     bfc:	fc 01       	movw	r30, r24
     bfe:	80 81       	ld	r24, Z
     c00:	91 81       	ldd	r25, Z+1	; 0x01
     c02:	a2 81       	ldd	r26, Z+2	; 0x02
     c04:	b3 81       	ldd	r27, Z+3	; 0x03
     c06:	80 93 c6 01 	sts	0x01C6, r24
     c0a:	90 93 c7 01 	sts	0x01C7, r25
     c0e:	a0 93 c8 01 	sts	0x01C8, r26
     c12:	b0 93 c9 01 	sts	0x01C9, r27
		portRESTORE_CONTEXT();
     c16:	80 91 c6 01 	lds	r24, 0x01C6
     c1a:	90 91 c7 01 	lds	r25, 0x01C7
     c1e:	a0 91 c8 01 	lds	r26, 0x01C8
     c22:	b0 91 c9 01 	lds	r27, 0x01C9
     c26:	8d bf       	out	0x3d, r24	; 61
     c28:	9e bf       	out	0x3e, r25	; 62
     c2a:	ff 91       	pop	r31
     c2c:	ef 91       	pop	r30
     c2e:	df 91       	pop	r29
     c30:	cf 91       	pop	r28
     c32:	bf 91       	pop	r27
     c34:	af 91       	pop	r26
     c36:	9f 91       	pop	r25
     c38:	8f 91       	pop	r24
     c3a:	7f 91       	pop	r23
     c3c:	6f 91       	pop	r22
     c3e:	5f 91       	pop	r21
     c40:	4f 91       	pop	r20
     c42:	3f 91       	pop	r19
     c44:	2f 91       	pop	r18
     c46:	1f 91       	pop	r17
     c48:	0f 91       	pop	r16
     c4a:	ff 90       	pop	r15
     c4c:	ef 90       	pop	r14
     c4e:	df 90       	pop	r13
     c50:	cf 90       	pop	r12
     c52:	bf 90       	pop	r11
     c54:	af 90       	pop	r10
     c56:	9f 90       	pop	r9
     c58:	8f 90       	pop	r8
     c5a:	7f 90       	pop	r7
     c5c:	6f 90       	pop	r6
     c5e:	5f 90       	pop	r5
     c60:	4f 90       	pop	r4
     c62:	3f 90       	pop	r3
     c64:	2f 90       	pop	r2
     c66:	1f 90       	pop	r1
     c68:	0f 90       	pop	r0
     c6a:	0f be       	out	0x3f, r0	; 63
     c6c:	0f 90       	pop	r0
		sei();
     c6e:	78 94       	sei
     c70:	06 c0       	rjmp	.+12     	; 0xc7e <OSSwapTask+0x1f4>
	}else{	// never run -> then run
		runTaskFirstTime(currentTask);
     c72:	80 91 18 01 	lds	r24, 0x0118
     c76:	90 91 19 01 	lds	r25, 0x0119
     c7a:	0e 94 36 04 	call	0x86c	; 0x86c <runTaskFirstTime>
	}
	
	// Do not modify the line below!	
	asm("ret");
     c7e:	08 95       	ret

00000c80 <__vector_14>:
// ISR for the timer. IMPLEMENT ONLY IN PART 2!


ISR(TIMER0_COMPA_vect, ISR_NAKED)
{
	cli();
     c80:	f8 94       	cli

	OSSwapTask();
     c82:	0e 94 45 05 	call	0xa8a	; 0xa8a <OSSwapTask>
	
	// Do not change this!
	asm("reti");
     c86:	18 95       	reti

00000c88 <OSInit>:
}

void OSInit()
{ 
     c88:	df 93       	push	r29
     c8a:	cf 93       	push	r28
     c8c:	cd b7       	in	r28, 0x3d	; 61
     c8e:	de b7       	in	r29, 0x3e	; 62
	// Initialize all OS state variables, hardware used DIRECTLY by the OS, etc etc. Do not initialize variables or hardware
	// used by the application. Only those used by the OS
	
	// initialize timer 0
	TCNT0 = 0; OCR0A = 100;
     c90:	86 e4       	ldi	r24, 0x46	; 70
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	fc 01       	movw	r30, r24
     c96:	10 82       	st	Z, r1
     c98:	87 e4       	ldi	r24, 0x47	; 71
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	24 e6       	ldi	r18, 0x64	; 100
     c9e:	fc 01       	movw	r30, r24
     ca0:	20 83       	st	Z, r18
	TCCR0A = 0b00000010;
     ca2:	84 e4       	ldi	r24, 0x44	; 68
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	22 e0       	ldi	r18, 0x02	; 2
     ca8:	fc 01       	movw	r30, r24
     caa:	20 83       	st	Z, r18
	TCCR0B = 0b00000101;
     cac:	85 e4       	ldi	r24, 0x45	; 69
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	25 e0       	ldi	r18, 0x05	; 5
     cb2:	fc 01       	movw	r30, r24
     cb4:	20 83       	st	Z, r18
}
     cb6:	cf 91       	pop	r28
     cb8:	df 91       	pop	r29
     cba:	08 95       	ret

00000cbc <OSAddTask>:
// First argument is a pointer to the task's function code, the second is a priority number (0=highest priority)
// and the 3rd argument is an argument that will be passed to the task function the first time it is run.
// E.g. OSAddTask(task1, 0, (void *) 5) causes a task called task1 to be created with priority 0, and the integer
// 5 is passed to task1 when it is first called. See app.c to fully understand how OSAddTask is used.
int OSAddTask(void (*taskptr)(void *), int prio, void* arg)
{
     cbc:	df 93       	push	r29
     cbe:	cf 93       	push	r28
     cc0:	cd b7       	in	r28, 0x3d	; 61
     cc2:	de b7       	in	r29, 0x3e	; 62
     cc4:	28 97       	sbiw	r28, 0x08	; 8
     cc6:	0f b6       	in	r0, 0x3f	; 63
     cc8:	f8 94       	cli
     cca:	de bf       	out	0x3e, r29	; 62
     ccc:	0f be       	out	0x3f, r0	; 63
     cce:	cd bf       	out	0x3d, r28	; 61
     cd0:	9c 83       	std	Y+4, r25	; 0x04
     cd2:	8b 83       	std	Y+3, r24	; 0x03
     cd4:	7e 83       	std	Y+6, r23	; 0x06
     cd6:	6d 83       	std	Y+5, r22	; 0x05
     cd8:	58 87       	std	Y+8, r21	; 0x08
     cda:	4f 83       	std	Y+7, r20	; 0x07
	// Adds a new entry to the TCB. Returns a -1 if # of tasks > OS_NUM_TASKS. Note that OS_NUM_TASKS is the MAXIMUM
	// number of tasks that can be created, not the actual number.
	if(task_counter >= OS_NUM_TASKS)	return -1;
     cdc:	80 91 2a 01 	lds	r24, 0x012A
     ce0:	90 91 2b 01 	lds	r25, 0x012B
     ce4:	84 30       	cpi	r24, 0x04	; 4
     ce6:	91 05       	cpc	r25, r1
     ce8:	1c f0       	brlt	.+6      	; 0xcf0 <OSAddTask+0x34>
     cea:	8f ef       	ldi	r24, 0xFF	; 255
     cec:	9f ef       	ldi	r25, 0xFF	; 255
     cee:	33 c0       	rjmp	.+102    	; 0xd56 <OSAddTask+0x9a>
	TTaskBlock *t = &taskTable[task_counter++];
     cf0:	80 91 2a 01 	lds	r24, 0x012A
     cf4:	90 91 2b 01 	lds	r25, 0x012B
     cf8:	bc 01       	movw	r22, r24
     cfa:	4b e0       	ldi	r20, 0x0B	; 11
     cfc:	51 e0       	ldi	r21, 0x01	; 1
     cfe:	64 9f       	mul	r22, r20
     d00:	90 01       	movw	r18, r0
     d02:	65 9f       	mul	r22, r21
     d04:	30 0d       	add	r19, r0
     d06:	74 9f       	mul	r23, r20
     d08:	30 0d       	add	r19, r0
     d0a:	11 24       	eor	r1, r1
     d0c:	24 53       	subi	r18, 0x34	; 52
     d0e:	3e 4f       	sbci	r19, 0xFE	; 254
     d10:	3a 83       	std	Y+2, r19	; 0x02
     d12:	29 83       	std	Y+1, r18	; 0x01
     d14:	01 96       	adiw	r24, 0x01	; 1
     d16:	90 93 2b 01 	sts	0x012B, r25
     d1a:	80 93 2a 01 	sts	0x012A, r24
	t->fptr = taskptr;
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	9a 81       	ldd	r25, Y+2	; 0x02
     d22:	2b 81       	ldd	r18, Y+3	; 0x03
     d24:	3c 81       	ldd	r19, Y+4	; 0x04
     d26:	fc 01       	movw	r30, r24
     d28:	35 83       	std	Z+5, r19	; 0x05
     d2a:	24 83       	std	Z+4, r18	; 0x04
	t->prio = prio;
     d2c:	89 81       	ldd	r24, Y+1	; 0x01
     d2e:	9a 81       	ldd	r25, Y+2	; 0x02
     d30:	2d 81       	ldd	r18, Y+5	; 0x05
     d32:	3e 81       	ldd	r19, Y+6	; 0x06
     d34:	fc 01       	movw	r30, r24
     d36:	33 83       	std	Z+3, r19	; 0x03
     d38:	22 83       	std	Z+2, r18	; 0x02
	t->arg = arg;
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	9a 81       	ldd	r25, Y+2	; 0x02
     d3e:	2f 81       	ldd	r18, Y+7	; 0x07
     d40:	38 85       	ldd	r19, Y+8	; 0x08
     d42:	fc 01       	movw	r30, r24
     d44:	37 83       	std	Z+7, r19	; 0x07
     d46:	26 83       	std	Z+6, r18	; 0x06
	t->runflag = 0;
     d48:	89 81       	ldd	r24, Y+1	; 0x01
     d4a:	9a 81       	ldd	r25, Y+2	; 0x02
     d4c:	fc 01       	movw	r30, r24
     d4e:	11 82       	std	Z+1, r1	; 0x01
     d50:	10 82       	st	Z, r1
	
	return 0;
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	90 e0       	ldi	r25, 0x00	; 0
}
     d56:	28 96       	adiw	r28, 0x08	; 8
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	f8 94       	cli
     d5c:	de bf       	out	0x3e, r29	; 62
     d5e:	0f be       	out	0x3f, r0	; 63
     d60:	cd bf       	out	0x3d, r28	; 61
     d62:	cf 91       	pop	r28
     d64:	df 91       	pop	r29
     d66:	08 95       	ret

00000d68 <OSRun>:

void OSRun()
{
     d68:	df 93       	push	r29
     d6a:	cf 93       	push	r28
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
	// possibly that the interrupt has been enabled earlier(like.. by say function),
	// so disable it first
	cli();
     d70:	f8 94       	cli
	
	// when there's no task to run
	if(task_counter == 0)	return;
     d72:	80 91 2a 01 	lds	r24, 0x012A
     d76:	90 91 2b 01 	lds	r25, 0x012B
     d7a:	00 97       	sbiw	r24, 0x00	; 0
     d7c:	a1 f0       	breq	.+40     	; 0xda6 <OSRun+0x3e>
	
	// Starts by executing the first task
	currentTask = 0;
     d7e:	10 92 19 01 	sts	0x0119, r1
     d82:	10 92 18 01 	sts	0x0118, r1
	
	// start timer 0
	TIMSK0 |= 0b10;
     d86:	8e e6       	ldi	r24, 0x6E	; 110
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	2e e6       	ldi	r18, 0x6E	; 110
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	f9 01       	movw	r30, r18
     d90:	20 81       	ld	r18, Z
     d92:	22 60       	ori	r18, 0x02	; 2
     d94:	fc 01       	movw	r30, r24
     d96:	20 83       	st	Z, r18
	
	// this would enable the interrupt after it starts the task
	runTaskFirstTime(currentTask);
     d98:	80 91 18 01 	lds	r24, 0x0118
     d9c:	90 91 19 01 	lds	r25, 0x0119
     da0:	0e 94 36 04 	call	0x86c	; 0x86c <runTaskFirstTime>
     da4:	01 c0       	rjmp	.+2      	; 0xda8 <OSRun+0x40>
	// possibly that the interrupt has been enabled earlier(like.. by say function),
	// so disable it first
	cli();
	
	// when there's no task to run
	if(task_counter == 0)	return;
     da6:	00 00       	nop
	// start timer 0
	TIMSK0 |= 0b10;
	
	// this would enable the interrupt after it starts the task
	runTaskFirstTime(currentTask);
     da8:	cf 91       	pop	r28
     daa:	df 91       	pop	r29
     dac:	08 95       	ret

00000dae <setupSerial>:
#define enter_atomic() cli()
#define leave_atomic() sei()

// Set up for 9600 8N1
void setupSerial()
{
     dae:	df 93       	push	r29
     db0:	cf 93       	push	r28
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
	enter_atomic();
     db6:	f8 94       	cli
	qcount=0;
     db8:	10 92 43 06 	sts	0x0643, r1
     dbc:	10 92 42 06 	sts	0x0642, r1
	qhead=0;
     dc0:	10 92 87 06 	sts	0x0687, r1
     dc4:	10 92 86 06 	sts	0x0686, r1
	qtail=0;
     dc8:	10 92 45 06 	sts	0x0645, r1
     dcc:	10 92 44 06 	sts	0x0644, r1
	lqhead=0;
     dd0:	10 92 3f 06 	sts	0x063F, r1
     dd4:	10 92 3e 06 	sts	0x063E, r1
	lqtail=0;
     dd8:	10 92 41 06 	sts	0x0641, r1
     ddc:	10 92 40 06 	sts	0x0640, r1
	lqcount=0;
     de0:	10 92 3d 06 	sts	0x063D, r1
     de4:	10 92 3c 06 	sts	0x063C, r1

	// Set up baud rate generator. UBBR=16000000/(16*9600)-1 = 103
	UBRR0L=103;
     de8:	84 ec       	ldi	r24, 0xC4	; 196
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	27 e6       	ldi	r18, 0x67	; 103
     dee:	fc 01       	movw	r30, r24
     df0:	20 83       	st	Z, r18
	UBRR0H=0;
     df2:	85 ec       	ldi	r24, 0xC5	; 197
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	fc 01       	movw	r30, r24
     df8:	10 82       	st	Z, r1
	
	// Set up 8N1
	UCSR0C=0b110;
     dfa:	82 ec       	ldi	r24, 0xC2	; 194
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	26 e0       	ldi	r18, 0x06	; 6
     e00:	fc 01       	movw	r30, r24
     e02:	20 83       	st	Z, r18
	
	// Enable RX and TX.
	UCSR0B=0b10011000;
     e04:	81 ec       	ldi	r24, 0xC1	; 193
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	28 e9       	ldi	r18, 0x98	; 152
     e0a:	fc 01       	movw	r30, r24
     e0c:	20 83       	st	Z, r18
	UCSR0A=0;
     e0e:	80 ec       	ldi	r24, 0xC0	; 192
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	fc 01       	movw	r30, r24
     e14:	10 82       	st	Z, r1
	leave_atomic();
     e16:	78 94       	sei
}
     e18:	cf 91       	pop	r28
     e1a:	df 91       	pop	r29
     e1c:	08 95       	ret

00000e1e <__vector_20>:

// ISR for transmit end.
ISR(USART_TX_vect)
{
     e1e:	1f 92       	push	r1
     e20:	0f 92       	push	r0
     e22:	0f b6       	in	r0, 0x3f	; 63
     e24:	0f 92       	push	r0
     e26:	11 24       	eor	r1, r1
     e28:	2f 93       	push	r18
     e2a:	3f 93       	push	r19
     e2c:	5f 93       	push	r21
     e2e:	6f 93       	push	r22
     e30:	7f 93       	push	r23
     e32:	8f 93       	push	r24
     e34:	9f 93       	push	r25
     e36:	af 93       	push	r26
     e38:	bf 93       	push	r27
     e3a:	ef 93       	push	r30
     e3c:	ff 93       	push	r31
     e3e:	df 93       	push	r29
     e40:	cf 93       	push	r28
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62

	enter_atomic();
     e46:	f8 94       	cli
	// Disable interrupts. 
	if(qcount==0)
     e48:	80 91 42 06 	lds	r24, 0x0642
     e4c:	90 91 43 06 	lds	r25, 0x0643
     e50:	00 97       	sbiw	r24, 0x00	; 0
     e52:	51 f4       	brne	.+20     	; 0xe68 <__vector_20+0x4a>
		UCSR0B&=0b10111111;
     e54:	81 ec       	ldi	r24, 0xC1	; 193
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	21 ec       	ldi	r18, 0xC1	; 193
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	f9 01       	movw	r30, r18
     e5e:	20 81       	ld	r18, Z
     e60:	2f 7b       	andi	r18, 0xBF	; 191
     e62:	fc 01       	movw	r30, r24
     e64:	20 83       	st	Z, r18
     e66:	23 c0       	rjmp	.+70     	; 0xeae <__vector_20+0x90>
	else
	{
		UDR0=q[qtail];
     e68:	86 ec       	ldi	r24, 0xC6	; 198
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	20 91 44 06 	lds	r18, 0x0644
     e70:	30 91 45 06 	lds	r19, 0x0645
     e74:	2a 5b       	subi	r18, 0xBA	; 186
     e76:	39 4f       	sbci	r19, 0xF9	; 249
     e78:	f9 01       	movw	r30, r18
     e7a:	20 81       	ld	r18, Z
     e7c:	fc 01       	movw	r30, r24
     e7e:	20 83       	st	Z, r18
		qtail=(qtail+1)%QLEN;
     e80:	80 91 44 06 	lds	r24, 0x0644
     e84:	90 91 45 06 	lds	r25, 0x0645
     e88:	01 96       	adiw	r24, 0x01	; 1
     e8a:	20 e4       	ldi	r18, 0x40	; 64
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	b9 01       	movw	r22, r18
     e90:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <__divmodhi4>
     e94:	90 93 45 06 	sts	0x0645, r25
     e98:	80 93 44 06 	sts	0x0644, r24
		qcount--;
     e9c:	80 91 42 06 	lds	r24, 0x0642
     ea0:	90 91 43 06 	lds	r25, 0x0643
     ea4:	01 97       	sbiw	r24, 0x01	; 1
     ea6:	90 93 43 06 	sts	0x0643, r25
     eaa:	80 93 42 06 	sts	0x0642, r24
	}	
	leave_atomic();
     eae:	78 94       	sei
}
     eb0:	cf 91       	pop	r28
     eb2:	df 91       	pop	r29
     eb4:	ff 91       	pop	r31
     eb6:	ef 91       	pop	r30
     eb8:	bf 91       	pop	r27
     eba:	af 91       	pop	r26
     ebc:	9f 91       	pop	r25
     ebe:	8f 91       	pop	r24
     ec0:	7f 91       	pop	r23
     ec2:	6f 91       	pop	r22
     ec4:	5f 91       	pop	r21
     ec6:	3f 91       	pop	r19
     ec8:	2f 91       	pop	r18
     eca:	0f 90       	pop	r0
     ecc:	0f be       	out	0x3f, r0	; 63
     ece:	0f 90       	pop	r0
     ed0:	1f 90       	pop	r1
     ed2:	18 95       	reti

00000ed4 <__vector_18>:

// Listener
ISR(USART_RX_vect)
{
     ed4:	1f 92       	push	r1
     ed6:	0f 92       	push	r0
     ed8:	0f b6       	in	r0, 0x3f	; 63
     eda:	0f 92       	push	r0
     edc:	11 24       	eor	r1, r1
     ede:	2f 93       	push	r18
     ee0:	3f 93       	push	r19
     ee2:	5f 93       	push	r21
     ee4:	6f 93       	push	r22
     ee6:	7f 93       	push	r23
     ee8:	8f 93       	push	r24
     eea:	9f 93       	push	r25
     eec:	af 93       	push	r26
     eee:	bf 93       	push	r27
     ef0:	ef 93       	push	r30
     ef2:	ff 93       	push	r31
     ef4:	df 93       	push	r29
     ef6:	cf 93       	push	r28
     ef8:	0f 92       	push	r0
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
	// Guarantee atomicity
	enter_atomic();
     efe:	f8 94       	cli
		
	// Get the character
	char ch=UDR0;
     f00:	86 ec       	ldi	r24, 0xC6	; 198
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	fc 01       	movw	r30, r24
     f06:	80 81       	ld	r24, Z
     f08:	89 83       	std	Y+1, r24	; 0x01
	if(lqcount<LQLEN)
     f0a:	80 91 3c 06 	lds	r24, 0x063C
     f0e:	90 91 3d 06 	lds	r25, 0x063D
     f12:	80 38       	cpi	r24, 0x80	; 128
     f14:	91 05       	cpc	r25, r1
     f16:	04 f5       	brge	.+64     	; 0xf58 <__vector_18+0x84>
	{
		lq[lqhead]=ch;
     f18:	80 91 3e 06 	lds	r24, 0x063E
     f1c:	90 91 3f 06 	lds	r25, 0x063F
     f20:	84 50       	subi	r24, 0x04	; 4
     f22:	9a 4f       	sbci	r25, 0xFA	; 250
     f24:	29 81       	ldd	r18, Y+1	; 0x01
     f26:	fc 01       	movw	r30, r24
     f28:	20 83       	st	Z, r18
		lqhead=(lqhead+1)%LQLEN;
     f2a:	80 91 3e 06 	lds	r24, 0x063E
     f2e:	90 91 3f 06 	lds	r25, 0x063F
     f32:	01 96       	adiw	r24, 0x01	; 1
     f34:	20 e8       	ldi	r18, 0x80	; 128
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	b9 01       	movw	r22, r18
     f3a:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <__divmodhi4>
     f3e:	90 93 3f 06 	sts	0x063F, r25
     f42:	80 93 3e 06 	sts	0x063E, r24
		lqcount++;
     f46:	80 91 3c 06 	lds	r24, 0x063C
     f4a:	90 91 3d 06 	lds	r25, 0x063D
     f4e:	01 96       	adiw	r24, 0x01	; 1
     f50:	90 93 3d 06 	sts	0x063D, r25
     f54:	80 93 3c 06 	sts	0x063C, r24
	}
	
	leave_atomic();
     f58:	78 94       	sei
}
     f5a:	0f 90       	pop	r0
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	ff 91       	pop	r31
     f62:	ef 91       	pop	r30
     f64:	bf 91       	pop	r27
     f66:	af 91       	pop	r26
     f68:	9f 91       	pop	r25
     f6a:	8f 91       	pop	r24
     f6c:	7f 91       	pop	r23
     f6e:	6f 91       	pop	r22
     f70:	5f 91       	pop	r21
     f72:	3f 91       	pop	r19
     f74:	2f 91       	pop	r18
     f76:	0f 90       	pop	r0
     f78:	0f be       	out	0x3f, r0	; 63
     f7a:	0f 90       	pop	r0
     f7c:	1f 90       	pop	r1
     f7e:	18 95       	reti

00000f80 <hear>:

void hear(char *str, int *len)
{
     f80:	df 93       	push	r29
     f82:	cf 93       	push	r28
     f84:	00 d0       	rcall	.+0      	; 0xf86 <hear+0x6>
     f86:	00 d0       	rcall	.+0      	; 0xf88 <hear+0x8>
     f88:	00 d0       	rcall	.+0      	; 0xf8a <hear+0xa>
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	9c 83       	std	Y+4, r25	; 0x04
     f90:	8b 83       	std	Y+3, r24	; 0x03
     f92:	7e 83       	std	Y+6, r23	; 0x06
     f94:	6d 83       	std	Y+5, r22	; 0x05
	int i;
	
	enter_atomic();
     f96:	f8 94       	cli
	for(i=0; i<lqcount; i++)
     f98:	1a 82       	std	Y+2, r1	; 0x02
     f9a:	19 82       	std	Y+1, r1	; 0x01
     f9c:	23 c0       	rjmp	.+70     	; 0xfe4 <hear+0x64>
	{
		str[i]=lq[lqtail];
     f9e:	89 81       	ldd	r24, Y+1	; 0x01
     fa0:	9a 81       	ldd	r25, Y+2	; 0x02
     fa2:	2b 81       	ldd	r18, Y+3	; 0x03
     fa4:	3c 81       	ldd	r19, Y+4	; 0x04
     fa6:	82 0f       	add	r24, r18
     fa8:	93 1f       	adc	r25, r19
     faa:	20 91 40 06 	lds	r18, 0x0640
     fae:	30 91 41 06 	lds	r19, 0x0641
     fb2:	24 50       	subi	r18, 0x04	; 4
     fb4:	3a 4f       	sbci	r19, 0xFA	; 250
     fb6:	f9 01       	movw	r30, r18
     fb8:	20 81       	ld	r18, Z
     fba:	fc 01       	movw	r30, r24
     fbc:	20 83       	st	Z, r18
		lqtail=(lqtail+1)%LQLEN;
     fbe:	80 91 40 06 	lds	r24, 0x0640
     fc2:	90 91 41 06 	lds	r25, 0x0641
     fc6:	01 96       	adiw	r24, 0x01	; 1
     fc8:	20 e8       	ldi	r18, 0x80	; 128
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	b9 01       	movw	r22, r18
     fce:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <__divmodhi4>
     fd2:	90 93 41 06 	sts	0x0641, r25
     fd6:	80 93 40 06 	sts	0x0640, r24
void hear(char *str, int *len)
{
	int i;
	
	enter_atomic();
	for(i=0; i<lqcount; i++)
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	9a 81       	ldd	r25, Y+2	; 0x02
     fde:	01 96       	adiw	r24, 0x01	; 1
     fe0:	9a 83       	std	Y+2, r25	; 0x02
     fe2:	89 83       	std	Y+1, r24	; 0x01
     fe4:	80 91 3c 06 	lds	r24, 0x063C
     fe8:	90 91 3d 06 	lds	r25, 0x063D
     fec:	29 81       	ldd	r18, Y+1	; 0x01
     fee:	3a 81       	ldd	r19, Y+2	; 0x02
     ff0:	28 17       	cp	r18, r24
     ff2:	39 07       	cpc	r19, r25
     ff4:	a4 f2       	brlt	.-88     	; 0xf9e <hear+0x1e>
	{
		str[i]=lq[lqtail];
		lqtail=(lqtail+1)%LQLEN;
	}	
	
	str[lqtail]=0;
     ff6:	80 91 40 06 	lds	r24, 0x0640
     ffa:	90 91 41 06 	lds	r25, 0x0641
     ffe:	2b 81       	ldd	r18, Y+3	; 0x03
    1000:	3c 81       	ldd	r19, Y+4	; 0x04
    1002:	82 0f       	add	r24, r18
    1004:	93 1f       	adc	r25, r19
    1006:	fc 01       	movw	r30, r24
    1008:	10 82       	st	Z, r1
	
	*len=lqcount;
    100a:	20 91 3c 06 	lds	r18, 0x063C
    100e:	30 91 3d 06 	lds	r19, 0x063D
    1012:	8d 81       	ldd	r24, Y+5	; 0x05
    1014:	9e 81       	ldd	r25, Y+6	; 0x06
    1016:	fc 01       	movw	r30, r24
    1018:	31 83       	std	Z+1, r19	; 0x01
    101a:	20 83       	st	Z, r18
	lqcount=0;
    101c:	10 92 3d 06 	sts	0x063D, r1
    1020:	10 92 3c 06 	sts	0x063C, r1
	
	leave_atomic();
    1024:	78 94       	sei
}
    1026:	26 96       	adiw	r28, 0x06	; 6
    1028:	0f b6       	in	r0, 0x3f	; 63
    102a:	f8 94       	cli
    102c:	de bf       	out	0x3e, r29	; 62
    102e:	0f be       	out	0x3f, r0	; 63
    1030:	cd bf       	out	0x3d, r28	; 61
    1032:	cf 91       	pop	r28
    1034:	df 91       	pop	r29
    1036:	08 95       	ret

00001038 <say>:

void say(char *str)
{
    1038:	0f 93       	push	r16
    103a:	1f 93       	push	r17
    103c:	df 93       	push	r29
    103e:	cf 93       	push	r28
    1040:	00 d0       	rcall	.+0      	; 0x1042 <say+0xa>
    1042:	00 d0       	rcall	.+0      	; 0x1044 <say+0xc>
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
    1048:	9c 83       	std	Y+4, r25	; 0x04
    104a:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	
	// Guarantee atomicity
	enter_atomic();
    104c:	f8 94       	cli
	for(i=0; i<strlen(str) && qcount < QLEN; i++)
    104e:	1a 82       	std	Y+2, r1	; 0x02
    1050:	19 82       	std	Y+1, r1	; 0x01
    1052:	62 c0       	rjmp	.+196    	; 0x1118 <say+0xe0>
	{
		q[qhead]=str[i];
    1054:	80 91 86 06 	lds	r24, 0x0686
    1058:	90 91 87 06 	lds	r25, 0x0687
    105c:	29 81       	ldd	r18, Y+1	; 0x01
    105e:	3a 81       	ldd	r19, Y+2	; 0x02
    1060:	4b 81       	ldd	r20, Y+3	; 0x03
    1062:	5c 81       	ldd	r21, Y+4	; 0x04
    1064:	24 0f       	add	r18, r20
    1066:	35 1f       	adc	r19, r21
    1068:	f9 01       	movw	r30, r18
    106a:	20 81       	ld	r18, Z
    106c:	8a 5b       	subi	r24, 0xBA	; 186
    106e:	99 4f       	sbci	r25, 0xF9	; 249
    1070:	fc 01       	movw	r30, r24
    1072:	20 83       	st	Z, r18
		qhead=(qhead+1) %QLEN;
    1074:	80 91 86 06 	lds	r24, 0x0686
    1078:	90 91 87 06 	lds	r25, 0x0687
    107c:	01 96       	adiw	r24, 0x01	; 1
    107e:	20 e4       	ldi	r18, 0x40	; 64
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	b9 01       	movw	r22, r18
    1084:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <__divmodhi4>
    1088:	90 93 87 06 	sts	0x0687, r25
    108c:	80 93 86 06 	sts	0x0686, r24
		qcount++;			
    1090:	80 91 42 06 	lds	r24, 0x0642
    1094:	90 91 43 06 	lds	r25, 0x0643
    1098:	01 96       	adiw	r24, 0x01	; 1
    109a:	90 93 43 06 	sts	0x0643, r25
    109e:	80 93 42 06 	sts	0x0642, r24
	
		if(!(UCSR0B & 0b01000000))
    10a2:	81 ec       	ldi	r24, 0xC1	; 193
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	fc 01       	movw	r30, r24
    10a8:	80 81       	ld	r24, Z
    10aa:	88 2f       	mov	r24, r24
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	80 74       	andi	r24, 0x40	; 64
    10b0:	90 70       	andi	r25, 0x00	; 0
    10b2:	00 97       	sbiw	r24, 0x00	; 0
    10b4:	61 f5       	brne	.+88     	; 0x110e <say+0xd6>
		{
			UDR0=q[qtail];
    10b6:	86 ec       	ldi	r24, 0xC6	; 198
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	20 91 44 06 	lds	r18, 0x0644
    10be:	30 91 45 06 	lds	r19, 0x0645
    10c2:	2a 5b       	subi	r18, 0xBA	; 186
    10c4:	39 4f       	sbci	r19, 0xF9	; 249
    10c6:	f9 01       	movw	r30, r18
    10c8:	20 81       	ld	r18, Z
    10ca:	fc 01       	movw	r30, r24
    10cc:	20 83       	st	Z, r18
			qtail=(qtail+1)%QLEN;
    10ce:	80 91 44 06 	lds	r24, 0x0644
    10d2:	90 91 45 06 	lds	r25, 0x0645
    10d6:	01 96       	adiw	r24, 0x01	; 1
    10d8:	20 e4       	ldi	r18, 0x40	; 64
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	b9 01       	movw	r22, r18
    10de:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <__divmodhi4>
    10e2:	90 93 45 06 	sts	0x0645, r25
    10e6:	80 93 44 06 	sts	0x0644, r24
			qcount--;
    10ea:	80 91 42 06 	lds	r24, 0x0642
    10ee:	90 91 43 06 	lds	r25, 0x0643
    10f2:	01 97       	sbiw	r24, 0x01	; 1
    10f4:	90 93 43 06 	sts	0x0643, r25
    10f8:	80 93 42 06 	sts	0x0642, r24
			UCSR0B|=0b01000000;
    10fc:	81 ec       	ldi	r24, 0xC1	; 193
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	21 ec       	ldi	r18, 0xC1	; 193
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	f9 01       	movw	r30, r18
    1106:	20 81       	ld	r18, Z
    1108:	20 64       	ori	r18, 0x40	; 64
    110a:	fc 01       	movw	r30, r24
    110c:	20 83       	st	Z, r18
{
	int i;
	
	// Guarantee atomicity
	enter_atomic();
	for(i=0; i<strlen(str) && qcount < QLEN; i++)
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	9a 81       	ldd	r25, Y+2	; 0x02
    1112:	01 96       	adiw	r24, 0x01	; 1
    1114:	9a 83       	std	Y+2, r25	; 0x02
    1116:	89 83       	std	Y+1, r24	; 0x01
    1118:	09 81       	ldd	r16, Y+1	; 0x01
    111a:	1a 81       	ldd	r17, Y+2	; 0x02
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	9c 81       	ldd	r25, Y+4	; 0x04
    1120:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <strlen>
    1124:	08 17       	cp	r16, r24
    1126:	19 07       	cpc	r17, r25
    1128:	40 f4       	brcc	.+16     	; 0x113a <say+0x102>
    112a:	80 91 42 06 	lds	r24, 0x0642
    112e:	90 91 43 06 	lds	r25, 0x0643
    1132:	80 34       	cpi	r24, 0x40	; 64
    1134:	91 05       	cpc	r25, r1
    1136:	0c f4       	brge	.+2      	; 0x113a <say+0x102>
    1138:	8d cf       	rjmp	.-230    	; 0x1054 <say+0x1c>
			qtail=(qtail+1)%QLEN;
			qcount--;
			UCSR0B|=0b01000000;
		}
	}
	leave_atomic();
    113a:	78 94       	sei
}
    113c:	0f 90       	pop	r0
    113e:	0f 90       	pop	r0
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	cf 91       	pop	r28
    1146:	df 91       	pop	r29
    1148:	1f 91       	pop	r17
    114a:	0f 91       	pop	r16
    114c:	08 95       	ret

0000114e <__fixunssfsi>:
    114e:	ef 92       	push	r14
    1150:	ff 92       	push	r15
    1152:	0f 93       	push	r16
    1154:	1f 93       	push	r17
    1156:	7b 01       	movw	r14, r22
    1158:	8c 01       	movw	r16, r24
    115a:	20 e0       	ldi	r18, 0x00	; 0
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	40 e0       	ldi	r20, 0x00	; 0
    1160:	5f e4       	ldi	r21, 0x4F	; 79
    1162:	0e 94 a5 0b 	call	0x174a	; 0x174a <__gesf2>
    1166:	87 fd       	sbrc	r24, 7
    1168:	11 c0       	rjmp	.+34     	; 0x118c <__fixunssfsi+0x3e>
    116a:	c8 01       	movw	r24, r16
    116c:	b7 01       	movw	r22, r14
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	40 e0       	ldi	r20, 0x00	; 0
    1174:	5f e4       	ldi	r21, 0x4F	; 79
    1176:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__subsf3>
    117a:	0e 94 05 0c 	call	0x180a	; 0x180a <__fixsfsi>
    117e:	9b 01       	movw	r18, r22
    1180:	ac 01       	movw	r20, r24
    1182:	20 50       	subi	r18, 0x00	; 0
    1184:	30 40       	sbci	r19, 0x00	; 0
    1186:	40 40       	sbci	r20, 0x00	; 0
    1188:	50 48       	sbci	r21, 0x80	; 128
    118a:	06 c0       	rjmp	.+12     	; 0x1198 <__fixunssfsi+0x4a>
    118c:	c8 01       	movw	r24, r16
    118e:	b7 01       	movw	r22, r14
    1190:	0e 94 05 0c 	call	0x180a	; 0x180a <__fixsfsi>
    1194:	9b 01       	movw	r18, r22
    1196:	ac 01       	movw	r20, r24
    1198:	b9 01       	movw	r22, r18
    119a:	ca 01       	movw	r24, r20
    119c:	1f 91       	pop	r17
    119e:	0f 91       	pop	r16
    11a0:	ff 90       	pop	r15
    11a2:	ef 90       	pop	r14
    11a4:	08 95       	ret

000011a6 <_fpadd_parts>:
    11a6:	a0 e0       	ldi	r26, 0x00	; 0
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	e9 ed       	ldi	r30, 0xD9	; 217
    11ac:	f8 e0       	ldi	r31, 0x08	; 8
    11ae:	0c 94 12 0e 	jmp	0x1c24	; 0x1c24 <__prologue_saves__+0x8>
    11b2:	fc 01       	movw	r30, r24
    11b4:	ea 01       	movw	r28, r20
    11b6:	80 81       	ld	r24, Z
    11b8:	82 30       	cpi	r24, 0x02	; 2
    11ba:	08 f4       	brcc	.+2      	; 0x11be <_fpadd_parts+0x18>
    11bc:	38 c1       	rjmp	.+624    	; 0x142e <_fpadd_parts+0x288>
    11be:	db 01       	movw	r26, r22
    11c0:	9c 91       	ld	r25, X
    11c2:	92 30       	cpi	r25, 0x02	; 2
    11c4:	08 f4       	brcc	.+2      	; 0x11c8 <_fpadd_parts+0x22>
    11c6:	30 c1       	rjmp	.+608    	; 0x1428 <_fpadd_parts+0x282>
    11c8:	84 30       	cpi	r24, 0x04	; 4
    11ca:	59 f4       	brne	.+22     	; 0x11e2 <_fpadd_parts+0x3c>
    11cc:	94 30       	cpi	r25, 0x04	; 4
    11ce:	09 f0       	breq	.+2      	; 0x11d2 <_fpadd_parts+0x2c>
    11d0:	2e c1       	rjmp	.+604    	; 0x142e <_fpadd_parts+0x288>
    11d2:	91 81       	ldd	r25, Z+1	; 0x01
    11d4:	11 96       	adiw	r26, 0x01	; 1
    11d6:	8c 91       	ld	r24, X
    11d8:	11 97       	sbiw	r26, 0x01	; 1
    11da:	98 17       	cp	r25, r24
    11dc:	09 f0       	breq	.+2      	; 0x11e0 <_fpadd_parts+0x3a>
    11de:	21 c1       	rjmp	.+578    	; 0x1422 <_fpadd_parts+0x27c>
    11e0:	26 c1       	rjmp	.+588    	; 0x142e <_fpadd_parts+0x288>
    11e2:	94 30       	cpi	r25, 0x04	; 4
    11e4:	09 f4       	brne	.+2      	; 0x11e8 <_fpadd_parts+0x42>
    11e6:	20 c1       	rjmp	.+576    	; 0x1428 <_fpadd_parts+0x282>
    11e8:	92 30       	cpi	r25, 0x02	; 2
    11ea:	b1 f4       	brne	.+44     	; 0x1218 <_fpadd_parts+0x72>
    11ec:	82 30       	cpi	r24, 0x02	; 2
    11ee:	09 f0       	breq	.+2      	; 0x11f2 <_fpadd_parts+0x4c>
    11f0:	1e c1       	rjmp	.+572    	; 0x142e <_fpadd_parts+0x288>
    11f2:	ca 01       	movw	r24, r20
    11f4:	af 01       	movw	r20, r30
    11f6:	28 e0       	ldi	r18, 0x08	; 8
    11f8:	da 01       	movw	r26, r20
    11fa:	0d 90       	ld	r0, X+
    11fc:	ad 01       	movw	r20, r26
    11fe:	dc 01       	movw	r26, r24
    1200:	0d 92       	st	X+, r0
    1202:	cd 01       	movw	r24, r26
    1204:	21 50       	subi	r18, 0x01	; 1
    1206:	c1 f7       	brne	.-16     	; 0x11f8 <_fpadd_parts+0x52>
    1208:	db 01       	movw	r26, r22
    120a:	11 96       	adiw	r26, 0x01	; 1
    120c:	8c 91       	ld	r24, X
    120e:	11 97       	sbiw	r26, 0x01	; 1
    1210:	91 81       	ldd	r25, Z+1	; 0x01
    1212:	89 23       	and	r24, r25
    1214:	89 83       	std	Y+1, r24	; 0x01
    1216:	0a c1       	rjmp	.+532    	; 0x142c <_fpadd_parts+0x286>
    1218:	82 30       	cpi	r24, 0x02	; 2
    121a:	09 f4       	brne	.+2      	; 0x121e <_fpadd_parts+0x78>
    121c:	05 c1       	rjmp	.+522    	; 0x1428 <_fpadd_parts+0x282>
    121e:	c2 80       	ldd	r12, Z+2	; 0x02
    1220:	d3 80       	ldd	r13, Z+3	; 0x03
    1222:	db 01       	movw	r26, r22
    1224:	12 96       	adiw	r26, 0x02	; 2
    1226:	6d 90       	ld	r6, X+
    1228:	7c 90       	ld	r7, X
    122a:	13 97       	sbiw	r26, 0x03	; 3
    122c:	24 81       	ldd	r18, Z+4	; 0x04
    122e:	35 81       	ldd	r19, Z+5	; 0x05
    1230:	46 81       	ldd	r20, Z+6	; 0x06
    1232:	57 81       	ldd	r21, Z+7	; 0x07
    1234:	14 96       	adiw	r26, 0x04	; 4
    1236:	ed 90       	ld	r14, X+
    1238:	fd 90       	ld	r15, X+
    123a:	0d 91       	ld	r16, X+
    123c:	1c 91       	ld	r17, X
    123e:	17 97       	sbiw	r26, 0x07	; 7
    1240:	c6 01       	movw	r24, r12
    1242:	86 19       	sub	r24, r6
    1244:	97 09       	sbc	r25, r7
    1246:	5c 01       	movw	r10, r24
    1248:	97 ff       	sbrs	r25, 7
    124a:	04 c0       	rjmp	.+8      	; 0x1254 <_fpadd_parts+0xae>
    124c:	aa 24       	eor	r10, r10
    124e:	bb 24       	eor	r11, r11
    1250:	a8 1a       	sub	r10, r24
    1252:	b9 0a       	sbc	r11, r25
    1254:	b0 e2       	ldi	r27, 0x20	; 32
    1256:	ab 16       	cp	r10, r27
    1258:	b1 04       	cpc	r11, r1
    125a:	0c f0       	brlt	.+2      	; 0x125e <_fpadd_parts+0xb8>
    125c:	61 c0       	rjmp	.+194    	; 0x1320 <_fpadd_parts+0x17a>
    125e:	18 16       	cp	r1, r24
    1260:	19 06       	cpc	r1, r25
    1262:	6c f5       	brge	.+90     	; 0x12be <_fpadd_parts+0x118>
    1264:	37 01       	movw	r6, r14
    1266:	48 01       	movw	r8, r16
    1268:	0a 2c       	mov	r0, r10
    126a:	04 c0       	rjmp	.+8      	; 0x1274 <_fpadd_parts+0xce>
    126c:	96 94       	lsr	r9
    126e:	87 94       	ror	r8
    1270:	77 94       	ror	r7
    1272:	67 94       	ror	r6
    1274:	0a 94       	dec	r0
    1276:	d2 f7       	brpl	.-12     	; 0x126c <_fpadd_parts+0xc6>
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	a0 e0       	ldi	r26, 0x00	; 0
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	0a 2c       	mov	r0, r10
    1282:	04 c0       	rjmp	.+8      	; 0x128c <_fpadd_parts+0xe6>
    1284:	88 0f       	add	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	aa 1f       	adc	r26, r26
    128a:	bb 1f       	adc	r27, r27
    128c:	0a 94       	dec	r0
    128e:	d2 f7       	brpl	.-12     	; 0x1284 <_fpadd_parts+0xde>
    1290:	01 97       	sbiw	r24, 0x01	; 1
    1292:	a1 09       	sbc	r26, r1
    1294:	b1 09       	sbc	r27, r1
    1296:	8e 21       	and	r24, r14
    1298:	9f 21       	and	r25, r15
    129a:	a0 23       	and	r26, r16
    129c:	b1 23       	and	r27, r17
    129e:	ee 24       	eor	r14, r14
    12a0:	ff 24       	eor	r15, r15
    12a2:	87 01       	movw	r16, r14
    12a4:	e3 94       	inc	r14
    12a6:	00 97       	sbiw	r24, 0x00	; 0
    12a8:	a1 05       	cpc	r26, r1
    12aa:	b1 05       	cpc	r27, r1
    12ac:	19 f4       	brne	.+6      	; 0x12b4 <_fpadd_parts+0x10e>
    12ae:	ee 24       	eor	r14, r14
    12b0:	ff 24       	eor	r15, r15
    12b2:	87 01       	movw	r16, r14
    12b4:	e6 28       	or	r14, r6
    12b6:	f7 28       	or	r15, r7
    12b8:	08 29       	or	r16, r8
    12ba:	19 29       	or	r17, r9
    12bc:	3c c0       	rjmp	.+120    	; 0x1336 <_fpadd_parts+0x190>
    12be:	00 97       	sbiw	r24, 0x00	; 0
    12c0:	d1 f1       	breq	.+116    	; 0x1336 <_fpadd_parts+0x190>
    12c2:	ca 0c       	add	r12, r10
    12c4:	db 1c       	adc	r13, r11
    12c6:	39 01       	movw	r6, r18
    12c8:	4a 01       	movw	r8, r20
    12ca:	0a 2c       	mov	r0, r10
    12cc:	04 c0       	rjmp	.+8      	; 0x12d6 <_fpadd_parts+0x130>
    12ce:	96 94       	lsr	r9
    12d0:	87 94       	ror	r8
    12d2:	77 94       	ror	r7
    12d4:	67 94       	ror	r6
    12d6:	0a 94       	dec	r0
    12d8:	d2 f7       	brpl	.-12     	; 0x12ce <_fpadd_parts+0x128>
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	a0 e0       	ldi	r26, 0x00	; 0
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	0a 2c       	mov	r0, r10
    12e4:	04 c0       	rjmp	.+8      	; 0x12ee <_fpadd_parts+0x148>
    12e6:	88 0f       	add	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	aa 1f       	adc	r26, r26
    12ec:	bb 1f       	adc	r27, r27
    12ee:	0a 94       	dec	r0
    12f0:	d2 f7       	brpl	.-12     	; 0x12e6 <_fpadd_parts+0x140>
    12f2:	01 97       	sbiw	r24, 0x01	; 1
    12f4:	a1 09       	sbc	r26, r1
    12f6:	b1 09       	sbc	r27, r1
    12f8:	82 23       	and	r24, r18
    12fa:	93 23       	and	r25, r19
    12fc:	a4 23       	and	r26, r20
    12fe:	b5 23       	and	r27, r21
    1300:	21 e0       	ldi	r18, 0x01	; 1
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	40 e0       	ldi	r20, 0x00	; 0
    1306:	50 e0       	ldi	r21, 0x00	; 0
    1308:	00 97       	sbiw	r24, 0x00	; 0
    130a:	a1 05       	cpc	r26, r1
    130c:	b1 05       	cpc	r27, r1
    130e:	19 f4       	brne	.+6      	; 0x1316 <_fpadd_parts+0x170>
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	a9 01       	movw	r20, r18
    1316:	26 29       	or	r18, r6
    1318:	37 29       	or	r19, r7
    131a:	48 29       	or	r20, r8
    131c:	59 29       	or	r21, r9
    131e:	0b c0       	rjmp	.+22     	; 0x1336 <_fpadd_parts+0x190>
    1320:	6c 14       	cp	r6, r12
    1322:	7d 04       	cpc	r7, r13
    1324:	24 f4       	brge	.+8      	; 0x132e <_fpadd_parts+0x188>
    1326:	ee 24       	eor	r14, r14
    1328:	ff 24       	eor	r15, r15
    132a:	87 01       	movw	r16, r14
    132c:	04 c0       	rjmp	.+8      	; 0x1336 <_fpadd_parts+0x190>
    132e:	63 01       	movw	r12, r6
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	a9 01       	movw	r20, r18
    1336:	81 81       	ldd	r24, Z+1	; 0x01
    1338:	fb 01       	movw	r30, r22
    133a:	91 81       	ldd	r25, Z+1	; 0x01
    133c:	89 17       	cp	r24, r25
    133e:	09 f4       	brne	.+2      	; 0x1342 <_fpadd_parts+0x19c>
    1340:	45 c0       	rjmp	.+138    	; 0x13cc <_fpadd_parts+0x226>
    1342:	88 23       	and	r24, r24
    1344:	49 f0       	breq	.+18     	; 0x1358 <_fpadd_parts+0x1b2>
    1346:	d8 01       	movw	r26, r16
    1348:	c7 01       	movw	r24, r14
    134a:	82 1b       	sub	r24, r18
    134c:	93 0b       	sbc	r25, r19
    134e:	a4 0b       	sbc	r26, r20
    1350:	b5 0b       	sbc	r27, r21
    1352:	9c 01       	movw	r18, r24
    1354:	ad 01       	movw	r20, r26
    1356:	04 c0       	rjmp	.+8      	; 0x1360 <_fpadd_parts+0x1ba>
    1358:	2e 19       	sub	r18, r14
    135a:	3f 09       	sbc	r19, r15
    135c:	40 0b       	sbc	r20, r16
    135e:	51 0b       	sbc	r21, r17
    1360:	57 fd       	sbrc	r21, 7
    1362:	04 c0       	rjmp	.+8      	; 0x136c <_fpadd_parts+0x1c6>
    1364:	19 82       	std	Y+1, r1	; 0x01
    1366:	db 82       	std	Y+3, r13	; 0x03
    1368:	ca 82       	std	Y+2, r12	; 0x02
    136a:	0b c0       	rjmp	.+22     	; 0x1382 <_fpadd_parts+0x1dc>
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	89 83       	std	Y+1, r24	; 0x01
    1370:	db 82       	std	Y+3, r13	; 0x03
    1372:	ca 82       	std	Y+2, r12	; 0x02
    1374:	50 95       	com	r21
    1376:	40 95       	com	r20
    1378:	30 95       	com	r19
    137a:	21 95       	neg	r18
    137c:	3f 4f       	sbci	r19, 0xFF	; 255
    137e:	4f 4f       	sbci	r20, 0xFF	; 255
    1380:	5f 4f       	sbci	r21, 0xFF	; 255
    1382:	2c 83       	std	Y+4, r18	; 0x04
    1384:	3d 83       	std	Y+5, r19	; 0x05
    1386:	4e 83       	std	Y+6, r20	; 0x06
    1388:	5f 83       	std	Y+7, r21	; 0x07
    138a:	0d c0       	rjmp	.+26     	; 0x13a6 <_fpadd_parts+0x200>
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	aa 1f       	adc	r26, r26
    1392:	bb 1f       	adc	r27, r27
    1394:	8c 83       	std	Y+4, r24	; 0x04
    1396:	9d 83       	std	Y+5, r25	; 0x05
    1398:	ae 83       	std	Y+6, r26	; 0x06
    139a:	bf 83       	std	Y+7, r27	; 0x07
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	9b 81       	ldd	r25, Y+3	; 0x03
    13a0:	01 97       	sbiw	r24, 0x01	; 1
    13a2:	9b 83       	std	Y+3, r25	; 0x03
    13a4:	8a 83       	std	Y+2, r24	; 0x02
    13a6:	8c 81       	ldd	r24, Y+4	; 0x04
    13a8:	9d 81       	ldd	r25, Y+5	; 0x05
    13aa:	ae 81       	ldd	r26, Y+6	; 0x06
    13ac:	bf 81       	ldd	r27, Y+7	; 0x07
    13ae:	9c 01       	movw	r18, r24
    13b0:	ad 01       	movw	r20, r26
    13b2:	21 50       	subi	r18, 0x01	; 1
    13b4:	30 40       	sbci	r19, 0x00	; 0
    13b6:	40 40       	sbci	r20, 0x00	; 0
    13b8:	50 40       	sbci	r21, 0x00	; 0
    13ba:	2f 3f       	cpi	r18, 0xFF	; 255
    13bc:	ef ef       	ldi	r30, 0xFF	; 255
    13be:	3e 07       	cpc	r19, r30
    13c0:	ef ef       	ldi	r30, 0xFF	; 255
    13c2:	4e 07       	cpc	r20, r30
    13c4:	ef e3       	ldi	r30, 0x3F	; 63
    13c6:	5e 07       	cpc	r21, r30
    13c8:	08 f3       	brcs	.-62     	; 0x138c <_fpadd_parts+0x1e6>
    13ca:	0b c0       	rjmp	.+22     	; 0x13e2 <_fpadd_parts+0x23c>
    13cc:	89 83       	std	Y+1, r24	; 0x01
    13ce:	db 82       	std	Y+3, r13	; 0x03
    13d0:	ca 82       	std	Y+2, r12	; 0x02
    13d2:	2e 0d       	add	r18, r14
    13d4:	3f 1d       	adc	r19, r15
    13d6:	40 1f       	adc	r20, r16
    13d8:	51 1f       	adc	r21, r17
    13da:	2c 83       	std	Y+4, r18	; 0x04
    13dc:	3d 83       	std	Y+5, r19	; 0x05
    13de:	4e 83       	std	Y+6, r20	; 0x06
    13e0:	5f 83       	std	Y+7, r21	; 0x07
    13e2:	83 e0       	ldi	r24, 0x03	; 3
    13e4:	88 83       	st	Y, r24
    13e6:	2c 81       	ldd	r18, Y+4	; 0x04
    13e8:	3d 81       	ldd	r19, Y+5	; 0x05
    13ea:	4e 81       	ldd	r20, Y+6	; 0x06
    13ec:	5f 81       	ldd	r21, Y+7	; 0x07
    13ee:	57 ff       	sbrs	r21, 7
    13f0:	1d c0       	rjmp	.+58     	; 0x142c <_fpadd_parts+0x286>
    13f2:	da 01       	movw	r26, r20
    13f4:	c9 01       	movw	r24, r18
    13f6:	81 70       	andi	r24, 0x01	; 1
    13f8:	90 70       	andi	r25, 0x00	; 0
    13fa:	a0 70       	andi	r26, 0x00	; 0
    13fc:	b0 70       	andi	r27, 0x00	; 0
    13fe:	56 95       	lsr	r21
    1400:	47 95       	ror	r20
    1402:	37 95       	ror	r19
    1404:	27 95       	ror	r18
    1406:	82 2b       	or	r24, r18
    1408:	93 2b       	or	r25, r19
    140a:	a4 2b       	or	r26, r20
    140c:	b5 2b       	or	r27, r21
    140e:	8c 83       	std	Y+4, r24	; 0x04
    1410:	9d 83       	std	Y+5, r25	; 0x05
    1412:	ae 83       	std	Y+6, r26	; 0x06
    1414:	bf 83       	std	Y+7, r27	; 0x07
    1416:	8a 81       	ldd	r24, Y+2	; 0x02
    1418:	9b 81       	ldd	r25, Y+3	; 0x03
    141a:	01 96       	adiw	r24, 0x01	; 1
    141c:	9b 83       	std	Y+3, r25	; 0x03
    141e:	8a 83       	std	Y+2, r24	; 0x02
    1420:	05 c0       	rjmp	.+10     	; 0x142c <_fpadd_parts+0x286>
    1422:	ea e1       	ldi	r30, 0x1A	; 26
    1424:	f1 e0       	ldi	r31, 0x01	; 1
    1426:	03 c0       	rjmp	.+6      	; 0x142e <_fpadd_parts+0x288>
    1428:	fb 01       	movw	r30, r22
    142a:	01 c0       	rjmp	.+2      	; 0x142e <_fpadd_parts+0x288>
    142c:	fe 01       	movw	r30, r28
    142e:	cf 01       	movw	r24, r30
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
    1434:	ee e0       	ldi	r30, 0x0E	; 14
    1436:	0c 94 2e 0e 	jmp	0x1c5c	; 0x1c5c <__epilogue_restores__+0x8>

0000143a <__addsf3>:
    143a:	a0 e2       	ldi	r26, 0x20	; 32
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	e3 e2       	ldi	r30, 0x23	; 35
    1440:	fa e0       	ldi	r31, 0x0A	; 10
    1442:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <__prologue_saves__+0x18>
    1446:	69 83       	std	Y+1, r22	; 0x01
    1448:	7a 83       	std	Y+2, r23	; 0x02
    144a:	8b 83       	std	Y+3, r24	; 0x03
    144c:	9c 83       	std	Y+4, r25	; 0x04
    144e:	2d 83       	std	Y+5, r18	; 0x05
    1450:	3e 83       	std	Y+6, r19	; 0x06
    1452:	4f 83       	std	Y+7, r20	; 0x07
    1454:	58 87       	std	Y+8, r21	; 0x08
    1456:	89 e0       	ldi	r24, 0x09	; 9
    1458:	e8 2e       	mov	r14, r24
    145a:	f1 2c       	mov	r15, r1
    145c:	ec 0e       	add	r14, r28
    145e:	fd 1e       	adc	r15, r29
    1460:	ce 01       	movw	r24, r28
    1462:	01 96       	adiw	r24, 0x01	; 1
    1464:	b7 01       	movw	r22, r14
    1466:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <__unpack_f>
    146a:	8e 01       	movw	r16, r28
    146c:	0f 5e       	subi	r16, 0xEF	; 239
    146e:	1f 4f       	sbci	r17, 0xFF	; 255
    1470:	ce 01       	movw	r24, r28
    1472:	05 96       	adiw	r24, 0x05	; 5
    1474:	b8 01       	movw	r22, r16
    1476:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <__unpack_f>
    147a:	c7 01       	movw	r24, r14
    147c:	b8 01       	movw	r22, r16
    147e:	ae 01       	movw	r20, r28
    1480:	47 5e       	subi	r20, 0xE7	; 231
    1482:	5f 4f       	sbci	r21, 0xFF	; 255
    1484:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <_fpadd_parts>
    1488:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__pack_f>
    148c:	a0 96       	adiw	r28, 0x20	; 32
    148e:	e6 e0       	ldi	r30, 0x06	; 6
    1490:	0c 94 36 0e 	jmp	0x1c6c	; 0x1c6c <__epilogue_restores__+0x18>

00001494 <__subsf3>:
    1494:	a0 e2       	ldi	r26, 0x20	; 32
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	e0 e5       	ldi	r30, 0x50	; 80
    149a:	fa e0       	ldi	r31, 0x0A	; 10
    149c:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <__prologue_saves__+0x18>
    14a0:	69 83       	std	Y+1, r22	; 0x01
    14a2:	7a 83       	std	Y+2, r23	; 0x02
    14a4:	8b 83       	std	Y+3, r24	; 0x03
    14a6:	9c 83       	std	Y+4, r25	; 0x04
    14a8:	2d 83       	std	Y+5, r18	; 0x05
    14aa:	3e 83       	std	Y+6, r19	; 0x06
    14ac:	4f 83       	std	Y+7, r20	; 0x07
    14ae:	58 87       	std	Y+8, r21	; 0x08
    14b0:	8e 01       	movw	r16, r28
    14b2:	07 5f       	subi	r16, 0xF7	; 247
    14b4:	1f 4f       	sbci	r17, 0xFF	; 255
    14b6:	ce 01       	movw	r24, r28
    14b8:	01 96       	adiw	r24, 0x01	; 1
    14ba:	b8 01       	movw	r22, r16
    14bc:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <__unpack_f>
    14c0:	91 e1       	ldi	r25, 0x11	; 17
    14c2:	e9 2e       	mov	r14, r25
    14c4:	f1 2c       	mov	r15, r1
    14c6:	ec 0e       	add	r14, r28
    14c8:	fd 1e       	adc	r15, r29
    14ca:	ce 01       	movw	r24, r28
    14cc:	05 96       	adiw	r24, 0x05	; 5
    14ce:	b7 01       	movw	r22, r14
    14d0:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <__unpack_f>
    14d4:	8a 89       	ldd	r24, Y+18	; 0x12
    14d6:	91 e0       	ldi	r25, 0x01	; 1
    14d8:	89 27       	eor	r24, r25
    14da:	8a 8b       	std	Y+18, r24	; 0x12
    14dc:	c8 01       	movw	r24, r16
    14de:	b7 01       	movw	r22, r14
    14e0:	ae 01       	movw	r20, r28
    14e2:	47 5e       	subi	r20, 0xE7	; 231
    14e4:	5f 4f       	sbci	r21, 0xFF	; 255
    14e6:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <_fpadd_parts>
    14ea:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__pack_f>
    14ee:	a0 96       	adiw	r28, 0x20	; 32
    14f0:	e6 e0       	ldi	r30, 0x06	; 6
    14f2:	0c 94 36 0e 	jmp	0x1c6c	; 0x1c6c <__epilogue_restores__+0x18>

000014f6 <__mulsf3>:
    14f6:	a0 e2       	ldi	r26, 0x20	; 32
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	e1 e8       	ldi	r30, 0x81	; 129
    14fc:	fa e0       	ldi	r31, 0x0A	; 10
    14fe:	0c 94 0e 0e 	jmp	0x1c1c	; 0x1c1c <__prologue_saves__>
    1502:	69 83       	std	Y+1, r22	; 0x01
    1504:	7a 83       	std	Y+2, r23	; 0x02
    1506:	8b 83       	std	Y+3, r24	; 0x03
    1508:	9c 83       	std	Y+4, r25	; 0x04
    150a:	2d 83       	std	Y+5, r18	; 0x05
    150c:	3e 83       	std	Y+6, r19	; 0x06
    150e:	4f 83       	std	Y+7, r20	; 0x07
    1510:	58 87       	std	Y+8, r21	; 0x08
    1512:	ce 01       	movw	r24, r28
    1514:	01 96       	adiw	r24, 0x01	; 1
    1516:	be 01       	movw	r22, r28
    1518:	67 5f       	subi	r22, 0xF7	; 247
    151a:	7f 4f       	sbci	r23, 0xFF	; 255
    151c:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <__unpack_f>
    1520:	ce 01       	movw	r24, r28
    1522:	05 96       	adiw	r24, 0x05	; 5
    1524:	be 01       	movw	r22, r28
    1526:	6f 5e       	subi	r22, 0xEF	; 239
    1528:	7f 4f       	sbci	r23, 0xFF	; 255
    152a:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <__unpack_f>
    152e:	99 85       	ldd	r25, Y+9	; 0x09
    1530:	92 30       	cpi	r25, 0x02	; 2
    1532:	78 f0       	brcs	.+30     	; 0x1552 <__mulsf3+0x5c>
    1534:	89 89       	ldd	r24, Y+17	; 0x11
    1536:	82 30       	cpi	r24, 0x02	; 2
    1538:	c0 f0       	brcs	.+48     	; 0x156a <__mulsf3+0x74>
    153a:	94 30       	cpi	r25, 0x04	; 4
    153c:	19 f4       	brne	.+6      	; 0x1544 <__mulsf3+0x4e>
    153e:	82 30       	cpi	r24, 0x02	; 2
    1540:	41 f4       	brne	.+16     	; 0x1552 <__mulsf3+0x5c>
    1542:	cb c0       	rjmp	.+406    	; 0x16da <__mulsf3+0x1e4>
    1544:	84 30       	cpi	r24, 0x04	; 4
    1546:	19 f4       	brne	.+6      	; 0x154e <__mulsf3+0x58>
    1548:	92 30       	cpi	r25, 0x02	; 2
    154a:	79 f4       	brne	.+30     	; 0x156a <__mulsf3+0x74>
    154c:	c6 c0       	rjmp	.+396    	; 0x16da <__mulsf3+0x1e4>
    154e:	92 30       	cpi	r25, 0x02	; 2
    1550:	51 f4       	brne	.+20     	; 0x1566 <__mulsf3+0x70>
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	2a 85       	ldd	r18, Y+10	; 0x0a
    1556:	9a 89       	ldd	r25, Y+18	; 0x12
    1558:	29 17       	cp	r18, r25
    155a:	09 f4       	brne	.+2      	; 0x155e <__mulsf3+0x68>
    155c:	80 e0       	ldi	r24, 0x00	; 0
    155e:	8a 87       	std	Y+10, r24	; 0x0a
    1560:	ce 01       	movw	r24, r28
    1562:	09 96       	adiw	r24, 0x09	; 9
    1564:	bc c0       	rjmp	.+376    	; 0x16de <__mulsf3+0x1e8>
    1566:	82 30       	cpi	r24, 0x02	; 2
    1568:	51 f4       	brne	.+20     	; 0x157e <__mulsf3+0x88>
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	2a 85       	ldd	r18, Y+10	; 0x0a
    156e:	9a 89       	ldd	r25, Y+18	; 0x12
    1570:	29 17       	cp	r18, r25
    1572:	09 f4       	brne	.+2      	; 0x1576 <__mulsf3+0x80>
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	8a 8b       	std	Y+18, r24	; 0x12
    1578:	ce 01       	movw	r24, r28
    157a:	41 96       	adiw	r24, 0x11	; 17
    157c:	b0 c0       	rjmp	.+352    	; 0x16de <__mulsf3+0x1e8>
    157e:	6d 84       	ldd	r6, Y+13	; 0x0d
    1580:	7e 84       	ldd	r7, Y+14	; 0x0e
    1582:	8f 84       	ldd	r8, Y+15	; 0x0f
    1584:	98 88       	ldd	r9, Y+16	; 0x10
    1586:	ed 88       	ldd	r14, Y+21	; 0x15
    1588:	fe 88       	ldd	r15, Y+22	; 0x16
    158a:	0f 89       	ldd	r16, Y+23	; 0x17
    158c:	18 8d       	ldd	r17, Y+24	; 0x18
    158e:	e0 e2       	ldi	r30, 0x20	; 32
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	dc 01       	movw	r26, r24
    1598:	aa 24       	eor	r10, r10
    159a:	bb 24       	eor	r11, r11
    159c:	65 01       	movw	r12, r10
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	a9 01       	movw	r20, r18
    15a4:	b3 01       	movw	r22, r6
    15a6:	61 70       	andi	r22, 0x01	; 1
    15a8:	70 70       	andi	r23, 0x00	; 0
    15aa:	61 15       	cp	r22, r1
    15ac:	71 05       	cpc	r23, r1
    15ae:	d1 f0       	breq	.+52     	; 0x15e4 <__mulsf3+0xee>
    15b0:	2e 0d       	add	r18, r14
    15b2:	3f 1d       	adc	r19, r15
    15b4:	40 1f       	adc	r20, r16
    15b6:	51 1f       	adc	r21, r17
    15b8:	15 01       	movw	r2, r10
    15ba:	26 01       	movw	r4, r12
    15bc:	28 0e       	add	r2, r24
    15be:	39 1e       	adc	r3, r25
    15c0:	4a 1e       	adc	r4, r26
    15c2:	5b 1e       	adc	r5, r27
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	a0 e0       	ldi	r26, 0x00	; 0
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	2e 15       	cp	r18, r14
    15ce:	3f 05       	cpc	r19, r15
    15d0:	40 07       	cpc	r20, r16
    15d2:	51 07       	cpc	r21, r17
    15d4:	18 f0       	brcs	.+6      	; 0x15dc <__mulsf3+0xe6>
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	dc 01       	movw	r26, r24
    15dc:	82 0d       	add	r24, r2
    15de:	93 1d       	adc	r25, r3
    15e0:	a4 1d       	adc	r26, r4
    15e2:	b5 1d       	adc	r27, r5
    15e4:	aa 0c       	add	r10, r10
    15e6:	bb 1c       	adc	r11, r11
    15e8:	cc 1c       	adc	r12, r12
    15ea:	dd 1c       	adc	r13, r13
    15ec:	17 ff       	sbrs	r17, 7
    15ee:	09 c0       	rjmp	.+18     	; 0x1602 <__mulsf3+0x10c>
    15f0:	61 e0       	ldi	r22, 0x01	; 1
    15f2:	26 2e       	mov	r2, r22
    15f4:	31 2c       	mov	r3, r1
    15f6:	41 2c       	mov	r4, r1
    15f8:	51 2c       	mov	r5, r1
    15fa:	a2 28       	or	r10, r2
    15fc:	b3 28       	or	r11, r3
    15fe:	c4 28       	or	r12, r4
    1600:	d5 28       	or	r13, r5
    1602:	31 97       	sbiw	r30, 0x01	; 1
    1604:	49 f0       	breq	.+18     	; 0x1618 <__mulsf3+0x122>
    1606:	ee 0c       	add	r14, r14
    1608:	ff 1c       	adc	r15, r15
    160a:	00 1f       	adc	r16, r16
    160c:	11 1f       	adc	r17, r17
    160e:	96 94       	lsr	r9
    1610:	87 94       	ror	r8
    1612:	77 94       	ror	r7
    1614:	67 94       	ror	r6
    1616:	c6 cf       	rjmp	.-116    	; 0x15a4 <__mulsf3+0xae>
    1618:	6b 89       	ldd	r22, Y+19	; 0x13
    161a:	7c 89       	ldd	r23, Y+20	; 0x14
    161c:	eb 85       	ldd	r30, Y+11	; 0x0b
    161e:	fc 85       	ldd	r31, Y+12	; 0x0c
    1620:	6e 0f       	add	r22, r30
    1622:	7f 1f       	adc	r23, r31
    1624:	6e 5f       	subi	r22, 0xFE	; 254
    1626:	7f 4f       	sbci	r23, 0xFF	; 255
    1628:	7c 8f       	std	Y+28, r23	; 0x1c
    162a:	6b 8f       	std	Y+27, r22	; 0x1b
    162c:	61 e0       	ldi	r22, 0x01	; 1
    162e:	ea 85       	ldd	r30, Y+10	; 0x0a
    1630:	7a 89       	ldd	r23, Y+18	; 0x12
    1632:	e7 17       	cp	r30, r23
    1634:	09 f4       	brne	.+2      	; 0x1638 <__mulsf3+0x142>
    1636:	60 e0       	ldi	r22, 0x00	; 0
    1638:	6a 8f       	std	Y+26, r22	; 0x1a
    163a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    163c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    163e:	10 c0       	rjmp	.+32     	; 0x1660 <__mulsf3+0x16a>
    1640:	fc 01       	movw	r30, r24
    1642:	e1 70       	andi	r30, 0x01	; 1
    1644:	f0 70       	andi	r31, 0x00	; 0
    1646:	30 97       	sbiw	r30, 0x00	; 0
    1648:	29 f0       	breq	.+10     	; 0x1654 <__mulsf3+0x15e>
    164a:	56 95       	lsr	r21
    164c:	47 95       	ror	r20
    164e:	37 95       	ror	r19
    1650:	27 95       	ror	r18
    1652:	50 68       	ori	r21, 0x80	; 128
    1654:	b6 95       	lsr	r27
    1656:	a7 95       	ror	r26
    1658:	97 95       	ror	r25
    165a:	87 95       	ror	r24
    165c:	6f 5f       	subi	r22, 0xFF	; 255
    165e:	7f 4f       	sbci	r23, 0xFF	; 255
    1660:	b7 fd       	sbrc	r27, 7
    1662:	ee cf       	rjmp	.-36     	; 0x1640 <__mulsf3+0x14a>
    1664:	0c c0       	rjmp	.+24     	; 0x167e <__mulsf3+0x188>
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	aa 1f       	adc	r26, r26
    166c:	bb 1f       	adc	r27, r27
    166e:	57 fd       	sbrc	r21, 7
    1670:	81 60       	ori	r24, 0x01	; 1
    1672:	22 0f       	add	r18, r18
    1674:	33 1f       	adc	r19, r19
    1676:	44 1f       	adc	r20, r20
    1678:	55 1f       	adc	r21, r21
    167a:	61 50       	subi	r22, 0x01	; 1
    167c:	70 40       	sbci	r23, 0x00	; 0
    167e:	80 30       	cpi	r24, 0x00	; 0
    1680:	e0 e0       	ldi	r30, 0x00	; 0
    1682:	9e 07       	cpc	r25, r30
    1684:	e0 e0       	ldi	r30, 0x00	; 0
    1686:	ae 07       	cpc	r26, r30
    1688:	e0 e4       	ldi	r30, 0x40	; 64
    168a:	be 07       	cpc	r27, r30
    168c:	60 f3       	brcs	.-40     	; 0x1666 <__mulsf3+0x170>
    168e:	6b 8f       	std	Y+27, r22	; 0x1b
    1690:	7c 8f       	std	Y+28, r23	; 0x1c
    1692:	6f e7       	ldi	r22, 0x7F	; 127
    1694:	e6 2e       	mov	r14, r22
    1696:	f1 2c       	mov	r15, r1
    1698:	01 2d       	mov	r16, r1
    169a:	11 2d       	mov	r17, r1
    169c:	e8 22       	and	r14, r24
    169e:	f9 22       	and	r15, r25
    16a0:	0a 23       	and	r16, r26
    16a2:	1b 23       	and	r17, r27
    16a4:	60 e4       	ldi	r22, 0x40	; 64
    16a6:	e6 16       	cp	r14, r22
    16a8:	f1 04       	cpc	r15, r1
    16aa:	01 05       	cpc	r16, r1
    16ac:	11 05       	cpc	r17, r1
    16ae:	61 f4       	brne	.+24     	; 0x16c8 <__mulsf3+0x1d2>
    16b0:	87 fd       	sbrc	r24, 7
    16b2:	0a c0       	rjmp	.+20     	; 0x16c8 <__mulsf3+0x1d2>
    16b4:	21 15       	cp	r18, r1
    16b6:	31 05       	cpc	r19, r1
    16b8:	41 05       	cpc	r20, r1
    16ba:	51 05       	cpc	r21, r1
    16bc:	29 f0       	breq	.+10     	; 0x16c8 <__mulsf3+0x1d2>
    16be:	80 5c       	subi	r24, 0xC0	; 192
    16c0:	9f 4f       	sbci	r25, 0xFF	; 255
    16c2:	af 4f       	sbci	r26, 0xFF	; 255
    16c4:	bf 4f       	sbci	r27, 0xFF	; 255
    16c6:	80 78       	andi	r24, 0x80	; 128
    16c8:	8d 8f       	std	Y+29, r24	; 0x1d
    16ca:	9e 8f       	std	Y+30, r25	; 0x1e
    16cc:	af 8f       	std	Y+31, r26	; 0x1f
    16ce:	b8 a3       	std	Y+32, r27	; 0x20
    16d0:	83 e0       	ldi	r24, 0x03	; 3
    16d2:	89 8f       	std	Y+25, r24	; 0x19
    16d4:	ce 01       	movw	r24, r28
    16d6:	49 96       	adiw	r24, 0x19	; 25
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <__mulsf3+0x1e8>
    16da:	8a e1       	ldi	r24, 0x1A	; 26
    16dc:	91 e0       	ldi	r25, 0x01	; 1
    16de:	0e 94 57 0c 	call	0x18ae	; 0x18ae <__pack_f>
    16e2:	a0 96       	adiw	r28, 0x20	; 32
    16e4:	e2 e1       	ldi	r30, 0x12	; 18
    16e6:	0c 94 2a 0e 	jmp	0x1c54	; 0x1c54 <__epilogue_restores__>

000016ea <__gtsf2>:
    16ea:	a8 e1       	ldi	r26, 0x18	; 24
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	eb e7       	ldi	r30, 0x7B	; 123
    16f0:	fb e0       	ldi	r31, 0x0B	; 11
    16f2:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <__prologue_saves__+0x18>
    16f6:	69 83       	std	Y+1, r22	; 0x01
    16f8:	7a 83       	std	Y+2, r23	; 0x02
    16fa:	8b 83       	std	Y+3, r24	; 0x03
    16fc:	9c 83       	std	Y+4, r25	; 0x04
    16fe:	2d 83       	std	Y+5, r18	; 0x05
    1700:	3e 83       	std	Y+6, r19	; 0x06
    1702:	4f 83       	std	Y+7, r20	; 0x07
    1704:	58 87       	std	Y+8, r21	; 0x08
    1706:	8e 01       	movw	r16, r28
    1708:	07 5f       	subi	r16, 0xF7	; 247
    170a:	1f 4f       	sbci	r17, 0xFF	; 255
    170c:	ce 01       	movw	r24, r28
    170e:	01 96       	adiw	r24, 0x01	; 1
    1710:	b8 01       	movw	r22, r16
    1712:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <__unpack_f>
    1716:	81 e1       	ldi	r24, 0x11	; 17
    1718:	e8 2e       	mov	r14, r24
    171a:	f1 2c       	mov	r15, r1
    171c:	ec 0e       	add	r14, r28
    171e:	fd 1e       	adc	r15, r29
    1720:	ce 01       	movw	r24, r28
    1722:	05 96       	adiw	r24, 0x05	; 5
    1724:	b7 01       	movw	r22, r14
    1726:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <__unpack_f>
    172a:	89 85       	ldd	r24, Y+9	; 0x09
    172c:	82 30       	cpi	r24, 0x02	; 2
    172e:	40 f0       	brcs	.+16     	; 0x1740 <__gtsf2+0x56>
    1730:	89 89       	ldd	r24, Y+17	; 0x11
    1732:	82 30       	cpi	r24, 0x02	; 2
    1734:	28 f0       	brcs	.+10     	; 0x1740 <__gtsf2+0x56>
    1736:	c8 01       	movw	r24, r16
    1738:	b7 01       	movw	r22, r14
    173a:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__fpcmp_parts_f>
    173e:	01 c0       	rjmp	.+2      	; 0x1742 <__gtsf2+0x58>
    1740:	8f ef       	ldi	r24, 0xFF	; 255
    1742:	68 96       	adiw	r28, 0x18	; 24
    1744:	e6 e0       	ldi	r30, 0x06	; 6
    1746:	0c 94 36 0e 	jmp	0x1c6c	; 0x1c6c <__epilogue_restores__+0x18>

0000174a <__gesf2>:
    174a:	a8 e1       	ldi	r26, 0x18	; 24
    174c:	b0 e0       	ldi	r27, 0x00	; 0
    174e:	eb ea       	ldi	r30, 0xAB	; 171
    1750:	fb e0       	ldi	r31, 0x0B	; 11
    1752:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <__prologue_saves__+0x18>
    1756:	69 83       	std	Y+1, r22	; 0x01
    1758:	7a 83       	std	Y+2, r23	; 0x02
    175a:	8b 83       	std	Y+3, r24	; 0x03
    175c:	9c 83       	std	Y+4, r25	; 0x04
    175e:	2d 83       	std	Y+5, r18	; 0x05
    1760:	3e 83       	std	Y+6, r19	; 0x06
    1762:	4f 83       	std	Y+7, r20	; 0x07
    1764:	58 87       	std	Y+8, r21	; 0x08
    1766:	8e 01       	movw	r16, r28
    1768:	07 5f       	subi	r16, 0xF7	; 247
    176a:	1f 4f       	sbci	r17, 0xFF	; 255
    176c:	ce 01       	movw	r24, r28
    176e:	01 96       	adiw	r24, 0x01	; 1
    1770:	b8 01       	movw	r22, r16
    1772:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <__unpack_f>
    1776:	81 e1       	ldi	r24, 0x11	; 17
    1778:	e8 2e       	mov	r14, r24
    177a:	f1 2c       	mov	r15, r1
    177c:	ec 0e       	add	r14, r28
    177e:	fd 1e       	adc	r15, r29
    1780:	ce 01       	movw	r24, r28
    1782:	05 96       	adiw	r24, 0x05	; 5
    1784:	b7 01       	movw	r22, r14
    1786:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <__unpack_f>
    178a:	89 85       	ldd	r24, Y+9	; 0x09
    178c:	82 30       	cpi	r24, 0x02	; 2
    178e:	40 f0       	brcs	.+16     	; 0x17a0 <__gesf2+0x56>
    1790:	89 89       	ldd	r24, Y+17	; 0x11
    1792:	82 30       	cpi	r24, 0x02	; 2
    1794:	28 f0       	brcs	.+10     	; 0x17a0 <__gesf2+0x56>
    1796:	c8 01       	movw	r24, r16
    1798:	b7 01       	movw	r22, r14
    179a:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__fpcmp_parts_f>
    179e:	01 c0       	rjmp	.+2      	; 0x17a2 <__gesf2+0x58>
    17a0:	8f ef       	ldi	r24, 0xFF	; 255
    17a2:	68 96       	adiw	r28, 0x18	; 24
    17a4:	e6 e0       	ldi	r30, 0x06	; 6
    17a6:	0c 94 36 0e 	jmp	0x1c6c	; 0x1c6c <__epilogue_restores__+0x18>

000017aa <__ltsf2>:
    17aa:	a8 e1       	ldi	r26, 0x18	; 24
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	eb ed       	ldi	r30, 0xDB	; 219
    17b0:	fb e0       	ldi	r31, 0x0B	; 11
    17b2:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <__prologue_saves__+0x18>
    17b6:	69 83       	std	Y+1, r22	; 0x01
    17b8:	7a 83       	std	Y+2, r23	; 0x02
    17ba:	8b 83       	std	Y+3, r24	; 0x03
    17bc:	9c 83       	std	Y+4, r25	; 0x04
    17be:	2d 83       	std	Y+5, r18	; 0x05
    17c0:	3e 83       	std	Y+6, r19	; 0x06
    17c2:	4f 83       	std	Y+7, r20	; 0x07
    17c4:	58 87       	std	Y+8, r21	; 0x08
    17c6:	8e 01       	movw	r16, r28
    17c8:	07 5f       	subi	r16, 0xF7	; 247
    17ca:	1f 4f       	sbci	r17, 0xFF	; 255
    17cc:	ce 01       	movw	r24, r28
    17ce:	01 96       	adiw	r24, 0x01	; 1
    17d0:	b8 01       	movw	r22, r16
    17d2:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <__unpack_f>
    17d6:	81 e1       	ldi	r24, 0x11	; 17
    17d8:	e8 2e       	mov	r14, r24
    17da:	f1 2c       	mov	r15, r1
    17dc:	ec 0e       	add	r14, r28
    17de:	fd 1e       	adc	r15, r29
    17e0:	ce 01       	movw	r24, r28
    17e2:	05 96       	adiw	r24, 0x05	; 5
    17e4:	b7 01       	movw	r22, r14
    17e6:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <__unpack_f>
    17ea:	89 85       	ldd	r24, Y+9	; 0x09
    17ec:	82 30       	cpi	r24, 0x02	; 2
    17ee:	40 f0       	brcs	.+16     	; 0x1800 <__ltsf2+0x56>
    17f0:	89 89       	ldd	r24, Y+17	; 0x11
    17f2:	82 30       	cpi	r24, 0x02	; 2
    17f4:	28 f0       	brcs	.+10     	; 0x1800 <__ltsf2+0x56>
    17f6:	c8 01       	movw	r24, r16
    17f8:	b7 01       	movw	r22, r14
    17fa:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <__fpcmp_parts_f>
    17fe:	01 c0       	rjmp	.+2      	; 0x1802 <__ltsf2+0x58>
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	68 96       	adiw	r28, 0x18	; 24
    1804:	e6 e0       	ldi	r30, 0x06	; 6
    1806:	0c 94 36 0e 	jmp	0x1c6c	; 0x1c6c <__epilogue_restores__+0x18>

0000180a <__fixsfsi>:
    180a:	ac e0       	ldi	r26, 0x0C	; 12
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	eb e0       	ldi	r30, 0x0B	; 11
    1810:	fc e0       	ldi	r31, 0x0C	; 12
    1812:	0c 94 1e 0e 	jmp	0x1c3c	; 0x1c3c <__prologue_saves__+0x20>
    1816:	69 83       	std	Y+1, r22	; 0x01
    1818:	7a 83       	std	Y+2, r23	; 0x02
    181a:	8b 83       	std	Y+3, r24	; 0x03
    181c:	9c 83       	std	Y+4, r25	; 0x04
    181e:	ce 01       	movw	r24, r28
    1820:	01 96       	adiw	r24, 0x01	; 1
    1822:	be 01       	movw	r22, r28
    1824:	6b 5f       	subi	r22, 0xFB	; 251
    1826:	7f 4f       	sbci	r23, 0xFF	; 255
    1828:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <__unpack_f>
    182c:	8d 81       	ldd	r24, Y+5	; 0x05
    182e:	82 30       	cpi	r24, 0x02	; 2
    1830:	81 f1       	breq	.+96     	; 0x1892 <__fixsfsi+0x88>
    1832:	82 30       	cpi	r24, 0x02	; 2
    1834:	70 f1       	brcs	.+92     	; 0x1892 <__fixsfsi+0x88>
    1836:	84 30       	cpi	r24, 0x04	; 4
    1838:	21 f4       	brne	.+8      	; 0x1842 <__fixsfsi+0x38>
    183a:	8e 81       	ldd	r24, Y+6	; 0x06
    183c:	88 23       	and	r24, r24
    183e:	69 f1       	breq	.+90     	; 0x189a <__fixsfsi+0x90>
    1840:	0a c0       	rjmp	.+20     	; 0x1856 <__fixsfsi+0x4c>
    1842:	2f 81       	ldd	r18, Y+7	; 0x07
    1844:	38 85       	ldd	r19, Y+8	; 0x08
    1846:	37 fd       	sbrc	r19, 7
    1848:	24 c0       	rjmp	.+72     	; 0x1892 <__fixsfsi+0x88>
    184a:	6e 81       	ldd	r22, Y+6	; 0x06
    184c:	2f 31       	cpi	r18, 0x1F	; 31
    184e:	31 05       	cpc	r19, r1
    1850:	3c f0       	brlt	.+14     	; 0x1860 <__fixsfsi+0x56>
    1852:	66 23       	and	r22, r22
    1854:	11 f1       	breq	.+68     	; 0x189a <__fixsfsi+0x90>
    1856:	20 e0       	ldi	r18, 0x00	; 0
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	40 e0       	ldi	r20, 0x00	; 0
    185c:	50 e8       	ldi	r21, 0x80	; 128
    185e:	21 c0       	rjmp	.+66     	; 0x18a2 <__fixsfsi+0x98>
    1860:	8e e1       	ldi	r24, 0x1E	; 30
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	82 1b       	sub	r24, r18
    1866:	93 0b       	sbc	r25, r19
    1868:	29 85       	ldd	r18, Y+9	; 0x09
    186a:	3a 85       	ldd	r19, Y+10	; 0x0a
    186c:	4b 85       	ldd	r20, Y+11	; 0x0b
    186e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1870:	04 c0       	rjmp	.+8      	; 0x187a <__fixsfsi+0x70>
    1872:	56 95       	lsr	r21
    1874:	47 95       	ror	r20
    1876:	37 95       	ror	r19
    1878:	27 95       	ror	r18
    187a:	8a 95       	dec	r24
    187c:	d2 f7       	brpl	.-12     	; 0x1872 <__fixsfsi+0x68>
    187e:	66 23       	and	r22, r22
    1880:	81 f0       	breq	.+32     	; 0x18a2 <__fixsfsi+0x98>
    1882:	50 95       	com	r21
    1884:	40 95       	com	r20
    1886:	30 95       	com	r19
    1888:	21 95       	neg	r18
    188a:	3f 4f       	sbci	r19, 0xFF	; 255
    188c:	4f 4f       	sbci	r20, 0xFF	; 255
    188e:	5f 4f       	sbci	r21, 0xFF	; 255
    1890:	08 c0       	rjmp	.+16     	; 0x18a2 <__fixsfsi+0x98>
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	a9 01       	movw	r20, r18
    1898:	04 c0       	rjmp	.+8      	; 0x18a2 <__fixsfsi+0x98>
    189a:	2f ef       	ldi	r18, 0xFF	; 255
    189c:	3f ef       	ldi	r19, 0xFF	; 255
    189e:	4f ef       	ldi	r20, 0xFF	; 255
    18a0:	5f e7       	ldi	r21, 0x7F	; 127
    18a2:	b9 01       	movw	r22, r18
    18a4:	ca 01       	movw	r24, r20
    18a6:	2c 96       	adiw	r28, 0x0c	; 12
    18a8:	e2 e0       	ldi	r30, 0x02	; 2
    18aa:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__epilogue_restores__+0x20>

000018ae <__pack_f>:
    18ae:	ef 92       	push	r14
    18b0:	ff 92       	push	r15
    18b2:	0f 93       	push	r16
    18b4:	1f 93       	push	r17
    18b6:	cf 93       	push	r28
    18b8:	df 93       	push	r29
    18ba:	fc 01       	movw	r30, r24
    18bc:	24 81       	ldd	r18, Z+4	; 0x04
    18be:	35 81       	ldd	r19, Z+5	; 0x05
    18c0:	46 81       	ldd	r20, Z+6	; 0x06
    18c2:	57 81       	ldd	r21, Z+7	; 0x07
    18c4:	61 81       	ldd	r22, Z+1	; 0x01
    18c6:	80 81       	ld	r24, Z
    18c8:	82 30       	cpi	r24, 0x02	; 2
    18ca:	20 f4       	brcc	.+8      	; 0x18d4 <__pack_f+0x26>
    18cc:	40 61       	ori	r20, 0x10	; 16
    18ce:	ef ef       	ldi	r30, 0xFF	; 255
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	a3 c0       	rjmp	.+326    	; 0x1a1a <__pack_f+0x16c>
    18d4:	84 30       	cpi	r24, 0x04	; 4
    18d6:	09 f4       	brne	.+2      	; 0x18da <__pack_f+0x2c>
    18d8:	9b c0       	rjmp	.+310    	; 0x1a10 <__pack_f+0x162>
    18da:	82 30       	cpi	r24, 0x02	; 2
    18dc:	09 f4       	brne	.+2      	; 0x18e0 <__pack_f+0x32>
    18de:	92 c0       	rjmp	.+292    	; 0x1a04 <__pack_f+0x156>
    18e0:	21 15       	cp	r18, r1
    18e2:	31 05       	cpc	r19, r1
    18e4:	41 05       	cpc	r20, r1
    18e6:	51 05       	cpc	r21, r1
    18e8:	09 f4       	brne	.+2      	; 0x18ec <__pack_f+0x3e>
    18ea:	8f c0       	rjmp	.+286    	; 0x1a0a <__pack_f+0x15c>
    18ec:	02 80       	ldd	r0, Z+2	; 0x02
    18ee:	f3 81       	ldd	r31, Z+3	; 0x03
    18f0:	e0 2d       	mov	r30, r0
    18f2:	8f ef       	ldi	r24, 0xFF	; 255
    18f4:	e2 38       	cpi	r30, 0x82	; 130
    18f6:	f8 07       	cpc	r31, r24
    18f8:	0c f0       	brlt	.+2      	; 0x18fc <__pack_f+0x4e>
    18fa:	5a c0       	rjmp	.+180    	; 0x19b0 <__pack_f+0x102>
    18fc:	c2 e8       	ldi	r28, 0x82	; 130
    18fe:	df ef       	ldi	r29, 0xFF	; 255
    1900:	ce 1b       	sub	r28, r30
    1902:	df 0b       	sbc	r29, r31
    1904:	ca 31       	cpi	r28, 0x1A	; 26
    1906:	d1 05       	cpc	r29, r1
    1908:	6c f5       	brge	.+90     	; 0x1964 <__pack_f+0xb6>
    190a:	79 01       	movw	r14, r18
    190c:	8a 01       	movw	r16, r20
    190e:	0c 2e       	mov	r0, r28
    1910:	04 c0       	rjmp	.+8      	; 0x191a <__pack_f+0x6c>
    1912:	16 95       	lsr	r17
    1914:	07 95       	ror	r16
    1916:	f7 94       	ror	r15
    1918:	e7 94       	ror	r14
    191a:	0a 94       	dec	r0
    191c:	d2 f7       	brpl	.-12     	; 0x1912 <__pack_f+0x64>
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	a0 e0       	ldi	r26, 0x00	; 0
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	0c 2e       	mov	r0, r28
    1928:	04 c0       	rjmp	.+8      	; 0x1932 <__pack_f+0x84>
    192a:	88 0f       	add	r24, r24
    192c:	99 1f       	adc	r25, r25
    192e:	aa 1f       	adc	r26, r26
    1930:	bb 1f       	adc	r27, r27
    1932:	0a 94       	dec	r0
    1934:	d2 f7       	brpl	.-12     	; 0x192a <__pack_f+0x7c>
    1936:	01 97       	sbiw	r24, 0x01	; 1
    1938:	a1 09       	sbc	r26, r1
    193a:	b1 09       	sbc	r27, r1
    193c:	82 23       	and	r24, r18
    193e:	93 23       	and	r25, r19
    1940:	a4 23       	and	r26, r20
    1942:	b5 23       	and	r27, r21
    1944:	21 e0       	ldi	r18, 0x01	; 1
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	40 e0       	ldi	r20, 0x00	; 0
    194a:	50 e0       	ldi	r21, 0x00	; 0
    194c:	00 97       	sbiw	r24, 0x00	; 0
    194e:	a1 05       	cpc	r26, r1
    1950:	b1 05       	cpc	r27, r1
    1952:	19 f4       	brne	.+6      	; 0x195a <__pack_f+0xac>
    1954:	20 e0       	ldi	r18, 0x00	; 0
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	a9 01       	movw	r20, r18
    195a:	2e 29       	or	r18, r14
    195c:	3f 29       	or	r19, r15
    195e:	40 2b       	or	r20, r16
    1960:	51 2b       	or	r21, r17
    1962:	03 c0       	rjmp	.+6      	; 0x196a <__pack_f+0xbc>
    1964:	20 e0       	ldi	r18, 0x00	; 0
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	a9 01       	movw	r20, r18
    196a:	da 01       	movw	r26, r20
    196c:	c9 01       	movw	r24, r18
    196e:	8f 77       	andi	r24, 0x7F	; 127
    1970:	90 70       	andi	r25, 0x00	; 0
    1972:	a0 70       	andi	r26, 0x00	; 0
    1974:	b0 70       	andi	r27, 0x00	; 0
    1976:	80 34       	cpi	r24, 0x40	; 64
    1978:	91 05       	cpc	r25, r1
    197a:	a1 05       	cpc	r26, r1
    197c:	b1 05       	cpc	r27, r1
    197e:	39 f4       	brne	.+14     	; 0x198e <__pack_f+0xe0>
    1980:	27 ff       	sbrs	r18, 7
    1982:	09 c0       	rjmp	.+18     	; 0x1996 <__pack_f+0xe8>
    1984:	20 5c       	subi	r18, 0xC0	; 192
    1986:	3f 4f       	sbci	r19, 0xFF	; 255
    1988:	4f 4f       	sbci	r20, 0xFF	; 255
    198a:	5f 4f       	sbci	r21, 0xFF	; 255
    198c:	04 c0       	rjmp	.+8      	; 0x1996 <__pack_f+0xe8>
    198e:	21 5c       	subi	r18, 0xC1	; 193
    1990:	3f 4f       	sbci	r19, 0xFF	; 255
    1992:	4f 4f       	sbci	r20, 0xFF	; 255
    1994:	5f 4f       	sbci	r21, 0xFF	; 255
    1996:	e1 e0       	ldi	r30, 0x01	; 1
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	20 30       	cpi	r18, 0x00	; 0
    199c:	80 e0       	ldi	r24, 0x00	; 0
    199e:	38 07       	cpc	r19, r24
    19a0:	80 e0       	ldi	r24, 0x00	; 0
    19a2:	48 07       	cpc	r20, r24
    19a4:	80 e4       	ldi	r24, 0x40	; 64
    19a6:	58 07       	cpc	r21, r24
    19a8:	28 f5       	brcc	.+74     	; 0x19f4 <__pack_f+0x146>
    19aa:	e0 e0       	ldi	r30, 0x00	; 0
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	22 c0       	rjmp	.+68     	; 0x19f4 <__pack_f+0x146>
    19b0:	e0 38       	cpi	r30, 0x80	; 128
    19b2:	f1 05       	cpc	r31, r1
    19b4:	6c f5       	brge	.+90     	; 0x1a10 <__pack_f+0x162>
    19b6:	e1 58       	subi	r30, 0x81	; 129
    19b8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ba:	da 01       	movw	r26, r20
    19bc:	c9 01       	movw	r24, r18
    19be:	8f 77       	andi	r24, 0x7F	; 127
    19c0:	90 70       	andi	r25, 0x00	; 0
    19c2:	a0 70       	andi	r26, 0x00	; 0
    19c4:	b0 70       	andi	r27, 0x00	; 0
    19c6:	80 34       	cpi	r24, 0x40	; 64
    19c8:	91 05       	cpc	r25, r1
    19ca:	a1 05       	cpc	r26, r1
    19cc:	b1 05       	cpc	r27, r1
    19ce:	39 f4       	brne	.+14     	; 0x19de <__pack_f+0x130>
    19d0:	27 ff       	sbrs	r18, 7
    19d2:	09 c0       	rjmp	.+18     	; 0x19e6 <__pack_f+0x138>
    19d4:	20 5c       	subi	r18, 0xC0	; 192
    19d6:	3f 4f       	sbci	r19, 0xFF	; 255
    19d8:	4f 4f       	sbci	r20, 0xFF	; 255
    19da:	5f 4f       	sbci	r21, 0xFF	; 255
    19dc:	04 c0       	rjmp	.+8      	; 0x19e6 <__pack_f+0x138>
    19de:	21 5c       	subi	r18, 0xC1	; 193
    19e0:	3f 4f       	sbci	r19, 0xFF	; 255
    19e2:	4f 4f       	sbci	r20, 0xFF	; 255
    19e4:	5f 4f       	sbci	r21, 0xFF	; 255
    19e6:	57 ff       	sbrs	r21, 7
    19e8:	05 c0       	rjmp	.+10     	; 0x19f4 <__pack_f+0x146>
    19ea:	56 95       	lsr	r21
    19ec:	47 95       	ror	r20
    19ee:	37 95       	ror	r19
    19f0:	27 95       	ror	r18
    19f2:	31 96       	adiw	r30, 0x01	; 1
    19f4:	87 e0       	ldi	r24, 0x07	; 7
    19f6:	56 95       	lsr	r21
    19f8:	47 95       	ror	r20
    19fa:	37 95       	ror	r19
    19fc:	27 95       	ror	r18
    19fe:	8a 95       	dec	r24
    1a00:	d1 f7       	brne	.-12     	; 0x19f6 <__pack_f+0x148>
    1a02:	0b c0       	rjmp	.+22     	; 0x1a1a <__pack_f+0x16c>
    1a04:	e0 e0       	ldi	r30, 0x00	; 0
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	05 c0       	rjmp	.+10     	; 0x1a14 <__pack_f+0x166>
    1a0a:	e0 e0       	ldi	r30, 0x00	; 0
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	05 c0       	rjmp	.+10     	; 0x1a1a <__pack_f+0x16c>
    1a10:	ef ef       	ldi	r30, 0xFF	; 255
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	a9 01       	movw	r20, r18
    1a1a:	8e 2f       	mov	r24, r30
    1a1c:	87 95       	ror	r24
    1a1e:	88 27       	eor	r24, r24
    1a20:	87 95       	ror	r24
    1a22:	94 2f       	mov	r25, r20
    1a24:	9f 77       	andi	r25, 0x7F	; 127
    1a26:	67 95       	ror	r22
    1a28:	66 27       	eor	r22, r22
    1a2a:	67 95       	ror	r22
    1a2c:	e6 95       	lsr	r30
    1a2e:	e2 2e       	mov	r14, r18
    1a30:	a9 2f       	mov	r26, r25
    1a32:	a8 2b       	or	r26, r24
    1a34:	fe 2f       	mov	r31, r30
    1a36:	f6 2b       	or	r31, r22
    1a38:	62 2f       	mov	r22, r18
    1a3a:	73 2f       	mov	r23, r19
    1a3c:	8a 2f       	mov	r24, r26
    1a3e:	9f 2f       	mov	r25, r31
    1a40:	cd b7       	in	r28, 0x3d	; 61
    1a42:	de b7       	in	r29, 0x3e	; 62
    1a44:	e6 e0       	ldi	r30, 0x06	; 6
    1a46:	0c 94 36 0e 	jmp	0x1c6c	; 0x1c6c <__epilogue_restores__+0x18>

00001a4a <__unpack_f>:
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	fb 01       	movw	r30, r22
    1a4e:	2c 91       	ld	r18, X
    1a50:	11 96       	adiw	r26, 0x01	; 1
    1a52:	3c 91       	ld	r19, X
    1a54:	11 97       	sbiw	r26, 0x01	; 1
    1a56:	12 96       	adiw	r26, 0x02	; 2
    1a58:	8c 91       	ld	r24, X
    1a5a:	12 97       	sbiw	r26, 0x02	; 2
    1a5c:	48 2f       	mov	r20, r24
    1a5e:	4f 77       	andi	r20, 0x7F	; 127
    1a60:	50 e0       	ldi	r21, 0x00	; 0
    1a62:	98 2f       	mov	r25, r24
    1a64:	99 1f       	adc	r25, r25
    1a66:	99 27       	eor	r25, r25
    1a68:	99 1f       	adc	r25, r25
    1a6a:	13 96       	adiw	r26, 0x03	; 3
    1a6c:	6c 91       	ld	r22, X
    1a6e:	13 97       	sbiw	r26, 0x03	; 3
    1a70:	86 2f       	mov	r24, r22
    1a72:	88 0f       	add	r24, r24
    1a74:	89 2b       	or	r24, r25
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	66 1f       	adc	r22, r22
    1a7a:	66 27       	eor	r22, r22
    1a7c:	66 1f       	adc	r22, r22
    1a7e:	61 83       	std	Z+1, r22	; 0x01
    1a80:	00 97       	sbiw	r24, 0x00	; 0
    1a82:	39 f5       	brne	.+78     	; 0x1ad2 <__unpack_f+0x88>
    1a84:	21 15       	cp	r18, r1
    1a86:	31 05       	cpc	r19, r1
    1a88:	41 05       	cpc	r20, r1
    1a8a:	51 05       	cpc	r21, r1
    1a8c:	11 f4       	brne	.+4      	; 0x1a92 <__unpack_f+0x48>
    1a8e:	82 e0       	ldi	r24, 0x02	; 2
    1a90:	29 c0       	rjmp	.+82     	; 0x1ae4 <__unpack_f+0x9a>
    1a92:	82 e8       	ldi	r24, 0x82	; 130
    1a94:	9f ef       	ldi	r25, 0xFF	; 255
    1a96:	93 83       	std	Z+3, r25	; 0x03
    1a98:	82 83       	std	Z+2, r24	; 0x02
    1a9a:	67 e0       	ldi	r22, 0x07	; 7
    1a9c:	22 0f       	add	r18, r18
    1a9e:	33 1f       	adc	r19, r19
    1aa0:	44 1f       	adc	r20, r20
    1aa2:	55 1f       	adc	r21, r21
    1aa4:	6a 95       	dec	r22
    1aa6:	d1 f7       	brne	.-12     	; 0x1a9c <__unpack_f+0x52>
    1aa8:	83 e0       	ldi	r24, 0x03	; 3
    1aaa:	80 83       	st	Z, r24
    1aac:	09 c0       	rjmp	.+18     	; 0x1ac0 <__unpack_f+0x76>
    1aae:	22 0f       	add	r18, r18
    1ab0:	33 1f       	adc	r19, r19
    1ab2:	44 1f       	adc	r20, r20
    1ab4:	55 1f       	adc	r21, r21
    1ab6:	82 81       	ldd	r24, Z+2	; 0x02
    1ab8:	93 81       	ldd	r25, Z+3	; 0x03
    1aba:	01 97       	sbiw	r24, 0x01	; 1
    1abc:	93 83       	std	Z+3, r25	; 0x03
    1abe:	82 83       	std	Z+2, r24	; 0x02
    1ac0:	20 30       	cpi	r18, 0x00	; 0
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	38 07       	cpc	r19, r24
    1ac6:	80 e0       	ldi	r24, 0x00	; 0
    1ac8:	48 07       	cpc	r20, r24
    1aca:	80 e4       	ldi	r24, 0x40	; 64
    1acc:	58 07       	cpc	r21, r24
    1ace:	78 f3       	brcs	.-34     	; 0x1aae <__unpack_f+0x64>
    1ad0:	20 c0       	rjmp	.+64     	; 0x1b12 <__unpack_f+0xc8>
    1ad2:	8f 3f       	cpi	r24, 0xFF	; 255
    1ad4:	91 05       	cpc	r25, r1
    1ad6:	79 f4       	brne	.+30     	; 0x1af6 <__unpack_f+0xac>
    1ad8:	21 15       	cp	r18, r1
    1ada:	31 05       	cpc	r19, r1
    1adc:	41 05       	cpc	r20, r1
    1ade:	51 05       	cpc	r21, r1
    1ae0:	19 f4       	brne	.+6      	; 0x1ae8 <__unpack_f+0x9e>
    1ae2:	84 e0       	ldi	r24, 0x04	; 4
    1ae4:	80 83       	st	Z, r24
    1ae6:	08 95       	ret
    1ae8:	44 ff       	sbrs	r20, 4
    1aea:	03 c0       	rjmp	.+6      	; 0x1af2 <__unpack_f+0xa8>
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	80 83       	st	Z, r24
    1af0:	10 c0       	rjmp	.+32     	; 0x1b12 <__unpack_f+0xc8>
    1af2:	10 82       	st	Z, r1
    1af4:	0e c0       	rjmp	.+28     	; 0x1b12 <__unpack_f+0xc8>
    1af6:	8f 57       	subi	r24, 0x7F	; 127
    1af8:	90 40       	sbci	r25, 0x00	; 0
    1afa:	93 83       	std	Z+3, r25	; 0x03
    1afc:	82 83       	std	Z+2, r24	; 0x02
    1afe:	83 e0       	ldi	r24, 0x03	; 3
    1b00:	80 83       	st	Z, r24
    1b02:	87 e0       	ldi	r24, 0x07	; 7
    1b04:	22 0f       	add	r18, r18
    1b06:	33 1f       	adc	r19, r19
    1b08:	44 1f       	adc	r20, r20
    1b0a:	55 1f       	adc	r21, r21
    1b0c:	8a 95       	dec	r24
    1b0e:	d1 f7       	brne	.-12     	; 0x1b04 <__unpack_f+0xba>
    1b10:	50 64       	ori	r21, 0x40	; 64
    1b12:	24 83       	std	Z+4, r18	; 0x04
    1b14:	35 83       	std	Z+5, r19	; 0x05
    1b16:	46 83       	std	Z+6, r20	; 0x06
    1b18:	57 83       	std	Z+7, r21	; 0x07
    1b1a:	08 95       	ret

00001b1c <__fpcmp_parts_f>:
    1b1c:	fc 01       	movw	r30, r24
    1b1e:	db 01       	movw	r26, r22
    1b20:	90 81       	ld	r25, Z
    1b22:	92 30       	cpi	r25, 0x02	; 2
    1b24:	08 f4       	brcc	.+2      	; 0x1b28 <__fpcmp_parts_f+0xc>
    1b26:	49 c0       	rjmp	.+146    	; 0x1bba <__fpcmp_parts_f+0x9e>
    1b28:	8c 91       	ld	r24, X
    1b2a:	82 30       	cpi	r24, 0x02	; 2
    1b2c:	08 f4       	brcc	.+2      	; 0x1b30 <__fpcmp_parts_f+0x14>
    1b2e:	45 c0       	rjmp	.+138    	; 0x1bba <__fpcmp_parts_f+0x9e>
    1b30:	94 30       	cpi	r25, 0x04	; 4
    1b32:	51 f4       	brne	.+20     	; 0x1b48 <__fpcmp_parts_f+0x2c>
    1b34:	61 81       	ldd	r22, Z+1	; 0x01
    1b36:	84 30       	cpi	r24, 0x04	; 4
    1b38:	b1 f5       	brne	.+108    	; 0x1ba6 <__fpcmp_parts_f+0x8a>
    1b3a:	11 96       	adiw	r26, 0x01	; 1
    1b3c:	2c 91       	ld	r18, X
    1b3e:	11 97       	sbiw	r26, 0x01	; 1
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	26 1b       	sub	r18, r22
    1b44:	31 09       	sbc	r19, r1
    1b46:	41 c0       	rjmp	.+130    	; 0x1bca <__fpcmp_parts_f+0xae>
    1b48:	84 30       	cpi	r24, 0x04	; 4
    1b4a:	21 f0       	breq	.+8      	; 0x1b54 <__fpcmp_parts_f+0x38>
    1b4c:	92 30       	cpi	r25, 0x02	; 2
    1b4e:	41 f4       	brne	.+16     	; 0x1b60 <__fpcmp_parts_f+0x44>
    1b50:	82 30       	cpi	r24, 0x02	; 2
    1b52:	b1 f1       	breq	.+108    	; 0x1bc0 <__fpcmp_parts_f+0xa4>
    1b54:	11 96       	adiw	r26, 0x01	; 1
    1b56:	8c 91       	ld	r24, X
    1b58:	11 97       	sbiw	r26, 0x01	; 1
    1b5a:	88 23       	and	r24, r24
    1b5c:	a1 f1       	breq	.+104    	; 0x1bc6 <__fpcmp_parts_f+0xaa>
    1b5e:	2d c0       	rjmp	.+90     	; 0x1bba <__fpcmp_parts_f+0x9e>
    1b60:	61 81       	ldd	r22, Z+1	; 0x01
    1b62:	82 30       	cpi	r24, 0x02	; 2
    1b64:	01 f1       	breq	.+64     	; 0x1ba6 <__fpcmp_parts_f+0x8a>
    1b66:	11 96       	adiw	r26, 0x01	; 1
    1b68:	8c 91       	ld	r24, X
    1b6a:	11 97       	sbiw	r26, 0x01	; 1
    1b6c:	68 17       	cp	r22, r24
    1b6e:	d9 f4       	brne	.+54     	; 0x1ba6 <__fpcmp_parts_f+0x8a>
    1b70:	22 81       	ldd	r18, Z+2	; 0x02
    1b72:	33 81       	ldd	r19, Z+3	; 0x03
    1b74:	12 96       	adiw	r26, 0x02	; 2
    1b76:	8d 91       	ld	r24, X+
    1b78:	9c 91       	ld	r25, X
    1b7a:	13 97       	sbiw	r26, 0x03	; 3
    1b7c:	82 17       	cp	r24, r18
    1b7e:	93 07       	cpc	r25, r19
    1b80:	94 f0       	brlt	.+36     	; 0x1ba6 <__fpcmp_parts_f+0x8a>
    1b82:	28 17       	cp	r18, r24
    1b84:	39 07       	cpc	r19, r25
    1b86:	bc f0       	brlt	.+46     	; 0x1bb6 <__fpcmp_parts_f+0x9a>
    1b88:	24 81       	ldd	r18, Z+4	; 0x04
    1b8a:	35 81       	ldd	r19, Z+5	; 0x05
    1b8c:	46 81       	ldd	r20, Z+6	; 0x06
    1b8e:	57 81       	ldd	r21, Z+7	; 0x07
    1b90:	14 96       	adiw	r26, 0x04	; 4
    1b92:	8d 91       	ld	r24, X+
    1b94:	9d 91       	ld	r25, X+
    1b96:	0d 90       	ld	r0, X+
    1b98:	bc 91       	ld	r27, X
    1b9a:	a0 2d       	mov	r26, r0
    1b9c:	82 17       	cp	r24, r18
    1b9e:	93 07       	cpc	r25, r19
    1ba0:	a4 07       	cpc	r26, r20
    1ba2:	b5 07       	cpc	r27, r21
    1ba4:	18 f4       	brcc	.+6      	; 0x1bac <__fpcmp_parts_f+0x90>
    1ba6:	66 23       	and	r22, r22
    1ba8:	41 f0       	breq	.+16     	; 0x1bba <__fpcmp_parts_f+0x9e>
    1baa:	0d c0       	rjmp	.+26     	; 0x1bc6 <__fpcmp_parts_f+0xaa>
    1bac:	28 17       	cp	r18, r24
    1bae:	39 07       	cpc	r19, r25
    1bb0:	4a 07       	cpc	r20, r26
    1bb2:	5b 07       	cpc	r21, r27
    1bb4:	28 f4       	brcc	.+10     	; 0x1bc0 <__fpcmp_parts_f+0xa4>
    1bb6:	66 23       	and	r22, r22
    1bb8:	31 f0       	breq	.+12     	; 0x1bc6 <__fpcmp_parts_f+0xaa>
    1bba:	21 e0       	ldi	r18, 0x01	; 1
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	05 c0       	rjmp	.+10     	; 0x1bca <__fpcmp_parts_f+0xae>
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	02 c0       	rjmp	.+4      	; 0x1bca <__fpcmp_parts_f+0xae>
    1bc6:	2f ef       	ldi	r18, 0xFF	; 255
    1bc8:	3f ef       	ldi	r19, 0xFF	; 255
    1bca:	c9 01       	movw	r24, r18
    1bcc:	08 95       	ret

00001bce <__divmodhi4>:
    1bce:	97 fb       	bst	r25, 7
    1bd0:	09 2e       	mov	r0, r25
    1bd2:	07 26       	eor	r0, r23
    1bd4:	0a d0       	rcall	.+20     	; 0x1bea <__divmodhi4_neg1>
    1bd6:	77 fd       	sbrc	r23, 7
    1bd8:	04 d0       	rcall	.+8      	; 0x1be2 <__divmodhi4_neg2>
    1bda:	0c d0       	rcall	.+24     	; 0x1bf4 <__udivmodhi4>
    1bdc:	06 d0       	rcall	.+12     	; 0x1bea <__divmodhi4_neg1>
    1bde:	00 20       	and	r0, r0
    1be0:	1a f4       	brpl	.+6      	; 0x1be8 <__divmodhi4_exit>

00001be2 <__divmodhi4_neg2>:
    1be2:	70 95       	com	r23
    1be4:	61 95       	neg	r22
    1be6:	7f 4f       	sbci	r23, 0xFF	; 255

00001be8 <__divmodhi4_exit>:
    1be8:	08 95       	ret

00001bea <__divmodhi4_neg1>:
    1bea:	f6 f7       	brtc	.-4      	; 0x1be8 <__divmodhi4_exit>
    1bec:	90 95       	com	r25
    1bee:	81 95       	neg	r24
    1bf0:	9f 4f       	sbci	r25, 0xFF	; 255
    1bf2:	08 95       	ret

00001bf4 <__udivmodhi4>:
    1bf4:	aa 1b       	sub	r26, r26
    1bf6:	bb 1b       	sub	r27, r27
    1bf8:	51 e1       	ldi	r21, 0x11	; 17
    1bfa:	07 c0       	rjmp	.+14     	; 0x1c0a <__udivmodhi4_ep>

00001bfc <__udivmodhi4_loop>:
    1bfc:	aa 1f       	adc	r26, r26
    1bfe:	bb 1f       	adc	r27, r27
    1c00:	a6 17       	cp	r26, r22
    1c02:	b7 07       	cpc	r27, r23
    1c04:	10 f0       	brcs	.+4      	; 0x1c0a <__udivmodhi4_ep>
    1c06:	a6 1b       	sub	r26, r22
    1c08:	b7 0b       	sbc	r27, r23

00001c0a <__udivmodhi4_ep>:
    1c0a:	88 1f       	adc	r24, r24
    1c0c:	99 1f       	adc	r25, r25
    1c0e:	5a 95       	dec	r21
    1c10:	a9 f7       	brne	.-22     	; 0x1bfc <__udivmodhi4_loop>
    1c12:	80 95       	com	r24
    1c14:	90 95       	com	r25
    1c16:	bc 01       	movw	r22, r24
    1c18:	cd 01       	movw	r24, r26
    1c1a:	08 95       	ret

00001c1c <__prologue_saves__>:
    1c1c:	2f 92       	push	r2
    1c1e:	3f 92       	push	r3
    1c20:	4f 92       	push	r4
    1c22:	5f 92       	push	r5
    1c24:	6f 92       	push	r6
    1c26:	7f 92       	push	r7
    1c28:	8f 92       	push	r8
    1c2a:	9f 92       	push	r9
    1c2c:	af 92       	push	r10
    1c2e:	bf 92       	push	r11
    1c30:	cf 92       	push	r12
    1c32:	df 92       	push	r13
    1c34:	ef 92       	push	r14
    1c36:	ff 92       	push	r15
    1c38:	0f 93       	push	r16
    1c3a:	1f 93       	push	r17
    1c3c:	cf 93       	push	r28
    1c3e:	df 93       	push	r29
    1c40:	cd b7       	in	r28, 0x3d	; 61
    1c42:	de b7       	in	r29, 0x3e	; 62
    1c44:	ca 1b       	sub	r28, r26
    1c46:	db 0b       	sbc	r29, r27
    1c48:	0f b6       	in	r0, 0x3f	; 63
    1c4a:	f8 94       	cli
    1c4c:	de bf       	out	0x3e, r29	; 62
    1c4e:	0f be       	out	0x3f, r0	; 63
    1c50:	cd bf       	out	0x3d, r28	; 61
    1c52:	09 94       	ijmp

00001c54 <__epilogue_restores__>:
    1c54:	2a 88       	ldd	r2, Y+18	; 0x12
    1c56:	39 88       	ldd	r3, Y+17	; 0x11
    1c58:	48 88       	ldd	r4, Y+16	; 0x10
    1c5a:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c5c:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c5e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c60:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c62:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c64:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c66:	b9 84       	ldd	r11, Y+9	; 0x09
    1c68:	c8 84       	ldd	r12, Y+8	; 0x08
    1c6a:	df 80       	ldd	r13, Y+7	; 0x07
    1c6c:	ee 80       	ldd	r14, Y+6	; 0x06
    1c6e:	fd 80       	ldd	r15, Y+5	; 0x05
    1c70:	0c 81       	ldd	r16, Y+4	; 0x04
    1c72:	1b 81       	ldd	r17, Y+3	; 0x03
    1c74:	aa 81       	ldd	r26, Y+2	; 0x02
    1c76:	b9 81       	ldd	r27, Y+1	; 0x01
    1c78:	ce 0f       	add	r28, r30
    1c7a:	d1 1d       	adc	r29, r1
    1c7c:	0f b6       	in	r0, 0x3f	; 63
    1c7e:	f8 94       	cli
    1c80:	de bf       	out	0x3e, r29	; 62
    1c82:	0f be       	out	0x3f, r0	; 63
    1c84:	cd bf       	out	0x3d, r28	; 61
    1c86:	ed 01       	movw	r28, r26
    1c88:	08 95       	ret

00001c8a <malloc>:
    1c8a:	cf 93       	push	r28
    1c8c:	df 93       	push	r29
    1c8e:	82 30       	cpi	r24, 0x02	; 2
    1c90:	91 05       	cpc	r25, r1
    1c92:	10 f4       	brcc	.+4      	; 0x1c98 <malloc+0xe>
    1c94:	82 e0       	ldi	r24, 0x02	; 2
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	e0 91 8a 06 	lds	r30, 0x068A
    1c9c:	f0 91 8b 06 	lds	r31, 0x068B
    1ca0:	40 e0       	ldi	r20, 0x00	; 0
    1ca2:	50 e0       	ldi	r21, 0x00	; 0
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	26 c0       	rjmp	.+76     	; 0x1cf6 <malloc+0x6c>
    1caa:	60 81       	ld	r22, Z
    1cac:	71 81       	ldd	r23, Z+1	; 0x01
    1cae:	68 17       	cp	r22, r24
    1cb0:	79 07       	cpc	r23, r25
    1cb2:	e0 f0       	brcs	.+56     	; 0x1cec <malloc+0x62>
    1cb4:	68 17       	cp	r22, r24
    1cb6:	79 07       	cpc	r23, r25
    1cb8:	81 f4       	brne	.+32     	; 0x1cda <malloc+0x50>
    1cba:	82 81       	ldd	r24, Z+2	; 0x02
    1cbc:	93 81       	ldd	r25, Z+3	; 0x03
    1cbe:	21 15       	cp	r18, r1
    1cc0:	31 05       	cpc	r19, r1
    1cc2:	31 f0       	breq	.+12     	; 0x1cd0 <malloc+0x46>
    1cc4:	d9 01       	movw	r26, r18
    1cc6:	13 96       	adiw	r26, 0x03	; 3
    1cc8:	9c 93       	st	X, r25
    1cca:	8e 93       	st	-X, r24
    1ccc:	12 97       	sbiw	r26, 0x02	; 2
    1cce:	2b c0       	rjmp	.+86     	; 0x1d26 <malloc+0x9c>
    1cd0:	90 93 8b 06 	sts	0x068B, r25
    1cd4:	80 93 8a 06 	sts	0x068A, r24
    1cd8:	26 c0       	rjmp	.+76     	; 0x1d26 <malloc+0x9c>
    1cda:	41 15       	cp	r20, r1
    1cdc:	51 05       	cpc	r21, r1
    1cde:	19 f0       	breq	.+6      	; 0x1ce6 <malloc+0x5c>
    1ce0:	64 17       	cp	r22, r20
    1ce2:	75 07       	cpc	r23, r21
    1ce4:	18 f4       	brcc	.+6      	; 0x1cec <malloc+0x62>
    1ce6:	ab 01       	movw	r20, r22
    1ce8:	e9 01       	movw	r28, r18
    1cea:	df 01       	movw	r26, r30
    1cec:	9f 01       	movw	r18, r30
    1cee:	72 81       	ldd	r23, Z+2	; 0x02
    1cf0:	63 81       	ldd	r22, Z+3	; 0x03
    1cf2:	e7 2f       	mov	r30, r23
    1cf4:	f6 2f       	mov	r31, r22
    1cf6:	30 97       	sbiw	r30, 0x00	; 0
    1cf8:	c1 f6       	brne	.-80     	; 0x1caa <malloc+0x20>
    1cfa:	41 15       	cp	r20, r1
    1cfc:	51 05       	cpc	r21, r1
    1cfe:	01 f1       	breq	.+64     	; 0x1d40 <malloc+0xb6>
    1d00:	48 1b       	sub	r20, r24
    1d02:	59 0b       	sbc	r21, r25
    1d04:	44 30       	cpi	r20, 0x04	; 4
    1d06:	51 05       	cpc	r21, r1
    1d08:	80 f4       	brcc	.+32     	; 0x1d2a <malloc+0xa0>
    1d0a:	12 96       	adiw	r26, 0x02	; 2
    1d0c:	8d 91       	ld	r24, X+
    1d0e:	9c 91       	ld	r25, X
    1d10:	13 97       	sbiw	r26, 0x03	; 3
    1d12:	20 97       	sbiw	r28, 0x00	; 0
    1d14:	19 f0       	breq	.+6      	; 0x1d1c <malloc+0x92>
    1d16:	9b 83       	std	Y+3, r25	; 0x03
    1d18:	8a 83       	std	Y+2, r24	; 0x02
    1d1a:	04 c0       	rjmp	.+8      	; 0x1d24 <malloc+0x9a>
    1d1c:	90 93 8b 06 	sts	0x068B, r25
    1d20:	80 93 8a 06 	sts	0x068A, r24
    1d24:	fd 01       	movw	r30, r26
    1d26:	32 96       	adiw	r30, 0x02	; 2
    1d28:	46 c0       	rjmp	.+140    	; 0x1db6 <malloc+0x12c>
    1d2a:	fd 01       	movw	r30, r26
    1d2c:	e4 0f       	add	r30, r20
    1d2e:	f5 1f       	adc	r31, r21
    1d30:	81 93       	st	Z+, r24
    1d32:	91 93       	st	Z+, r25
    1d34:	42 50       	subi	r20, 0x02	; 2
    1d36:	50 40       	sbci	r21, 0x00	; 0
    1d38:	11 96       	adiw	r26, 0x01	; 1
    1d3a:	5c 93       	st	X, r21
    1d3c:	4e 93       	st	-X, r20
    1d3e:	3b c0       	rjmp	.+118    	; 0x1db6 <malloc+0x12c>
    1d40:	20 91 88 06 	lds	r18, 0x0688
    1d44:	30 91 89 06 	lds	r19, 0x0689
    1d48:	21 15       	cp	r18, r1
    1d4a:	31 05       	cpc	r19, r1
    1d4c:	41 f4       	brne	.+16     	; 0x1d5e <malloc+0xd4>
    1d4e:	20 91 24 01 	lds	r18, 0x0124
    1d52:	30 91 25 01 	lds	r19, 0x0125
    1d56:	30 93 89 06 	sts	0x0689, r19
    1d5a:	20 93 88 06 	sts	0x0688, r18
    1d5e:	20 91 26 01 	lds	r18, 0x0126
    1d62:	30 91 27 01 	lds	r19, 0x0127
    1d66:	21 15       	cp	r18, r1
    1d68:	31 05       	cpc	r19, r1
    1d6a:	41 f4       	brne	.+16     	; 0x1d7c <malloc+0xf2>
    1d6c:	2d b7       	in	r18, 0x3d	; 61
    1d6e:	3e b7       	in	r19, 0x3e	; 62
    1d70:	40 91 22 01 	lds	r20, 0x0122
    1d74:	50 91 23 01 	lds	r21, 0x0123
    1d78:	24 1b       	sub	r18, r20
    1d7a:	35 0b       	sbc	r19, r21
    1d7c:	e0 91 88 06 	lds	r30, 0x0688
    1d80:	f0 91 89 06 	lds	r31, 0x0689
    1d84:	e2 17       	cp	r30, r18
    1d86:	f3 07       	cpc	r31, r19
    1d88:	a0 f4       	brcc	.+40     	; 0x1db2 <malloc+0x128>
    1d8a:	2e 1b       	sub	r18, r30
    1d8c:	3f 0b       	sbc	r19, r31
    1d8e:	28 17       	cp	r18, r24
    1d90:	39 07       	cpc	r19, r25
    1d92:	78 f0       	brcs	.+30     	; 0x1db2 <malloc+0x128>
    1d94:	ac 01       	movw	r20, r24
    1d96:	4e 5f       	subi	r20, 0xFE	; 254
    1d98:	5f 4f       	sbci	r21, 0xFF	; 255
    1d9a:	24 17       	cp	r18, r20
    1d9c:	35 07       	cpc	r19, r21
    1d9e:	48 f0       	brcs	.+18     	; 0x1db2 <malloc+0x128>
    1da0:	4e 0f       	add	r20, r30
    1da2:	5f 1f       	adc	r21, r31
    1da4:	50 93 89 06 	sts	0x0689, r21
    1da8:	40 93 88 06 	sts	0x0688, r20
    1dac:	81 93       	st	Z+, r24
    1dae:	91 93       	st	Z+, r25
    1db0:	02 c0       	rjmp	.+4      	; 0x1db6 <malloc+0x12c>
    1db2:	e0 e0       	ldi	r30, 0x00	; 0
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	cf 01       	movw	r24, r30
    1db8:	df 91       	pop	r29
    1dba:	cf 91       	pop	r28
    1dbc:	08 95       	ret

00001dbe <free>:
    1dbe:	cf 93       	push	r28
    1dc0:	df 93       	push	r29
    1dc2:	00 97       	sbiw	r24, 0x00	; 0
    1dc4:	09 f4       	brne	.+2      	; 0x1dc8 <free+0xa>
    1dc6:	91 c0       	rjmp	.+290    	; 0x1eea <free+0x12c>
    1dc8:	fc 01       	movw	r30, r24
    1dca:	32 97       	sbiw	r30, 0x02	; 2
    1dcc:	13 82       	std	Z+3, r1	; 0x03
    1dce:	12 82       	std	Z+2, r1	; 0x02
    1dd0:	60 91 8a 06 	lds	r22, 0x068A
    1dd4:	70 91 8b 06 	lds	r23, 0x068B
    1dd8:	61 15       	cp	r22, r1
    1dda:	71 05       	cpc	r23, r1
    1ddc:	81 f4       	brne	.+32     	; 0x1dfe <free+0x40>
    1dde:	20 81       	ld	r18, Z
    1de0:	31 81       	ldd	r19, Z+1	; 0x01
    1de2:	28 0f       	add	r18, r24
    1de4:	39 1f       	adc	r19, r25
    1de6:	80 91 88 06 	lds	r24, 0x0688
    1dea:	90 91 89 06 	lds	r25, 0x0689
    1dee:	82 17       	cp	r24, r18
    1df0:	93 07       	cpc	r25, r19
    1df2:	99 f5       	brne	.+102    	; 0x1e5a <free+0x9c>
    1df4:	f0 93 89 06 	sts	0x0689, r31
    1df8:	e0 93 88 06 	sts	0x0688, r30
    1dfc:	76 c0       	rjmp	.+236    	; 0x1eea <free+0x12c>
    1dfe:	db 01       	movw	r26, r22
    1e00:	80 e0       	ldi	r24, 0x00	; 0
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	02 c0       	rjmp	.+4      	; 0x1e0a <free+0x4c>
    1e06:	cd 01       	movw	r24, r26
    1e08:	d9 01       	movw	r26, r18
    1e0a:	ae 17       	cp	r26, r30
    1e0c:	bf 07       	cpc	r27, r31
    1e0e:	48 f4       	brcc	.+18     	; 0x1e22 <free+0x64>
    1e10:	12 96       	adiw	r26, 0x02	; 2
    1e12:	2d 91       	ld	r18, X+
    1e14:	3c 91       	ld	r19, X
    1e16:	13 97       	sbiw	r26, 0x03	; 3
    1e18:	21 15       	cp	r18, r1
    1e1a:	31 05       	cpc	r19, r1
    1e1c:	a1 f7       	brne	.-24     	; 0x1e06 <free+0x48>
    1e1e:	cd 01       	movw	r24, r26
    1e20:	21 c0       	rjmp	.+66     	; 0x1e64 <free+0xa6>
    1e22:	b3 83       	std	Z+3, r27	; 0x03
    1e24:	a2 83       	std	Z+2, r26	; 0x02
    1e26:	ef 01       	movw	r28, r30
    1e28:	49 91       	ld	r20, Y+
    1e2a:	59 91       	ld	r21, Y+
    1e2c:	9e 01       	movw	r18, r28
    1e2e:	24 0f       	add	r18, r20
    1e30:	35 1f       	adc	r19, r21
    1e32:	a2 17       	cp	r26, r18
    1e34:	b3 07       	cpc	r27, r19
    1e36:	79 f4       	brne	.+30     	; 0x1e56 <free+0x98>
    1e38:	2d 91       	ld	r18, X+
    1e3a:	3c 91       	ld	r19, X
    1e3c:	11 97       	sbiw	r26, 0x01	; 1
    1e3e:	24 0f       	add	r18, r20
    1e40:	35 1f       	adc	r19, r21
    1e42:	2e 5f       	subi	r18, 0xFE	; 254
    1e44:	3f 4f       	sbci	r19, 0xFF	; 255
    1e46:	31 83       	std	Z+1, r19	; 0x01
    1e48:	20 83       	st	Z, r18
    1e4a:	12 96       	adiw	r26, 0x02	; 2
    1e4c:	2d 91       	ld	r18, X+
    1e4e:	3c 91       	ld	r19, X
    1e50:	13 97       	sbiw	r26, 0x03	; 3
    1e52:	33 83       	std	Z+3, r19	; 0x03
    1e54:	22 83       	std	Z+2, r18	; 0x02
    1e56:	00 97       	sbiw	r24, 0x00	; 0
    1e58:	29 f4       	brne	.+10     	; 0x1e64 <free+0xa6>
    1e5a:	f0 93 8b 06 	sts	0x068B, r31
    1e5e:	e0 93 8a 06 	sts	0x068A, r30
    1e62:	43 c0       	rjmp	.+134    	; 0x1eea <free+0x12c>
    1e64:	dc 01       	movw	r26, r24
    1e66:	13 96       	adiw	r26, 0x03	; 3
    1e68:	fc 93       	st	X, r31
    1e6a:	ee 93       	st	-X, r30
    1e6c:	12 97       	sbiw	r26, 0x02	; 2
    1e6e:	4d 91       	ld	r20, X+
    1e70:	5d 91       	ld	r21, X+
    1e72:	a4 0f       	add	r26, r20
    1e74:	b5 1f       	adc	r27, r21
    1e76:	ea 17       	cp	r30, r26
    1e78:	fb 07       	cpc	r31, r27
    1e7a:	69 f4       	brne	.+26     	; 0x1e96 <free+0xd8>
    1e7c:	20 81       	ld	r18, Z
    1e7e:	31 81       	ldd	r19, Z+1	; 0x01
    1e80:	24 0f       	add	r18, r20
    1e82:	35 1f       	adc	r19, r21
    1e84:	2e 5f       	subi	r18, 0xFE	; 254
    1e86:	3f 4f       	sbci	r19, 0xFF	; 255
    1e88:	ec 01       	movw	r28, r24
    1e8a:	39 83       	std	Y+1, r19	; 0x01
    1e8c:	28 83       	st	Y, r18
    1e8e:	22 81       	ldd	r18, Z+2	; 0x02
    1e90:	33 81       	ldd	r19, Z+3	; 0x03
    1e92:	3b 83       	std	Y+3, r19	; 0x03
    1e94:	2a 83       	std	Y+2, r18	; 0x02
    1e96:	e0 e0       	ldi	r30, 0x00	; 0
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	02 c0       	rjmp	.+4      	; 0x1ea0 <free+0xe2>
    1e9c:	fb 01       	movw	r30, r22
    1e9e:	bc 01       	movw	r22, r24
    1ea0:	db 01       	movw	r26, r22
    1ea2:	12 96       	adiw	r26, 0x02	; 2
    1ea4:	8d 91       	ld	r24, X+
    1ea6:	9c 91       	ld	r25, X
    1ea8:	13 97       	sbiw	r26, 0x03	; 3
    1eaa:	00 97       	sbiw	r24, 0x00	; 0
    1eac:	b9 f7       	brne	.-18     	; 0x1e9c <free+0xde>
    1eae:	9b 01       	movw	r18, r22
    1eb0:	2e 5f       	subi	r18, 0xFE	; 254
    1eb2:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb4:	8d 91       	ld	r24, X+
    1eb6:	9c 91       	ld	r25, X
    1eb8:	11 97       	sbiw	r26, 0x01	; 1
    1eba:	82 0f       	add	r24, r18
    1ebc:	93 1f       	adc	r25, r19
    1ebe:	40 91 88 06 	lds	r20, 0x0688
    1ec2:	50 91 89 06 	lds	r21, 0x0689
    1ec6:	48 17       	cp	r20, r24
    1ec8:	59 07       	cpc	r21, r25
    1eca:	79 f4       	brne	.+30     	; 0x1eea <free+0x12c>
    1ecc:	30 97       	sbiw	r30, 0x00	; 0
    1ece:	29 f4       	brne	.+10     	; 0x1eda <free+0x11c>
    1ed0:	10 92 8b 06 	sts	0x068B, r1
    1ed4:	10 92 8a 06 	sts	0x068A, r1
    1ed8:	02 c0       	rjmp	.+4      	; 0x1ede <free+0x120>
    1eda:	13 82       	std	Z+3, r1	; 0x03
    1edc:	12 82       	std	Z+2, r1	; 0x02
    1ede:	22 50       	subi	r18, 0x02	; 2
    1ee0:	30 40       	sbci	r19, 0x00	; 0
    1ee2:	30 93 89 06 	sts	0x0689, r19
    1ee6:	20 93 88 06 	sts	0x0688, r18
    1eea:	df 91       	pop	r29
    1eec:	cf 91       	pop	r28
    1eee:	08 95       	ret

00001ef0 <strlen>:
    1ef0:	fc 01       	movw	r30, r24
    1ef2:	01 90       	ld	r0, Z+
    1ef4:	00 20       	and	r0, r0
    1ef6:	e9 f7       	brne	.-6      	; 0x1ef2 <strlen+0x2>
    1ef8:	80 95       	com	r24
    1efa:	90 95       	com	r25
    1efc:	8e 0f       	add	r24, r30
    1efe:	9f 1f       	adc	r25, r31
    1f00:	08 95       	ret

00001f02 <_exit>:
    1f02:	f8 94       	cli

00001f04 <__stop_program>:
    1f04:	ff cf       	rjmp	.-2      	; 0x1f04 <__stop_program>
