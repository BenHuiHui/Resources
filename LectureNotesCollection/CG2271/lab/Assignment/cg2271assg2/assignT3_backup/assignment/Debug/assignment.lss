
assignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00002892  00002926  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002892  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000522  0080011a  0080011a  00002940  2**0
                  ALLOC
  3 .stab         00000d74  00000000  00000000  00002940  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000027a  00000000  00000000  000036b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000268  00000000  00000000  0000392e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000529  00000000  00000000  00003b96  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003304  00000000  00000000  000040bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000018a6  00000000  00000000  000073c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002cf4  00000000  00000000  00008c69  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000410  00000000  00000000  0000b960  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000951  00000000  00000000  0000bd70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000015fb  00000000  00000000  0000c6c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000760  00000000  00000000  0000dcbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000a0  00000000  00000000  0000e41c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 32 08 	jmp	0x1064	; 0x1064 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 5b 09 	jmp	0x12b6	; 0x12b6 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 00 09 	jmp	0x1200	; 0x1200 <__vector_20>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 e9       	ldi	r30, 0x92	; 146
      7c:	f8 e2       	ldi	r31, 0x28	; 40
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 31       	cpi	r26, 0x1A	; 26
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	16 e0       	ldi	r17, 0x06	; 6
      8c:	aa e1       	ldi	r26, 0x1A	; 26
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ac 33       	cpi	r26, 0x3C	; 60
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 bb 01 	call	0x376	; 0x376 <main>
      9e:	0c 94 47 14 	jmp	0x288e	; 0x288e <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <task1>:
// Tasks 1 and 2 will increment a global variable ctr, and every 10 increments task 1 will send the resulting value in ctr to task3 via a queue.
// Task 3 will then send it via serial to the PC. 

// In addition, do something fun and creative with this program, the serial port and the components you have. Describe it in your report. :)
void task1(void *p)
{
      a6:	df 93       	push	r29
      a8:	cf 93       	push	r28
      aa:	00 d0       	rcall	.+0      	; 0xac <task1+0x6>
      ac:	cd b7       	in	r28, 0x3d	; 61
      ae:	de b7       	in	r29, 0x3e	; 62
      b0:	9a 83       	std	Y+2, r25	; 0x02
      b2:	89 83       	std	Y+1, r24	; 0x01
	while(1)
	{
		enterCritical();
      b4:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <enterCritical>
		variable++;
      b8:	80 91 1a 01 	lds	r24, 0x011A
      bc:	90 91 1b 01 	lds	r25, 0x011B
      c0:	01 96       	adiw	r24, 0x01	; 1
      c2:	90 93 1b 01 	sts	0x011B, r25
      c6:	80 93 1a 01 	sts	0x011A, r24
		if(variable % 10 == 0){
      ca:	80 91 1a 01 	lds	r24, 0x011A
      ce:	90 91 1b 01 	lds	r25, 0x011B
      d2:	2a e0       	ldi	r18, 0x0A	; 10
      d4:	30 e0       	ldi	r19, 0x00	; 0
      d6:	b9 01       	movw	r22, r18
      d8:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <__divmodhi4>
      dc:	00 97       	sbiw	r24, 0x00	; 0
      de:	99 f4       	brne	.+38     	; 0x106 <task1+0x60>
			PORTD ^= 0b10000000;
      e0:	8b e2       	ldi	r24, 0x2B	; 43
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	2b e2       	ldi	r18, 0x2B	; 43
      e6:	30 e0       	ldi	r19, 0x00	; 0
      e8:	f9 01       	movw	r30, r18
      ea:	30 81       	ld	r19, Z
      ec:	20 e8       	ldi	r18, 0x80	; 128
      ee:	23 27       	eor	r18, r19
      f0:	fc 01       	movw	r30, r24
      f2:	20 83       	st	Z, r18
			OSenq(queue,&variable);
      f4:	80 91 60 01 	lds	r24, 0x0160
      f8:	90 91 61 01 	lds	r25, 0x0161
      fc:	2a e1       	ldi	r18, 0x1A	; 26
      fe:	31 e0       	ldi	r19, 0x01	; 1
     100:	b9 01       	movw	r22, r18
     102:	0e 94 59 04 	call	0x8b2	; 0x8b2 <OSenq>
		}
		
		leaveCritical();
     106:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <leaveCritical>
	}
     10a:	d4 cf       	rjmp	.-88     	; 0xb4 <task1+0xe>

0000010c <task2>:
}

void task2(void *p)
{
     10c:	df 93       	push	r29
     10e:	cf 93       	push	r28
     110:	00 d0       	rcall	.+0      	; 0x112 <task2+0x6>
     112:	cd b7       	in	r28, 0x3d	; 61
     114:	de b7       	in	r29, 0x3e	; 62
     116:	9a 83       	std	Y+2, r25	; 0x02
     118:	89 83       	std	Y+1, r24	; 0x01
	while(1)
	{
		enterCritical();
     11a:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <enterCritical>
		variable++;
     11e:	80 91 1a 01 	lds	r24, 0x011A
     122:	90 91 1b 01 	lds	r25, 0x011B
     126:	01 96       	adiw	r24, 0x01	; 1
     128:	90 93 1b 01 	sts	0x011B, r25
     12c:	80 93 1a 01 	sts	0x011A, r24
		
		if(variable % 10 == 0){
     130:	80 91 1a 01 	lds	r24, 0x011A
     134:	90 91 1b 01 	lds	r25, 0x011B
     138:	2a e0       	ldi	r18, 0x0A	; 10
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	b9 01       	movw	r22, r18
     13e:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <__divmodhi4>
     142:	00 97       	sbiw	r24, 0x00	; 0
     144:	99 f4       	brne	.+38     	; 0x16c <task2+0x60>
			PORTD ^= 0b01000000;
     146:	8b e2       	ldi	r24, 0x2B	; 43
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	2b e2       	ldi	r18, 0x2B	; 43
     14c:	30 e0       	ldi	r19, 0x00	; 0
     14e:	f9 01       	movw	r30, r18
     150:	30 81       	ld	r19, Z
     152:	20 e4       	ldi	r18, 0x40	; 64
     154:	23 27       	eor	r18, r19
     156:	fc 01       	movw	r30, r24
     158:	20 83       	st	Z, r18
			OSenq(queue,&variable);
     15a:	80 91 60 01 	lds	r24, 0x0160
     15e:	90 91 61 01 	lds	r25, 0x0161
     162:	2a e1       	ldi	r18, 0x1A	; 26
     164:	31 e0       	ldi	r19, 0x01	; 1
     166:	b9 01       	movw	r22, r18
     168:	0e 94 59 04 	call	0x8b2	; 0x8b2 <OSenq>
		}
		
		leaveCritical();
     16c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <leaveCritical>
	}
     170:	d4 cf       	rjmp	.-88     	; 0x11a <task2+0xe>

00000172 <task3>:
}

void task3(void *p)
{
     172:	0f 93       	push	r16
     174:	1f 93       	push	r17
     176:	df 93       	push	r29
     178:	cf 93       	push	r28
     17a:	cd b7       	in	r28, 0x3d	; 61
     17c:	de b7       	in	r29, 0x3e	; 62
     17e:	64 97       	sbiw	r28, 0x14	; 20
     180:	0f b6       	in	r0, 0x3f	; 63
     182:	f8 94       	cli
     184:	de bf       	out	0x3e, r29	; 62
     186:	0f be       	out	0x3f, r0	; 63
     188:	cd bf       	out	0x3d, r28	; 61
     18a:	9c 8b       	std	Y+20, r25	; 0x14
     18c:	8b 8b       	std	Y+19, r24	; 0x13
     18e:	01 c0       	rjmp	.+2      	; 0x192 <task3+0x20>
			say(sayBuf);
			_delay_ms(100);
			leaveCritical();
			PORTD ^= 0b00100000;
		}
	}
     190:	00 00       	nop
{
	void *addr;
	int res,i;
	while(1)
	{
		if(queue->size > 0){
     192:	80 91 60 01 	lds	r24, 0x0160
     196:	90 91 61 01 	lds	r25, 0x0161
     19a:	fc 01       	movw	r30, r24
     19c:	86 81       	ldd	r24, Z+6	; 0x06
     19e:	97 81       	ldd	r25, Z+7	; 0x07
     1a0:	18 16       	cp	r1, r24
     1a2:	19 06       	cpc	r1, r25
     1a4:	ac f7       	brge	.-22     	; 0x190 <task3+0x1e>
			enterCritical();
     1a6:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <enterCritical>
			addr = OSdeq(queue);
     1aa:	80 91 60 01 	lds	r24, 0x0160
     1ae:	90 91 61 01 	lds	r25, 0x0161
     1b2:	0e 94 10 05 	call	0xa20	; 0xa20 <OSdeq>
     1b6:	9a 83       	std	Y+2, r25	; 0x02
     1b8:	89 83       	std	Y+1, r24	; 0x01
			res = *(int*)addr;
     1ba:	89 81       	ldd	r24, Y+1	; 0x01
     1bc:	9a 81       	ldd	r25, Y+2	; 0x02
     1be:	fc 01       	movw	r30, r24
     1c0:	80 81       	ld	r24, Z
     1c2:	91 81       	ldd	r25, Z+1	; 0x01
     1c4:	9c 83       	std	Y+4, r25	; 0x04
     1c6:	8b 83       	std	Y+3, r24	; 0x03
			
			sprintf(sayBuf,"r:%d \n\r",res);
     1c8:	00 d0       	rcall	.+0      	; 0x1ca <task3+0x58>
     1ca:	00 d0       	rcall	.+0      	; 0x1cc <task3+0x5a>
     1cc:	00 d0       	rcall	.+0      	; 0x1ce <task3+0x5c>
     1ce:	8d b7       	in	r24, 0x3d	; 61
     1d0:	9e b7       	in	r25, 0x3e	; 62
     1d2:	01 96       	adiw	r24, 0x01	; 1
     1d4:	20 e2       	ldi	r18, 0x20	; 32
     1d6:	31 e0       	ldi	r19, 0x01	; 1
     1d8:	fc 01       	movw	r30, r24
     1da:	31 83       	std	Z+1, r19	; 0x01
     1dc:	20 83       	st	Z, r18
     1de:	20 e0       	ldi	r18, 0x00	; 0
     1e0:	31 e0       	ldi	r19, 0x01	; 1
     1e2:	fc 01       	movw	r30, r24
     1e4:	33 83       	std	Z+3, r19	; 0x03
     1e6:	22 83       	std	Z+2, r18	; 0x02
     1e8:	2b 81       	ldd	r18, Y+3	; 0x03
     1ea:	3c 81       	ldd	r19, Y+4	; 0x04
     1ec:	fc 01       	movw	r30, r24
     1ee:	35 83       	std	Z+5, r19	; 0x05
     1f0:	24 83       	std	Z+4, r18	; 0x04
     1f2:	0e 94 9d 11 	call	0x233a	; 0x233a <sprintf>
     1f6:	8d b7       	in	r24, 0x3d	; 61
     1f8:	9e b7       	in	r25, 0x3e	; 62
     1fa:	06 96       	adiw	r24, 0x06	; 6
     1fc:	0f b6       	in	r0, 0x3f	; 63
     1fe:	f8 94       	cli
     200:	9e bf       	out	0x3e, r25	; 62
     202:	0f be       	out	0x3f, r0	; 63
     204:	8d bf       	out	0x3d, r24	; 61
			say(sayBuf);
     206:	80 e2       	ldi	r24, 0x20	; 32
     208:	91 e0       	ldi	r25, 0x01	; 1
     20a:	0e 94 0d 0a 	call	0x141a	; 0x141a <say>
     20e:	80 e0       	ldi	r24, 0x00	; 0
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	a8 ec       	ldi	r26, 0xC8	; 200
     214:	b2 e4       	ldi	r27, 0x42	; 66
     216:	8d 83       	std	Y+5, r24	; 0x05
     218:	9e 83       	std	Y+6, r25	; 0x06
     21a:	af 83       	std	Y+7, r26	; 0x07
     21c:	b8 87       	std	Y+8, r27	; 0x08
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     21e:	6d 81       	ldd	r22, Y+5	; 0x05
     220:	7e 81       	ldd	r23, Y+6	; 0x06
     222:	8f 81       	ldd	r24, Y+7	; 0x07
     224:	98 85       	ldd	r25, Y+8	; 0x08
     226:	20 e0       	ldi	r18, 0x00	; 0
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	4a e7       	ldi	r20, 0x7A	; 122
     22c:	55 e4       	ldi	r21, 0x45	; 69
     22e:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <__mulsf3>
     232:	dc 01       	movw	r26, r24
     234:	cb 01       	movw	r24, r22
     236:	89 87       	std	Y+9, r24	; 0x09
     238:	9a 87       	std	Y+10, r25	; 0x0a
     23a:	ab 87       	std	Y+11, r26	; 0x0b
     23c:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     23e:	11 e0       	ldi	r17, 0x01	; 1
     240:	69 85       	ldd	r22, Y+9	; 0x09
     242:	7a 85       	ldd	r23, Y+10	; 0x0a
     244:	8b 85       	ldd	r24, Y+11	; 0x0b
     246:	9c 85       	ldd	r25, Y+12	; 0x0c
     248:	20 e0       	ldi	r18, 0x00	; 0
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	40 e8       	ldi	r20, 0x80	; 128
     24e:	5f e3       	ldi	r21, 0x3F	; 63
     250:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <__ltsf2>
     254:	88 23       	and	r24, r24
     256:	0c f0       	brlt	.+2      	; 0x25a <task3+0xe8>
     258:	10 e0       	ldi	r17, 0x00	; 0
     25a:	11 23       	and	r17, r17
     25c:	29 f0       	breq	.+10     	; 0x268 <task3+0xf6>
		__ticks = 1;
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	9e 87       	std	Y+14, r25	; 0x0e
     264:	8d 87       	std	Y+13, r24	; 0x0d
     266:	46 c0       	rjmp	.+140    	; 0x2f4 <task3+0x182>
	else if (__tmp > 65535)
     268:	11 e0       	ldi	r17, 0x01	; 1
     26a:	69 85       	ldd	r22, Y+9	; 0x09
     26c:	7a 85       	ldd	r23, Y+10	; 0x0a
     26e:	8b 85       	ldd	r24, Y+11	; 0x0b
     270:	9c 85       	ldd	r25, Y+12	; 0x0c
     272:	20 e0       	ldi	r18, 0x00	; 0
     274:	3f ef       	ldi	r19, 0xFF	; 255
     276:	4f e7       	ldi	r20, 0x7F	; 127
     278:	57 e4       	ldi	r21, 0x47	; 71
     27a:	0e 94 66 0d 	call	0x1acc	; 0x1acc <__gtsf2>
     27e:	18 16       	cp	r1, r24
     280:	0c f0       	brlt	.+2      	; 0x284 <task3+0x112>
     282:	10 e0       	ldi	r17, 0x00	; 0
     284:	11 23       	and	r17, r17
     286:	61 f1       	breq	.+88     	; 0x2e0 <task3+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     288:	6d 81       	ldd	r22, Y+5	; 0x05
     28a:	7e 81       	ldd	r23, Y+6	; 0x06
     28c:	8f 81       	ldd	r24, Y+7	; 0x07
     28e:	98 85       	ldd	r25, Y+8	; 0x08
     290:	20 e0       	ldi	r18, 0x00	; 0
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	40 e2       	ldi	r20, 0x20	; 32
     296:	51 e4       	ldi	r21, 0x41	; 65
     298:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <__mulsf3>
     29c:	dc 01       	movw	r26, r24
     29e:	cb 01       	movw	r24, r22
     2a0:	bc 01       	movw	r22, r24
     2a2:	cd 01       	movw	r24, r26
     2a4:	0e 94 98 0a 	call	0x1530	; 0x1530 <__fixunssfsi>
     2a8:	dc 01       	movw	r26, r24
     2aa:	cb 01       	movw	r24, r22
     2ac:	9e 87       	std	Y+14, r25	; 0x0e
     2ae:	8d 87       	std	Y+13, r24	; 0x0d
     2b0:	12 c0       	rjmp	.+36     	; 0x2d6 <task3+0x164>
     2b2:	80 e9       	ldi	r24, 0x90	; 144
     2b4:	91 e0       	ldi	r25, 0x01	; 1
     2b6:	98 8b       	std	Y+16, r25	; 0x10
     2b8:	8f 87       	std	Y+15, r24	; 0x0f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2ba:	8f 85       	ldd	r24, Y+15	; 0x0f
     2bc:	98 89       	ldd	r25, Y+16	; 0x10
     2be:	8c 01       	movw	r16, r24
     2c0:	f8 01       	movw	r30, r16
     2c2:	31 97       	sbiw	r30, 0x01	; 1
     2c4:	f1 f7       	brne	.-4      	; 0x2c2 <task3+0x150>
     2c6:	8f 01       	movw	r16, r30
     2c8:	18 8b       	std	Y+16, r17	; 0x10
     2ca:	0f 87       	std	Y+15, r16	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2cc:	8d 85       	ldd	r24, Y+13	; 0x0d
     2ce:	9e 85       	ldd	r25, Y+14	; 0x0e
     2d0:	01 97       	sbiw	r24, 0x01	; 1
     2d2:	9e 87       	std	Y+14, r25	; 0x0e
     2d4:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2d6:	8d 85       	ldd	r24, Y+13	; 0x0d
     2d8:	9e 85       	ldd	r25, Y+14	; 0x0e
     2da:	00 97       	sbiw	r24, 0x00	; 0
     2dc:	51 f7       	brne	.-44     	; 0x2b2 <task3+0x140>
     2de:	17 c0       	rjmp	.+46     	; 0x30e <task3+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2e0:	69 85       	ldd	r22, Y+9	; 0x09
     2e2:	7a 85       	ldd	r23, Y+10	; 0x0a
     2e4:	8b 85       	ldd	r24, Y+11	; 0x0b
     2e6:	9c 85       	ldd	r25, Y+12	; 0x0c
     2e8:	0e 94 98 0a 	call	0x1530	; 0x1530 <__fixunssfsi>
     2ec:	dc 01       	movw	r26, r24
     2ee:	cb 01       	movw	r24, r22
     2f0:	9e 87       	std	Y+14, r25	; 0x0e
     2f2:	8d 87       	std	Y+13, r24	; 0x0d
     2f4:	8d 85       	ldd	r24, Y+13	; 0x0d
     2f6:	9e 85       	ldd	r25, Y+14	; 0x0e
     2f8:	9a 8b       	std	Y+18, r25	; 0x12
     2fa:	89 8b       	std	Y+17, r24	; 0x11
     2fc:	89 89       	ldd	r24, Y+17	; 0x11
     2fe:	9a 89       	ldd	r25, Y+18	; 0x12
     300:	8c 01       	movw	r16, r24
     302:	c8 01       	movw	r24, r16
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	f1 f7       	brne	.-4      	; 0x304 <task3+0x192>
     308:	8c 01       	movw	r16, r24
     30a:	1a 8b       	std	Y+18, r17	; 0x12
     30c:	09 8b       	std	Y+17, r16	; 0x11
			_delay_ms(100);
			leaveCritical();
     30e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <leaveCritical>
			PORTD ^= 0b00100000;
     312:	8b e2       	ldi	r24, 0x2B	; 43
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	2b e2       	ldi	r18, 0x2B	; 43
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	f9 01       	movw	r30, r18
     31c:	30 81       	ld	r19, Z
     31e:	20 e2       	ldi	r18, 0x20	; 32
     320:	23 27       	eor	r18, r19
     322:	fc 01       	movw	r30, r24
     324:	20 83       	st	Z, r18
		}
	}
     326:	35 cf       	rjmp	.-406    	; 0x192 <task3+0x20>

00000328 <setup>:
}

void setup()
{
     328:	df 93       	push	r29
     32a:	cf 93       	push	r28
     32c:	cd b7       	in	r28, 0x3d	; 61
     32e:	de b7       	in	r29, 0x3e	; 62
	// create a global queue
	queue = (OSSignal*)OSmakeQ(MAX_QUEUE_SIZE,sizeof(int));
     330:	82 e3       	ldi	r24, 0x32	; 50
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	62 e0       	ldi	r22, 0x02	; 2
     336:	70 e0       	ldi	r23, 0x00	; 0
     338:	0e 94 ab 03 	call	0x756	; 0x756 <OSmakeQ>
     33c:	90 93 61 01 	sts	0x0161, r25
     340:	80 93 60 01 	sts	0x0160, r24
	
	// for testing only
	DDRD |= 0b11111100;
     344:	8a e2       	ldi	r24, 0x2A	; 42
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	2a e2       	ldi	r18, 0x2A	; 42
     34a:	30 e0       	ldi	r19, 0x00	; 0
     34c:	f9 01       	movw	r30, r18
     34e:	20 81       	ld	r18, Z
     350:	2c 6f       	ori	r18, 0xFC	; 252
     352:	fc 01       	movw	r30, r24
     354:	20 83       	st	Z, r18
	
	// signal OS running correctly
	PORTD |= 0b10000000;
     356:	8b e2       	ldi	r24, 0x2B	; 43
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	2b e2       	ldi	r18, 0x2B	; 43
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	f9 01       	movw	r30, r18
     360:	20 81       	ld	r18, Z
     362:	20 68       	ori	r18, 0x80	; 128
     364:	fc 01       	movw	r30, r24
     366:	20 83       	st	Z, r18
	
	variable = 0;
     368:	10 92 1b 01 	sts	0x011B, r1
     36c:	10 92 1a 01 	sts	0x011A, r1
}
     370:	cf 91       	pop	r28
     372:	df 91       	pop	r29
     374:	08 95       	ret

00000376 <main>:




int main()
{
     376:	df 93       	push	r29
     378:	cf 93       	push	r28
     37a:	cd b7       	in	r28, 0x3d	; 61
     37c:	de b7       	in	r29, 0x3e	; 62
	setupSerial();
     37e:	0e 94 c8 08 	call	0x1190	; 0x1190 <setupSerial>
	
	cli();
     382:	f8 94       	cli
	
	OSInit();
     384:	0e 94 36 08 	call	0x106c	; 0x106c <OSInit>
	
	setup();
     388:	0e 94 94 01 	call	0x328	; 0x328 <setup>
	
	// Create the tasks. Task1 is for the buzzer and we pass in the base frequency as an argument.
	
	OSAddTask(task1, 0, NULL);
     38c:	83 e5       	ldi	r24, 0x53	; 83
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	60 e0       	ldi	r22, 0x00	; 0
     392:	70 e0       	ldi	r23, 0x00	; 0
     394:	40 e0       	ldi	r20, 0x00	; 0
     396:	50 e0       	ldi	r21, 0x00	; 0
     398:	0e 94 50 08 	call	0x10a0	; 0x10a0 <OSAddTask>
	
	OSAddTask(task2, 1, NULL);
     39c:	86 e8       	ldi	r24, 0x86	; 134
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	61 e0       	ldi	r22, 0x01	; 1
     3a2:	70 e0       	ldi	r23, 0x00	; 0
     3a4:	40 e0       	ldi	r20, 0x00	; 0
     3a6:	50 e0       	ldi	r21, 0x00	; 0
     3a8:	0e 94 50 08 	call	0x10a0	; 0x10a0 <OSAddTask>
	
	OSAddTask(task3, 1, NULL);
     3ac:	89 eb       	ldi	r24, 0xB9	; 185
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	61 e0       	ldi	r22, 0x01	; 1
     3b2:	70 e0       	ldi	r23, 0x00	; 0
     3b4:	40 e0       	ldi	r20, 0x00	; 0
     3b6:	50 e0       	ldi	r21, 0x00	; 0
     3b8:	0e 94 50 08 	call	0x10a0	; 0x10a0 <OSAddTask>
	
	// start the OS
	OSRun();
     3bc:	0e 94 ad 08 	call	0x115a	; 0x115a <OSRun>
	
	while(1);
     3c0:	ff cf       	rjmp	.-2      	; 0x3c0 <main+0x4a>

000003c2 <enterCritical>:

/* ======================================= */
/* Critical section management             */
/* ======================================= */
inline void enterCritical()
{
     3c2:	df 93       	push	r29
     3c4:	cf 93       	push	r28
     3c6:	cd b7       	in	r28, 0x3d	; 61
     3c8:	de b7       	in	r29, 0x3e	; 62
	cli();
     3ca:	f8 94       	cli
}
     3cc:	cf 91       	pop	r28
     3ce:	df 91       	pop	r29
     3d0:	08 95       	ret

000003d2 <leaveCritical>:

inline void leaveCritical()
{
     3d2:	df 93       	push	r29
     3d4:	cf 93       	push	r28
     3d6:	cd b7       	in	r28, 0x3d	; 61
     3d8:	de b7       	in	r29, 0x3e	; 62
	sei();
     3da:	78 94       	sei
}
     3dc:	cf 91       	pop	r28
     3de:	df 91       	pop	r29
     3e0:	08 95       	ret

000003e2 <OSmakeSema>:

#ifdef OSIncludeSema

// Creates a semaphore with initial value initval
OSSignal *OSmakeSema(int initval)
{
     3e2:	df 93       	push	r29
     3e4:	cf 93       	push	r28
     3e6:	00 d0       	rcall	.+0      	; 0x3e8 <OSmakeSema+0x6>
     3e8:	00 d0       	rcall	.+0      	; 0x3ea <OSmakeSema+0x8>
     3ea:	cd b7       	in	r28, 0x3d	; 61
     3ec:	de b7       	in	r29, 0x3e	; 62
     3ee:	9c 83       	std	Y+4, r25	; 0x04
     3f0:	8b 83       	std	Y+3, r24	; 0x03
	OSSignal *sem = (OSSignal *) malloc(sizeof(OSSignal));
     3f2:	8c e0       	ldi	r24, 0x0C	; 12
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <malloc>
     3fa:	9a 83       	std	Y+2, r25	; 0x02
     3fc:	89 83       	std	Y+1, r24	; 0x01
	if(!sem){	// when the space allocation is not successful
     3fe:	89 81       	ldd	r24, Y+1	; 0x01
     400:	9a 81       	ldd	r25, Y+2	; 0x02
     402:	00 97       	sbiw	r24, 0x00	; 0
     404:	61 f4       	brne	.+24     	; 0x41e <OSmakeSema+0x3c>
		PORTD |= 0b00010000;	// signal error
     406:	8b e2       	ldi	r24, 0x2B	; 43
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	2b e2       	ldi	r18, 0x2B	; 43
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	f9 01       	movw	r30, r18
     410:	20 81       	ld	r18, Z
     412:	20 61       	ori	r18, 0x10	; 16
     414:	fc 01       	movw	r30, r24
     416:	20 83       	st	Z, r18
		return NULL;
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	50 c0       	rjmp	.+160    	; 0x4be <OSmakeSema+0xdc>
	}
	
	sem->type	= SEMAPHORE_TYPE;
     41e:	89 81       	ldd	r24, Y+1	; 0x01
     420:	9a 81       	ldd	r25, Y+2	; 0x02
     422:	fc 01       	movw	r30, r24
     424:	11 82       	std	Z+1, r1	; 0x01
     426:	10 82       	st	Z, r1
	sem->num	= initval;	// the (-num) is qsize; when num >= 0, qsize = 0
     428:	89 81       	ldd	r24, Y+1	; 0x01
     42a:	9a 81       	ldd	r25, Y+2	; 0x02
     42c:	2b 81       	ldd	r18, Y+3	; 0x03
     42e:	3c 81       	ldd	r19, Y+4	; 0x04
     430:	fc 01       	movw	r30, r24
     432:	33 83       	std	Z+3, r19	; 0x03
     434:	22 83       	std	Z+2, r18	; 0x02
	sem->esize	= sizeof(int);	// store the task id
     436:	89 81       	ldd	r24, Y+1	; 0x01
     438:	9a 81       	ldd	r25, Y+2	; 0x02
     43a:	22 e0       	ldi	r18, 0x02	; 2
     43c:	30 e0       	ldi	r19, 0x00	; 0
     43e:	fc 01       	movw	r30, r24
     440:	35 83       	std	Z+5, r19	; 0x05
     442:	24 83       	std	Z+4, r18	; 0x04
	sem->size	= OS_NUM_TASKS;	// the maximum is the number of tasks system has
     444:	89 81       	ldd	r24, Y+1	; 0x01
     446:	9a 81       	ldd	r25, Y+2	; 0x02
     448:	24 e0       	ldi	r18, 0x04	; 4
     44a:	30 e0       	ldi	r19, 0x00	; 0
     44c:	fc 01       	movw	r30, r24
     44e:	37 83       	std	Z+7, r19	; 0x07
     450:	26 83       	std	Z+6, r18	; 0x06
	sem->start	= calloc(sem->size,sem->esize);
     452:	89 81       	ldd	r24, Y+1	; 0x01
     454:	9a 81       	ldd	r25, Y+2	; 0x02
     456:	fc 01       	movw	r30, r24
     458:	86 81       	ldd	r24, Z+6	; 0x06
     45a:	97 81       	ldd	r25, Z+7	; 0x07
     45c:	29 81       	ldd	r18, Y+1	; 0x01
     45e:	3a 81       	ldd	r19, Y+2	; 0x02
     460:	f9 01       	movw	r30, r18
     462:	24 81       	ldd	r18, Z+4	; 0x04
     464:	35 81       	ldd	r19, Z+5	; 0x05
     466:	b9 01       	movw	r22, r18
     468:	0e 94 36 10 	call	0x206c	; 0x206c <calloc>
     46c:	9c 01       	movw	r18, r24
     46e:	89 81       	ldd	r24, Y+1	; 0x01
     470:	9a 81       	ldd	r25, Y+2	; 0x02
     472:	fc 01       	movw	r30, r24
     474:	31 87       	std	Z+9, r19	; 0x09
     476:	20 87       	std	Z+8, r18	; 0x08
	
	if(!(sem->start)){	// when the space allocation is not successful
     478:	89 81       	ldd	r24, Y+1	; 0x01
     47a:	9a 81       	ldd	r25, Y+2	; 0x02
     47c:	fc 01       	movw	r30, r24
     47e:	80 85       	ldd	r24, Z+8	; 0x08
     480:	91 85       	ldd	r25, Z+9	; 0x09
     482:	00 97       	sbiw	r24, 0x00	; 0
     484:	81 f4       	brne	.+32     	; 0x4a6 <OSmakeSema+0xc4>
		free(sem);
     486:	89 81       	ldd	r24, Y+1	; 0x01
     488:	9a 81       	ldd	r25, Y+2	; 0x02
     48a:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <free>
		PORTD |= 0b00010000;	// signal error
     48e:	8b e2       	ldi	r24, 0x2B	; 43
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	2b e2       	ldi	r18, 0x2B	; 43
     494:	30 e0       	ldi	r19, 0x00	; 0
     496:	f9 01       	movw	r30, r18
     498:	20 81       	ld	r18, Z
     49a:	20 61       	ori	r18, 0x10	; 16
     49c:	fc 01       	movw	r30, r24
     49e:	20 83       	st	Z, r18
		return NULL;
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	0c c0       	rjmp	.+24     	; 0x4be <OSmakeSema+0xdc>
	}
	
	sem->head	= sem->start;
     4a6:	89 81       	ldd	r24, Y+1	; 0x01
     4a8:	9a 81       	ldd	r25, Y+2	; 0x02
     4aa:	fc 01       	movw	r30, r24
     4ac:	20 85       	ldd	r18, Z+8	; 0x08
     4ae:	31 85       	ldd	r19, Z+9	; 0x09
     4b0:	89 81       	ldd	r24, Y+1	; 0x01
     4b2:	9a 81       	ldd	r25, Y+2	; 0x02
     4b4:	fc 01       	movw	r30, r24
     4b6:	33 87       	std	Z+11, r19	; 0x0b
     4b8:	22 87       	std	Z+10, r18	; 0x0a
	
	return sem;
     4ba:	89 81       	ldd	r24, Y+1	; 0x01
     4bc:	9a 81       	ldd	r25, Y+2	; 0x02
}
     4be:	0f 90       	pop	r0
     4c0:	0f 90       	pop	r0
     4c2:	0f 90       	pop	r0
     4c4:	0f 90       	pop	r0
     4c6:	cf 91       	pop	r28
     4c8:	df 91       	pop	r29
     4ca:	08 95       	ret

000004cc <OSSemPend>:

// Takes a semaphore. Blocks if semaphore is 0.
void OSSemPend(OSSignal *sema)
{
     4cc:	df 93       	push	r29
     4ce:	cf 93       	push	r28
     4d0:	00 d0       	rcall	.+0      	; 0x4d2 <OSSemPend+0x6>
     4d2:	cd b7       	in	r28, 0x3d	; 61
     4d4:	de b7       	in	r29, 0x3e	; 62
     4d6:	9a 83       	std	Y+2, r25	; 0x02
     4d8:	89 83       	std	Y+1, r24	; 0x01
	enterCritical();
     4da:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <enterCritical>
	
	// wrong type no use
	if(sema == NULL || sema->type != SEMAPHORE_TYPE){
     4de:	89 81       	ldd	r24, Y+1	; 0x01
     4e0:	9a 81       	ldd	r25, Y+2	; 0x02
     4e2:	00 97       	sbiw	r24, 0x00	; 0
     4e4:	39 f0       	breq	.+14     	; 0x4f4 <OSSemPend+0x28>
     4e6:	89 81       	ldd	r24, Y+1	; 0x01
     4e8:	9a 81       	ldd	r25, Y+2	; 0x02
     4ea:	fc 01       	movw	r30, r24
     4ec:	80 81       	ld	r24, Z
     4ee:	91 81       	ldd	r25, Z+1	; 0x01
     4f0:	00 97       	sbiw	r24, 0x00	; 0
     4f2:	19 f0       	breq	.+6      	; 0x4fa <OSSemPend+0x2e>
		leaveCritical();
     4f4:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <leaveCritical>
		return;
     4f8:	75 c0       	rjmp	.+234    	; 0x5e4 <OSSemPend+0x118>
	}
	
	if(sema->num <= 0){
     4fa:	89 81       	ldd	r24, Y+1	; 0x01
     4fc:	9a 81       	ldd	r25, Y+2	; 0x02
     4fe:	fc 01       	movw	r30, r24
     500:	82 81       	ldd	r24, Z+2	; 0x02
     502:	93 81       	ldd	r25, Z+3	; 0x03
     504:	18 16       	cp	r1, r24
     506:	19 06       	cpc	r1, r25
     508:	0c f4       	brge	.+2      	; 0x50c <OSSemPend+0x40>
     50a:	5d c0       	rjmp	.+186    	; 0x5c6 <OSSemPend+0xfa>
		// the queue used in the semaphore would be always less than the maximum
		// but check to avoid overflow
		if(-(sema->num) >= sema->size){
     50c:	89 81       	ldd	r24, Y+1	; 0x01
     50e:	9a 81       	ldd	r25, Y+2	; 0x02
     510:	fc 01       	movw	r30, r24
     512:	82 81       	ldd	r24, Z+2	; 0x02
     514:	93 81       	ldd	r25, Z+3	; 0x03
     516:	22 27       	eor	r18, r18
     518:	33 27       	eor	r19, r19
     51a:	28 1b       	sub	r18, r24
     51c:	39 0b       	sbc	r19, r25
     51e:	89 81       	ldd	r24, Y+1	; 0x01
     520:	9a 81       	ldd	r25, Y+2	; 0x02
     522:	fc 01       	movw	r30, r24
     524:	86 81       	ldd	r24, Z+6	; 0x06
     526:	97 81       	ldd	r25, Z+7	; 0x07
     528:	28 17       	cp	r18, r24
     52a:	39 07       	cpc	r19, r25
     52c:	64 f0       	brlt	.+24     	; 0x546 <OSSemPend+0x7a>
			PORTD |= 0b00010000;	// signal error
     52e:	8b e2       	ldi	r24, 0x2B	; 43
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	2b e2       	ldi	r18, 0x2B	; 43
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	f9 01       	movw	r30, r18
     538:	20 81       	ld	r18, Z
     53a:	20 61       	ori	r18, 0x10	; 16
     53c:	fc 01       	movw	r30, r24
     53e:	20 83       	st	Z, r18
			leaveCritical();
     540:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <leaveCritical>
			return;
     544:	4f c0       	rjmp	.+158    	; 0x5e4 <OSSemPend+0x118>
		} else if(currentTask == -1){	// when possibly os not run
     546:	80 91 0a 01 	lds	r24, 0x010A
     54a:	90 91 0b 01 	lds	r25, 0x010B
     54e:	ff ef       	ldi	r31, 0xFF	; 255
     550:	8f 3f       	cpi	r24, 0xFF	; 255
     552:	9f 07       	cpc	r25, r31
     554:	61 f4       	brne	.+24     	; 0x56e <OSSemPend+0xa2>
			PORTD |= 0b00010000;	// signal error
     556:	8b e2       	ldi	r24, 0x2B	; 43
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	2b e2       	ldi	r18, 0x2B	; 43
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	f9 01       	movw	r30, r18
     560:	20 81       	ld	r18, Z
     562:	20 61       	ori	r18, 0x10	; 16
     564:	fc 01       	movw	r30, r24
     566:	20 83       	st	Z, r18
			leaveCritical();
     568:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <leaveCritical>
			return;
     56c:	3b c0       	rjmp	.+118    	; 0x5e4 <OSSemPend+0x118>
		
		// set current task to block state, save the # of current task
		
		
		//while(sema->num);
		taskTable[currentTask].sem_counter  = 1;	// signal this to be blocked
     56e:	40 91 0a 01 	lds	r20, 0x010A
     572:	50 91 0b 01 	lds	r21, 0x010B
     576:	2f e0       	ldi	r18, 0x0F	; 15
     578:	31 e0       	ldi	r19, 0x01	; 1
     57a:	42 9f       	mul	r20, r18
     57c:	c0 01       	movw	r24, r0
     57e:	43 9f       	mul	r20, r19
     580:	90 0d       	add	r25, r0
     582:	52 9f       	mul	r21, r18
     584:	90 0d       	add	r25, r0
     586:	11 24       	eor	r1, r1
     588:	87 58       	subi	r24, 0x87	; 135
     58a:	9d 4f       	sbci	r25, 0xFD	; 253
     58c:	21 e0       	ldi	r18, 0x01	; 1
     58e:	30 e0       	ldi	r19, 0x00	; 0
     590:	fc 01       	movw	r30, r24
     592:	31 83       	std	Z+1, r19	; 0x01
     594:	20 83       	st	Z, r18
		leaveCritical();
     596:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <leaveCritical>
		while(taskTable[currentTask].sem_counter);	// buzy waiting
     59a:	00 00       	nop
     59c:	40 91 0a 01 	lds	r20, 0x010A
     5a0:	50 91 0b 01 	lds	r21, 0x010B
     5a4:	2f e0       	ldi	r18, 0x0F	; 15
     5a6:	31 e0       	ldi	r19, 0x01	; 1
     5a8:	42 9f       	mul	r20, r18
     5aa:	c0 01       	movw	r24, r0
     5ac:	43 9f       	mul	r20, r19
     5ae:	90 0d       	add	r25, r0
     5b0:	52 9f       	mul	r21, r18
     5b2:	90 0d       	add	r25, r0
     5b4:	11 24       	eor	r1, r1
     5b6:	87 58       	subi	r24, 0x87	; 135
     5b8:	9d 4f       	sbci	r25, 0xFD	; 253
     5ba:	fc 01       	movw	r30, r24
     5bc:	80 81       	ld	r24, Z
     5be:	91 81       	ldd	r25, Z+1	; 0x01
     5c0:	00 97       	sbiw	r24, 0x00	; 0
     5c2:	61 f7       	brne	.-40     	; 0x59c <OSSemPend+0xd0>
     5c4:	0d c0       	rjmp	.+26     	; 0x5e0 <OSSemPend+0x114>
		*(int*)(currentPos) = currentTask;
		
		sema->num--;

		OSSwapTask();*/
	} else (sema->num)--;
     5c6:	89 81       	ldd	r24, Y+1	; 0x01
     5c8:	9a 81       	ldd	r25, Y+2	; 0x02
     5ca:	fc 01       	movw	r30, r24
     5cc:	82 81       	ldd	r24, Z+2	; 0x02
     5ce:	93 81       	ldd	r25, Z+3	; 0x03
     5d0:	9c 01       	movw	r18, r24
     5d2:	21 50       	subi	r18, 0x01	; 1
     5d4:	30 40       	sbci	r19, 0x00	; 0
     5d6:	89 81       	ldd	r24, Y+1	; 0x01
     5d8:	9a 81       	ldd	r25, Y+2	; 0x02
     5da:	fc 01       	movw	r30, r24
     5dc:	33 83       	std	Z+3, r19	; 0x03
     5de:	22 83       	std	Z+2, r18	; 0x02
	
	leaveCritical();
     5e0:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <leaveCritical>
}
     5e4:	0f 90       	pop	r0
     5e6:	0f 90       	pop	r0
     5e8:	cf 91       	pop	r28
     5ea:	df 91       	pop	r29
     5ec:	08 95       	ret

000005ee <OSSemPost>:

// Posts a semaphore.
void OSSemPost(OSSignal *sema)
{
     5ee:	df 93       	push	r29
     5f0:	cf 93       	push	r28
     5f2:	cd b7       	in	r28, 0x3d	; 61
     5f4:	de b7       	in	r29, 0x3e	; 62
     5f6:	28 97       	sbiw	r28, 0x08	; 8
     5f8:	0f b6       	in	r0, 0x3f	; 63
     5fa:	f8 94       	cli
     5fc:	de bf       	out	0x3e, r29	; 62
     5fe:	0f be       	out	0x3f, r0	; 63
     600:	cd bf       	out	0x3d, r28	; 61
     602:	98 87       	std	Y+8, r25	; 0x08
     604:	8f 83       	std	Y+7, r24	; 0x07
	enterCritical();
     606:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <enterCritical>
	
	// wrong type no use
	if(sema == NULL || sema->type != SEMAPHORE_TYPE){
     60a:	8f 81       	ldd	r24, Y+7	; 0x07
     60c:	98 85       	ldd	r25, Y+8	; 0x08
     60e:	00 97       	sbiw	r24, 0x00	; 0
     610:	39 f0       	breq	.+14     	; 0x620 <OSSemPost+0x32>
     612:	8f 81       	ldd	r24, Y+7	; 0x07
     614:	98 85       	ldd	r25, Y+8	; 0x08
     616:	fc 01       	movw	r30, r24
     618:	80 81       	ld	r24, Z
     61a:	91 81       	ldd	r25, Z+1	; 0x01
     61c:	00 97       	sbiw	r24, 0x00	; 0
     61e:	19 f0       	breq	.+6      	; 0x626 <OSSemPost+0x38>
		leaveCritical();
     620:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <leaveCritical>
		return;
     624:	8f c0       	rjmp	.+286    	; 0x744 <OSSemPost+0x156>
	}
	
	if(sema->num < 0){	// only when queue has element
     626:	8f 81       	ldd	r24, Y+7	; 0x07
     628:	98 85       	ldd	r25, Y+8	; 0x08
     62a:	fc 01       	movw	r30, r24
     62c:	82 81       	ldd	r24, Z+2	; 0x02
     62e:	93 81       	ldd	r25, Z+3	; 0x03
     630:	99 23       	and	r25, r25
     632:	0c f0       	brlt	.+2      	; 0x636 <OSSemPost+0x48>
     634:	6f c0       	rjmp	.+222    	; 0x714 <OSSemPost+0x126>
		if(currentTask == -1){	// when possibly os not run
     636:	80 91 0a 01 	lds	r24, 0x010A
     63a:	90 91 0b 01 	lds	r25, 0x010B
     63e:	ff ef       	ldi	r31, 0xFF	; 255
     640:	8f 3f       	cpi	r24, 0xFF	; 255
     642:	9f 07       	cpc	r25, r31
     644:	19 f4       	brne	.+6      	; 0x64c <OSSemPost+0x5e>
			//PORTD |= 0b00010000;	// signal error	TODO
			leaveCritical();
     646:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <leaveCritical>
			return;
     64a:	7c c0       	rjmp	.+248    	; 0x744 <OSSemPost+0x156>
		}
		
		// release one semaphore
		int i,max,index;
		for(i = 0,max = -1, index = -1;i<task_counter;i++){
     64c:	1a 82       	std	Y+2, r1	; 0x02
     64e:	19 82       	std	Y+1, r1	; 0x01
     650:	8f ef       	ldi	r24, 0xFF	; 255
     652:	9f ef       	ldi	r25, 0xFF	; 255
     654:	9e 83       	std	Y+6, r25	; 0x06
     656:	8d 83       	std	Y+5, r24	; 0x05
     658:	8f ef       	ldi	r24, 0xFF	; 255
     65a:	9f ef       	ldi	r25, 0xFF	; 255
     65c:	9c 83       	std	Y+4, r25	; 0x04
     65e:	8b 83       	std	Y+3, r24	; 0x03
     660:	30 c0       	rjmp	.+96     	; 0x6c2 <OSSemPost+0xd4>
			if(taskTable[i].sem_counter && taskTable[i].skipedTimes > max){
     662:	49 81       	ldd	r20, Y+1	; 0x01
     664:	5a 81       	ldd	r21, Y+2	; 0x02
     666:	2f e0       	ldi	r18, 0x0F	; 15
     668:	31 e0       	ldi	r19, 0x01	; 1
     66a:	42 9f       	mul	r20, r18
     66c:	c0 01       	movw	r24, r0
     66e:	43 9f       	mul	r20, r19
     670:	90 0d       	add	r25, r0
     672:	52 9f       	mul	r21, r18
     674:	90 0d       	add	r25, r0
     676:	11 24       	eor	r1, r1
     678:	87 58       	subi	r24, 0x87	; 135
     67a:	9d 4f       	sbci	r25, 0xFD	; 253
     67c:	fc 01       	movw	r30, r24
     67e:	80 81       	ld	r24, Z
     680:	91 81       	ldd	r25, Z+1	; 0x01
     682:	00 97       	sbiw	r24, 0x00	; 0
     684:	c9 f0       	breq	.+50     	; 0x6b8 <OSSemPost+0xca>
     686:	49 81       	ldd	r20, Y+1	; 0x01
     688:	5a 81       	ldd	r21, Y+2	; 0x02
     68a:	2f e0       	ldi	r18, 0x0F	; 15
     68c:	31 e0       	ldi	r19, 0x01	; 1
     68e:	42 9f       	mul	r20, r18
     690:	c0 01       	movw	r24, r0
     692:	43 9f       	mul	r20, r19
     694:	90 0d       	add	r25, r0
     696:	52 9f       	mul	r21, r18
     698:	90 0d       	add	r25, r0
     69a:	11 24       	eor	r1, r1
     69c:	89 58       	subi	r24, 0x89	; 137
     69e:	9d 4f       	sbci	r25, 0xFD	; 253
     6a0:	fc 01       	movw	r30, r24
     6a2:	20 81       	ld	r18, Z
     6a4:	31 81       	ldd	r19, Z+1	; 0x01
     6a6:	8d 81       	ldd	r24, Y+5	; 0x05
     6a8:	9e 81       	ldd	r25, Y+6	; 0x06
     6aa:	82 17       	cp	r24, r18
     6ac:	93 07       	cpc	r25, r19
     6ae:	24 f4       	brge	.+8      	; 0x6b8 <OSSemPost+0xca>
				index = i;
     6b0:	89 81       	ldd	r24, Y+1	; 0x01
     6b2:	9a 81       	ldd	r25, Y+2	; 0x02
     6b4:	9c 83       	std	Y+4, r25	; 0x04
     6b6:	8b 83       	std	Y+3, r24	; 0x03
			return;
		}
		
		// release one semaphore
		int i,max,index;
		for(i = 0,max = -1, index = -1;i<task_counter;i++){
     6b8:	89 81       	ldd	r24, Y+1	; 0x01
     6ba:	9a 81       	ldd	r25, Y+2	; 0x02
     6bc:	01 96       	adiw	r24, 0x01	; 1
     6be:	9a 83       	std	Y+2, r25	; 0x02
     6c0:	89 83       	std	Y+1, r24	; 0x01
     6c2:	80 91 1e 01 	lds	r24, 0x011E
     6c6:	90 91 1f 01 	lds	r25, 0x011F
     6ca:	29 81       	ldd	r18, Y+1	; 0x01
     6cc:	3a 81       	ldd	r19, Y+2	; 0x02
     6ce:	28 17       	cp	r18, r24
     6d0:	39 07       	cpc	r19, r25
     6d2:	3c f2       	brlt	.-114    	; 0x662 <OSSemPost+0x74>
				index = i;
			}
		}
		
		// release this i
		taskTable[index].sem_counter = 0;
     6d4:	4b 81       	ldd	r20, Y+3	; 0x03
     6d6:	5c 81       	ldd	r21, Y+4	; 0x04
     6d8:	2f e0       	ldi	r18, 0x0F	; 15
     6da:	31 e0       	ldi	r19, 0x01	; 1
     6dc:	42 9f       	mul	r20, r18
     6de:	c0 01       	movw	r24, r0
     6e0:	43 9f       	mul	r20, r19
     6e2:	90 0d       	add	r25, r0
     6e4:	52 9f       	mul	r21, r18
     6e6:	90 0d       	add	r25, r0
     6e8:	11 24       	eor	r1, r1
     6ea:	87 58       	subi	r24, 0x87	; 135
     6ec:	9d 4f       	sbci	r25, 0xFD	; 253
     6ee:	fc 01       	movw	r30, r24
     6f0:	11 82       	std	Z+1, r1	; 0x01
     6f2:	10 82       	st	Z, r1
		sema->num++;
     6f4:	8f 81       	ldd	r24, Y+7	; 0x07
     6f6:	98 85       	ldd	r25, Y+8	; 0x08
     6f8:	fc 01       	movw	r30, r24
     6fa:	82 81       	ldd	r24, Z+2	; 0x02
     6fc:	93 81       	ldd	r25, Z+3	; 0x03
     6fe:	9c 01       	movw	r18, r24
     700:	2f 5f       	subi	r18, 0xFF	; 255
     702:	3f 4f       	sbci	r19, 0xFF	; 255
     704:	8f 81       	ldd	r24, Y+7	; 0x07
     706:	98 85       	ldd	r25, Y+8	; 0x08
     708:	fc 01       	movw	r30, r24
     70a:	33 83       	std	Z+3, r19	; 0x03
     70c:	22 83       	std	Z+2, r18	; 0x02
		sema->head += sema->esize;
		if(sema->head == sema->start + (-sema->num * sema->esize) ){
			sema->head = sema->start;
		}
		*/
		OSSwapTask();
     70e:	0e 94 41 07 	call	0xe82	; 0xe82 <OSSwapTask>
     712:	16 c0       	rjmp	.+44     	; 0x740 <OSSemPost+0x152>
	} else{
		// set an upper limit to avoid overflow
		if(sema->num <= 10000)	(sema->num)++;
     714:	8f 81       	ldd	r24, Y+7	; 0x07
     716:	98 85       	ldd	r25, Y+8	; 0x08
     718:	fc 01       	movw	r30, r24
     71a:	82 81       	ldd	r24, Z+2	; 0x02
     71c:	93 81       	ldd	r25, Z+3	; 0x03
     71e:	f7 e2       	ldi	r31, 0x27	; 39
     720:	81 31       	cpi	r24, 0x11	; 17
     722:	9f 07       	cpc	r25, r31
     724:	6c f4       	brge	.+26     	; 0x740 <OSSemPost+0x152>
     726:	8f 81       	ldd	r24, Y+7	; 0x07
     728:	98 85       	ldd	r25, Y+8	; 0x08
     72a:	fc 01       	movw	r30, r24
     72c:	82 81       	ldd	r24, Z+2	; 0x02
     72e:	93 81       	ldd	r25, Z+3	; 0x03
     730:	9c 01       	movw	r18, r24
     732:	2f 5f       	subi	r18, 0xFF	; 255
     734:	3f 4f       	sbci	r19, 0xFF	; 255
     736:	8f 81       	ldd	r24, Y+7	; 0x07
     738:	98 85       	ldd	r25, Y+8	; 0x08
     73a:	fc 01       	movw	r30, r24
     73c:	33 83       	std	Z+3, r19	; 0x03
     73e:	22 83       	std	Z+2, r18	; 0x02
	}
	
	leaveCritical();
     740:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <leaveCritical>
}
     744:	28 96       	adiw	r28, 0x08	; 8
     746:	0f b6       	in	r0, 0x3f	; 63
     748:	f8 94       	cli
     74a:	de bf       	out	0x3e, r29	; 62
     74c:	0f be       	out	0x3f, r0	; 63
     74e:	cd bf       	out	0x3d, r28	; 61
     750:	cf 91       	pop	r28
     752:	df 91       	pop	r29
     754:	08 95       	ret

00000756 <OSmakeQ>:
#ifdef OSIncludeQueues

// qsize=number of elements in the queue. esize=size of each element. So calling makeQ(10, sizeof(int)) would produce a queue of 10 elements, 
// with each element being the size of an integer.
OSSignal *OSmakeQ(int qsize, int esize)
{
     756:	df 93       	push	r29
     758:	cf 93       	push	r28
     75a:	00 d0       	rcall	.+0      	; 0x75c <OSmakeQ+0x6>
     75c:	00 d0       	rcall	.+0      	; 0x75e <OSmakeQ+0x8>
     75e:	00 d0       	rcall	.+0      	; 0x760 <OSmakeQ+0xa>
     760:	cd b7       	in	r28, 0x3d	; 61
     762:	de b7       	in	r29, 0x3e	; 62
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	8b 83       	std	Y+3, r24	; 0x03
     768:	7e 83       	std	Y+6, r23	; 0x06
     76a:	6d 83       	std	Y+5, r22	; 0x05
	// use the q_sema
	if(q_sema_empty == NULL)	q_sema_empty = (OSSignal*)OSmakeSema(0);
     76c:	80 91 62 01 	lds	r24, 0x0162
     770:	90 91 63 01 	lds	r25, 0x0163
     774:	00 97       	sbiw	r24, 0x00	; 0
     776:	41 f4       	brne	.+16     	; 0x788 <OSmakeQ+0x32>
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <OSmakeSema>
     780:	90 93 63 01 	sts	0x0163, r25
     784:	80 93 62 01 	sts	0x0162, r24
	if(q_sema_full == NULL)		q_sema_full  = (OSSignal*)OSmakeSema(0);
     788:	80 91 64 01 	lds	r24, 0x0164
     78c:	90 91 65 01 	lds	r25, 0x0165
     790:	00 97       	sbiw	r24, 0x00	; 0
     792:	41 f4       	brne	.+16     	; 0x7a4 <OSmakeQ+0x4e>
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <OSmakeSema>
     79c:	90 93 65 01 	sts	0x0165, r25
     7a0:	80 93 64 01 	sts	0x0164, r24
	if(q_sema_empty == NULL	||	q_sema_full == NULL){	// semaphore creation failed
     7a4:	80 91 62 01 	lds	r24, 0x0162
     7a8:	90 91 63 01 	lds	r25, 0x0163
     7ac:	00 97       	sbiw	r24, 0x00	; 0
     7ae:	31 f0       	breq	.+12     	; 0x7bc <OSmakeQ+0x66>
     7b0:	80 91 64 01 	lds	r24, 0x0164
     7b4:	90 91 65 01 	lds	r25, 0x0165
     7b8:	00 97       	sbiw	r24, 0x00	; 0
     7ba:	61 f4       	brne	.+24     	; 0x7d4 <OSmakeQ+0x7e>
		PORTD |= 0b00010000;
     7bc:	8b e2       	ldi	r24, 0x2B	; 43
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	2b e2       	ldi	r18, 0x2B	; 43
     7c2:	30 e0       	ldi	r19, 0x00	; 0
     7c4:	f9 01       	movw	r30, r18
     7c6:	20 81       	ld	r18, Z
     7c8:	20 61       	ori	r18, 0x10	; 16
     7ca:	fc 01       	movw	r30, r24
     7cc:	20 83       	st	Z, r18
		return NULL;
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	66 c0       	rjmp	.+204    	; 0x8a0 <OSmakeQ+0x14a>
	}
	
	OSSignal *que = (OSSignal *) malloc(sizeof(OSSignal));
     7d4:	8c e0       	ldi	r24, 0x0C	; 12
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <malloc>
     7dc:	9a 83       	std	Y+2, r25	; 0x02
     7de:	89 83       	std	Y+1, r24	; 0x01
	if(!que){	// when the space allocation is not successful
     7e0:	89 81       	ldd	r24, Y+1	; 0x01
     7e2:	9a 81       	ldd	r25, Y+2	; 0x02
     7e4:	00 97       	sbiw	r24, 0x00	; 0
     7e6:	61 f4       	brne	.+24     	; 0x800 <OSmakeQ+0xaa>
		PORTD |= 0b00010000;	// signal error
     7e8:	8b e2       	ldi	r24, 0x2B	; 43
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	2b e2       	ldi	r18, 0x2B	; 43
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	f9 01       	movw	r30, r18
     7f2:	20 81       	ld	r18, Z
     7f4:	20 61       	ori	r18, 0x10	; 16
     7f6:	fc 01       	movw	r30, r24
     7f8:	20 83       	st	Z, r18
		return NULL;
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	50 c0       	rjmp	.+160    	; 0x8a0 <OSmakeQ+0x14a>
	}
	
	que->type	= QUEUE_TYPE;
     800:	89 81       	ldd	r24, Y+1	; 0x01
     802:	9a 81       	ldd	r25, Y+2	; 0x02
     804:	21 e0       	ldi	r18, 0x01	; 1
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	fc 01       	movw	r30, r24
     80a:	31 83       	std	Z+1, r19	; 0x01
     80c:	20 83       	st	Z, r18
	que->num	= 0;	// initially empty
     80e:	89 81       	ldd	r24, Y+1	; 0x01
     810:	9a 81       	ldd	r25, Y+2	; 0x02
     812:	fc 01       	movw	r30, r24
     814:	13 82       	std	Z+3, r1	; 0x03
     816:	12 82       	std	Z+2, r1	; 0x02
	que->esize	= esize;	// store the task id
     818:	89 81       	ldd	r24, Y+1	; 0x01
     81a:	9a 81       	ldd	r25, Y+2	; 0x02
     81c:	2d 81       	ldd	r18, Y+5	; 0x05
     81e:	3e 81       	ldd	r19, Y+6	; 0x06
     820:	fc 01       	movw	r30, r24
     822:	35 83       	std	Z+5, r19	; 0x05
     824:	24 83       	std	Z+4, r18	; 0x04
	que->size	= qsize;	// the maximum is the number of tasks system has
     826:	89 81       	ldd	r24, Y+1	; 0x01
     828:	9a 81       	ldd	r25, Y+2	; 0x02
     82a:	2b 81       	ldd	r18, Y+3	; 0x03
     82c:	3c 81       	ldd	r19, Y+4	; 0x04
     82e:	fc 01       	movw	r30, r24
     830:	37 83       	std	Z+7, r19	; 0x07
     832:	26 83       	std	Z+6, r18	; 0x06
	que->start	= calloc(que->size,que->esize);
     834:	89 81       	ldd	r24, Y+1	; 0x01
     836:	9a 81       	ldd	r25, Y+2	; 0x02
     838:	fc 01       	movw	r30, r24
     83a:	86 81       	ldd	r24, Z+6	; 0x06
     83c:	97 81       	ldd	r25, Z+7	; 0x07
     83e:	29 81       	ldd	r18, Y+1	; 0x01
     840:	3a 81       	ldd	r19, Y+2	; 0x02
     842:	f9 01       	movw	r30, r18
     844:	24 81       	ldd	r18, Z+4	; 0x04
     846:	35 81       	ldd	r19, Z+5	; 0x05
     848:	b9 01       	movw	r22, r18
     84a:	0e 94 36 10 	call	0x206c	; 0x206c <calloc>
     84e:	9c 01       	movw	r18, r24
     850:	89 81       	ldd	r24, Y+1	; 0x01
     852:	9a 81       	ldd	r25, Y+2	; 0x02
     854:	fc 01       	movw	r30, r24
     856:	31 87       	std	Z+9, r19	; 0x09
     858:	20 87       	std	Z+8, r18	; 0x08
	
	if(!(que->start)){	// when the space allocation is not successful
     85a:	89 81       	ldd	r24, Y+1	; 0x01
     85c:	9a 81       	ldd	r25, Y+2	; 0x02
     85e:	fc 01       	movw	r30, r24
     860:	80 85       	ldd	r24, Z+8	; 0x08
     862:	91 85       	ldd	r25, Z+9	; 0x09
     864:	00 97       	sbiw	r24, 0x00	; 0
     866:	81 f4       	brne	.+32     	; 0x888 <OSmakeQ+0x132>
		free(que);
     868:	89 81       	ldd	r24, Y+1	; 0x01
     86a:	9a 81       	ldd	r25, Y+2	; 0x02
     86c:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <free>
		PORTD |= 0b00010000;	// signal error
     870:	8b e2       	ldi	r24, 0x2B	; 43
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	2b e2       	ldi	r18, 0x2B	; 43
     876:	30 e0       	ldi	r19, 0x00	; 0
     878:	f9 01       	movw	r30, r18
     87a:	20 81       	ld	r18, Z
     87c:	20 61       	ori	r18, 0x10	; 16
     87e:	fc 01       	movw	r30, r24
     880:	20 83       	st	Z, r18
		return NULL;
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	0c c0       	rjmp	.+24     	; 0x8a0 <OSmakeQ+0x14a>
	}
	
	que->head	= que->start;
     888:	89 81       	ldd	r24, Y+1	; 0x01
     88a:	9a 81       	ldd	r25, Y+2	; 0x02
     88c:	fc 01       	movw	r30, r24
     88e:	20 85       	ldd	r18, Z+8	; 0x08
     890:	31 85       	ldd	r19, Z+9	; 0x09
     892:	89 81       	ldd	r24, Y+1	; 0x01
     894:	9a 81       	ldd	r25, Y+2	; 0x02
     896:	fc 01       	movw	r30, r24
     898:	33 87       	std	Z+11, r19	; 0x0b
     89a:	22 87       	std	Z+10, r18	; 0x0a
	
	return que;
     89c:	89 81       	ldd	r24, Y+1	; 0x01
     89e:	9a 81       	ldd	r25, Y+2	; 0x02
}
     8a0:	26 96       	adiw	r28, 0x06	; 6
     8a2:	0f b6       	in	r0, 0x3f	; 63
     8a4:	f8 94       	cli
     8a6:	de bf       	out	0x3e, r29	; 62
     8a8:	0f be       	out	0x3f, r0	; 63
     8aa:	cd bf       	out	0x3d, r28	; 61
     8ac:	cf 91       	pop	r28
     8ae:	df 91       	pop	r29
     8b0:	08 95       	ret

000008b2 <OSenq>:

// Inserts item into queue q
void OSenq(OSSignal *q, void *item)
{
     8b2:	df 93       	push	r29
     8b4:	cf 93       	push	r28
     8b6:	cd b7       	in	r28, 0x3d	; 61
     8b8:	de b7       	in	r29, 0x3e	; 62
     8ba:	2a 97       	sbiw	r28, 0x0a	; 10
     8bc:	0f b6       	in	r0, 0x3f	; 63
     8be:	f8 94       	cli
     8c0:	de bf       	out	0x3e, r29	; 62
     8c2:	0f be       	out	0x3f, r0	; 63
     8c4:	cd bf       	out	0x3d, r28	; 61
     8c6:	98 87       	std	Y+8, r25	; 0x08
     8c8:	8f 83       	std	Y+7, r24	; 0x07
     8ca:	7a 87       	std	Y+10, r23	; 0x0a
     8cc:	69 87       	std	Y+9, r22	; 0x09
	enterCritical();
     8ce:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <enterCritical>
	
	// wrong type no use
	if(q == NULL || q->type != QUEUE_TYPE){
     8d2:	8f 81       	ldd	r24, Y+7	; 0x07
     8d4:	98 85       	ldd	r25, Y+8	; 0x08
     8d6:	00 97       	sbiw	r24, 0x00	; 0
     8d8:	41 f0       	breq	.+16     	; 0x8ea <OSenq+0x38>
     8da:	8f 81       	ldd	r24, Y+7	; 0x07
     8dc:	98 85       	ldd	r25, Y+8	; 0x08
     8de:	fc 01       	movw	r30, r24
     8e0:	80 81       	ld	r24, Z
     8e2:	91 81       	ldd	r25, Z+1	; 0x01
     8e4:	81 30       	cpi	r24, 0x01	; 1
     8e6:	91 05       	cpc	r25, r1
     8e8:	61 f0       	breq	.+24     	; 0x902 <__stack+0x3>
		leaveCritical();
     8ea:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <leaveCritical>
		return;
     8ee:	8f c0       	rjmp	.+286    	; 0xa0e <__stack+0x10f>
	}
	
	while(q->num == q->size){	// queue full
		//leaveCritical();	// can let others to run here
		OSSemPend(q_sema_full);
     8f0:	80 91 64 01 	lds	r24, 0x0164
     8f4:	90 91 65 01 	lds	r25, 0x0165
     8f8:	0e 94 66 02 	call	0x4cc	; 0x4cc <OSSemPend>
		enterCritical();	// but after the pend, would go back to run
     8fc:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <enterCritical>
     900:	01 c0       	rjmp	.+2      	; 0x904 <__stack+0x5>
	if(q == NULL || q->type != QUEUE_TYPE){
		leaveCritical();
		return;
	}
	
	while(q->num == q->size){	// queue full
     902:	00 00       	nop
     904:	8f 81       	ldd	r24, Y+7	; 0x07
     906:	98 85       	ldd	r25, Y+8	; 0x08
     908:	fc 01       	movw	r30, r24
     90a:	22 81       	ldd	r18, Z+2	; 0x02
     90c:	33 81       	ldd	r19, Z+3	; 0x03
     90e:	8f 81       	ldd	r24, Y+7	; 0x07
     910:	98 85       	ldd	r25, Y+8	; 0x08
     912:	fc 01       	movw	r30, r24
     914:	86 81       	ldd	r24, Z+6	; 0x06
     916:	97 81       	ldd	r25, Z+7	; 0x07
     918:	28 17       	cp	r18, r24
     91a:	39 07       	cpc	r19, r25
     91c:	49 f3       	breq	.-46     	; 0x8f0 <OSenq+0x3e>
		OSSemPend(q_sema_full);
		enterCritical();	// but after the pend, would go back to run
	}
	
	unsigned shift = 
		(unsigned)(q->head - q->start + (q->num * q->esize)) %
     91e:	8f 81       	ldd	r24, Y+7	; 0x07
     920:	98 85       	ldd	r25, Y+8	; 0x08
     922:	fc 01       	movw	r30, r24
     924:	82 85       	ldd	r24, Z+10	; 0x0a
     926:	93 85       	ldd	r25, Z+11	; 0x0b
     928:	9c 01       	movw	r18, r24
     92a:	8f 81       	ldd	r24, Y+7	; 0x07
     92c:	98 85       	ldd	r25, Y+8	; 0x08
     92e:	fc 01       	movw	r30, r24
     930:	80 85       	ldd	r24, Z+8	; 0x08
     932:	91 85       	ldd	r25, Z+9	; 0x09
     934:	28 1b       	sub	r18, r24
     936:	39 0b       	sbc	r19, r25
     938:	8f 81       	ldd	r24, Y+7	; 0x07
     93a:	98 85       	ldd	r25, Y+8	; 0x08
     93c:	fc 01       	movw	r30, r24
     93e:	62 81       	ldd	r22, Z+2	; 0x02
     940:	73 81       	ldd	r23, Z+3	; 0x03
     942:	8f 81       	ldd	r24, Y+7	; 0x07
     944:	98 85       	ldd	r25, Y+8	; 0x08
     946:	fc 01       	movw	r30, r24
     948:	44 81       	ldd	r20, Z+4	; 0x04
     94a:	55 81       	ldd	r21, Z+5	; 0x05
     94c:	64 9f       	mul	r22, r20
     94e:	c0 01       	movw	r24, r0
     950:	65 9f       	mul	r22, r21
     952:	90 0d       	add	r25, r0
     954:	74 9f       	mul	r23, r20
     956:	90 0d       	add	r25, r0
     958:	11 24       	eor	r1, r1
     95a:	82 0f       	add	r24, r18
     95c:	93 1f       	adc	r25, r19
		(unsigned)(q->size * q->esize);
     95e:	2f 81       	ldd	r18, Y+7	; 0x07
     960:	38 85       	ldd	r19, Y+8	; 0x08
     962:	f9 01       	movw	r30, r18
     964:	66 81       	ldd	r22, Z+6	; 0x06
     966:	77 81       	ldd	r23, Z+7	; 0x07
     968:	2f 81       	ldd	r18, Y+7	; 0x07
     96a:	38 85       	ldd	r19, Y+8	; 0x08
     96c:	f9 01       	movw	r30, r18
     96e:	44 81       	ldd	r20, Z+4	; 0x04
     970:	55 81       	ldd	r21, Z+5	; 0x05
     972:	64 9f       	mul	r22, r20
     974:	90 01       	movw	r18, r0
     976:	65 9f       	mul	r22, r21
     978:	30 0d       	add	r19, r0
     97a:	74 9f       	mul	r23, r20
     97c:	30 0d       	add	r19, r0
     97e:	11 24       	eor	r1, r1
		//leaveCritical();	// can let others to run here
		OSSemPend(q_sema_full);
		enterCritical();	// but after the pend, would go back to run
	}
	
	unsigned shift = 
     980:	b9 01       	movw	r22, r18
     982:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <__udivmodhi4>
     986:	9c 83       	std	Y+4, r25	; 0x04
     988:	8b 83       	std	Y+3, r24	; 0x03
		(unsigned)(q->head - q->start + (q->num * q->esize)) %
		(unsigned)(q->size * q->esize);
	void *currentPos = q->start + shift;
     98a:	8f 81       	ldd	r24, Y+7	; 0x07
     98c:	98 85       	ldd	r25, Y+8	; 0x08
     98e:	fc 01       	movw	r30, r24
     990:	20 85       	ldd	r18, Z+8	; 0x08
     992:	31 85       	ldd	r19, Z+9	; 0x09
     994:	8b 81       	ldd	r24, Y+3	; 0x03
     996:	9c 81       	ldd	r25, Y+4	; 0x04
     998:	82 0f       	add	r24, r18
     99a:	93 1f       	adc	r25, r19
     99c:	9e 83       	std	Y+6, r25	; 0x06
     99e:	8d 83       	std	Y+5, r24	; 0x05
	
	// then copy the element into queue
	for(int i=0;i< q->esize; i++){
     9a0:	1a 82       	std	Y+2, r1	; 0x02
     9a2:	19 82       	std	Y+1, r1	; 0x01
     9a4:	15 c0       	rjmp	.+42     	; 0x9d0 <__stack+0xd1>
		*(char*)(currentPos + i) = *(char*)(item + i);
     9a6:	2d 81       	ldd	r18, Y+5	; 0x05
     9a8:	3e 81       	ldd	r19, Y+6	; 0x06
     9aa:	89 81       	ldd	r24, Y+1	; 0x01
     9ac:	9a 81       	ldd	r25, Y+2	; 0x02
     9ae:	82 0f       	add	r24, r18
     9b0:	93 1f       	adc	r25, r19
     9b2:	49 85       	ldd	r20, Y+9	; 0x09
     9b4:	5a 85       	ldd	r21, Y+10	; 0x0a
     9b6:	29 81       	ldd	r18, Y+1	; 0x01
     9b8:	3a 81       	ldd	r19, Y+2	; 0x02
     9ba:	24 0f       	add	r18, r20
     9bc:	35 1f       	adc	r19, r21
     9be:	f9 01       	movw	r30, r18
     9c0:	20 81       	ld	r18, Z
     9c2:	fc 01       	movw	r30, r24
     9c4:	20 83       	st	Z, r18
		(unsigned)(q->head - q->start + (q->num * q->esize)) %
		(unsigned)(q->size * q->esize);
	void *currentPos = q->start + shift;
	
	// then copy the element into queue
	for(int i=0;i< q->esize; i++){
     9c6:	89 81       	ldd	r24, Y+1	; 0x01
     9c8:	9a 81       	ldd	r25, Y+2	; 0x02
     9ca:	01 96       	adiw	r24, 0x01	; 1
     9cc:	9a 83       	std	Y+2, r25	; 0x02
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	8f 81       	ldd	r24, Y+7	; 0x07
     9d2:	98 85       	ldd	r25, Y+8	; 0x08
     9d4:	fc 01       	movw	r30, r24
     9d6:	24 81       	ldd	r18, Z+4	; 0x04
     9d8:	35 81       	ldd	r19, Z+5	; 0x05
     9da:	89 81       	ldd	r24, Y+1	; 0x01
     9dc:	9a 81       	ldd	r25, Y+2	; 0x02
     9de:	82 17       	cp	r24, r18
     9e0:	93 07       	cpc	r25, r19
     9e2:	0c f3       	brlt	.-62     	; 0x9a6 <__stack+0xa7>
		*(char*)(currentPos + i) = *(char*)(item + i);
	}
		
	q->num++;
     9e4:	8f 81       	ldd	r24, Y+7	; 0x07
     9e6:	98 85       	ldd	r25, Y+8	; 0x08
     9e8:	fc 01       	movw	r30, r24
     9ea:	82 81       	ldd	r24, Z+2	; 0x02
     9ec:	93 81       	ldd	r25, Z+3	; 0x03
     9ee:	9c 01       	movw	r18, r24
     9f0:	2f 5f       	subi	r18, 0xFF	; 255
     9f2:	3f 4f       	sbci	r19, 0xFF	; 255
     9f4:	8f 81       	ldd	r24, Y+7	; 0x07
     9f6:	98 85       	ldd	r25, Y+8	; 0x08
     9f8:	fc 01       	movw	r30, r24
     9fa:	33 83       	std	Z+3, r19	; 0x03
     9fc:	22 83       	std	Z+2, r18	; 0x02
	
	// produced one
	OSSemPost(q_sema_empty);
     9fe:	80 91 62 01 	lds	r24, 0x0162
     a02:	90 91 63 01 	lds	r25, 0x0163
     a06:	0e 94 f7 02 	call	0x5ee	; 0x5ee <OSSemPost>
	
	leaveCritical();
     a0a:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <leaveCritical>
}
     a0e:	2a 96       	adiw	r28, 0x0a	; 10
     a10:	0f b6       	in	r0, 0x3f	; 63
     a12:	f8 94       	cli
     a14:	de bf       	out	0x3e, r29	; 62
     a16:	0f be       	out	0x3f, r0	; 63
     a18:	cd bf       	out	0x3d, r28	; 61
     a1a:	cf 91       	pop	r28
     a1c:	df 91       	pop	r29
     a1e:	08 95       	ret

00000a20 <OSdeq>:

// Removes and returns item from head of queue. Process blocks if queue is empty.
void *OSdeq(OSSignal *q)
{
     a20:	df 93       	push	r29
     a22:	cf 93       	push	r28
     a24:	00 d0       	rcall	.+0      	; 0xa26 <OSdeq+0x6>
     a26:	00 d0       	rcall	.+0      	; 0xa28 <OSdeq+0x8>
     a28:	cd b7       	in	r28, 0x3d	; 61
     a2a:	de b7       	in	r29, 0x3e	; 62
     a2c:	9c 83       	std	Y+4, r25	; 0x04
     a2e:	8b 83       	std	Y+3, r24	; 0x03
	enterCritical();
     a30:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <enterCritical>
	
	// wrong type no use
	if(q == NULL || q->type != QUEUE_TYPE){
     a34:	8b 81       	ldd	r24, Y+3	; 0x03
     a36:	9c 81       	ldd	r25, Y+4	; 0x04
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	49 f0       	breq	.+18     	; 0xa4e <OSdeq+0x2e>
     a3c:	8b 81       	ldd	r24, Y+3	; 0x03
     a3e:	9c 81       	ldd	r25, Y+4	; 0x04
     a40:	dc 01       	movw	r26, r24
     a42:	8d 91       	ld	r24, X+
     a44:	9c 91       	ld	r25, X
     a46:	11 97       	sbiw	r26, 0x01	; 1
     a48:	81 30       	cpi	r24, 0x01	; 1
     a4a:	91 05       	cpc	r25, r1
     a4c:	71 f0       	breq	.+28     	; 0xa6a <OSdeq+0x4a>
		leaveCritical();
     a4e:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <leaveCritical>
     a52:	7b c0       	rjmp	.+246    	; 0xb4a <OSdeq+0x12a>
		return;
	}
	
	while(q->num <= 0){	// queue empty
		leaveCritical();	// can let others to run here
     a54:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <leaveCritical>
		OSSemPend(q_sema_empty);
     a58:	80 91 62 01 	lds	r24, 0x0162
     a5c:	90 91 63 01 	lds	r25, 0x0163
     a60:	0e 94 66 02 	call	0x4cc	; 0x4cc <OSSemPend>
		enterCritical();	// but after the pend, would go back to run
     a64:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <enterCritical>
     a68:	01 c0       	rjmp	.+2      	; 0xa6c <OSdeq+0x4c>
	if(q == NULL || q->type != QUEUE_TYPE){
		leaveCritical();
		return;
	}
	
	while(q->num <= 0){	// queue empty
     a6a:	00 00       	nop
     a6c:	8b 81       	ldd	r24, Y+3	; 0x03
     a6e:	9c 81       	ldd	r25, Y+4	; 0x04
     a70:	fc 01       	movw	r30, r24
     a72:	82 81       	ldd	r24, Z+2	; 0x02
     a74:	93 81       	ldd	r25, Z+3	; 0x03
     a76:	18 16       	cp	r1, r24
     a78:	19 06       	cpc	r1, r25
     a7a:	64 f7       	brge	.-40     	; 0xa54 <OSdeq+0x34>
		leaveCritical();	// can let others to run here
		OSSemPend(q_sema_empty);
		enterCritical();	// but after the pend, would go back to run
	}

	void* res = q->head;
     a7c:	8b 81       	ldd	r24, Y+3	; 0x03
     a7e:	9c 81       	ldd	r25, Y+4	; 0x04
     a80:	dc 01       	movw	r26, r24
     a82:	1a 96       	adiw	r26, 0x0a	; 10
     a84:	8d 91       	ld	r24, X+
     a86:	9c 91       	ld	r25, X
     a88:	1b 97       	sbiw	r26, 0x0b	; 11
     a8a:	9a 83       	std	Y+2, r25	; 0x02
     a8c:	89 83       	std	Y+1, r24	; 0x01
	
	q->head += q->esize;
     a8e:	8b 81       	ldd	r24, Y+3	; 0x03
     a90:	9c 81       	ldd	r25, Y+4	; 0x04
     a92:	fc 01       	movw	r30, r24
     a94:	22 85       	ldd	r18, Z+10	; 0x0a
     a96:	33 85       	ldd	r19, Z+11	; 0x0b
     a98:	8b 81       	ldd	r24, Y+3	; 0x03
     a9a:	9c 81       	ldd	r25, Y+4	; 0x04
     a9c:	dc 01       	movw	r26, r24
     a9e:	14 96       	adiw	r26, 0x04	; 4
     aa0:	8d 91       	ld	r24, X+
     aa2:	9c 91       	ld	r25, X
     aa4:	15 97       	sbiw	r26, 0x05	; 5
     aa6:	28 0f       	add	r18, r24
     aa8:	39 1f       	adc	r19, r25
     aaa:	8b 81       	ldd	r24, Y+3	; 0x03
     aac:	9c 81       	ldd	r25, Y+4	; 0x04
     aae:	fc 01       	movw	r30, r24
     ab0:	33 87       	std	Z+11, r19	; 0x0b
     ab2:	22 87       	std	Z+10, r18	; 0x0a
	if(q->head == q->start + (q->num * q->esize) ){
     ab4:	8b 81       	ldd	r24, Y+3	; 0x03
     ab6:	9c 81       	ldd	r25, Y+4	; 0x04
     ab8:	dc 01       	movw	r26, r24
     aba:	1a 96       	adiw	r26, 0x0a	; 10
     abc:	2d 91       	ld	r18, X+
     abe:	3c 91       	ld	r19, X
     ac0:	1b 97       	sbiw	r26, 0x0b	; 11
     ac2:	8b 81       	ldd	r24, Y+3	; 0x03
     ac4:	9c 81       	ldd	r25, Y+4	; 0x04
     ac6:	fc 01       	movw	r30, r24
     ac8:	40 85       	ldd	r20, Z+8	; 0x08
     aca:	51 85       	ldd	r21, Z+9	; 0x09
     acc:	8b 81       	ldd	r24, Y+3	; 0x03
     ace:	9c 81       	ldd	r25, Y+4	; 0x04
     ad0:	dc 01       	movw	r26, r24
     ad2:	12 96       	adiw	r26, 0x02	; 2
     ad4:	ed 91       	ld	r30, X+
     ad6:	fc 91       	ld	r31, X
     ad8:	13 97       	sbiw	r26, 0x03	; 3
     ada:	8b 81       	ldd	r24, Y+3	; 0x03
     adc:	9c 81       	ldd	r25, Y+4	; 0x04
     ade:	dc 01       	movw	r26, r24
     ae0:	14 96       	adiw	r26, 0x04	; 4
     ae2:	6d 91       	ld	r22, X+
     ae4:	7c 91       	ld	r23, X
     ae6:	15 97       	sbiw	r26, 0x05	; 5
     ae8:	e6 9f       	mul	r30, r22
     aea:	c0 01       	movw	r24, r0
     aec:	e7 9f       	mul	r30, r23
     aee:	90 0d       	add	r25, r0
     af0:	f6 9f       	mul	r31, r22
     af2:	90 0d       	add	r25, r0
     af4:	11 24       	eor	r1, r1
     af6:	84 0f       	add	r24, r20
     af8:	95 1f       	adc	r25, r21
     afa:	28 17       	cp	r18, r24
     afc:	39 07       	cpc	r19, r25
     afe:	61 f4       	brne	.+24     	; 0xb18 <OSdeq+0xf8>
		q->head = q->start;
     b00:	8b 81       	ldd	r24, Y+3	; 0x03
     b02:	9c 81       	ldd	r25, Y+4	; 0x04
     b04:	fc 01       	movw	r30, r24
     b06:	20 85       	ldd	r18, Z+8	; 0x08
     b08:	31 85       	ldd	r19, Z+9	; 0x09
     b0a:	8b 81       	ldd	r24, Y+3	; 0x03
     b0c:	9c 81       	ldd	r25, Y+4	; 0x04
     b0e:	dc 01       	movw	r26, r24
     b10:	1b 96       	adiw	r26, 0x0b	; 11
     b12:	3c 93       	st	X, r19
     b14:	2e 93       	st	-X, r18
     b16:	1a 97       	sbiw	r26, 0x0a	; 10
	}
	
	q->num--;
     b18:	8b 81       	ldd	r24, Y+3	; 0x03
     b1a:	9c 81       	ldd	r25, Y+4	; 0x04
     b1c:	fc 01       	movw	r30, r24
     b1e:	82 81       	ldd	r24, Z+2	; 0x02
     b20:	93 81       	ldd	r25, Z+3	; 0x03
     b22:	9c 01       	movw	r18, r24
     b24:	21 50       	subi	r18, 0x01	; 1
     b26:	30 40       	sbci	r19, 0x00	; 0
     b28:	8b 81       	ldd	r24, Y+3	; 0x03
     b2a:	9c 81       	ldd	r25, Y+4	; 0x04
     b2c:	dc 01       	movw	r26, r24
     b2e:	13 96       	adiw	r26, 0x03	; 3
     b30:	3c 93       	st	X, r19
     b32:	2e 93       	st	-X, r18
     b34:	12 97       	sbiw	r26, 0x02	; 2
	
	// consumed one
	OSSemPost(q_sema_full);
     b36:	80 91 64 01 	lds	r24, 0x0164
     b3a:	90 91 65 01 	lds	r25, 0x0165
     b3e:	0e 94 f7 02 	call	0x5ee	; 0x5ee <OSSemPost>
	
	leaveCritical();
     b42:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <leaveCritical>
	return res;
     b46:	89 81       	ldd	r24, Y+1	; 0x01
     b48:	9a 81       	ldd	r25, Y+2	; 0x02
}
     b4a:	0f 90       	pop	r0
     b4c:	0f 90       	pop	r0
     b4e:	0f 90       	pop	r0
     b50:	0f 90       	pop	r0
     b52:	cf 91       	pop	r28
     b54:	df 91       	pop	r29
     b56:	08 95       	ret

00000b58 <OSdestroyQ>:

// Destroys the queue
void *OSdestroyQ(OSSignal *q)
{
     b58:	df 93       	push	r29
     b5a:	cf 93       	push	r28
     b5c:	00 d0       	rcall	.+0      	; 0xb5e <OSdestroyQ+0x6>
     b5e:	cd b7       	in	r28, 0x3d	; 61
     b60:	de b7       	in	r29, 0x3e	; 62
     b62:	9a 83       	std	Y+2, r25	; 0x02
     b64:	89 83       	std	Y+1, r24	; 0x01
	enterCritical();
     b66:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <enterCritical>
	if(q != NULL){
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	9a 81       	ldd	r25, Y+2	; 0x02
     b6e:	00 97       	sbiw	r24, 0x00	; 0
     b70:	91 f0       	breq	.+36     	; 0xb96 <OSdestroyQ+0x3e>
		if(q->start != NULL)	free(q->start);
     b72:	89 81       	ldd	r24, Y+1	; 0x01
     b74:	9a 81       	ldd	r25, Y+2	; 0x02
     b76:	fc 01       	movw	r30, r24
     b78:	80 85       	ldd	r24, Z+8	; 0x08
     b7a:	91 85       	ldd	r25, Z+9	; 0x09
     b7c:	00 97       	sbiw	r24, 0x00	; 0
     b7e:	39 f0       	breq	.+14     	; 0xb8e <OSdestroyQ+0x36>
     b80:	89 81       	ldd	r24, Y+1	; 0x01
     b82:	9a 81       	ldd	r25, Y+2	; 0x02
     b84:	fc 01       	movw	r30, r24
     b86:	80 85       	ldd	r24, Z+8	; 0x08
     b88:	91 85       	ldd	r25, Z+9	; 0x09
     b8a:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <free>
		free(q);
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
     b90:	9a 81       	ldd	r25, Y+2	; 0x02
     b92:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <free>
	}
	leaveCritical();
     b96:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <leaveCritical>
}
     b9a:	0f 90       	pop	r0
     b9c:	0f 90       	pop	r0
     b9e:	cf 91       	pop	r28
     ba0:	df 91       	pop	r29
     ba2:	08 95       	ret

00000ba4 <runTaskFirstTime>:
	"pop r0	\n\t"\
	"out __SREG__, r0\n\t"\
	"pop r0	\n\t": : "r" (pxCurrentTCB):\
	);

void runTaskFirstTime(int i){
     ba4:	df 93       	push	r29
     ba6:	cf 93       	push	r28
     ba8:	00 d0       	rcall	.+0      	; 0xbaa <runTaskFirstTime+0x6>
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
     bae:	9a 83       	std	Y+2, r25	; 0x02
     bb0:	89 83       	std	Y+1, r24	; 0x01
	cli();
     bb2:	f8 94       	cli
	currentTask = i;
     bb4:	89 81       	ldd	r24, Y+1	; 0x01
     bb6:	9a 81       	ldd	r25, Y+2	; 0x02
     bb8:	90 93 0b 01 	sts	0x010B, r25
     bbc:	80 93 0a 01 	sts	0x010A, r24
	taskTable[currentTask].runflag = 1;
     bc0:	40 91 0a 01 	lds	r20, 0x010A
     bc4:	50 91 0b 01 	lds	r21, 0x010B
     bc8:	2f e0       	ldi	r18, 0x0F	; 15
     bca:	31 e0       	ldi	r19, 0x01	; 1
     bcc:	42 9f       	mul	r20, r18
     bce:	c0 01       	movw	r24, r0
     bd0:	43 9f       	mul	r20, r19
     bd2:	90 0d       	add	r25, r0
     bd4:	52 9f       	mul	r21, r18
     bd6:	90 0d       	add	r25, r0
     bd8:	11 24       	eor	r1, r1
     bda:	84 59       	subi	r24, 0x94	; 148
     bdc:	9e 4f       	sbci	r25, 0xFE	; 254
     bde:	21 e0       	ldi	r18, 0x01	; 1
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	fc 01       	movw	r30, r24
     be4:	31 83       	std	Z+1, r19	; 0x01
     be6:	20 83       	st	Z, r18
	taskTable[currentTask].skipedTimes = 0;
     be8:	40 91 0a 01 	lds	r20, 0x010A
     bec:	50 91 0b 01 	lds	r21, 0x010B
     bf0:	2f e0       	ldi	r18, 0x0F	; 15
     bf2:	31 e0       	ldi	r19, 0x01	; 1
     bf4:	42 9f       	mul	r20, r18
     bf6:	c0 01       	movw	r24, r0
     bf8:	43 9f       	mul	r20, r19
     bfa:	90 0d       	add	r25, r0
     bfc:	52 9f       	mul	r21, r18
     bfe:	90 0d       	add	r25, r0
     c00:	11 24       	eor	r1, r1
     c02:	89 58       	subi	r24, 0x89	; 137
     c04:	9d 4f       	sbci	r25, 0xFD	; 253
     c06:	fc 01       	movw	r30, r24
     c08:	11 82       	std	Z+1, r1	; 0x01
     c0a:	10 82       	st	Z, r1
    
	pxCurrentTCB = (unsigned long)(taskTable[currentTask].stack + TASK_STACK_SIZE - 1);
     c0c:	40 91 0a 01 	lds	r20, 0x010A
     c10:	50 91 0b 01 	lds	r21, 0x010B
     c14:	2f e0       	ldi	r18, 0x0F	; 15
     c16:	31 e0       	ldi	r19, 0x01	; 1
     c18:	42 9f       	mul	r20, r18
     c1a:	c0 01       	movw	r24, r0
     c1c:	43 9f       	mul	r20, r19
     c1e:	90 0d       	add	r25, r0
     c20:	52 9f       	mul	r21, r18
     c22:	90 0d       	add	r25, r0
     c24:	11 24       	eor	r1, r1
     c26:	86 5f       	subi	r24, 0xF6	; 246
     c28:	9e 4f       	sbci	r25, 0xFE	; 254
     c2a:	84 59       	subi	r24, 0x94	; 148
     c2c:	9e 4f       	sbci	r25, 0xFE	; 254
     c2e:	aa 27       	eor	r26, r26
     c30:	97 fd       	sbrc	r25, 7
     c32:	a0 95       	com	r26
     c34:	ba 2f       	mov	r27, r26
     c36:	80 93 66 01 	sts	0x0166, r24
     c3a:	90 93 67 01 	sts	0x0167, r25
     c3e:	a0 93 68 01 	sts	0x0168, r26
     c42:	b0 93 69 01 	sts	0x0169, r27
	
    asm volatile ("\n\t"\
     c46:	a0 91 66 01 	lds	r26, 0x0166
     c4a:	b0 91 67 01 	lds	r27, 0x0167
     c4e:	ad bf       	out	0x3d, r26	; 61
     c50:	be bf       	out	0x3e, r27	; 62
                  "lds r26, pxCurrentTCB \n\t"\
                  "lds r27, pxCurrentTCB+1 \n\t"\
                  "out __SP_L__, r26 \n\t"\
                  "out __SP_H__, r27 \n\t"\
                  );
	sei();
     c52:	78 94       	sei
    taskTable[currentTask].fptr(taskTable[currentTask].arg);
     c54:	40 91 0a 01 	lds	r20, 0x010A
     c58:	50 91 0b 01 	lds	r21, 0x010B
     c5c:	2f e0       	ldi	r18, 0x0F	; 15
     c5e:	31 e0       	ldi	r19, 0x01	; 1
     c60:	42 9f       	mul	r20, r18
     c62:	c0 01       	movw	r24, r0
     c64:	43 9f       	mul	r20, r19
     c66:	90 0d       	add	r25, r0
     c68:	52 9f       	mul	r21, r18
     c6a:	90 0d       	add	r25, r0
     c6c:	11 24       	eor	r1, r1
     c6e:	80 59       	subi	r24, 0x90	; 144
     c70:	9e 4f       	sbci	r25, 0xFE	; 254
     c72:	fc 01       	movw	r30, r24
     c74:	20 81       	ld	r18, Z
     c76:	31 81       	ldd	r19, Z+1	; 0x01
     c78:	60 91 0a 01 	lds	r22, 0x010A
     c7c:	70 91 0b 01 	lds	r23, 0x010B
     c80:	4f e0       	ldi	r20, 0x0F	; 15
     c82:	51 e0       	ldi	r21, 0x01	; 1
     c84:	64 9f       	mul	r22, r20
     c86:	c0 01       	movw	r24, r0
     c88:	65 9f       	mul	r22, r21
     c8a:	90 0d       	add	r25, r0
     c8c:	74 9f       	mul	r23, r20
     c8e:	90 0d       	add	r25, r0
     c90:	11 24       	eor	r1, r1
     c92:	8e 58       	subi	r24, 0x8E	; 142
     c94:	9e 4f       	sbci	r25, 0xFE	; 254
     c96:	fc 01       	movw	r30, r24
     c98:	80 81       	ld	r24, Z
     c9a:	91 81       	ldd	r25, Z+1	; 0x01
     c9c:	f9 01       	movw	r30, r18
     c9e:	09 95       	icall
}
     ca0:	0f 90       	pop	r0
     ca2:	0f 90       	pop	r0
     ca4:	cf 91       	pop	r28
     ca6:	df 91       	pop	r29
     ca8:	08 95       	ret

00000caa <OSMakeAtomic>:



void OSMakeAtomic()
{
     caa:	df 93       	push	r29
     cac:	cf 93       	push	r28
     cae:	cd b7       	in	r28, 0x3d	; 61
     cb0:	de b7       	in	r29, 0x3e	; 62
	// Disables interrupts to create an atomic section.
	cli();
     cb2:	f8 94       	cli
}
     cb4:	cf 91       	pop	r28
     cb6:	df 91       	pop	r29
     cb8:	08 95       	ret

00000cba <OSLeaveAtomic>:

void OSLeaveAtomic()
{
     cba:	df 93       	push	r29
     cbc:	cf 93       	push	r28
     cbe:	cd b7       	in	r28, 0x3d	; 61
     cc0:	de b7       	in	r29, 0x3e	; 62
	// Leaves atomic section by re-enabling interrupts.
	sei();
     cc2:	78 94       	sei
}
     cc4:	cf 91       	pop	r28
     cc6:	df 91       	pop	r29
     cc8:	08 95       	ret

00000cca <findNextTask>:
// DO NOT modify this!
void OSSwapTask() __attribute__ ((naked));


int findNextTask()
{
     cca:	df 93       	push	r29
     ccc:	cf 93       	push	r28
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
	// signal of current task overflow
	if(currentTask > OS_NUM_TASKS || currentTask < -1)	PORTD |= 0b00010000;
     cd2:	80 91 0a 01 	lds	r24, 0x010A
     cd6:	90 91 0b 01 	lds	r25, 0x010B
     cda:	85 30       	cpi	r24, 0x05	; 5
     cdc:	91 05       	cpc	r25, r1
     cde:	44 f4       	brge	.+16     	; 0xcf0 <findNextTask+0x26>
     ce0:	80 91 0a 01 	lds	r24, 0x010A
     ce4:	90 91 0b 01 	lds	r25, 0x010B
     ce8:	2f ef       	ldi	r18, 0xFF	; 255
     cea:	8f 3f       	cpi	r24, 0xFF	; 255
     cec:	92 07       	cpc	r25, r18
     cee:	4c f4       	brge	.+18     	; 0xd02 <findNextTask+0x38>
     cf0:	8b e2       	ldi	r24, 0x2B	; 43
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	2b e2       	ldi	r18, 0x2B	; 43
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	f9 01       	movw	r30, r18
     cfa:	20 81       	ld	r18, Z
     cfc:	20 61       	ori	r18, 0x10	; 16
     cfe:	fc 01       	movw	r30, r24
     d00:	20 83       	st	Z, r18
	// Note that OS_NUM_TASKS in kernel.h is the MAXIMUM number of tasks that can be created, not the actual number
	// created. So OS_NUM_TASKS can be 10 although in actual fact only 4 tasks were created. You should pick only amongst
	// these 4 tasks.
	
	// find the one being skipped the most of the times
	maxVal = -1;tempTaskNum = -1;
     d02:	8f ef       	ldi	r24, 0xFF	; 255
     d04:	9f ef       	ldi	r25, 0xFF	; 255
     d06:	90 93 1d 01 	sts	0x011D, r25
     d0a:	80 93 1c 01 	sts	0x011C, r24
     d0e:	8f ef       	ldi	r24, 0xFF	; 255
     d10:	9f ef       	ldi	r25, 0xFF	; 255
     d12:	90 93 09 01 	sts	0x0109, r25
     d16:	80 93 08 01 	sts	0x0108, r24
	for(iter = 0; iter < task_counter; iter++){
     d1a:	10 92 6b 01 	sts	0x016B, r1
     d1e:	10 92 6a 01 	sts	0x016A, r1
     d22:	9c c0       	rjmp	.+312    	; 0xe5c <findNextTask+0x192>
		if(taskTable[iter].sem_counter){
     d24:	40 91 6a 01 	lds	r20, 0x016A
     d28:	50 91 6b 01 	lds	r21, 0x016B
     d2c:	2f e0       	ldi	r18, 0x0F	; 15
     d2e:	31 e0       	ldi	r19, 0x01	; 1
     d30:	42 9f       	mul	r20, r18
     d32:	c0 01       	movw	r24, r0
     d34:	43 9f       	mul	r20, r19
     d36:	90 0d       	add	r25, r0
     d38:	52 9f       	mul	r21, r18
     d3a:	90 0d       	add	r25, r0
     d3c:	11 24       	eor	r1, r1
     d3e:	87 58       	subi	r24, 0x87	; 135
     d40:	9d 4f       	sbci	r25, 0xFD	; 253
     d42:	fc 01       	movw	r30, r24
     d44:	80 81       	ld	r24, Z
     d46:	91 81       	ldd	r25, Z+1	; 0x01
     d48:	00 97       	sbiw	r24, 0x00	; 0
     d4a:	21 f1       	breq	.+72     	; 0xd94 <findNextTask+0xca>
			taskTable[iter].skipedTimes++;
     d4c:	80 91 6a 01 	lds	r24, 0x016A
     d50:	90 91 6b 01 	lds	r25, 0x016B
     d54:	4f e0       	ldi	r20, 0x0F	; 15
     d56:	51 e0       	ldi	r21, 0x01	; 1
     d58:	84 9f       	mul	r24, r20
     d5a:	90 01       	movw	r18, r0
     d5c:	85 9f       	mul	r24, r21
     d5e:	30 0d       	add	r19, r0
     d60:	94 9f       	mul	r25, r20
     d62:	30 0d       	add	r19, r0
     d64:	11 24       	eor	r1, r1
     d66:	29 58       	subi	r18, 0x89	; 137
     d68:	3d 4f       	sbci	r19, 0xFD	; 253
     d6a:	f9 01       	movw	r30, r18
     d6c:	20 81       	ld	r18, Z
     d6e:	31 81       	ldd	r19, Z+1	; 0x01
     d70:	2f 5f       	subi	r18, 0xFF	; 255
     d72:	3f 4f       	sbci	r19, 0xFF	; 255
     d74:	6f e0       	ldi	r22, 0x0F	; 15
     d76:	71 e0       	ldi	r23, 0x01	; 1
     d78:	86 9f       	mul	r24, r22
     d7a:	a0 01       	movw	r20, r0
     d7c:	87 9f       	mul	r24, r23
     d7e:	50 0d       	add	r21, r0
     d80:	96 9f       	mul	r25, r22
     d82:	50 0d       	add	r21, r0
     d84:	11 24       	eor	r1, r1
     d86:	ca 01       	movw	r24, r20
     d88:	89 58       	subi	r24, 0x89	; 137
     d8a:	9d 4f       	sbci	r25, 0xFD	; 253
     d8c:	fc 01       	movw	r30, r24
     d8e:	31 83       	std	Z+1, r19	; 0x01
     d90:	20 83       	st	Z, r18
			continue;
     d92:	5b c0       	rjmp	.+182    	; 0xe4a <findNextTask+0x180>
		} else if(taskTable[iter].skipedTimes > maxVal){
     d94:	40 91 6a 01 	lds	r20, 0x016A
     d98:	50 91 6b 01 	lds	r21, 0x016B
     d9c:	2f e0       	ldi	r18, 0x0F	; 15
     d9e:	31 e0       	ldi	r19, 0x01	; 1
     da0:	42 9f       	mul	r20, r18
     da2:	c0 01       	movw	r24, r0
     da4:	43 9f       	mul	r20, r19
     da6:	90 0d       	add	r25, r0
     da8:	52 9f       	mul	r21, r18
     daa:	90 0d       	add	r25, r0
     dac:	11 24       	eor	r1, r1
     dae:	89 58       	subi	r24, 0x89	; 137
     db0:	9d 4f       	sbci	r25, 0xFD	; 253
     db2:	fc 01       	movw	r30, r24
     db4:	20 81       	ld	r18, Z
     db6:	31 81       	ldd	r19, Z+1	; 0x01
     db8:	80 91 1c 01 	lds	r24, 0x011C
     dbc:	90 91 1d 01 	lds	r25, 0x011D
     dc0:	82 17       	cp	r24, r18
     dc2:	93 07       	cpc	r25, r19
     dc4:	fc f4       	brge	.+62     	; 0xe04 <findNextTask+0x13a>
			tempTaskNum = iter;
     dc6:	80 91 6a 01 	lds	r24, 0x016A
     dca:	90 91 6b 01 	lds	r25, 0x016B
     dce:	90 93 09 01 	sts	0x0109, r25
     dd2:	80 93 08 01 	sts	0x0108, r24
			maxVal = taskTable[iter].skipedTimes;
     dd6:	40 91 6a 01 	lds	r20, 0x016A
     dda:	50 91 6b 01 	lds	r21, 0x016B
     dde:	2f e0       	ldi	r18, 0x0F	; 15
     de0:	31 e0       	ldi	r19, 0x01	; 1
     de2:	42 9f       	mul	r20, r18
     de4:	c0 01       	movw	r24, r0
     de6:	43 9f       	mul	r20, r19
     de8:	90 0d       	add	r25, r0
     dea:	52 9f       	mul	r21, r18
     dec:	90 0d       	add	r25, r0
     dee:	11 24       	eor	r1, r1
     df0:	89 58       	subi	r24, 0x89	; 137
     df2:	9d 4f       	sbci	r25, 0xFD	; 253
     df4:	fc 01       	movw	r30, r24
     df6:	80 81       	ld	r24, Z
     df8:	91 81       	ldd	r25, Z+1	; 0x01
     dfa:	90 93 1d 01 	sts	0x011D, r25
     dfe:	80 93 1c 01 	sts	0x011C, r24
     e02:	23 c0       	rjmp	.+70     	; 0xe4a <findNextTask+0x180>
		} else{
			taskTable[iter].skipedTimes++;
     e04:	80 91 6a 01 	lds	r24, 0x016A
     e08:	90 91 6b 01 	lds	r25, 0x016B
     e0c:	4f e0       	ldi	r20, 0x0F	; 15
     e0e:	51 e0       	ldi	r21, 0x01	; 1
     e10:	84 9f       	mul	r24, r20
     e12:	90 01       	movw	r18, r0
     e14:	85 9f       	mul	r24, r21
     e16:	30 0d       	add	r19, r0
     e18:	94 9f       	mul	r25, r20
     e1a:	30 0d       	add	r19, r0
     e1c:	11 24       	eor	r1, r1
     e1e:	29 58       	subi	r18, 0x89	; 137
     e20:	3d 4f       	sbci	r19, 0xFD	; 253
     e22:	f9 01       	movw	r30, r18
     e24:	20 81       	ld	r18, Z
     e26:	31 81       	ldd	r19, Z+1	; 0x01
     e28:	2f 5f       	subi	r18, 0xFF	; 255
     e2a:	3f 4f       	sbci	r19, 0xFF	; 255
     e2c:	6f e0       	ldi	r22, 0x0F	; 15
     e2e:	71 e0       	ldi	r23, 0x01	; 1
     e30:	86 9f       	mul	r24, r22
     e32:	a0 01       	movw	r20, r0
     e34:	87 9f       	mul	r24, r23
     e36:	50 0d       	add	r21, r0
     e38:	96 9f       	mul	r25, r22
     e3a:	50 0d       	add	r21, r0
     e3c:	11 24       	eor	r1, r1
     e3e:	ca 01       	movw	r24, r20
     e40:	89 58       	subi	r24, 0x89	; 137
     e42:	9d 4f       	sbci	r25, 0xFD	; 253
     e44:	fc 01       	movw	r30, r24
     e46:	31 83       	std	Z+1, r19	; 0x01
     e48:	20 83       	st	Z, r18
	// created. So OS_NUM_TASKS can be 10 although in actual fact only 4 tasks were created. You should pick only amongst
	// these 4 tasks.
	
	// find the one being skipped the most of the times
	maxVal = -1;tempTaskNum = -1;
	for(iter = 0; iter < task_counter; iter++){
     e4a:	80 91 6a 01 	lds	r24, 0x016A
     e4e:	90 91 6b 01 	lds	r25, 0x016B
     e52:	01 96       	adiw	r24, 0x01	; 1
     e54:	90 93 6b 01 	sts	0x016B, r25
     e58:	80 93 6a 01 	sts	0x016A, r24
     e5c:	20 91 6a 01 	lds	r18, 0x016A
     e60:	30 91 6b 01 	lds	r19, 0x016B
     e64:	80 91 1e 01 	lds	r24, 0x011E
     e68:	90 91 1f 01 	lds	r25, 0x011F
     e6c:	28 17       	cp	r18, r24
     e6e:	39 07       	cpc	r19, r25
     e70:	0c f4       	brge	.+2      	; 0xe74 <findNextTask+0x1aa>
     e72:	58 cf       	rjmp	.-336    	; 0xd24 <findNextTask+0x5a>
		} else{
			taskTable[iter].skipedTimes++;
		}
	}
	
	return tempTaskNum;	// unsuccessful
     e74:	80 91 08 01 	lds	r24, 0x0108
     e78:	90 91 09 01 	lds	r25, 0x0109
}
     e7c:	cf 91       	pop	r28
     e7e:	df 91       	pop	r29
     e80:	08 95       	ret

00000e82 <OSSwapTask>:
 {
	// assumption: when this method is being called, there's always a running task; otherwise it would do nothing
	//if(currentTask < 0)	return;
	
	// assumption: when this method is being called, there's always a running task; otherwise it would do nothing
	if(currentTask > OS_NUM_TASKS || currentTask < -1){
     e82:	80 91 0a 01 	lds	r24, 0x010A
     e86:	90 91 0b 01 	lds	r25, 0x010B
     e8a:	85 30       	cpi	r24, 0x05	; 5
     e8c:	91 05       	cpc	r25, r1
     e8e:	44 f4       	brge	.+16     	; 0xea0 <OSSwapTask+0x1e>
     e90:	80 91 0a 01 	lds	r24, 0x010A
     e94:	90 91 0b 01 	lds	r25, 0x010B
     e98:	2f ef       	ldi	r18, 0xFF	; 255
     e9a:	8f 3f       	cpi	r24, 0xFF	; 255
     e9c:	92 07       	cpc	r25, r18
     e9e:	64 f4       	brge	.+24     	; 0xeb8 <OSSwapTask+0x36>
		// use this code to test overflow
		// value of current task over flow
		PORTD ^= 0b00010000;
     ea0:	8b e2       	ldi	r24, 0x2B	; 43
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	2b e2       	ldi	r18, 0x2B	; 43
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	f9 01       	movw	r30, r18
     eaa:	30 81       	ld	r19, Z
     eac:	20 e1       	ldi	r18, 0x10	; 16
     eae:	23 27       	eor	r18, r19
     eb0:	fc 01       	movw	r30, r24
     eb2:	20 83       	st	Z, r18
		asm("ret");
     eb4:	08 95       	ret
     eb6:	09 c0       	rjmp	.+18     	; 0xeca <OSSwapTask+0x48>
	} else if(currentTask == -1){
     eb8:	80 91 0a 01 	lds	r24, 0x010A
     ebc:	90 91 0b 01 	lds	r25, 0x010B
     ec0:	ff ef       	ldi	r31, 0xFF	; 255
     ec2:	8f 3f       	cpi	r24, 0xFF	; 255
     ec4:	9f 07       	cpc	r25, r31
     ec6:	09 f4       	brne	.+2      	; 0xeca <OSSwapTask+0x48>
		asm("ret");	// never got any task run
     ec8:	08 95       	ret
	}
	
	// Call findNextTask to decide which task to run next.
	tempTaskNum = findNextTask();
     eca:	0e 94 65 06 	call	0xcca	; 0xcca <findNextTask>
     ece:	90 93 09 01 	sts	0x0109, r25
     ed2:	80 93 08 01 	sts	0x0108, r24
	if(tempTaskNum < 0)	asm("ret");	// no task to swap
     ed6:	80 91 08 01 	lds	r24, 0x0108
     eda:	90 91 09 01 	lds	r25, 0x0109
     ede:	99 23       	and	r25, r25
     ee0:	0c f4       	brge	.+2      	; 0xee4 <OSSwapTask+0x62>
     ee2:	08 95       	ret
	cli();
     ee4:	f8 94       	cli
	// Save the context of the current task, and copy the task stack pointer to the task's entry in the Task Control Block (tcb).
	portSAVE_CONTEXT();
     ee6:	0f 92       	push	r0
     ee8:	0f b6       	in	r0, 0x3f	; 63
     eea:	0f 92       	push	r0
     eec:	1f 92       	push	r1
     eee:	11 24       	eor	r1, r1
     ef0:	2f 92       	push	r2
     ef2:	3f 92       	push	r3
     ef4:	4f 92       	push	r4
     ef6:	5f 92       	push	r5
     ef8:	6f 92       	push	r6
     efa:	7f 92       	push	r7
     efc:	8f 92       	push	r8
     efe:	9f 92       	push	r9
     f00:	af 92       	push	r10
     f02:	bf 92       	push	r11
     f04:	cf 92       	push	r12
     f06:	df 92       	push	r13
     f08:	ef 92       	push	r14
     f0a:	ff 92       	push	r15
     f0c:	0f 93       	push	r16
     f0e:	1f 93       	push	r17
     f10:	2f 93       	push	r18
     f12:	3f 93       	push	r19
     f14:	4f 93       	push	r20
     f16:	5f 93       	push	r21
     f18:	6f 93       	push	r22
     f1a:	7f 93       	push	r23
     f1c:	8f 93       	push	r24
     f1e:	9f 93       	push	r25
     f20:	af 93       	push	r26
     f22:	bf 93       	push	r27
     f24:	cf 93       	push	r28
     f26:	df 93       	push	r29
     f28:	ef 93       	push	r30
     f2a:	ff 93       	push	r31
     f2c:	ad b7       	in	r26, 0x3d	; 61
     f2e:	be b7       	in	r27, 0x3e	; 62
     f30:	b0 93 67 01 	sts	0x0167, r27
     f34:	a0 93 66 01 	sts	0x0166, r26
	
	// save the current stack pointer
	taskTable[currentTask].stack_ptr = pxCurrentTCB;
     f38:	60 91 0a 01 	lds	r22, 0x010A
     f3c:	70 91 0b 01 	lds	r23, 0x010B
     f40:	80 91 66 01 	lds	r24, 0x0166
     f44:	90 91 67 01 	lds	r25, 0x0167
     f48:	a0 91 68 01 	lds	r26, 0x0168
     f4c:	b0 91 69 01 	lds	r27, 0x0169
     f50:	4f e0       	ldi	r20, 0x0F	; 15
     f52:	51 e0       	ldi	r21, 0x01	; 1
     f54:	64 9f       	mul	r22, r20
     f56:	90 01       	movw	r18, r0
     f58:	65 9f       	mul	r22, r21
     f5a:	30 0d       	add	r19, r0
     f5c:	74 9f       	mul	r23, r20
     f5e:	30 0d       	add	r19, r0
     f60:	11 24       	eor	r1, r1
     f62:	2c 58       	subi	r18, 0x8C	; 140
     f64:	3e 4f       	sbci	r19, 0xFE	; 254
     f66:	f9 01       	movw	r30, r18
     f68:	80 83       	st	Z, r24
     f6a:	91 83       	std	Z+1, r25	; 0x01
     f6c:	a2 83       	std	Z+2, r26	; 0x02
     f6e:	b3 83       	std	Z+3, r27	; 0x03
	
	// update the "currentTask" to be the next task to run
	currentTask = tempTaskNum;
     f70:	80 91 08 01 	lds	r24, 0x0108
     f74:	90 91 09 01 	lds	r25, 0x0109
     f78:	90 93 0b 01 	sts	0x010B, r25
     f7c:	80 93 0a 01 	sts	0x010A, r24
	
	TTaskBlock *t = &taskTable[currentTask];
     f80:	80 91 0a 01 	lds	r24, 0x010A
     f84:	90 91 0b 01 	lds	r25, 0x010B
     f88:	ac 01       	movw	r20, r24
     f8a:	2f e0       	ldi	r18, 0x0F	; 15
     f8c:	31 e0       	ldi	r19, 0x01	; 1
     f8e:	42 9f       	mul	r20, r18
     f90:	c0 01       	movw	r24, r0
     f92:	43 9f       	mul	r20, r19
     f94:	90 0d       	add	r25, r0
     f96:	52 9f       	mul	r21, r18
     f98:	90 0d       	add	r25, r0
     f9a:	11 24       	eor	r1, r1
     f9c:	84 59       	subi	r24, 0x94	; 148
     f9e:	9e 4f       	sbci	r25, 0xFE	; 254
     fa0:	9a 83       	std	Y+2, r25	; 0x02
     fa2:	89 83       	std	Y+1, r24	; 0x01
	
	if(t->runflag){	// has been run
     fa4:	89 81       	ldd	r24, Y+1	; 0x01
     fa6:	9a 81       	ldd	r25, Y+2	; 0x02
     fa8:	fc 01       	movw	r30, r24
     faa:	80 81       	ld	r24, Z
     fac:	91 81       	ldd	r25, Z+1	; 0x01
     fae:	00 97       	sbiw	r24, 0x00	; 0
     fb0:	09 f4       	brne	.+2      	; 0xfb4 <OSSwapTask+0x132>
     fb2:	51 c0       	rjmp	.+162    	; 0x1056 <OSSwapTask+0x1d4>
		// reset the skiped times flag
		t->skipedTimes = 0;
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	9a 81       	ldd	r25, Y+2	; 0x02
     fb8:	85 5f       	subi	r24, 0xF5	; 245
     fba:	9e 4f       	sbci	r25, 0xFE	; 254
     fbc:	fc 01       	movw	r30, r24
     fbe:	11 82       	std	Z+1, r1	; 0x01
     fc0:	10 82       	st	Z, r1
		
		// get the stack pointer saved
		pxCurrentTCB = taskTable[currentTask].stack_ptr;
     fc2:	40 91 0a 01 	lds	r20, 0x010A
     fc6:	50 91 0b 01 	lds	r21, 0x010B
     fca:	2f e0       	ldi	r18, 0x0F	; 15
     fcc:	31 e0       	ldi	r19, 0x01	; 1
     fce:	42 9f       	mul	r20, r18
     fd0:	c0 01       	movw	r24, r0
     fd2:	43 9f       	mul	r20, r19
     fd4:	90 0d       	add	r25, r0
     fd6:	52 9f       	mul	r21, r18
     fd8:	90 0d       	add	r25, r0
     fda:	11 24       	eor	r1, r1
     fdc:	8c 58       	subi	r24, 0x8C	; 140
     fde:	9e 4f       	sbci	r25, 0xFE	; 254
     fe0:	fc 01       	movw	r30, r24
     fe2:	80 81       	ld	r24, Z
     fe4:	91 81       	ldd	r25, Z+1	; 0x01
     fe6:	a2 81       	ldd	r26, Z+2	; 0x02
     fe8:	b3 81       	ldd	r27, Z+3	; 0x03
     fea:	80 93 66 01 	sts	0x0166, r24
     fee:	90 93 67 01 	sts	0x0167, r25
     ff2:	a0 93 68 01 	sts	0x0168, r26
     ff6:	b0 93 69 01 	sts	0x0169, r27
		portRESTORE_CONTEXT();
     ffa:	80 91 66 01 	lds	r24, 0x0166
     ffe:	90 91 67 01 	lds	r25, 0x0167
    1002:	a0 91 68 01 	lds	r26, 0x0168
    1006:	b0 91 69 01 	lds	r27, 0x0169
    100a:	8d bf       	out	0x3d, r24	; 61
    100c:	9e bf       	out	0x3e, r25	; 62
    100e:	ff 91       	pop	r31
    1010:	ef 91       	pop	r30
    1012:	df 91       	pop	r29
    1014:	cf 91       	pop	r28
    1016:	bf 91       	pop	r27
    1018:	af 91       	pop	r26
    101a:	9f 91       	pop	r25
    101c:	8f 91       	pop	r24
    101e:	7f 91       	pop	r23
    1020:	6f 91       	pop	r22
    1022:	5f 91       	pop	r21
    1024:	4f 91       	pop	r20
    1026:	3f 91       	pop	r19
    1028:	2f 91       	pop	r18
    102a:	1f 91       	pop	r17
    102c:	0f 91       	pop	r16
    102e:	ff 90       	pop	r15
    1030:	ef 90       	pop	r14
    1032:	df 90       	pop	r13
    1034:	cf 90       	pop	r12
    1036:	bf 90       	pop	r11
    1038:	af 90       	pop	r10
    103a:	9f 90       	pop	r9
    103c:	8f 90       	pop	r8
    103e:	7f 90       	pop	r7
    1040:	6f 90       	pop	r6
    1042:	5f 90       	pop	r5
    1044:	4f 90       	pop	r4
    1046:	3f 90       	pop	r3
    1048:	2f 90       	pop	r2
    104a:	1f 90       	pop	r1
    104c:	0f 90       	pop	r0
    104e:	0f be       	out	0x3f, r0	; 63
    1050:	0f 90       	pop	r0
		sei();
    1052:	78 94       	sei
    1054:	06 c0       	rjmp	.+12     	; 0x1062 <OSSwapTask+0x1e0>
	}else{	// never run -> then run
		runTaskFirstTime(currentTask);
    1056:	80 91 0a 01 	lds	r24, 0x010A
    105a:	90 91 0b 01 	lds	r25, 0x010B
    105e:	0e 94 d2 05 	call	0xba4	; 0xba4 <runTaskFirstTime>
	}
	
	// Do not modify the line below!	
	asm("ret");
    1062:	08 95       	ret

00001064 <__vector_14>:
// ISR for the timer. IMPLEMENT ONLY IN PART 2!


ISR(TIMER0_COMPA_vect, ISR_NAKED)
{
	cli();
    1064:	f8 94       	cli
	
	OSSwapTask();
    1066:	0e 94 41 07 	call	0xe82	; 0xe82 <OSSwapTask>
	
	// Do not change this!
	asm("reti");
    106a:	18 95       	reti

0000106c <OSInit>:
}

void OSInit()
{ 
    106c:	df 93       	push	r29
    106e:	cf 93       	push	r28
    1070:	cd b7       	in	r28, 0x3d	; 61
    1072:	de b7       	in	r29, 0x3e	; 62
	// Initialize all OS state variables, hardware used DIRECTLY by the OS, etc etc. Do not initialize variables or hardware
	// used by the application. Only those used by the OS.
	int i;
	
	// initialize timer 0
	TCNT0 = 0; OCR0A = 100;
    1074:	86 e4       	ldi	r24, 0x46	; 70
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	fc 01       	movw	r30, r24
    107a:	10 82       	st	Z, r1
    107c:	87 e4       	ldi	r24, 0x47	; 71
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	24 e6       	ldi	r18, 0x64	; 100
    1082:	fc 01       	movw	r30, r24
    1084:	20 83       	st	Z, r18
	TCCR0A = 0b00000010;
    1086:	84 e4       	ldi	r24, 0x44	; 68
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	22 e0       	ldi	r18, 0x02	; 2
    108c:	fc 01       	movw	r30, r24
    108e:	20 83       	st	Z, r18
	TCCR0B = 0b00000101;
    1090:	85 e4       	ldi	r24, 0x45	; 69
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	25 e0       	ldi	r18, 0x05	; 5
    1096:	fc 01       	movw	r30, r24
    1098:	20 83       	st	Z, r18
}
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	08 95       	ret

000010a0 <OSAddTask>:
// First argument is a pointer to the task's function code, the second is a priority number (0=highest priority)
// and the 3rd argument is an argument that will be passed to the task function the first time it is run.
// E.g. OSAddTask(task1, 0, (void *) 5) causes a task called task1 to be created with priority 0, and the integer
// 5 is passed to task1 when it is first called. See app.c to fully understand how OSAddTask is used.
int OSAddTask(void (*taskptr)(void *), int prio, void* arg)
{
    10a0:	df 93       	push	r29
    10a2:	cf 93       	push	r28
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62
    10a8:	28 97       	sbiw	r28, 0x08	; 8
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	f8 94       	cli
    10ae:	de bf       	out	0x3e, r29	; 62
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	cd bf       	out	0x3d, r28	; 61
    10b4:	9c 83       	std	Y+4, r25	; 0x04
    10b6:	8b 83       	std	Y+3, r24	; 0x03
    10b8:	7e 83       	std	Y+6, r23	; 0x06
    10ba:	6d 83       	std	Y+5, r22	; 0x05
    10bc:	58 87       	std	Y+8, r21	; 0x08
    10be:	4f 83       	std	Y+7, r20	; 0x07
	// Adds a new entry to the TCB. Returns a -1 if # of tasks > OS_NUM_TASKS. Note that OS_NUM_TASKS is the MAXIMUM
	// number of tasks that can be created, not the actual number.
	if(task_counter >= OS_NUM_TASKS)	return -1;
    10c0:	80 91 1e 01 	lds	r24, 0x011E
    10c4:	90 91 1f 01 	lds	r25, 0x011F
    10c8:	84 30       	cpi	r24, 0x04	; 4
    10ca:	91 05       	cpc	r25, r1
    10cc:	1c f0       	brlt	.+6      	; 0x10d4 <OSAddTask+0x34>
    10ce:	8f ef       	ldi	r24, 0xFF	; 255
    10d0:	9f ef       	ldi	r25, 0xFF	; 255
    10d2:	3a c0       	rjmp	.+116    	; 0x1148 <OSAddTask+0xa8>
	TTaskBlock *t = &taskTable[task_counter++];
    10d4:	80 91 1e 01 	lds	r24, 0x011E
    10d8:	90 91 1f 01 	lds	r25, 0x011F
    10dc:	bc 01       	movw	r22, r24
    10de:	4f e0       	ldi	r20, 0x0F	; 15
    10e0:	51 e0       	ldi	r21, 0x01	; 1
    10e2:	64 9f       	mul	r22, r20
    10e4:	90 01       	movw	r18, r0
    10e6:	65 9f       	mul	r22, r21
    10e8:	30 0d       	add	r19, r0
    10ea:	74 9f       	mul	r23, r20
    10ec:	30 0d       	add	r19, r0
    10ee:	11 24       	eor	r1, r1
    10f0:	24 59       	subi	r18, 0x94	; 148
    10f2:	3e 4f       	sbci	r19, 0xFE	; 254
    10f4:	3a 83       	std	Y+2, r19	; 0x02
    10f6:	29 83       	std	Y+1, r18	; 0x01
    10f8:	01 96       	adiw	r24, 0x01	; 1
    10fa:	90 93 1f 01 	sts	0x011F, r25
    10fe:	80 93 1e 01 	sts	0x011E, r24
	t->fptr = taskptr;
    1102:	89 81       	ldd	r24, Y+1	; 0x01
    1104:	9a 81       	ldd	r25, Y+2	; 0x02
    1106:	2b 81       	ldd	r18, Y+3	; 0x03
    1108:	3c 81       	ldd	r19, Y+4	; 0x04
    110a:	fc 01       	movw	r30, r24
    110c:	35 83       	std	Z+5, r19	; 0x05
    110e:	24 83       	std	Z+4, r18	; 0x04
	t->prio = prio;
    1110:	89 81       	ldd	r24, Y+1	; 0x01
    1112:	9a 81       	ldd	r25, Y+2	; 0x02
    1114:	2d 81       	ldd	r18, Y+5	; 0x05
    1116:	3e 81       	ldd	r19, Y+6	; 0x06
    1118:	fc 01       	movw	r30, r24
    111a:	33 83       	std	Z+3, r19	; 0x03
    111c:	22 83       	std	Z+2, r18	; 0x02
	t->arg = arg;
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	9a 81       	ldd	r25, Y+2	; 0x02
    1122:	2f 81       	ldd	r18, Y+7	; 0x07
    1124:	38 85       	ldd	r19, Y+8	; 0x08
    1126:	fc 01       	movw	r30, r24
    1128:	37 83       	std	Z+7, r19	; 0x07
    112a:	26 83       	std	Z+6, r18	; 0x06
	t->runflag = 0;
    112c:	89 81       	ldd	r24, Y+1	; 0x01
    112e:	9a 81       	ldd	r25, Y+2	; 0x02
    1130:	fc 01       	movw	r30, r24
    1132:	11 82       	std	Z+1, r1	; 0x01
    1134:	10 82       	st	Z, r1
	t->sem_counter = 0;
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	9a 81       	ldd	r25, Y+2	; 0x02
    113a:	83 5f       	subi	r24, 0xF3	; 243
    113c:	9e 4f       	sbci	r25, 0xFE	; 254
    113e:	fc 01       	movw	r30, r24
    1140:	11 82       	std	Z+1, r1	; 0x01
    1142:	10 82       	st	Z, r1
	
	return 0;
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	90 e0       	ldi	r25, 0x00	; 0
}
    1148:	28 96       	adiw	r28, 0x08	; 8
    114a:	0f b6       	in	r0, 0x3f	; 63
    114c:	f8 94       	cli
    114e:	de bf       	out	0x3e, r29	; 62
    1150:	0f be       	out	0x3f, r0	; 63
    1152:	cd bf       	out	0x3d, r28	; 61
    1154:	cf 91       	pop	r28
    1156:	df 91       	pop	r29
    1158:	08 95       	ret

0000115a <OSRun>:

void OSRun()
{
    115a:	df 93       	push	r29
    115c:	cf 93       	push	r28
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
	// start timer 0
	TIMSK0 |= 0b10;
    1162:	8e e6       	ldi	r24, 0x6E	; 110
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	2e e6       	ldi	r18, 0x6E	; 110
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	f9 01       	movw	r30, r18
    116c:	20 81       	ld	r18, Z
    116e:	22 60       	ori	r18, 0x02	; 2
    1170:	fc 01       	movw	r30, r24
    1172:	20 83       	st	Z, r18
	// enable global interrupt
	sei();
    1174:	78 94       	sei
	
	// Starts by executing the first task
	currentTask = 0;
    1176:	10 92 0b 01 	sts	0x010B, r1
    117a:	10 92 0a 01 	sts	0x010A, r1
	runTaskFirstTime(currentTask);
    117e:	80 91 0a 01 	lds	r24, 0x010A
    1182:	90 91 0b 01 	lds	r25, 0x010B
    1186:	0e 94 d2 05 	call	0xba4	; 0xba4 <runTaskFirstTime>
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	08 95       	ret

00001190 <setupSerial>:
#define enter_atomic() cli()
#define leave_atomic() sei()

// Set up for 9600 8N1
void setupSerial()
{
    1190:	df 93       	push	r29
    1192:	cf 93       	push	r28
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
	enter_atomic();
    1198:	f8 94       	cli
	qcount=0;
    119a:	10 92 f3 05 	sts	0x05F3, r1
    119e:	10 92 f2 05 	sts	0x05F2, r1
	qhead=0;
    11a2:	10 92 37 06 	sts	0x0637, r1
    11a6:	10 92 36 06 	sts	0x0636, r1
	qtail=0;
    11aa:	10 92 f5 05 	sts	0x05F5, r1
    11ae:	10 92 f4 05 	sts	0x05F4, r1
	lqhead=0;
    11b2:	10 92 ef 05 	sts	0x05EF, r1
    11b6:	10 92 ee 05 	sts	0x05EE, r1
	lqtail=0;
    11ba:	10 92 f1 05 	sts	0x05F1, r1
    11be:	10 92 f0 05 	sts	0x05F0, r1
	lqcount=0;
    11c2:	10 92 ed 05 	sts	0x05ED, r1
    11c6:	10 92 ec 05 	sts	0x05EC, r1

	// Set up baud rate generator. UBBR=16000000/(16*9600)-1 = 103
	UBRR0L=103;
    11ca:	84 ec       	ldi	r24, 0xC4	; 196
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	27 e6       	ldi	r18, 0x67	; 103
    11d0:	fc 01       	movw	r30, r24
    11d2:	20 83       	st	Z, r18
	UBRR0H=0;
    11d4:	85 ec       	ldi	r24, 0xC5	; 197
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	fc 01       	movw	r30, r24
    11da:	10 82       	st	Z, r1
	
	// Set up 8N1
	UCSR0C=0b110;
    11dc:	82 ec       	ldi	r24, 0xC2	; 194
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	26 e0       	ldi	r18, 0x06	; 6
    11e2:	fc 01       	movw	r30, r24
    11e4:	20 83       	st	Z, r18
	
	// Enable RX and TX.
	UCSR0B=0b10011000;
    11e6:	81 ec       	ldi	r24, 0xC1	; 193
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	28 e9       	ldi	r18, 0x98	; 152
    11ec:	fc 01       	movw	r30, r24
    11ee:	20 83       	st	Z, r18
	UCSR0A=0;
    11f0:	80 ec       	ldi	r24, 0xC0	; 192
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	fc 01       	movw	r30, r24
    11f6:	10 82       	st	Z, r1
	leave_atomic();
    11f8:	78 94       	sei
}
    11fa:	cf 91       	pop	r28
    11fc:	df 91       	pop	r29
    11fe:	08 95       	ret

00001200 <__vector_20>:

// ISR for transmit end.
ISR(USART_TX_vect)
{
    1200:	1f 92       	push	r1
    1202:	0f 92       	push	r0
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	0f 92       	push	r0
    1208:	11 24       	eor	r1, r1
    120a:	2f 93       	push	r18
    120c:	3f 93       	push	r19
    120e:	5f 93       	push	r21
    1210:	6f 93       	push	r22
    1212:	7f 93       	push	r23
    1214:	8f 93       	push	r24
    1216:	9f 93       	push	r25
    1218:	af 93       	push	r26
    121a:	bf 93       	push	r27
    121c:	ef 93       	push	r30
    121e:	ff 93       	push	r31
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62

	enter_atomic();
    1228:	f8 94       	cli
	// Disable interrupts. 
	if(qcount==0)
    122a:	80 91 f2 05 	lds	r24, 0x05F2
    122e:	90 91 f3 05 	lds	r25, 0x05F3
    1232:	00 97       	sbiw	r24, 0x00	; 0
    1234:	51 f4       	brne	.+20     	; 0x124a <__vector_20+0x4a>
		UCSR0B&=0b10111111;
    1236:	81 ec       	ldi	r24, 0xC1	; 193
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	21 ec       	ldi	r18, 0xC1	; 193
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	f9 01       	movw	r30, r18
    1240:	20 81       	ld	r18, Z
    1242:	2f 7b       	andi	r18, 0xBF	; 191
    1244:	fc 01       	movw	r30, r24
    1246:	20 83       	st	Z, r18
    1248:	23 c0       	rjmp	.+70     	; 0x1290 <__vector_20+0x90>
	else
	{
		UDR0=q[qtail];
    124a:	86 ec       	ldi	r24, 0xC6	; 198
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	20 91 f4 05 	lds	r18, 0x05F4
    1252:	30 91 f5 05 	lds	r19, 0x05F5
    1256:	2a 50       	subi	r18, 0x0A	; 10
    1258:	3a 4f       	sbci	r19, 0xFA	; 250
    125a:	f9 01       	movw	r30, r18
    125c:	20 81       	ld	r18, Z
    125e:	fc 01       	movw	r30, r24
    1260:	20 83       	st	Z, r18
		qtail=(qtail+1)%QLEN;
    1262:	80 91 f4 05 	lds	r24, 0x05F4
    1266:	90 91 f5 05 	lds	r25, 0x05F5
    126a:	01 96       	adiw	r24, 0x01	; 1
    126c:	20 e4       	ldi	r18, 0x40	; 64
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	b9 01       	movw	r22, r18
    1272:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <__divmodhi4>
    1276:	90 93 f5 05 	sts	0x05F5, r25
    127a:	80 93 f4 05 	sts	0x05F4, r24
		qcount--;
    127e:	80 91 f2 05 	lds	r24, 0x05F2
    1282:	90 91 f3 05 	lds	r25, 0x05F3
    1286:	01 97       	sbiw	r24, 0x01	; 1
    1288:	90 93 f3 05 	sts	0x05F3, r25
    128c:	80 93 f2 05 	sts	0x05F2, r24
	}	
	leave_atomic();
    1290:	78 94       	sei
}
    1292:	cf 91       	pop	r28
    1294:	df 91       	pop	r29
    1296:	ff 91       	pop	r31
    1298:	ef 91       	pop	r30
    129a:	bf 91       	pop	r27
    129c:	af 91       	pop	r26
    129e:	9f 91       	pop	r25
    12a0:	8f 91       	pop	r24
    12a2:	7f 91       	pop	r23
    12a4:	6f 91       	pop	r22
    12a6:	5f 91       	pop	r21
    12a8:	3f 91       	pop	r19
    12aa:	2f 91       	pop	r18
    12ac:	0f 90       	pop	r0
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	0f 90       	pop	r0
    12b2:	1f 90       	pop	r1
    12b4:	18 95       	reti

000012b6 <__vector_18>:

// Listener
ISR(USART_RX_vect)
{
    12b6:	1f 92       	push	r1
    12b8:	0f 92       	push	r0
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	0f 92       	push	r0
    12be:	11 24       	eor	r1, r1
    12c0:	2f 93       	push	r18
    12c2:	3f 93       	push	r19
    12c4:	5f 93       	push	r21
    12c6:	6f 93       	push	r22
    12c8:	7f 93       	push	r23
    12ca:	8f 93       	push	r24
    12cc:	9f 93       	push	r25
    12ce:	af 93       	push	r26
    12d0:	bf 93       	push	r27
    12d2:	ef 93       	push	r30
    12d4:	ff 93       	push	r31
    12d6:	df 93       	push	r29
    12d8:	cf 93       	push	r28
    12da:	0f 92       	push	r0
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
	// Guarantee atomicity
	enter_atomic();
    12e0:	f8 94       	cli
		
	// Get the character
	char ch=UDR0;
    12e2:	86 ec       	ldi	r24, 0xC6	; 198
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	fc 01       	movw	r30, r24
    12e8:	80 81       	ld	r24, Z
    12ea:	89 83       	std	Y+1, r24	; 0x01
	if(lqcount<LQLEN)
    12ec:	80 91 ec 05 	lds	r24, 0x05EC
    12f0:	90 91 ed 05 	lds	r25, 0x05ED
    12f4:	80 38       	cpi	r24, 0x80	; 128
    12f6:	91 05       	cpc	r25, r1
    12f8:	04 f5       	brge	.+64     	; 0x133a <__vector_18+0x84>
	{
		lq[lqhead]=ch;
    12fa:	80 91 ee 05 	lds	r24, 0x05EE
    12fe:	90 91 ef 05 	lds	r25, 0x05EF
    1302:	84 55       	subi	r24, 0x54	; 84
    1304:	9a 4f       	sbci	r25, 0xFA	; 250
    1306:	29 81       	ldd	r18, Y+1	; 0x01
    1308:	fc 01       	movw	r30, r24
    130a:	20 83       	st	Z, r18
		lqhead=(lqhead+1)%LQLEN;
    130c:	80 91 ee 05 	lds	r24, 0x05EE
    1310:	90 91 ef 05 	lds	r25, 0x05EF
    1314:	01 96       	adiw	r24, 0x01	; 1
    1316:	20 e8       	ldi	r18, 0x80	; 128
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	b9 01       	movw	r22, r18
    131c:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <__divmodhi4>
    1320:	90 93 ef 05 	sts	0x05EF, r25
    1324:	80 93 ee 05 	sts	0x05EE, r24
		lqcount++;
    1328:	80 91 ec 05 	lds	r24, 0x05EC
    132c:	90 91 ed 05 	lds	r25, 0x05ED
    1330:	01 96       	adiw	r24, 0x01	; 1
    1332:	90 93 ed 05 	sts	0x05ED, r25
    1336:	80 93 ec 05 	sts	0x05EC, r24
	}	
	
	leave_atomic();
    133a:	78 94       	sei
}
    133c:	0f 90       	pop	r0
    133e:	cf 91       	pop	r28
    1340:	df 91       	pop	r29
    1342:	ff 91       	pop	r31
    1344:	ef 91       	pop	r30
    1346:	bf 91       	pop	r27
    1348:	af 91       	pop	r26
    134a:	9f 91       	pop	r25
    134c:	8f 91       	pop	r24
    134e:	7f 91       	pop	r23
    1350:	6f 91       	pop	r22
    1352:	5f 91       	pop	r21
    1354:	3f 91       	pop	r19
    1356:	2f 91       	pop	r18
    1358:	0f 90       	pop	r0
    135a:	0f be       	out	0x3f, r0	; 63
    135c:	0f 90       	pop	r0
    135e:	1f 90       	pop	r1
    1360:	18 95       	reti

00001362 <hear>:

void hear(char *str, int *len)
{
    1362:	df 93       	push	r29
    1364:	cf 93       	push	r28
    1366:	00 d0       	rcall	.+0      	; 0x1368 <hear+0x6>
    1368:	00 d0       	rcall	.+0      	; 0x136a <hear+0x8>
    136a:	00 d0       	rcall	.+0      	; 0x136c <hear+0xa>
    136c:	cd b7       	in	r28, 0x3d	; 61
    136e:	de b7       	in	r29, 0x3e	; 62
    1370:	9c 83       	std	Y+4, r25	; 0x04
    1372:	8b 83       	std	Y+3, r24	; 0x03
    1374:	7e 83       	std	Y+6, r23	; 0x06
    1376:	6d 83       	std	Y+5, r22	; 0x05
	int i;
	
	enter_atomic();
    1378:	f8 94       	cli
	for(i=0; i<lqcount; i++)
    137a:	1a 82       	std	Y+2, r1	; 0x02
    137c:	19 82       	std	Y+1, r1	; 0x01
    137e:	23 c0       	rjmp	.+70     	; 0x13c6 <hear+0x64>
	{
		str[i]=lq[lqtail];
    1380:	89 81       	ldd	r24, Y+1	; 0x01
    1382:	9a 81       	ldd	r25, Y+2	; 0x02
    1384:	2b 81       	ldd	r18, Y+3	; 0x03
    1386:	3c 81       	ldd	r19, Y+4	; 0x04
    1388:	82 0f       	add	r24, r18
    138a:	93 1f       	adc	r25, r19
    138c:	20 91 f0 05 	lds	r18, 0x05F0
    1390:	30 91 f1 05 	lds	r19, 0x05F1
    1394:	24 55       	subi	r18, 0x54	; 84
    1396:	3a 4f       	sbci	r19, 0xFA	; 250
    1398:	f9 01       	movw	r30, r18
    139a:	20 81       	ld	r18, Z
    139c:	fc 01       	movw	r30, r24
    139e:	20 83       	st	Z, r18
		lqtail=(lqtail+1)%LQLEN;
    13a0:	80 91 f0 05 	lds	r24, 0x05F0
    13a4:	90 91 f1 05 	lds	r25, 0x05F1
    13a8:	01 96       	adiw	r24, 0x01	; 1
    13aa:	20 e8       	ldi	r18, 0x80	; 128
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	b9 01       	movw	r22, r18
    13b0:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <__divmodhi4>
    13b4:	90 93 f1 05 	sts	0x05F1, r25
    13b8:	80 93 f0 05 	sts	0x05F0, r24
void hear(char *str, int *len)
{
	int i;
	
	enter_atomic();
	for(i=0; i<lqcount; i++)
    13bc:	89 81       	ldd	r24, Y+1	; 0x01
    13be:	9a 81       	ldd	r25, Y+2	; 0x02
    13c0:	01 96       	adiw	r24, 0x01	; 1
    13c2:	9a 83       	std	Y+2, r25	; 0x02
    13c4:	89 83       	std	Y+1, r24	; 0x01
    13c6:	80 91 ec 05 	lds	r24, 0x05EC
    13ca:	90 91 ed 05 	lds	r25, 0x05ED
    13ce:	29 81       	ldd	r18, Y+1	; 0x01
    13d0:	3a 81       	ldd	r19, Y+2	; 0x02
    13d2:	28 17       	cp	r18, r24
    13d4:	39 07       	cpc	r19, r25
    13d6:	a4 f2       	brlt	.-88     	; 0x1380 <hear+0x1e>
	{
		str[i]=lq[lqtail];
		lqtail=(lqtail+1)%LQLEN;
	}	
	
	str[lqtail]=0;
    13d8:	80 91 f0 05 	lds	r24, 0x05F0
    13dc:	90 91 f1 05 	lds	r25, 0x05F1
    13e0:	2b 81       	ldd	r18, Y+3	; 0x03
    13e2:	3c 81       	ldd	r19, Y+4	; 0x04
    13e4:	82 0f       	add	r24, r18
    13e6:	93 1f       	adc	r25, r19
    13e8:	fc 01       	movw	r30, r24
    13ea:	10 82       	st	Z, r1
	
	*len=lqcount;
    13ec:	20 91 ec 05 	lds	r18, 0x05EC
    13f0:	30 91 ed 05 	lds	r19, 0x05ED
    13f4:	8d 81       	ldd	r24, Y+5	; 0x05
    13f6:	9e 81       	ldd	r25, Y+6	; 0x06
    13f8:	fc 01       	movw	r30, r24
    13fa:	31 83       	std	Z+1, r19	; 0x01
    13fc:	20 83       	st	Z, r18
	lqcount=0;
    13fe:	10 92 ed 05 	sts	0x05ED, r1
    1402:	10 92 ec 05 	sts	0x05EC, r1
	
	leave_atomic();
    1406:	78 94       	sei
}
    1408:	26 96       	adiw	r28, 0x06	; 6
    140a:	0f b6       	in	r0, 0x3f	; 63
    140c:	f8 94       	cli
    140e:	de bf       	out	0x3e, r29	; 62
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	cd bf       	out	0x3d, r28	; 61
    1414:	cf 91       	pop	r28
    1416:	df 91       	pop	r29
    1418:	08 95       	ret

0000141a <say>:

void say(char *str)
{
    141a:	0f 93       	push	r16
    141c:	1f 93       	push	r17
    141e:	df 93       	push	r29
    1420:	cf 93       	push	r28
    1422:	00 d0       	rcall	.+0      	; 0x1424 <say+0xa>
    1424:	00 d0       	rcall	.+0      	; 0x1426 <say+0xc>
    1426:	cd b7       	in	r28, 0x3d	; 61
    1428:	de b7       	in	r29, 0x3e	; 62
    142a:	9c 83       	std	Y+4, r25	; 0x04
    142c:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	
	// Guarantee atomicity
	enter_atomic();
    142e:	f8 94       	cli
	for(i=0; i<strlen(str) && qcount < QLEN; i++)
    1430:	1a 82       	std	Y+2, r1	; 0x02
    1432:	19 82       	std	Y+1, r1	; 0x01
    1434:	62 c0       	rjmp	.+196    	; 0x14fa <say+0xe0>
	{
		q[qhead]=str[i];
    1436:	80 91 36 06 	lds	r24, 0x0636
    143a:	90 91 37 06 	lds	r25, 0x0637
    143e:	29 81       	ldd	r18, Y+1	; 0x01
    1440:	3a 81       	ldd	r19, Y+2	; 0x02
    1442:	4b 81       	ldd	r20, Y+3	; 0x03
    1444:	5c 81       	ldd	r21, Y+4	; 0x04
    1446:	24 0f       	add	r18, r20
    1448:	35 1f       	adc	r19, r21
    144a:	f9 01       	movw	r30, r18
    144c:	20 81       	ld	r18, Z
    144e:	8a 50       	subi	r24, 0x0A	; 10
    1450:	9a 4f       	sbci	r25, 0xFA	; 250
    1452:	fc 01       	movw	r30, r24
    1454:	20 83       	st	Z, r18
		qhead=(qhead+1) %QLEN;
    1456:	80 91 36 06 	lds	r24, 0x0636
    145a:	90 91 37 06 	lds	r25, 0x0637
    145e:	01 96       	adiw	r24, 0x01	; 1
    1460:	20 e4       	ldi	r18, 0x40	; 64
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	b9 01       	movw	r22, r18
    1466:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <__divmodhi4>
    146a:	90 93 37 06 	sts	0x0637, r25
    146e:	80 93 36 06 	sts	0x0636, r24
		qcount++;			
    1472:	80 91 f2 05 	lds	r24, 0x05F2
    1476:	90 91 f3 05 	lds	r25, 0x05F3
    147a:	01 96       	adiw	r24, 0x01	; 1
    147c:	90 93 f3 05 	sts	0x05F3, r25
    1480:	80 93 f2 05 	sts	0x05F2, r24
	
		if(!(UCSR0B & 0b01000000))
    1484:	81 ec       	ldi	r24, 0xC1	; 193
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	fc 01       	movw	r30, r24
    148a:	80 81       	ld	r24, Z
    148c:	88 2f       	mov	r24, r24
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	80 74       	andi	r24, 0x40	; 64
    1492:	90 70       	andi	r25, 0x00	; 0
    1494:	00 97       	sbiw	r24, 0x00	; 0
    1496:	61 f5       	brne	.+88     	; 0x14f0 <say+0xd6>
		{
			UDR0=q[qtail];
    1498:	86 ec       	ldi	r24, 0xC6	; 198
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	20 91 f4 05 	lds	r18, 0x05F4
    14a0:	30 91 f5 05 	lds	r19, 0x05F5
    14a4:	2a 50       	subi	r18, 0x0A	; 10
    14a6:	3a 4f       	sbci	r19, 0xFA	; 250
    14a8:	f9 01       	movw	r30, r18
    14aa:	20 81       	ld	r18, Z
    14ac:	fc 01       	movw	r30, r24
    14ae:	20 83       	st	Z, r18
			qtail=(qtail+1)%QLEN;
    14b0:	80 91 f4 05 	lds	r24, 0x05F4
    14b4:	90 91 f5 05 	lds	r25, 0x05F5
    14b8:	01 96       	adiw	r24, 0x01	; 1
    14ba:	20 e4       	ldi	r18, 0x40	; 64
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	b9 01       	movw	r22, r18
    14c0:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <__divmodhi4>
    14c4:	90 93 f5 05 	sts	0x05F5, r25
    14c8:	80 93 f4 05 	sts	0x05F4, r24
			qcount--;
    14cc:	80 91 f2 05 	lds	r24, 0x05F2
    14d0:	90 91 f3 05 	lds	r25, 0x05F3
    14d4:	01 97       	sbiw	r24, 0x01	; 1
    14d6:	90 93 f3 05 	sts	0x05F3, r25
    14da:	80 93 f2 05 	sts	0x05F2, r24
			UCSR0B|=0b01000000;
    14de:	81 ec       	ldi	r24, 0xC1	; 193
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	21 ec       	ldi	r18, 0xC1	; 193
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	f9 01       	movw	r30, r18
    14e8:	20 81       	ld	r18, Z
    14ea:	20 64       	ori	r18, 0x40	; 64
    14ec:	fc 01       	movw	r30, r24
    14ee:	20 83       	st	Z, r18
{
	int i;
	
	// Guarantee atomicity
	enter_atomic();
	for(i=0; i<strlen(str) && qcount < QLEN; i++)
    14f0:	89 81       	ldd	r24, Y+1	; 0x01
    14f2:	9a 81       	ldd	r25, Y+2	; 0x02
    14f4:	01 96       	adiw	r24, 0x01	; 1
    14f6:	9a 83       	std	Y+2, r25	; 0x02
    14f8:	89 83       	std	Y+1, r24	; 0x01
    14fa:	09 81       	ldd	r16, Y+1	; 0x01
    14fc:	1a 81       	ldd	r17, Y+2	; 0x02
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	9c 81       	ldd	r25, Y+4	; 0x04
    1502:	0e 94 94 11 	call	0x2328	; 0x2328 <strlen>
    1506:	08 17       	cp	r16, r24
    1508:	19 07       	cpc	r17, r25
    150a:	40 f4       	brcc	.+16     	; 0x151c <say+0x102>
    150c:	80 91 f2 05 	lds	r24, 0x05F2
    1510:	90 91 f3 05 	lds	r25, 0x05F3
    1514:	80 34       	cpi	r24, 0x40	; 64
    1516:	91 05       	cpc	r25, r1
    1518:	0c f4       	brge	.+2      	; 0x151c <say+0x102>
    151a:	8d cf       	rjmp	.-230    	; 0x1436 <say+0x1c>
			qtail=(qtail+1)%QLEN;
			qcount--;
			UCSR0B|=0b01000000;
		}
	}
	leave_atomic();
    151c:	78 94       	sei
}
    151e:	0f 90       	pop	r0
    1520:	0f 90       	pop	r0
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	cf 91       	pop	r28
    1528:	df 91       	pop	r29
    152a:	1f 91       	pop	r17
    152c:	0f 91       	pop	r16
    152e:	08 95       	ret

00001530 <__fixunssfsi>:
    1530:	ef 92       	push	r14
    1532:	ff 92       	push	r15
    1534:	0f 93       	push	r16
    1536:	1f 93       	push	r17
    1538:	7b 01       	movw	r14, r22
    153a:	8c 01       	movw	r16, r24
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	40 e0       	ldi	r20, 0x00	; 0
    1542:	5f e4       	ldi	r21, 0x4F	; 79
    1544:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <__gesf2>
    1548:	87 fd       	sbrc	r24, 7
    154a:	11 c0       	rjmp	.+34     	; 0x156e <__fixunssfsi+0x3e>
    154c:	c8 01       	movw	r24, r16
    154e:	b7 01       	movw	r22, r14
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	40 e0       	ldi	r20, 0x00	; 0
    1556:	5f e4       	ldi	r21, 0x4F	; 79
    1558:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__subsf3>
    155c:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <__fixsfsi>
    1560:	9b 01       	movw	r18, r22
    1562:	ac 01       	movw	r20, r24
    1564:	20 50       	subi	r18, 0x00	; 0
    1566:	30 40       	sbci	r19, 0x00	; 0
    1568:	40 40       	sbci	r20, 0x00	; 0
    156a:	50 48       	sbci	r21, 0x80	; 128
    156c:	06 c0       	rjmp	.+12     	; 0x157a <__fixunssfsi+0x4a>
    156e:	c8 01       	movw	r24, r16
    1570:	b7 01       	movw	r22, r14
    1572:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <__fixsfsi>
    1576:	9b 01       	movw	r18, r22
    1578:	ac 01       	movw	r20, r24
    157a:	b9 01       	movw	r22, r18
    157c:	ca 01       	movw	r24, r20
    157e:	1f 91       	pop	r17
    1580:	0f 91       	pop	r16
    1582:	ff 90       	pop	r15
    1584:	ef 90       	pop	r14
    1586:	08 95       	ret

00001588 <_fpadd_parts>:
    1588:	a0 e0       	ldi	r26, 0x00	; 0
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	ea ec       	ldi	r30, 0xCA	; 202
    158e:	fa e0       	ldi	r31, 0x0A	; 10
    1590:	0c 94 03 10 	jmp	0x2006	; 0x2006 <__prologue_saves__+0x8>
    1594:	fc 01       	movw	r30, r24
    1596:	ea 01       	movw	r28, r20
    1598:	80 81       	ld	r24, Z
    159a:	82 30       	cpi	r24, 0x02	; 2
    159c:	08 f4       	brcc	.+2      	; 0x15a0 <_fpadd_parts+0x18>
    159e:	38 c1       	rjmp	.+624    	; 0x1810 <_fpadd_parts+0x288>
    15a0:	db 01       	movw	r26, r22
    15a2:	9c 91       	ld	r25, X
    15a4:	92 30       	cpi	r25, 0x02	; 2
    15a6:	08 f4       	brcc	.+2      	; 0x15aa <_fpadd_parts+0x22>
    15a8:	30 c1       	rjmp	.+608    	; 0x180a <_fpadd_parts+0x282>
    15aa:	84 30       	cpi	r24, 0x04	; 4
    15ac:	59 f4       	brne	.+22     	; 0x15c4 <_fpadd_parts+0x3c>
    15ae:	94 30       	cpi	r25, 0x04	; 4
    15b0:	09 f0       	breq	.+2      	; 0x15b4 <_fpadd_parts+0x2c>
    15b2:	2e c1       	rjmp	.+604    	; 0x1810 <_fpadd_parts+0x288>
    15b4:	91 81       	ldd	r25, Z+1	; 0x01
    15b6:	11 96       	adiw	r26, 0x01	; 1
    15b8:	8c 91       	ld	r24, X
    15ba:	11 97       	sbiw	r26, 0x01	; 1
    15bc:	98 17       	cp	r25, r24
    15be:	09 f0       	breq	.+2      	; 0x15c2 <_fpadd_parts+0x3a>
    15c0:	21 c1       	rjmp	.+578    	; 0x1804 <_fpadd_parts+0x27c>
    15c2:	26 c1       	rjmp	.+588    	; 0x1810 <_fpadd_parts+0x288>
    15c4:	94 30       	cpi	r25, 0x04	; 4
    15c6:	09 f4       	brne	.+2      	; 0x15ca <_fpadd_parts+0x42>
    15c8:	20 c1       	rjmp	.+576    	; 0x180a <_fpadd_parts+0x282>
    15ca:	92 30       	cpi	r25, 0x02	; 2
    15cc:	b1 f4       	brne	.+44     	; 0x15fa <_fpadd_parts+0x72>
    15ce:	82 30       	cpi	r24, 0x02	; 2
    15d0:	09 f0       	breq	.+2      	; 0x15d4 <_fpadd_parts+0x4c>
    15d2:	1e c1       	rjmp	.+572    	; 0x1810 <_fpadd_parts+0x288>
    15d4:	ca 01       	movw	r24, r20
    15d6:	af 01       	movw	r20, r30
    15d8:	28 e0       	ldi	r18, 0x08	; 8
    15da:	da 01       	movw	r26, r20
    15dc:	0d 90       	ld	r0, X+
    15de:	ad 01       	movw	r20, r26
    15e0:	dc 01       	movw	r26, r24
    15e2:	0d 92       	st	X+, r0
    15e4:	cd 01       	movw	r24, r26
    15e6:	21 50       	subi	r18, 0x01	; 1
    15e8:	c1 f7       	brne	.-16     	; 0x15da <_fpadd_parts+0x52>
    15ea:	db 01       	movw	r26, r22
    15ec:	11 96       	adiw	r26, 0x01	; 1
    15ee:	8c 91       	ld	r24, X
    15f0:	11 97       	sbiw	r26, 0x01	; 1
    15f2:	91 81       	ldd	r25, Z+1	; 0x01
    15f4:	89 23       	and	r24, r25
    15f6:	89 83       	std	Y+1, r24	; 0x01
    15f8:	0a c1       	rjmp	.+532    	; 0x180e <_fpadd_parts+0x286>
    15fa:	82 30       	cpi	r24, 0x02	; 2
    15fc:	09 f4       	brne	.+2      	; 0x1600 <_fpadd_parts+0x78>
    15fe:	05 c1       	rjmp	.+522    	; 0x180a <_fpadd_parts+0x282>
    1600:	c2 80       	ldd	r12, Z+2	; 0x02
    1602:	d3 80       	ldd	r13, Z+3	; 0x03
    1604:	db 01       	movw	r26, r22
    1606:	12 96       	adiw	r26, 0x02	; 2
    1608:	6d 90       	ld	r6, X+
    160a:	7c 90       	ld	r7, X
    160c:	13 97       	sbiw	r26, 0x03	; 3
    160e:	24 81       	ldd	r18, Z+4	; 0x04
    1610:	35 81       	ldd	r19, Z+5	; 0x05
    1612:	46 81       	ldd	r20, Z+6	; 0x06
    1614:	57 81       	ldd	r21, Z+7	; 0x07
    1616:	14 96       	adiw	r26, 0x04	; 4
    1618:	ed 90       	ld	r14, X+
    161a:	fd 90       	ld	r15, X+
    161c:	0d 91       	ld	r16, X+
    161e:	1c 91       	ld	r17, X
    1620:	17 97       	sbiw	r26, 0x07	; 7
    1622:	c6 01       	movw	r24, r12
    1624:	86 19       	sub	r24, r6
    1626:	97 09       	sbc	r25, r7
    1628:	5c 01       	movw	r10, r24
    162a:	97 ff       	sbrs	r25, 7
    162c:	04 c0       	rjmp	.+8      	; 0x1636 <_fpadd_parts+0xae>
    162e:	aa 24       	eor	r10, r10
    1630:	bb 24       	eor	r11, r11
    1632:	a8 1a       	sub	r10, r24
    1634:	b9 0a       	sbc	r11, r25
    1636:	b0 e2       	ldi	r27, 0x20	; 32
    1638:	ab 16       	cp	r10, r27
    163a:	b1 04       	cpc	r11, r1
    163c:	0c f0       	brlt	.+2      	; 0x1640 <_fpadd_parts+0xb8>
    163e:	61 c0       	rjmp	.+194    	; 0x1702 <_fpadd_parts+0x17a>
    1640:	18 16       	cp	r1, r24
    1642:	19 06       	cpc	r1, r25
    1644:	6c f5       	brge	.+90     	; 0x16a0 <_fpadd_parts+0x118>
    1646:	37 01       	movw	r6, r14
    1648:	48 01       	movw	r8, r16
    164a:	0a 2c       	mov	r0, r10
    164c:	04 c0       	rjmp	.+8      	; 0x1656 <_fpadd_parts+0xce>
    164e:	96 94       	lsr	r9
    1650:	87 94       	ror	r8
    1652:	77 94       	ror	r7
    1654:	67 94       	ror	r6
    1656:	0a 94       	dec	r0
    1658:	d2 f7       	brpl	.-12     	; 0x164e <_fpadd_parts+0xc6>
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	a0 e0       	ldi	r26, 0x00	; 0
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	0a 2c       	mov	r0, r10
    1664:	04 c0       	rjmp	.+8      	; 0x166e <_fpadd_parts+0xe6>
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	aa 1f       	adc	r26, r26
    166c:	bb 1f       	adc	r27, r27
    166e:	0a 94       	dec	r0
    1670:	d2 f7       	brpl	.-12     	; 0x1666 <_fpadd_parts+0xde>
    1672:	01 97       	sbiw	r24, 0x01	; 1
    1674:	a1 09       	sbc	r26, r1
    1676:	b1 09       	sbc	r27, r1
    1678:	8e 21       	and	r24, r14
    167a:	9f 21       	and	r25, r15
    167c:	a0 23       	and	r26, r16
    167e:	b1 23       	and	r27, r17
    1680:	ee 24       	eor	r14, r14
    1682:	ff 24       	eor	r15, r15
    1684:	87 01       	movw	r16, r14
    1686:	e3 94       	inc	r14
    1688:	00 97       	sbiw	r24, 0x00	; 0
    168a:	a1 05       	cpc	r26, r1
    168c:	b1 05       	cpc	r27, r1
    168e:	19 f4       	brne	.+6      	; 0x1696 <_fpadd_parts+0x10e>
    1690:	ee 24       	eor	r14, r14
    1692:	ff 24       	eor	r15, r15
    1694:	87 01       	movw	r16, r14
    1696:	e6 28       	or	r14, r6
    1698:	f7 28       	or	r15, r7
    169a:	08 29       	or	r16, r8
    169c:	19 29       	or	r17, r9
    169e:	3c c0       	rjmp	.+120    	; 0x1718 <_fpadd_parts+0x190>
    16a0:	00 97       	sbiw	r24, 0x00	; 0
    16a2:	d1 f1       	breq	.+116    	; 0x1718 <_fpadd_parts+0x190>
    16a4:	ca 0c       	add	r12, r10
    16a6:	db 1c       	adc	r13, r11
    16a8:	39 01       	movw	r6, r18
    16aa:	4a 01       	movw	r8, r20
    16ac:	0a 2c       	mov	r0, r10
    16ae:	04 c0       	rjmp	.+8      	; 0x16b8 <_fpadd_parts+0x130>
    16b0:	96 94       	lsr	r9
    16b2:	87 94       	ror	r8
    16b4:	77 94       	ror	r7
    16b6:	67 94       	ror	r6
    16b8:	0a 94       	dec	r0
    16ba:	d2 f7       	brpl	.-12     	; 0x16b0 <_fpadd_parts+0x128>
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	a0 e0       	ldi	r26, 0x00	; 0
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	0a 2c       	mov	r0, r10
    16c6:	04 c0       	rjmp	.+8      	; 0x16d0 <_fpadd_parts+0x148>
    16c8:	88 0f       	add	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	aa 1f       	adc	r26, r26
    16ce:	bb 1f       	adc	r27, r27
    16d0:	0a 94       	dec	r0
    16d2:	d2 f7       	brpl	.-12     	; 0x16c8 <_fpadd_parts+0x140>
    16d4:	01 97       	sbiw	r24, 0x01	; 1
    16d6:	a1 09       	sbc	r26, r1
    16d8:	b1 09       	sbc	r27, r1
    16da:	82 23       	and	r24, r18
    16dc:	93 23       	and	r25, r19
    16de:	a4 23       	and	r26, r20
    16e0:	b5 23       	and	r27, r21
    16e2:	21 e0       	ldi	r18, 0x01	; 1
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	40 e0       	ldi	r20, 0x00	; 0
    16e8:	50 e0       	ldi	r21, 0x00	; 0
    16ea:	00 97       	sbiw	r24, 0x00	; 0
    16ec:	a1 05       	cpc	r26, r1
    16ee:	b1 05       	cpc	r27, r1
    16f0:	19 f4       	brne	.+6      	; 0x16f8 <_fpadd_parts+0x170>
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	a9 01       	movw	r20, r18
    16f8:	26 29       	or	r18, r6
    16fa:	37 29       	or	r19, r7
    16fc:	48 29       	or	r20, r8
    16fe:	59 29       	or	r21, r9
    1700:	0b c0       	rjmp	.+22     	; 0x1718 <_fpadd_parts+0x190>
    1702:	6c 14       	cp	r6, r12
    1704:	7d 04       	cpc	r7, r13
    1706:	24 f4       	brge	.+8      	; 0x1710 <_fpadd_parts+0x188>
    1708:	ee 24       	eor	r14, r14
    170a:	ff 24       	eor	r15, r15
    170c:	87 01       	movw	r16, r14
    170e:	04 c0       	rjmp	.+8      	; 0x1718 <_fpadd_parts+0x190>
    1710:	63 01       	movw	r12, r6
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	a9 01       	movw	r20, r18
    1718:	81 81       	ldd	r24, Z+1	; 0x01
    171a:	fb 01       	movw	r30, r22
    171c:	91 81       	ldd	r25, Z+1	; 0x01
    171e:	89 17       	cp	r24, r25
    1720:	09 f4       	brne	.+2      	; 0x1724 <_fpadd_parts+0x19c>
    1722:	45 c0       	rjmp	.+138    	; 0x17ae <_fpadd_parts+0x226>
    1724:	88 23       	and	r24, r24
    1726:	49 f0       	breq	.+18     	; 0x173a <_fpadd_parts+0x1b2>
    1728:	d8 01       	movw	r26, r16
    172a:	c7 01       	movw	r24, r14
    172c:	82 1b       	sub	r24, r18
    172e:	93 0b       	sbc	r25, r19
    1730:	a4 0b       	sbc	r26, r20
    1732:	b5 0b       	sbc	r27, r21
    1734:	9c 01       	movw	r18, r24
    1736:	ad 01       	movw	r20, r26
    1738:	04 c0       	rjmp	.+8      	; 0x1742 <_fpadd_parts+0x1ba>
    173a:	2e 19       	sub	r18, r14
    173c:	3f 09       	sbc	r19, r15
    173e:	40 0b       	sbc	r20, r16
    1740:	51 0b       	sbc	r21, r17
    1742:	57 fd       	sbrc	r21, 7
    1744:	04 c0       	rjmp	.+8      	; 0x174e <_fpadd_parts+0x1c6>
    1746:	19 82       	std	Y+1, r1	; 0x01
    1748:	db 82       	std	Y+3, r13	; 0x03
    174a:	ca 82       	std	Y+2, r12	; 0x02
    174c:	0b c0       	rjmp	.+22     	; 0x1764 <_fpadd_parts+0x1dc>
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	89 83       	std	Y+1, r24	; 0x01
    1752:	db 82       	std	Y+3, r13	; 0x03
    1754:	ca 82       	std	Y+2, r12	; 0x02
    1756:	50 95       	com	r21
    1758:	40 95       	com	r20
    175a:	30 95       	com	r19
    175c:	21 95       	neg	r18
    175e:	3f 4f       	sbci	r19, 0xFF	; 255
    1760:	4f 4f       	sbci	r20, 0xFF	; 255
    1762:	5f 4f       	sbci	r21, 0xFF	; 255
    1764:	2c 83       	std	Y+4, r18	; 0x04
    1766:	3d 83       	std	Y+5, r19	; 0x05
    1768:	4e 83       	std	Y+6, r20	; 0x06
    176a:	5f 83       	std	Y+7, r21	; 0x07
    176c:	0d c0       	rjmp	.+26     	; 0x1788 <_fpadd_parts+0x200>
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	aa 1f       	adc	r26, r26
    1774:	bb 1f       	adc	r27, r27
    1776:	8c 83       	std	Y+4, r24	; 0x04
    1778:	9d 83       	std	Y+5, r25	; 0x05
    177a:	ae 83       	std	Y+6, r26	; 0x06
    177c:	bf 83       	std	Y+7, r27	; 0x07
    177e:	8a 81       	ldd	r24, Y+2	; 0x02
    1780:	9b 81       	ldd	r25, Y+3	; 0x03
    1782:	01 97       	sbiw	r24, 0x01	; 1
    1784:	9b 83       	std	Y+3, r25	; 0x03
    1786:	8a 83       	std	Y+2, r24	; 0x02
    1788:	8c 81       	ldd	r24, Y+4	; 0x04
    178a:	9d 81       	ldd	r25, Y+5	; 0x05
    178c:	ae 81       	ldd	r26, Y+6	; 0x06
    178e:	bf 81       	ldd	r27, Y+7	; 0x07
    1790:	9c 01       	movw	r18, r24
    1792:	ad 01       	movw	r20, r26
    1794:	21 50       	subi	r18, 0x01	; 1
    1796:	30 40       	sbci	r19, 0x00	; 0
    1798:	40 40       	sbci	r20, 0x00	; 0
    179a:	50 40       	sbci	r21, 0x00	; 0
    179c:	2f 3f       	cpi	r18, 0xFF	; 255
    179e:	ef ef       	ldi	r30, 0xFF	; 255
    17a0:	3e 07       	cpc	r19, r30
    17a2:	ef ef       	ldi	r30, 0xFF	; 255
    17a4:	4e 07       	cpc	r20, r30
    17a6:	ef e3       	ldi	r30, 0x3F	; 63
    17a8:	5e 07       	cpc	r21, r30
    17aa:	08 f3       	brcs	.-62     	; 0x176e <_fpadd_parts+0x1e6>
    17ac:	0b c0       	rjmp	.+22     	; 0x17c4 <_fpadd_parts+0x23c>
    17ae:	89 83       	std	Y+1, r24	; 0x01
    17b0:	db 82       	std	Y+3, r13	; 0x03
    17b2:	ca 82       	std	Y+2, r12	; 0x02
    17b4:	2e 0d       	add	r18, r14
    17b6:	3f 1d       	adc	r19, r15
    17b8:	40 1f       	adc	r20, r16
    17ba:	51 1f       	adc	r21, r17
    17bc:	2c 83       	std	Y+4, r18	; 0x04
    17be:	3d 83       	std	Y+5, r19	; 0x05
    17c0:	4e 83       	std	Y+6, r20	; 0x06
    17c2:	5f 83       	std	Y+7, r21	; 0x07
    17c4:	83 e0       	ldi	r24, 0x03	; 3
    17c6:	88 83       	st	Y, r24
    17c8:	2c 81       	ldd	r18, Y+4	; 0x04
    17ca:	3d 81       	ldd	r19, Y+5	; 0x05
    17cc:	4e 81       	ldd	r20, Y+6	; 0x06
    17ce:	5f 81       	ldd	r21, Y+7	; 0x07
    17d0:	57 ff       	sbrs	r21, 7
    17d2:	1d c0       	rjmp	.+58     	; 0x180e <_fpadd_parts+0x286>
    17d4:	da 01       	movw	r26, r20
    17d6:	c9 01       	movw	r24, r18
    17d8:	81 70       	andi	r24, 0x01	; 1
    17da:	90 70       	andi	r25, 0x00	; 0
    17dc:	a0 70       	andi	r26, 0x00	; 0
    17de:	b0 70       	andi	r27, 0x00	; 0
    17e0:	56 95       	lsr	r21
    17e2:	47 95       	ror	r20
    17e4:	37 95       	ror	r19
    17e6:	27 95       	ror	r18
    17e8:	82 2b       	or	r24, r18
    17ea:	93 2b       	or	r25, r19
    17ec:	a4 2b       	or	r26, r20
    17ee:	b5 2b       	or	r27, r21
    17f0:	8c 83       	std	Y+4, r24	; 0x04
    17f2:	9d 83       	std	Y+5, r25	; 0x05
    17f4:	ae 83       	std	Y+6, r26	; 0x06
    17f6:	bf 83       	std	Y+7, r27	; 0x07
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	9b 81       	ldd	r25, Y+3	; 0x03
    17fc:	01 96       	adiw	r24, 0x01	; 1
    17fe:	9b 83       	std	Y+3, r25	; 0x03
    1800:	8a 83       	std	Y+2, r24	; 0x02
    1802:	05 c0       	rjmp	.+10     	; 0x180e <_fpadd_parts+0x286>
    1804:	ec e0       	ldi	r30, 0x0C	; 12
    1806:	f1 e0       	ldi	r31, 0x01	; 1
    1808:	03 c0       	rjmp	.+6      	; 0x1810 <_fpadd_parts+0x288>
    180a:	fb 01       	movw	r30, r22
    180c:	01 c0       	rjmp	.+2      	; 0x1810 <_fpadd_parts+0x288>
    180e:	fe 01       	movw	r30, r28
    1810:	cf 01       	movw	r24, r30
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
    1816:	ee e0       	ldi	r30, 0x0E	; 14
    1818:	0c 94 1f 10 	jmp	0x203e	; 0x203e <__epilogue_restores__+0x8>

0000181c <__addsf3>:
    181c:	a0 e2       	ldi	r26, 0x20	; 32
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	e4 e1       	ldi	r30, 0x14	; 20
    1822:	fc e0       	ldi	r31, 0x0C	; 12
    1824:	0c 94 0b 10 	jmp	0x2016	; 0x2016 <__prologue_saves__+0x18>
    1828:	69 83       	std	Y+1, r22	; 0x01
    182a:	7a 83       	std	Y+2, r23	; 0x02
    182c:	8b 83       	std	Y+3, r24	; 0x03
    182e:	9c 83       	std	Y+4, r25	; 0x04
    1830:	2d 83       	std	Y+5, r18	; 0x05
    1832:	3e 83       	std	Y+6, r19	; 0x06
    1834:	4f 83       	std	Y+7, r20	; 0x07
    1836:	58 87       	std	Y+8, r21	; 0x08
    1838:	89 e0       	ldi	r24, 0x09	; 9
    183a:	e8 2e       	mov	r14, r24
    183c:	f1 2c       	mov	r15, r1
    183e:	ec 0e       	add	r14, r28
    1840:	fd 1e       	adc	r15, r29
    1842:	ce 01       	movw	r24, r28
    1844:	01 96       	adiw	r24, 0x01	; 1
    1846:	b7 01       	movw	r22, r14
    1848:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <__unpack_f>
    184c:	8e 01       	movw	r16, r28
    184e:	0f 5e       	subi	r16, 0xEF	; 239
    1850:	1f 4f       	sbci	r17, 0xFF	; 255
    1852:	ce 01       	movw	r24, r28
    1854:	05 96       	adiw	r24, 0x05	; 5
    1856:	b8 01       	movw	r22, r16
    1858:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <__unpack_f>
    185c:	c7 01       	movw	r24, r14
    185e:	b8 01       	movw	r22, r16
    1860:	ae 01       	movw	r20, r28
    1862:	47 5e       	subi	r20, 0xE7	; 231
    1864:	5f 4f       	sbci	r21, 0xFF	; 255
    1866:	0e 94 c4 0a 	call	0x1588	; 0x1588 <_fpadd_parts>
    186a:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <__pack_f>
    186e:	a0 96       	adiw	r28, 0x20	; 32
    1870:	e6 e0       	ldi	r30, 0x06	; 6
    1872:	0c 94 27 10 	jmp	0x204e	; 0x204e <__epilogue_restores__+0x18>

00001876 <__subsf3>:
    1876:	a0 e2       	ldi	r26, 0x20	; 32
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	e1 e4       	ldi	r30, 0x41	; 65
    187c:	fc e0       	ldi	r31, 0x0C	; 12
    187e:	0c 94 0b 10 	jmp	0x2016	; 0x2016 <__prologue_saves__+0x18>
    1882:	69 83       	std	Y+1, r22	; 0x01
    1884:	7a 83       	std	Y+2, r23	; 0x02
    1886:	8b 83       	std	Y+3, r24	; 0x03
    1888:	9c 83       	std	Y+4, r25	; 0x04
    188a:	2d 83       	std	Y+5, r18	; 0x05
    188c:	3e 83       	std	Y+6, r19	; 0x06
    188e:	4f 83       	std	Y+7, r20	; 0x07
    1890:	58 87       	std	Y+8, r21	; 0x08
    1892:	8e 01       	movw	r16, r28
    1894:	07 5f       	subi	r16, 0xF7	; 247
    1896:	1f 4f       	sbci	r17, 0xFF	; 255
    1898:	ce 01       	movw	r24, r28
    189a:	01 96       	adiw	r24, 0x01	; 1
    189c:	b8 01       	movw	r22, r16
    189e:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <__unpack_f>
    18a2:	91 e1       	ldi	r25, 0x11	; 17
    18a4:	e9 2e       	mov	r14, r25
    18a6:	f1 2c       	mov	r15, r1
    18a8:	ec 0e       	add	r14, r28
    18aa:	fd 1e       	adc	r15, r29
    18ac:	ce 01       	movw	r24, r28
    18ae:	05 96       	adiw	r24, 0x05	; 5
    18b0:	b7 01       	movw	r22, r14
    18b2:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <__unpack_f>
    18b6:	8a 89       	ldd	r24, Y+18	; 0x12
    18b8:	91 e0       	ldi	r25, 0x01	; 1
    18ba:	89 27       	eor	r24, r25
    18bc:	8a 8b       	std	Y+18, r24	; 0x12
    18be:	c8 01       	movw	r24, r16
    18c0:	b7 01       	movw	r22, r14
    18c2:	ae 01       	movw	r20, r28
    18c4:	47 5e       	subi	r20, 0xE7	; 231
    18c6:	5f 4f       	sbci	r21, 0xFF	; 255
    18c8:	0e 94 c4 0a 	call	0x1588	; 0x1588 <_fpadd_parts>
    18cc:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <__pack_f>
    18d0:	a0 96       	adiw	r28, 0x20	; 32
    18d2:	e6 e0       	ldi	r30, 0x06	; 6
    18d4:	0c 94 27 10 	jmp	0x204e	; 0x204e <__epilogue_restores__+0x18>

000018d8 <__mulsf3>:
    18d8:	a0 e2       	ldi	r26, 0x20	; 32
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	e2 e7       	ldi	r30, 0x72	; 114
    18de:	fc e0       	ldi	r31, 0x0C	; 12
    18e0:	0c 94 ff 0f 	jmp	0x1ffe	; 0x1ffe <__prologue_saves__>
    18e4:	69 83       	std	Y+1, r22	; 0x01
    18e6:	7a 83       	std	Y+2, r23	; 0x02
    18e8:	8b 83       	std	Y+3, r24	; 0x03
    18ea:	9c 83       	std	Y+4, r25	; 0x04
    18ec:	2d 83       	std	Y+5, r18	; 0x05
    18ee:	3e 83       	std	Y+6, r19	; 0x06
    18f0:	4f 83       	std	Y+7, r20	; 0x07
    18f2:	58 87       	std	Y+8, r21	; 0x08
    18f4:	ce 01       	movw	r24, r28
    18f6:	01 96       	adiw	r24, 0x01	; 1
    18f8:	be 01       	movw	r22, r28
    18fa:	67 5f       	subi	r22, 0xF7	; 247
    18fc:	7f 4f       	sbci	r23, 0xFF	; 255
    18fe:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <__unpack_f>
    1902:	ce 01       	movw	r24, r28
    1904:	05 96       	adiw	r24, 0x05	; 5
    1906:	be 01       	movw	r22, r28
    1908:	6f 5e       	subi	r22, 0xEF	; 239
    190a:	7f 4f       	sbci	r23, 0xFF	; 255
    190c:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <__unpack_f>
    1910:	99 85       	ldd	r25, Y+9	; 0x09
    1912:	92 30       	cpi	r25, 0x02	; 2
    1914:	78 f0       	brcs	.+30     	; 0x1934 <__mulsf3+0x5c>
    1916:	89 89       	ldd	r24, Y+17	; 0x11
    1918:	82 30       	cpi	r24, 0x02	; 2
    191a:	c0 f0       	brcs	.+48     	; 0x194c <__mulsf3+0x74>
    191c:	94 30       	cpi	r25, 0x04	; 4
    191e:	19 f4       	brne	.+6      	; 0x1926 <__mulsf3+0x4e>
    1920:	82 30       	cpi	r24, 0x02	; 2
    1922:	41 f4       	brne	.+16     	; 0x1934 <__mulsf3+0x5c>
    1924:	cb c0       	rjmp	.+406    	; 0x1abc <__mulsf3+0x1e4>
    1926:	84 30       	cpi	r24, 0x04	; 4
    1928:	19 f4       	brne	.+6      	; 0x1930 <__mulsf3+0x58>
    192a:	92 30       	cpi	r25, 0x02	; 2
    192c:	79 f4       	brne	.+30     	; 0x194c <__mulsf3+0x74>
    192e:	c6 c0       	rjmp	.+396    	; 0x1abc <__mulsf3+0x1e4>
    1930:	92 30       	cpi	r25, 0x02	; 2
    1932:	51 f4       	brne	.+20     	; 0x1948 <__mulsf3+0x70>
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	2a 85       	ldd	r18, Y+10	; 0x0a
    1938:	9a 89       	ldd	r25, Y+18	; 0x12
    193a:	29 17       	cp	r18, r25
    193c:	09 f4       	brne	.+2      	; 0x1940 <__mulsf3+0x68>
    193e:	80 e0       	ldi	r24, 0x00	; 0
    1940:	8a 87       	std	Y+10, r24	; 0x0a
    1942:	ce 01       	movw	r24, r28
    1944:	09 96       	adiw	r24, 0x09	; 9
    1946:	bc c0       	rjmp	.+376    	; 0x1ac0 <__mulsf3+0x1e8>
    1948:	82 30       	cpi	r24, 0x02	; 2
    194a:	51 f4       	brne	.+20     	; 0x1960 <__mulsf3+0x88>
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1950:	9a 89       	ldd	r25, Y+18	; 0x12
    1952:	29 17       	cp	r18, r25
    1954:	09 f4       	brne	.+2      	; 0x1958 <__mulsf3+0x80>
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	8a 8b       	std	Y+18, r24	; 0x12
    195a:	ce 01       	movw	r24, r28
    195c:	41 96       	adiw	r24, 0x11	; 17
    195e:	b0 c0       	rjmp	.+352    	; 0x1ac0 <__mulsf3+0x1e8>
    1960:	6d 84       	ldd	r6, Y+13	; 0x0d
    1962:	7e 84       	ldd	r7, Y+14	; 0x0e
    1964:	8f 84       	ldd	r8, Y+15	; 0x0f
    1966:	98 88       	ldd	r9, Y+16	; 0x10
    1968:	ed 88       	ldd	r14, Y+21	; 0x15
    196a:	fe 88       	ldd	r15, Y+22	; 0x16
    196c:	0f 89       	ldd	r16, Y+23	; 0x17
    196e:	18 8d       	ldd	r17, Y+24	; 0x18
    1970:	e0 e2       	ldi	r30, 0x20	; 32
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 e0       	ldi	r24, 0x00	; 0
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	dc 01       	movw	r26, r24
    197a:	aa 24       	eor	r10, r10
    197c:	bb 24       	eor	r11, r11
    197e:	65 01       	movw	r12, r10
    1980:	20 e0       	ldi	r18, 0x00	; 0
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	a9 01       	movw	r20, r18
    1986:	b3 01       	movw	r22, r6
    1988:	61 70       	andi	r22, 0x01	; 1
    198a:	70 70       	andi	r23, 0x00	; 0
    198c:	61 15       	cp	r22, r1
    198e:	71 05       	cpc	r23, r1
    1990:	d1 f0       	breq	.+52     	; 0x19c6 <__mulsf3+0xee>
    1992:	2e 0d       	add	r18, r14
    1994:	3f 1d       	adc	r19, r15
    1996:	40 1f       	adc	r20, r16
    1998:	51 1f       	adc	r21, r17
    199a:	15 01       	movw	r2, r10
    199c:	26 01       	movw	r4, r12
    199e:	28 0e       	add	r2, r24
    19a0:	39 1e       	adc	r3, r25
    19a2:	4a 1e       	adc	r4, r26
    19a4:	5b 1e       	adc	r5, r27
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	a0 e0       	ldi	r26, 0x00	; 0
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	2e 15       	cp	r18, r14
    19b0:	3f 05       	cpc	r19, r15
    19b2:	40 07       	cpc	r20, r16
    19b4:	51 07       	cpc	r21, r17
    19b6:	18 f0       	brcs	.+6      	; 0x19be <__mulsf3+0xe6>
    19b8:	80 e0       	ldi	r24, 0x00	; 0
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	dc 01       	movw	r26, r24
    19be:	82 0d       	add	r24, r2
    19c0:	93 1d       	adc	r25, r3
    19c2:	a4 1d       	adc	r26, r4
    19c4:	b5 1d       	adc	r27, r5
    19c6:	aa 0c       	add	r10, r10
    19c8:	bb 1c       	adc	r11, r11
    19ca:	cc 1c       	adc	r12, r12
    19cc:	dd 1c       	adc	r13, r13
    19ce:	17 ff       	sbrs	r17, 7
    19d0:	09 c0       	rjmp	.+18     	; 0x19e4 <__mulsf3+0x10c>
    19d2:	61 e0       	ldi	r22, 0x01	; 1
    19d4:	26 2e       	mov	r2, r22
    19d6:	31 2c       	mov	r3, r1
    19d8:	41 2c       	mov	r4, r1
    19da:	51 2c       	mov	r5, r1
    19dc:	a2 28       	or	r10, r2
    19de:	b3 28       	or	r11, r3
    19e0:	c4 28       	or	r12, r4
    19e2:	d5 28       	or	r13, r5
    19e4:	31 97       	sbiw	r30, 0x01	; 1
    19e6:	49 f0       	breq	.+18     	; 0x19fa <__mulsf3+0x122>
    19e8:	ee 0c       	add	r14, r14
    19ea:	ff 1c       	adc	r15, r15
    19ec:	00 1f       	adc	r16, r16
    19ee:	11 1f       	adc	r17, r17
    19f0:	96 94       	lsr	r9
    19f2:	87 94       	ror	r8
    19f4:	77 94       	ror	r7
    19f6:	67 94       	ror	r6
    19f8:	c6 cf       	rjmp	.-116    	; 0x1986 <__mulsf3+0xae>
    19fa:	6b 89       	ldd	r22, Y+19	; 0x13
    19fc:	7c 89       	ldd	r23, Y+20	; 0x14
    19fe:	eb 85       	ldd	r30, Y+11	; 0x0b
    1a00:	fc 85       	ldd	r31, Y+12	; 0x0c
    1a02:	6e 0f       	add	r22, r30
    1a04:	7f 1f       	adc	r23, r31
    1a06:	6e 5f       	subi	r22, 0xFE	; 254
    1a08:	7f 4f       	sbci	r23, 0xFF	; 255
    1a0a:	7c 8f       	std	Y+28, r23	; 0x1c
    1a0c:	6b 8f       	std	Y+27, r22	; 0x1b
    1a0e:	61 e0       	ldi	r22, 0x01	; 1
    1a10:	ea 85       	ldd	r30, Y+10	; 0x0a
    1a12:	7a 89       	ldd	r23, Y+18	; 0x12
    1a14:	e7 17       	cp	r30, r23
    1a16:	09 f4       	brne	.+2      	; 0x1a1a <__mulsf3+0x142>
    1a18:	60 e0       	ldi	r22, 0x00	; 0
    1a1a:	6a 8f       	std	Y+26, r22	; 0x1a
    1a1c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1a1e:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1a20:	10 c0       	rjmp	.+32     	; 0x1a42 <__mulsf3+0x16a>
    1a22:	fc 01       	movw	r30, r24
    1a24:	e1 70       	andi	r30, 0x01	; 1
    1a26:	f0 70       	andi	r31, 0x00	; 0
    1a28:	30 97       	sbiw	r30, 0x00	; 0
    1a2a:	29 f0       	breq	.+10     	; 0x1a36 <__mulsf3+0x15e>
    1a2c:	56 95       	lsr	r21
    1a2e:	47 95       	ror	r20
    1a30:	37 95       	ror	r19
    1a32:	27 95       	ror	r18
    1a34:	50 68       	ori	r21, 0x80	; 128
    1a36:	b6 95       	lsr	r27
    1a38:	a7 95       	ror	r26
    1a3a:	97 95       	ror	r25
    1a3c:	87 95       	ror	r24
    1a3e:	6f 5f       	subi	r22, 0xFF	; 255
    1a40:	7f 4f       	sbci	r23, 0xFF	; 255
    1a42:	b7 fd       	sbrc	r27, 7
    1a44:	ee cf       	rjmp	.-36     	; 0x1a22 <__mulsf3+0x14a>
    1a46:	0c c0       	rjmp	.+24     	; 0x1a60 <__mulsf3+0x188>
    1a48:	88 0f       	add	r24, r24
    1a4a:	99 1f       	adc	r25, r25
    1a4c:	aa 1f       	adc	r26, r26
    1a4e:	bb 1f       	adc	r27, r27
    1a50:	57 fd       	sbrc	r21, 7
    1a52:	81 60       	ori	r24, 0x01	; 1
    1a54:	22 0f       	add	r18, r18
    1a56:	33 1f       	adc	r19, r19
    1a58:	44 1f       	adc	r20, r20
    1a5a:	55 1f       	adc	r21, r21
    1a5c:	61 50       	subi	r22, 0x01	; 1
    1a5e:	70 40       	sbci	r23, 0x00	; 0
    1a60:	80 30       	cpi	r24, 0x00	; 0
    1a62:	e0 e0       	ldi	r30, 0x00	; 0
    1a64:	9e 07       	cpc	r25, r30
    1a66:	e0 e0       	ldi	r30, 0x00	; 0
    1a68:	ae 07       	cpc	r26, r30
    1a6a:	e0 e4       	ldi	r30, 0x40	; 64
    1a6c:	be 07       	cpc	r27, r30
    1a6e:	60 f3       	brcs	.-40     	; 0x1a48 <__mulsf3+0x170>
    1a70:	6b 8f       	std	Y+27, r22	; 0x1b
    1a72:	7c 8f       	std	Y+28, r23	; 0x1c
    1a74:	6f e7       	ldi	r22, 0x7F	; 127
    1a76:	e6 2e       	mov	r14, r22
    1a78:	f1 2c       	mov	r15, r1
    1a7a:	01 2d       	mov	r16, r1
    1a7c:	11 2d       	mov	r17, r1
    1a7e:	e8 22       	and	r14, r24
    1a80:	f9 22       	and	r15, r25
    1a82:	0a 23       	and	r16, r26
    1a84:	1b 23       	and	r17, r27
    1a86:	60 e4       	ldi	r22, 0x40	; 64
    1a88:	e6 16       	cp	r14, r22
    1a8a:	f1 04       	cpc	r15, r1
    1a8c:	01 05       	cpc	r16, r1
    1a8e:	11 05       	cpc	r17, r1
    1a90:	61 f4       	brne	.+24     	; 0x1aaa <__mulsf3+0x1d2>
    1a92:	87 fd       	sbrc	r24, 7
    1a94:	0a c0       	rjmp	.+20     	; 0x1aaa <__mulsf3+0x1d2>
    1a96:	21 15       	cp	r18, r1
    1a98:	31 05       	cpc	r19, r1
    1a9a:	41 05       	cpc	r20, r1
    1a9c:	51 05       	cpc	r21, r1
    1a9e:	29 f0       	breq	.+10     	; 0x1aaa <__mulsf3+0x1d2>
    1aa0:	80 5c       	subi	r24, 0xC0	; 192
    1aa2:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa4:	af 4f       	sbci	r26, 0xFF	; 255
    1aa6:	bf 4f       	sbci	r27, 0xFF	; 255
    1aa8:	80 78       	andi	r24, 0x80	; 128
    1aaa:	8d 8f       	std	Y+29, r24	; 0x1d
    1aac:	9e 8f       	std	Y+30, r25	; 0x1e
    1aae:	af 8f       	std	Y+31, r26	; 0x1f
    1ab0:	b8 a3       	std	Y+32, r27	; 0x20
    1ab2:	83 e0       	ldi	r24, 0x03	; 3
    1ab4:	89 8f       	std	Y+25, r24	; 0x19
    1ab6:	ce 01       	movw	r24, r28
    1ab8:	49 96       	adiw	r24, 0x19	; 25
    1aba:	02 c0       	rjmp	.+4      	; 0x1ac0 <__mulsf3+0x1e8>
    1abc:	8c e0       	ldi	r24, 0x0C	; 12
    1abe:	91 e0       	ldi	r25, 0x01	; 1
    1ac0:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <__pack_f>
    1ac4:	a0 96       	adiw	r28, 0x20	; 32
    1ac6:	e2 e1       	ldi	r30, 0x12	; 18
    1ac8:	0c 94 1b 10 	jmp	0x2036	; 0x2036 <__epilogue_restores__>

00001acc <__gtsf2>:
    1acc:	a8 e1       	ldi	r26, 0x18	; 24
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	ec e6       	ldi	r30, 0x6C	; 108
    1ad2:	fd e0       	ldi	r31, 0x0D	; 13
    1ad4:	0c 94 0b 10 	jmp	0x2016	; 0x2016 <__prologue_saves__+0x18>
    1ad8:	69 83       	std	Y+1, r22	; 0x01
    1ada:	7a 83       	std	Y+2, r23	; 0x02
    1adc:	8b 83       	std	Y+3, r24	; 0x03
    1ade:	9c 83       	std	Y+4, r25	; 0x04
    1ae0:	2d 83       	std	Y+5, r18	; 0x05
    1ae2:	3e 83       	std	Y+6, r19	; 0x06
    1ae4:	4f 83       	std	Y+7, r20	; 0x07
    1ae6:	58 87       	std	Y+8, r21	; 0x08
    1ae8:	8e 01       	movw	r16, r28
    1aea:	07 5f       	subi	r16, 0xF7	; 247
    1aec:	1f 4f       	sbci	r17, 0xFF	; 255
    1aee:	ce 01       	movw	r24, r28
    1af0:	01 96       	adiw	r24, 0x01	; 1
    1af2:	b8 01       	movw	r22, r16
    1af4:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <__unpack_f>
    1af8:	81 e1       	ldi	r24, 0x11	; 17
    1afa:	e8 2e       	mov	r14, r24
    1afc:	f1 2c       	mov	r15, r1
    1afe:	ec 0e       	add	r14, r28
    1b00:	fd 1e       	adc	r15, r29
    1b02:	ce 01       	movw	r24, r28
    1b04:	05 96       	adiw	r24, 0x05	; 5
    1b06:	b7 01       	movw	r22, r14
    1b08:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <__unpack_f>
    1b0c:	89 85       	ldd	r24, Y+9	; 0x09
    1b0e:	82 30       	cpi	r24, 0x02	; 2
    1b10:	40 f0       	brcs	.+16     	; 0x1b22 <__gtsf2+0x56>
    1b12:	89 89       	ldd	r24, Y+17	; 0x11
    1b14:	82 30       	cpi	r24, 0x02	; 2
    1b16:	28 f0       	brcs	.+10     	; 0x1b22 <__gtsf2+0x56>
    1b18:	c8 01       	movw	r24, r16
    1b1a:	b7 01       	movw	r22, r14
    1b1c:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <__fpcmp_parts_f>
    1b20:	01 c0       	rjmp	.+2      	; 0x1b24 <__gtsf2+0x58>
    1b22:	8f ef       	ldi	r24, 0xFF	; 255
    1b24:	68 96       	adiw	r28, 0x18	; 24
    1b26:	e6 e0       	ldi	r30, 0x06	; 6
    1b28:	0c 94 27 10 	jmp	0x204e	; 0x204e <__epilogue_restores__+0x18>

00001b2c <__gesf2>:
    1b2c:	a8 e1       	ldi	r26, 0x18	; 24
    1b2e:	b0 e0       	ldi	r27, 0x00	; 0
    1b30:	ec e9       	ldi	r30, 0x9C	; 156
    1b32:	fd e0       	ldi	r31, 0x0D	; 13
    1b34:	0c 94 0b 10 	jmp	0x2016	; 0x2016 <__prologue_saves__+0x18>
    1b38:	69 83       	std	Y+1, r22	; 0x01
    1b3a:	7a 83       	std	Y+2, r23	; 0x02
    1b3c:	8b 83       	std	Y+3, r24	; 0x03
    1b3e:	9c 83       	std	Y+4, r25	; 0x04
    1b40:	2d 83       	std	Y+5, r18	; 0x05
    1b42:	3e 83       	std	Y+6, r19	; 0x06
    1b44:	4f 83       	std	Y+7, r20	; 0x07
    1b46:	58 87       	std	Y+8, r21	; 0x08
    1b48:	8e 01       	movw	r16, r28
    1b4a:	07 5f       	subi	r16, 0xF7	; 247
    1b4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b4e:	ce 01       	movw	r24, r28
    1b50:	01 96       	adiw	r24, 0x01	; 1
    1b52:	b8 01       	movw	r22, r16
    1b54:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <__unpack_f>
    1b58:	81 e1       	ldi	r24, 0x11	; 17
    1b5a:	e8 2e       	mov	r14, r24
    1b5c:	f1 2c       	mov	r15, r1
    1b5e:	ec 0e       	add	r14, r28
    1b60:	fd 1e       	adc	r15, r29
    1b62:	ce 01       	movw	r24, r28
    1b64:	05 96       	adiw	r24, 0x05	; 5
    1b66:	b7 01       	movw	r22, r14
    1b68:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <__unpack_f>
    1b6c:	89 85       	ldd	r24, Y+9	; 0x09
    1b6e:	82 30       	cpi	r24, 0x02	; 2
    1b70:	40 f0       	brcs	.+16     	; 0x1b82 <__gesf2+0x56>
    1b72:	89 89       	ldd	r24, Y+17	; 0x11
    1b74:	82 30       	cpi	r24, 0x02	; 2
    1b76:	28 f0       	brcs	.+10     	; 0x1b82 <__gesf2+0x56>
    1b78:	c8 01       	movw	r24, r16
    1b7a:	b7 01       	movw	r22, r14
    1b7c:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <__fpcmp_parts_f>
    1b80:	01 c0       	rjmp	.+2      	; 0x1b84 <__gesf2+0x58>
    1b82:	8f ef       	ldi	r24, 0xFF	; 255
    1b84:	68 96       	adiw	r28, 0x18	; 24
    1b86:	e6 e0       	ldi	r30, 0x06	; 6
    1b88:	0c 94 27 10 	jmp	0x204e	; 0x204e <__epilogue_restores__+0x18>

00001b8c <__ltsf2>:
    1b8c:	a8 e1       	ldi	r26, 0x18	; 24
    1b8e:	b0 e0       	ldi	r27, 0x00	; 0
    1b90:	ec ec       	ldi	r30, 0xCC	; 204
    1b92:	fd e0       	ldi	r31, 0x0D	; 13
    1b94:	0c 94 0b 10 	jmp	0x2016	; 0x2016 <__prologue_saves__+0x18>
    1b98:	69 83       	std	Y+1, r22	; 0x01
    1b9a:	7a 83       	std	Y+2, r23	; 0x02
    1b9c:	8b 83       	std	Y+3, r24	; 0x03
    1b9e:	9c 83       	std	Y+4, r25	; 0x04
    1ba0:	2d 83       	std	Y+5, r18	; 0x05
    1ba2:	3e 83       	std	Y+6, r19	; 0x06
    1ba4:	4f 83       	std	Y+7, r20	; 0x07
    1ba6:	58 87       	std	Y+8, r21	; 0x08
    1ba8:	8e 01       	movw	r16, r28
    1baa:	07 5f       	subi	r16, 0xF7	; 247
    1bac:	1f 4f       	sbci	r17, 0xFF	; 255
    1bae:	ce 01       	movw	r24, r28
    1bb0:	01 96       	adiw	r24, 0x01	; 1
    1bb2:	b8 01       	movw	r22, r16
    1bb4:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <__unpack_f>
    1bb8:	81 e1       	ldi	r24, 0x11	; 17
    1bba:	e8 2e       	mov	r14, r24
    1bbc:	f1 2c       	mov	r15, r1
    1bbe:	ec 0e       	add	r14, r28
    1bc0:	fd 1e       	adc	r15, r29
    1bc2:	ce 01       	movw	r24, r28
    1bc4:	05 96       	adiw	r24, 0x05	; 5
    1bc6:	b7 01       	movw	r22, r14
    1bc8:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <__unpack_f>
    1bcc:	89 85       	ldd	r24, Y+9	; 0x09
    1bce:	82 30       	cpi	r24, 0x02	; 2
    1bd0:	40 f0       	brcs	.+16     	; 0x1be2 <__ltsf2+0x56>
    1bd2:	89 89       	ldd	r24, Y+17	; 0x11
    1bd4:	82 30       	cpi	r24, 0x02	; 2
    1bd6:	28 f0       	brcs	.+10     	; 0x1be2 <__ltsf2+0x56>
    1bd8:	c8 01       	movw	r24, r16
    1bda:	b7 01       	movw	r22, r14
    1bdc:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <__fpcmp_parts_f>
    1be0:	01 c0       	rjmp	.+2      	; 0x1be4 <__ltsf2+0x58>
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	68 96       	adiw	r28, 0x18	; 24
    1be6:	e6 e0       	ldi	r30, 0x06	; 6
    1be8:	0c 94 27 10 	jmp	0x204e	; 0x204e <__epilogue_restores__+0x18>

00001bec <__fixsfsi>:
    1bec:	ac e0       	ldi	r26, 0x0C	; 12
    1bee:	b0 e0       	ldi	r27, 0x00	; 0
    1bf0:	ec ef       	ldi	r30, 0xFC	; 252
    1bf2:	fd e0       	ldi	r31, 0x0D	; 13
    1bf4:	0c 94 0f 10 	jmp	0x201e	; 0x201e <__prologue_saves__+0x20>
    1bf8:	69 83       	std	Y+1, r22	; 0x01
    1bfa:	7a 83       	std	Y+2, r23	; 0x02
    1bfc:	8b 83       	std	Y+3, r24	; 0x03
    1bfe:	9c 83       	std	Y+4, r25	; 0x04
    1c00:	ce 01       	movw	r24, r28
    1c02:	01 96       	adiw	r24, 0x01	; 1
    1c04:	be 01       	movw	r22, r28
    1c06:	6b 5f       	subi	r22, 0xFB	; 251
    1c08:	7f 4f       	sbci	r23, 0xFF	; 255
    1c0a:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <__unpack_f>
    1c0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c10:	82 30       	cpi	r24, 0x02	; 2
    1c12:	81 f1       	breq	.+96     	; 0x1c74 <__fixsfsi+0x88>
    1c14:	82 30       	cpi	r24, 0x02	; 2
    1c16:	70 f1       	brcs	.+92     	; 0x1c74 <__fixsfsi+0x88>
    1c18:	84 30       	cpi	r24, 0x04	; 4
    1c1a:	21 f4       	brne	.+8      	; 0x1c24 <__fixsfsi+0x38>
    1c1c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c1e:	88 23       	and	r24, r24
    1c20:	69 f1       	breq	.+90     	; 0x1c7c <__fixsfsi+0x90>
    1c22:	0a c0       	rjmp	.+20     	; 0x1c38 <__fixsfsi+0x4c>
    1c24:	2f 81       	ldd	r18, Y+7	; 0x07
    1c26:	38 85       	ldd	r19, Y+8	; 0x08
    1c28:	37 fd       	sbrc	r19, 7
    1c2a:	24 c0       	rjmp	.+72     	; 0x1c74 <__fixsfsi+0x88>
    1c2c:	6e 81       	ldd	r22, Y+6	; 0x06
    1c2e:	2f 31       	cpi	r18, 0x1F	; 31
    1c30:	31 05       	cpc	r19, r1
    1c32:	3c f0       	brlt	.+14     	; 0x1c42 <__fixsfsi+0x56>
    1c34:	66 23       	and	r22, r22
    1c36:	11 f1       	breq	.+68     	; 0x1c7c <__fixsfsi+0x90>
    1c38:	20 e0       	ldi	r18, 0x00	; 0
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	40 e0       	ldi	r20, 0x00	; 0
    1c3e:	50 e8       	ldi	r21, 0x80	; 128
    1c40:	21 c0       	rjmp	.+66     	; 0x1c84 <__fixsfsi+0x98>
    1c42:	8e e1       	ldi	r24, 0x1E	; 30
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	82 1b       	sub	r24, r18
    1c48:	93 0b       	sbc	r25, r19
    1c4a:	29 85       	ldd	r18, Y+9	; 0x09
    1c4c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1c4e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1c50:	5c 85       	ldd	r21, Y+12	; 0x0c
    1c52:	04 c0       	rjmp	.+8      	; 0x1c5c <__fixsfsi+0x70>
    1c54:	56 95       	lsr	r21
    1c56:	47 95       	ror	r20
    1c58:	37 95       	ror	r19
    1c5a:	27 95       	ror	r18
    1c5c:	8a 95       	dec	r24
    1c5e:	d2 f7       	brpl	.-12     	; 0x1c54 <__fixsfsi+0x68>
    1c60:	66 23       	and	r22, r22
    1c62:	81 f0       	breq	.+32     	; 0x1c84 <__fixsfsi+0x98>
    1c64:	50 95       	com	r21
    1c66:	40 95       	com	r20
    1c68:	30 95       	com	r19
    1c6a:	21 95       	neg	r18
    1c6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c6e:	4f 4f       	sbci	r20, 0xFF	; 255
    1c70:	5f 4f       	sbci	r21, 0xFF	; 255
    1c72:	08 c0       	rjmp	.+16     	; 0x1c84 <__fixsfsi+0x98>
    1c74:	20 e0       	ldi	r18, 0x00	; 0
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	a9 01       	movw	r20, r18
    1c7a:	04 c0       	rjmp	.+8      	; 0x1c84 <__fixsfsi+0x98>
    1c7c:	2f ef       	ldi	r18, 0xFF	; 255
    1c7e:	3f ef       	ldi	r19, 0xFF	; 255
    1c80:	4f ef       	ldi	r20, 0xFF	; 255
    1c82:	5f e7       	ldi	r21, 0x7F	; 127
    1c84:	b9 01       	movw	r22, r18
    1c86:	ca 01       	movw	r24, r20
    1c88:	2c 96       	adiw	r28, 0x0c	; 12
    1c8a:	e2 e0       	ldi	r30, 0x02	; 2
    1c8c:	0c 94 2b 10 	jmp	0x2056	; 0x2056 <__epilogue_restores__+0x20>

00001c90 <__pack_f>:
    1c90:	ef 92       	push	r14
    1c92:	ff 92       	push	r15
    1c94:	0f 93       	push	r16
    1c96:	1f 93       	push	r17
    1c98:	cf 93       	push	r28
    1c9a:	df 93       	push	r29
    1c9c:	fc 01       	movw	r30, r24
    1c9e:	24 81       	ldd	r18, Z+4	; 0x04
    1ca0:	35 81       	ldd	r19, Z+5	; 0x05
    1ca2:	46 81       	ldd	r20, Z+6	; 0x06
    1ca4:	57 81       	ldd	r21, Z+7	; 0x07
    1ca6:	61 81       	ldd	r22, Z+1	; 0x01
    1ca8:	80 81       	ld	r24, Z
    1caa:	82 30       	cpi	r24, 0x02	; 2
    1cac:	20 f4       	brcc	.+8      	; 0x1cb6 <__pack_f+0x26>
    1cae:	40 61       	ori	r20, 0x10	; 16
    1cb0:	ef ef       	ldi	r30, 0xFF	; 255
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	a3 c0       	rjmp	.+326    	; 0x1dfc <__pack_f+0x16c>
    1cb6:	84 30       	cpi	r24, 0x04	; 4
    1cb8:	09 f4       	brne	.+2      	; 0x1cbc <__pack_f+0x2c>
    1cba:	9b c0       	rjmp	.+310    	; 0x1df2 <__pack_f+0x162>
    1cbc:	82 30       	cpi	r24, 0x02	; 2
    1cbe:	09 f4       	brne	.+2      	; 0x1cc2 <__pack_f+0x32>
    1cc0:	92 c0       	rjmp	.+292    	; 0x1de6 <__pack_f+0x156>
    1cc2:	21 15       	cp	r18, r1
    1cc4:	31 05       	cpc	r19, r1
    1cc6:	41 05       	cpc	r20, r1
    1cc8:	51 05       	cpc	r21, r1
    1cca:	09 f4       	brne	.+2      	; 0x1cce <__pack_f+0x3e>
    1ccc:	8f c0       	rjmp	.+286    	; 0x1dec <__pack_f+0x15c>
    1cce:	02 80       	ldd	r0, Z+2	; 0x02
    1cd0:	f3 81       	ldd	r31, Z+3	; 0x03
    1cd2:	e0 2d       	mov	r30, r0
    1cd4:	8f ef       	ldi	r24, 0xFF	; 255
    1cd6:	e2 38       	cpi	r30, 0x82	; 130
    1cd8:	f8 07       	cpc	r31, r24
    1cda:	0c f0       	brlt	.+2      	; 0x1cde <__pack_f+0x4e>
    1cdc:	5a c0       	rjmp	.+180    	; 0x1d92 <__pack_f+0x102>
    1cde:	c2 e8       	ldi	r28, 0x82	; 130
    1ce0:	df ef       	ldi	r29, 0xFF	; 255
    1ce2:	ce 1b       	sub	r28, r30
    1ce4:	df 0b       	sbc	r29, r31
    1ce6:	ca 31       	cpi	r28, 0x1A	; 26
    1ce8:	d1 05       	cpc	r29, r1
    1cea:	6c f5       	brge	.+90     	; 0x1d46 <__pack_f+0xb6>
    1cec:	79 01       	movw	r14, r18
    1cee:	8a 01       	movw	r16, r20
    1cf0:	0c 2e       	mov	r0, r28
    1cf2:	04 c0       	rjmp	.+8      	; 0x1cfc <__pack_f+0x6c>
    1cf4:	16 95       	lsr	r17
    1cf6:	07 95       	ror	r16
    1cf8:	f7 94       	ror	r15
    1cfa:	e7 94       	ror	r14
    1cfc:	0a 94       	dec	r0
    1cfe:	d2 f7       	brpl	.-12     	; 0x1cf4 <__pack_f+0x64>
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	a0 e0       	ldi	r26, 0x00	; 0
    1d06:	b0 e0       	ldi	r27, 0x00	; 0
    1d08:	0c 2e       	mov	r0, r28
    1d0a:	04 c0       	rjmp	.+8      	; 0x1d14 <__pack_f+0x84>
    1d0c:	88 0f       	add	r24, r24
    1d0e:	99 1f       	adc	r25, r25
    1d10:	aa 1f       	adc	r26, r26
    1d12:	bb 1f       	adc	r27, r27
    1d14:	0a 94       	dec	r0
    1d16:	d2 f7       	brpl	.-12     	; 0x1d0c <__pack_f+0x7c>
    1d18:	01 97       	sbiw	r24, 0x01	; 1
    1d1a:	a1 09       	sbc	r26, r1
    1d1c:	b1 09       	sbc	r27, r1
    1d1e:	82 23       	and	r24, r18
    1d20:	93 23       	and	r25, r19
    1d22:	a4 23       	and	r26, r20
    1d24:	b5 23       	and	r27, r21
    1d26:	21 e0       	ldi	r18, 0x01	; 1
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	40 e0       	ldi	r20, 0x00	; 0
    1d2c:	50 e0       	ldi	r21, 0x00	; 0
    1d2e:	00 97       	sbiw	r24, 0x00	; 0
    1d30:	a1 05       	cpc	r26, r1
    1d32:	b1 05       	cpc	r27, r1
    1d34:	19 f4       	brne	.+6      	; 0x1d3c <__pack_f+0xac>
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	a9 01       	movw	r20, r18
    1d3c:	2e 29       	or	r18, r14
    1d3e:	3f 29       	or	r19, r15
    1d40:	40 2b       	or	r20, r16
    1d42:	51 2b       	or	r21, r17
    1d44:	03 c0       	rjmp	.+6      	; 0x1d4c <__pack_f+0xbc>
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	a9 01       	movw	r20, r18
    1d4c:	da 01       	movw	r26, r20
    1d4e:	c9 01       	movw	r24, r18
    1d50:	8f 77       	andi	r24, 0x7F	; 127
    1d52:	90 70       	andi	r25, 0x00	; 0
    1d54:	a0 70       	andi	r26, 0x00	; 0
    1d56:	b0 70       	andi	r27, 0x00	; 0
    1d58:	80 34       	cpi	r24, 0x40	; 64
    1d5a:	91 05       	cpc	r25, r1
    1d5c:	a1 05       	cpc	r26, r1
    1d5e:	b1 05       	cpc	r27, r1
    1d60:	39 f4       	brne	.+14     	; 0x1d70 <__pack_f+0xe0>
    1d62:	27 ff       	sbrs	r18, 7
    1d64:	09 c0       	rjmp	.+18     	; 0x1d78 <__pack_f+0xe8>
    1d66:	20 5c       	subi	r18, 0xC0	; 192
    1d68:	3f 4f       	sbci	r19, 0xFF	; 255
    1d6a:	4f 4f       	sbci	r20, 0xFF	; 255
    1d6c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d6e:	04 c0       	rjmp	.+8      	; 0x1d78 <__pack_f+0xe8>
    1d70:	21 5c       	subi	r18, 0xC1	; 193
    1d72:	3f 4f       	sbci	r19, 0xFF	; 255
    1d74:	4f 4f       	sbci	r20, 0xFF	; 255
    1d76:	5f 4f       	sbci	r21, 0xFF	; 255
    1d78:	e1 e0       	ldi	r30, 0x01	; 1
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	20 30       	cpi	r18, 0x00	; 0
    1d7e:	80 e0       	ldi	r24, 0x00	; 0
    1d80:	38 07       	cpc	r19, r24
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	48 07       	cpc	r20, r24
    1d86:	80 e4       	ldi	r24, 0x40	; 64
    1d88:	58 07       	cpc	r21, r24
    1d8a:	28 f5       	brcc	.+74     	; 0x1dd6 <__pack_f+0x146>
    1d8c:	e0 e0       	ldi	r30, 0x00	; 0
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	22 c0       	rjmp	.+68     	; 0x1dd6 <__pack_f+0x146>
    1d92:	e0 38       	cpi	r30, 0x80	; 128
    1d94:	f1 05       	cpc	r31, r1
    1d96:	6c f5       	brge	.+90     	; 0x1df2 <__pack_f+0x162>
    1d98:	e1 58       	subi	r30, 0x81	; 129
    1d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9c:	da 01       	movw	r26, r20
    1d9e:	c9 01       	movw	r24, r18
    1da0:	8f 77       	andi	r24, 0x7F	; 127
    1da2:	90 70       	andi	r25, 0x00	; 0
    1da4:	a0 70       	andi	r26, 0x00	; 0
    1da6:	b0 70       	andi	r27, 0x00	; 0
    1da8:	80 34       	cpi	r24, 0x40	; 64
    1daa:	91 05       	cpc	r25, r1
    1dac:	a1 05       	cpc	r26, r1
    1dae:	b1 05       	cpc	r27, r1
    1db0:	39 f4       	brne	.+14     	; 0x1dc0 <__pack_f+0x130>
    1db2:	27 ff       	sbrs	r18, 7
    1db4:	09 c0       	rjmp	.+18     	; 0x1dc8 <__pack_f+0x138>
    1db6:	20 5c       	subi	r18, 0xC0	; 192
    1db8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dba:	4f 4f       	sbci	r20, 0xFF	; 255
    1dbc:	5f 4f       	sbci	r21, 0xFF	; 255
    1dbe:	04 c0       	rjmp	.+8      	; 0x1dc8 <__pack_f+0x138>
    1dc0:	21 5c       	subi	r18, 0xC1	; 193
    1dc2:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc4:	4f 4f       	sbci	r20, 0xFF	; 255
    1dc6:	5f 4f       	sbci	r21, 0xFF	; 255
    1dc8:	57 ff       	sbrs	r21, 7
    1dca:	05 c0       	rjmp	.+10     	; 0x1dd6 <__pack_f+0x146>
    1dcc:	56 95       	lsr	r21
    1dce:	47 95       	ror	r20
    1dd0:	37 95       	ror	r19
    1dd2:	27 95       	ror	r18
    1dd4:	31 96       	adiw	r30, 0x01	; 1
    1dd6:	87 e0       	ldi	r24, 0x07	; 7
    1dd8:	56 95       	lsr	r21
    1dda:	47 95       	ror	r20
    1ddc:	37 95       	ror	r19
    1dde:	27 95       	ror	r18
    1de0:	8a 95       	dec	r24
    1de2:	d1 f7       	brne	.-12     	; 0x1dd8 <__pack_f+0x148>
    1de4:	0b c0       	rjmp	.+22     	; 0x1dfc <__pack_f+0x16c>
    1de6:	e0 e0       	ldi	r30, 0x00	; 0
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	05 c0       	rjmp	.+10     	; 0x1df6 <__pack_f+0x166>
    1dec:	e0 e0       	ldi	r30, 0x00	; 0
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	05 c0       	rjmp	.+10     	; 0x1dfc <__pack_f+0x16c>
    1df2:	ef ef       	ldi	r30, 0xFF	; 255
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	a9 01       	movw	r20, r18
    1dfc:	8e 2f       	mov	r24, r30
    1dfe:	87 95       	ror	r24
    1e00:	88 27       	eor	r24, r24
    1e02:	87 95       	ror	r24
    1e04:	94 2f       	mov	r25, r20
    1e06:	9f 77       	andi	r25, 0x7F	; 127
    1e08:	67 95       	ror	r22
    1e0a:	66 27       	eor	r22, r22
    1e0c:	67 95       	ror	r22
    1e0e:	e6 95       	lsr	r30
    1e10:	e2 2e       	mov	r14, r18
    1e12:	a9 2f       	mov	r26, r25
    1e14:	a8 2b       	or	r26, r24
    1e16:	fe 2f       	mov	r31, r30
    1e18:	f6 2b       	or	r31, r22
    1e1a:	62 2f       	mov	r22, r18
    1e1c:	73 2f       	mov	r23, r19
    1e1e:	8a 2f       	mov	r24, r26
    1e20:	9f 2f       	mov	r25, r31
    1e22:	cd b7       	in	r28, 0x3d	; 61
    1e24:	de b7       	in	r29, 0x3e	; 62
    1e26:	e6 e0       	ldi	r30, 0x06	; 6
    1e28:	0c 94 27 10 	jmp	0x204e	; 0x204e <__epilogue_restores__+0x18>

00001e2c <__unpack_f>:
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	fb 01       	movw	r30, r22
    1e30:	2c 91       	ld	r18, X
    1e32:	11 96       	adiw	r26, 0x01	; 1
    1e34:	3c 91       	ld	r19, X
    1e36:	11 97       	sbiw	r26, 0x01	; 1
    1e38:	12 96       	adiw	r26, 0x02	; 2
    1e3a:	8c 91       	ld	r24, X
    1e3c:	12 97       	sbiw	r26, 0x02	; 2
    1e3e:	48 2f       	mov	r20, r24
    1e40:	4f 77       	andi	r20, 0x7F	; 127
    1e42:	50 e0       	ldi	r21, 0x00	; 0
    1e44:	98 2f       	mov	r25, r24
    1e46:	99 1f       	adc	r25, r25
    1e48:	99 27       	eor	r25, r25
    1e4a:	99 1f       	adc	r25, r25
    1e4c:	13 96       	adiw	r26, 0x03	; 3
    1e4e:	6c 91       	ld	r22, X
    1e50:	13 97       	sbiw	r26, 0x03	; 3
    1e52:	86 2f       	mov	r24, r22
    1e54:	88 0f       	add	r24, r24
    1e56:	89 2b       	or	r24, r25
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	66 1f       	adc	r22, r22
    1e5c:	66 27       	eor	r22, r22
    1e5e:	66 1f       	adc	r22, r22
    1e60:	61 83       	std	Z+1, r22	; 0x01
    1e62:	00 97       	sbiw	r24, 0x00	; 0
    1e64:	39 f5       	brne	.+78     	; 0x1eb4 <__unpack_f+0x88>
    1e66:	21 15       	cp	r18, r1
    1e68:	31 05       	cpc	r19, r1
    1e6a:	41 05       	cpc	r20, r1
    1e6c:	51 05       	cpc	r21, r1
    1e6e:	11 f4       	brne	.+4      	; 0x1e74 <__unpack_f+0x48>
    1e70:	82 e0       	ldi	r24, 0x02	; 2
    1e72:	29 c0       	rjmp	.+82     	; 0x1ec6 <__unpack_f+0x9a>
    1e74:	82 e8       	ldi	r24, 0x82	; 130
    1e76:	9f ef       	ldi	r25, 0xFF	; 255
    1e78:	93 83       	std	Z+3, r25	; 0x03
    1e7a:	82 83       	std	Z+2, r24	; 0x02
    1e7c:	67 e0       	ldi	r22, 0x07	; 7
    1e7e:	22 0f       	add	r18, r18
    1e80:	33 1f       	adc	r19, r19
    1e82:	44 1f       	adc	r20, r20
    1e84:	55 1f       	adc	r21, r21
    1e86:	6a 95       	dec	r22
    1e88:	d1 f7       	brne	.-12     	; 0x1e7e <__unpack_f+0x52>
    1e8a:	83 e0       	ldi	r24, 0x03	; 3
    1e8c:	80 83       	st	Z, r24
    1e8e:	09 c0       	rjmp	.+18     	; 0x1ea2 <__unpack_f+0x76>
    1e90:	22 0f       	add	r18, r18
    1e92:	33 1f       	adc	r19, r19
    1e94:	44 1f       	adc	r20, r20
    1e96:	55 1f       	adc	r21, r21
    1e98:	82 81       	ldd	r24, Z+2	; 0x02
    1e9a:	93 81       	ldd	r25, Z+3	; 0x03
    1e9c:	01 97       	sbiw	r24, 0x01	; 1
    1e9e:	93 83       	std	Z+3, r25	; 0x03
    1ea0:	82 83       	std	Z+2, r24	; 0x02
    1ea2:	20 30       	cpi	r18, 0x00	; 0
    1ea4:	80 e0       	ldi	r24, 0x00	; 0
    1ea6:	38 07       	cpc	r19, r24
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	48 07       	cpc	r20, r24
    1eac:	80 e4       	ldi	r24, 0x40	; 64
    1eae:	58 07       	cpc	r21, r24
    1eb0:	78 f3       	brcs	.-34     	; 0x1e90 <__unpack_f+0x64>
    1eb2:	20 c0       	rjmp	.+64     	; 0x1ef4 <__unpack_f+0xc8>
    1eb4:	8f 3f       	cpi	r24, 0xFF	; 255
    1eb6:	91 05       	cpc	r25, r1
    1eb8:	79 f4       	brne	.+30     	; 0x1ed8 <__unpack_f+0xac>
    1eba:	21 15       	cp	r18, r1
    1ebc:	31 05       	cpc	r19, r1
    1ebe:	41 05       	cpc	r20, r1
    1ec0:	51 05       	cpc	r21, r1
    1ec2:	19 f4       	brne	.+6      	; 0x1eca <__unpack_f+0x9e>
    1ec4:	84 e0       	ldi	r24, 0x04	; 4
    1ec6:	80 83       	st	Z, r24
    1ec8:	08 95       	ret
    1eca:	44 ff       	sbrs	r20, 4
    1ecc:	03 c0       	rjmp	.+6      	; 0x1ed4 <__unpack_f+0xa8>
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	80 83       	st	Z, r24
    1ed2:	10 c0       	rjmp	.+32     	; 0x1ef4 <__unpack_f+0xc8>
    1ed4:	10 82       	st	Z, r1
    1ed6:	0e c0       	rjmp	.+28     	; 0x1ef4 <__unpack_f+0xc8>
    1ed8:	8f 57       	subi	r24, 0x7F	; 127
    1eda:	90 40       	sbci	r25, 0x00	; 0
    1edc:	93 83       	std	Z+3, r25	; 0x03
    1ede:	82 83       	std	Z+2, r24	; 0x02
    1ee0:	83 e0       	ldi	r24, 0x03	; 3
    1ee2:	80 83       	st	Z, r24
    1ee4:	87 e0       	ldi	r24, 0x07	; 7
    1ee6:	22 0f       	add	r18, r18
    1ee8:	33 1f       	adc	r19, r19
    1eea:	44 1f       	adc	r20, r20
    1eec:	55 1f       	adc	r21, r21
    1eee:	8a 95       	dec	r24
    1ef0:	d1 f7       	brne	.-12     	; 0x1ee6 <__unpack_f+0xba>
    1ef2:	50 64       	ori	r21, 0x40	; 64
    1ef4:	24 83       	std	Z+4, r18	; 0x04
    1ef6:	35 83       	std	Z+5, r19	; 0x05
    1ef8:	46 83       	std	Z+6, r20	; 0x06
    1efa:	57 83       	std	Z+7, r21	; 0x07
    1efc:	08 95       	ret

00001efe <__fpcmp_parts_f>:
    1efe:	fc 01       	movw	r30, r24
    1f00:	db 01       	movw	r26, r22
    1f02:	90 81       	ld	r25, Z
    1f04:	92 30       	cpi	r25, 0x02	; 2
    1f06:	08 f4       	brcc	.+2      	; 0x1f0a <__fpcmp_parts_f+0xc>
    1f08:	49 c0       	rjmp	.+146    	; 0x1f9c <__fpcmp_parts_f+0x9e>
    1f0a:	8c 91       	ld	r24, X
    1f0c:	82 30       	cpi	r24, 0x02	; 2
    1f0e:	08 f4       	brcc	.+2      	; 0x1f12 <__fpcmp_parts_f+0x14>
    1f10:	45 c0       	rjmp	.+138    	; 0x1f9c <__fpcmp_parts_f+0x9e>
    1f12:	94 30       	cpi	r25, 0x04	; 4
    1f14:	51 f4       	brne	.+20     	; 0x1f2a <__fpcmp_parts_f+0x2c>
    1f16:	61 81       	ldd	r22, Z+1	; 0x01
    1f18:	84 30       	cpi	r24, 0x04	; 4
    1f1a:	b1 f5       	brne	.+108    	; 0x1f88 <__fpcmp_parts_f+0x8a>
    1f1c:	11 96       	adiw	r26, 0x01	; 1
    1f1e:	2c 91       	ld	r18, X
    1f20:	11 97       	sbiw	r26, 0x01	; 1
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	26 1b       	sub	r18, r22
    1f26:	31 09       	sbc	r19, r1
    1f28:	41 c0       	rjmp	.+130    	; 0x1fac <__fpcmp_parts_f+0xae>
    1f2a:	84 30       	cpi	r24, 0x04	; 4
    1f2c:	21 f0       	breq	.+8      	; 0x1f36 <__fpcmp_parts_f+0x38>
    1f2e:	92 30       	cpi	r25, 0x02	; 2
    1f30:	41 f4       	brne	.+16     	; 0x1f42 <__fpcmp_parts_f+0x44>
    1f32:	82 30       	cpi	r24, 0x02	; 2
    1f34:	b1 f1       	breq	.+108    	; 0x1fa2 <__fpcmp_parts_f+0xa4>
    1f36:	11 96       	adiw	r26, 0x01	; 1
    1f38:	8c 91       	ld	r24, X
    1f3a:	11 97       	sbiw	r26, 0x01	; 1
    1f3c:	88 23       	and	r24, r24
    1f3e:	a1 f1       	breq	.+104    	; 0x1fa8 <__fpcmp_parts_f+0xaa>
    1f40:	2d c0       	rjmp	.+90     	; 0x1f9c <__fpcmp_parts_f+0x9e>
    1f42:	61 81       	ldd	r22, Z+1	; 0x01
    1f44:	82 30       	cpi	r24, 0x02	; 2
    1f46:	01 f1       	breq	.+64     	; 0x1f88 <__fpcmp_parts_f+0x8a>
    1f48:	11 96       	adiw	r26, 0x01	; 1
    1f4a:	8c 91       	ld	r24, X
    1f4c:	11 97       	sbiw	r26, 0x01	; 1
    1f4e:	68 17       	cp	r22, r24
    1f50:	d9 f4       	brne	.+54     	; 0x1f88 <__fpcmp_parts_f+0x8a>
    1f52:	22 81       	ldd	r18, Z+2	; 0x02
    1f54:	33 81       	ldd	r19, Z+3	; 0x03
    1f56:	12 96       	adiw	r26, 0x02	; 2
    1f58:	8d 91       	ld	r24, X+
    1f5a:	9c 91       	ld	r25, X
    1f5c:	13 97       	sbiw	r26, 0x03	; 3
    1f5e:	82 17       	cp	r24, r18
    1f60:	93 07       	cpc	r25, r19
    1f62:	94 f0       	brlt	.+36     	; 0x1f88 <__fpcmp_parts_f+0x8a>
    1f64:	28 17       	cp	r18, r24
    1f66:	39 07       	cpc	r19, r25
    1f68:	bc f0       	brlt	.+46     	; 0x1f98 <__fpcmp_parts_f+0x9a>
    1f6a:	24 81       	ldd	r18, Z+4	; 0x04
    1f6c:	35 81       	ldd	r19, Z+5	; 0x05
    1f6e:	46 81       	ldd	r20, Z+6	; 0x06
    1f70:	57 81       	ldd	r21, Z+7	; 0x07
    1f72:	14 96       	adiw	r26, 0x04	; 4
    1f74:	8d 91       	ld	r24, X+
    1f76:	9d 91       	ld	r25, X+
    1f78:	0d 90       	ld	r0, X+
    1f7a:	bc 91       	ld	r27, X
    1f7c:	a0 2d       	mov	r26, r0
    1f7e:	82 17       	cp	r24, r18
    1f80:	93 07       	cpc	r25, r19
    1f82:	a4 07       	cpc	r26, r20
    1f84:	b5 07       	cpc	r27, r21
    1f86:	18 f4       	brcc	.+6      	; 0x1f8e <__fpcmp_parts_f+0x90>
    1f88:	66 23       	and	r22, r22
    1f8a:	41 f0       	breq	.+16     	; 0x1f9c <__fpcmp_parts_f+0x9e>
    1f8c:	0d c0       	rjmp	.+26     	; 0x1fa8 <__fpcmp_parts_f+0xaa>
    1f8e:	28 17       	cp	r18, r24
    1f90:	39 07       	cpc	r19, r25
    1f92:	4a 07       	cpc	r20, r26
    1f94:	5b 07       	cpc	r21, r27
    1f96:	28 f4       	brcc	.+10     	; 0x1fa2 <__fpcmp_parts_f+0xa4>
    1f98:	66 23       	and	r22, r22
    1f9a:	31 f0       	breq	.+12     	; 0x1fa8 <__fpcmp_parts_f+0xaa>
    1f9c:	21 e0       	ldi	r18, 0x01	; 1
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	05 c0       	rjmp	.+10     	; 0x1fac <__fpcmp_parts_f+0xae>
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	02 c0       	rjmp	.+4      	; 0x1fac <__fpcmp_parts_f+0xae>
    1fa8:	2f ef       	ldi	r18, 0xFF	; 255
    1faa:	3f ef       	ldi	r19, 0xFF	; 255
    1fac:	c9 01       	movw	r24, r18
    1fae:	08 95       	ret

00001fb0 <__udivmodhi4>:
    1fb0:	aa 1b       	sub	r26, r26
    1fb2:	bb 1b       	sub	r27, r27
    1fb4:	51 e1       	ldi	r21, 0x11	; 17
    1fb6:	07 c0       	rjmp	.+14     	; 0x1fc6 <__udivmodhi4_ep>

00001fb8 <__udivmodhi4_loop>:
    1fb8:	aa 1f       	adc	r26, r26
    1fba:	bb 1f       	adc	r27, r27
    1fbc:	a6 17       	cp	r26, r22
    1fbe:	b7 07       	cpc	r27, r23
    1fc0:	10 f0       	brcs	.+4      	; 0x1fc6 <__udivmodhi4_ep>
    1fc2:	a6 1b       	sub	r26, r22
    1fc4:	b7 0b       	sbc	r27, r23

00001fc6 <__udivmodhi4_ep>:
    1fc6:	88 1f       	adc	r24, r24
    1fc8:	99 1f       	adc	r25, r25
    1fca:	5a 95       	dec	r21
    1fcc:	a9 f7       	brne	.-22     	; 0x1fb8 <__udivmodhi4_loop>
    1fce:	80 95       	com	r24
    1fd0:	90 95       	com	r25
    1fd2:	bc 01       	movw	r22, r24
    1fd4:	cd 01       	movw	r24, r26
    1fd6:	08 95       	ret

00001fd8 <__divmodhi4>:
    1fd8:	97 fb       	bst	r25, 7
    1fda:	09 2e       	mov	r0, r25
    1fdc:	07 26       	eor	r0, r23
    1fde:	0a d0       	rcall	.+20     	; 0x1ff4 <__divmodhi4_neg1>
    1fe0:	77 fd       	sbrc	r23, 7
    1fe2:	04 d0       	rcall	.+8      	; 0x1fec <__divmodhi4_neg2>
    1fe4:	e5 df       	rcall	.-54     	; 0x1fb0 <__udivmodhi4>
    1fe6:	06 d0       	rcall	.+12     	; 0x1ff4 <__divmodhi4_neg1>
    1fe8:	00 20       	and	r0, r0
    1fea:	1a f4       	brpl	.+6      	; 0x1ff2 <__divmodhi4_exit>

00001fec <__divmodhi4_neg2>:
    1fec:	70 95       	com	r23
    1fee:	61 95       	neg	r22
    1ff0:	7f 4f       	sbci	r23, 0xFF	; 255

00001ff2 <__divmodhi4_exit>:
    1ff2:	08 95       	ret

00001ff4 <__divmodhi4_neg1>:
    1ff4:	f6 f7       	brtc	.-4      	; 0x1ff2 <__divmodhi4_exit>
    1ff6:	90 95       	com	r25
    1ff8:	81 95       	neg	r24
    1ffa:	9f 4f       	sbci	r25, 0xFF	; 255
    1ffc:	08 95       	ret

00001ffe <__prologue_saves__>:
    1ffe:	2f 92       	push	r2
    2000:	3f 92       	push	r3
    2002:	4f 92       	push	r4
    2004:	5f 92       	push	r5
    2006:	6f 92       	push	r6
    2008:	7f 92       	push	r7
    200a:	8f 92       	push	r8
    200c:	9f 92       	push	r9
    200e:	af 92       	push	r10
    2010:	bf 92       	push	r11
    2012:	cf 92       	push	r12
    2014:	df 92       	push	r13
    2016:	ef 92       	push	r14
    2018:	ff 92       	push	r15
    201a:	0f 93       	push	r16
    201c:	1f 93       	push	r17
    201e:	cf 93       	push	r28
    2020:	df 93       	push	r29
    2022:	cd b7       	in	r28, 0x3d	; 61
    2024:	de b7       	in	r29, 0x3e	; 62
    2026:	ca 1b       	sub	r28, r26
    2028:	db 0b       	sbc	r29, r27
    202a:	0f b6       	in	r0, 0x3f	; 63
    202c:	f8 94       	cli
    202e:	de bf       	out	0x3e, r29	; 62
    2030:	0f be       	out	0x3f, r0	; 63
    2032:	cd bf       	out	0x3d, r28	; 61
    2034:	09 94       	ijmp

00002036 <__epilogue_restores__>:
    2036:	2a 88       	ldd	r2, Y+18	; 0x12
    2038:	39 88       	ldd	r3, Y+17	; 0x11
    203a:	48 88       	ldd	r4, Y+16	; 0x10
    203c:	5f 84       	ldd	r5, Y+15	; 0x0f
    203e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2040:	7d 84       	ldd	r7, Y+13	; 0x0d
    2042:	8c 84       	ldd	r8, Y+12	; 0x0c
    2044:	9b 84       	ldd	r9, Y+11	; 0x0b
    2046:	aa 84       	ldd	r10, Y+10	; 0x0a
    2048:	b9 84       	ldd	r11, Y+9	; 0x09
    204a:	c8 84       	ldd	r12, Y+8	; 0x08
    204c:	df 80       	ldd	r13, Y+7	; 0x07
    204e:	ee 80       	ldd	r14, Y+6	; 0x06
    2050:	fd 80       	ldd	r15, Y+5	; 0x05
    2052:	0c 81       	ldd	r16, Y+4	; 0x04
    2054:	1b 81       	ldd	r17, Y+3	; 0x03
    2056:	aa 81       	ldd	r26, Y+2	; 0x02
    2058:	b9 81       	ldd	r27, Y+1	; 0x01
    205a:	ce 0f       	add	r28, r30
    205c:	d1 1d       	adc	r29, r1
    205e:	0f b6       	in	r0, 0x3f	; 63
    2060:	f8 94       	cli
    2062:	de bf       	out	0x3e, r29	; 62
    2064:	0f be       	out	0x3f, r0	; 63
    2066:	cd bf       	out	0x3d, r28	; 61
    2068:	ed 01       	movw	r28, r26
    206a:	08 95       	ret

0000206c <calloc>:
    206c:	ef 92       	push	r14
    206e:	ff 92       	push	r15
    2070:	0f 93       	push	r16
    2072:	1f 93       	push	r17
    2074:	cf 93       	push	r28
    2076:	df 93       	push	r29
    2078:	68 9f       	mul	r22, r24
    207a:	80 01       	movw	r16, r0
    207c:	69 9f       	mul	r22, r25
    207e:	10 0d       	add	r17, r0
    2080:	78 9f       	mul	r23, r24
    2082:	10 0d       	add	r17, r0
    2084:	11 24       	eor	r1, r1
    2086:	c8 01       	movw	r24, r16
    2088:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <malloc>
    208c:	e8 2e       	mov	r14, r24
    208e:	e7 01       	movw	r28, r14
    2090:	7e 01       	movw	r14, r28
    2092:	f9 2e       	mov	r15, r25
    2094:	e7 01       	movw	r28, r14
    2096:	20 97       	sbiw	r28, 0x00	; 0
    2098:	31 f0       	breq	.+12     	; 0x20a6 <calloc+0x3a>
    209a:	8e 2d       	mov	r24, r14
    209c:	60 e0       	ldi	r22, 0x00	; 0
    209e:	70 e0       	ldi	r23, 0x00	; 0
    20a0:	a8 01       	movw	r20, r16
    20a2:	0e 94 8d 11 	call	0x231a	; 0x231a <memset>
    20a6:	7e 01       	movw	r14, r28
    20a8:	ce 01       	movw	r24, r28
    20aa:	cd b7       	in	r28, 0x3d	; 61
    20ac:	de b7       	in	r29, 0x3e	; 62
    20ae:	e6 e0       	ldi	r30, 0x06	; 6
    20b0:	0c 94 27 10 	jmp	0x204e	; 0x204e <__epilogue_restores__+0x18>

000020b4 <malloc>:
    20b4:	cf 93       	push	r28
    20b6:	df 93       	push	r29
    20b8:	82 30       	cpi	r24, 0x02	; 2
    20ba:	91 05       	cpc	r25, r1
    20bc:	10 f4       	brcc	.+4      	; 0x20c2 <malloc+0xe>
    20be:	82 e0       	ldi	r24, 0x02	; 2
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	e0 91 3a 06 	lds	r30, 0x063A
    20c6:	f0 91 3b 06 	lds	r31, 0x063B
    20ca:	40 e0       	ldi	r20, 0x00	; 0
    20cc:	50 e0       	ldi	r21, 0x00	; 0
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	26 c0       	rjmp	.+76     	; 0x2120 <malloc+0x6c>
    20d4:	60 81       	ld	r22, Z
    20d6:	71 81       	ldd	r23, Z+1	; 0x01
    20d8:	68 17       	cp	r22, r24
    20da:	79 07       	cpc	r23, r25
    20dc:	e0 f0       	brcs	.+56     	; 0x2116 <malloc+0x62>
    20de:	68 17       	cp	r22, r24
    20e0:	79 07       	cpc	r23, r25
    20e2:	81 f4       	brne	.+32     	; 0x2104 <malloc+0x50>
    20e4:	82 81       	ldd	r24, Z+2	; 0x02
    20e6:	93 81       	ldd	r25, Z+3	; 0x03
    20e8:	21 15       	cp	r18, r1
    20ea:	31 05       	cpc	r19, r1
    20ec:	31 f0       	breq	.+12     	; 0x20fa <malloc+0x46>
    20ee:	d9 01       	movw	r26, r18
    20f0:	13 96       	adiw	r26, 0x03	; 3
    20f2:	9c 93       	st	X, r25
    20f4:	8e 93       	st	-X, r24
    20f6:	12 97       	sbiw	r26, 0x02	; 2
    20f8:	2b c0       	rjmp	.+86     	; 0x2150 <malloc+0x9c>
    20fa:	90 93 3b 06 	sts	0x063B, r25
    20fe:	80 93 3a 06 	sts	0x063A, r24
    2102:	26 c0       	rjmp	.+76     	; 0x2150 <malloc+0x9c>
    2104:	41 15       	cp	r20, r1
    2106:	51 05       	cpc	r21, r1
    2108:	19 f0       	breq	.+6      	; 0x2110 <malloc+0x5c>
    210a:	64 17       	cp	r22, r20
    210c:	75 07       	cpc	r23, r21
    210e:	18 f4       	brcc	.+6      	; 0x2116 <malloc+0x62>
    2110:	ab 01       	movw	r20, r22
    2112:	e9 01       	movw	r28, r18
    2114:	df 01       	movw	r26, r30
    2116:	9f 01       	movw	r18, r30
    2118:	72 81       	ldd	r23, Z+2	; 0x02
    211a:	63 81       	ldd	r22, Z+3	; 0x03
    211c:	e7 2f       	mov	r30, r23
    211e:	f6 2f       	mov	r31, r22
    2120:	30 97       	sbiw	r30, 0x00	; 0
    2122:	c1 f6       	brne	.-80     	; 0x20d4 <malloc+0x20>
    2124:	41 15       	cp	r20, r1
    2126:	51 05       	cpc	r21, r1
    2128:	01 f1       	breq	.+64     	; 0x216a <malloc+0xb6>
    212a:	48 1b       	sub	r20, r24
    212c:	59 0b       	sbc	r21, r25
    212e:	44 30       	cpi	r20, 0x04	; 4
    2130:	51 05       	cpc	r21, r1
    2132:	80 f4       	brcc	.+32     	; 0x2154 <malloc+0xa0>
    2134:	12 96       	adiw	r26, 0x02	; 2
    2136:	8d 91       	ld	r24, X+
    2138:	9c 91       	ld	r25, X
    213a:	13 97       	sbiw	r26, 0x03	; 3
    213c:	20 97       	sbiw	r28, 0x00	; 0
    213e:	19 f0       	breq	.+6      	; 0x2146 <malloc+0x92>
    2140:	9b 83       	std	Y+3, r25	; 0x03
    2142:	8a 83       	std	Y+2, r24	; 0x02
    2144:	04 c0       	rjmp	.+8      	; 0x214e <malloc+0x9a>
    2146:	90 93 3b 06 	sts	0x063B, r25
    214a:	80 93 3a 06 	sts	0x063A, r24
    214e:	fd 01       	movw	r30, r26
    2150:	32 96       	adiw	r30, 0x02	; 2
    2152:	46 c0       	rjmp	.+140    	; 0x21e0 <malloc+0x12c>
    2154:	fd 01       	movw	r30, r26
    2156:	e4 0f       	add	r30, r20
    2158:	f5 1f       	adc	r31, r21
    215a:	81 93       	st	Z+, r24
    215c:	91 93       	st	Z+, r25
    215e:	42 50       	subi	r20, 0x02	; 2
    2160:	50 40       	sbci	r21, 0x00	; 0
    2162:	11 96       	adiw	r26, 0x01	; 1
    2164:	5c 93       	st	X, r21
    2166:	4e 93       	st	-X, r20
    2168:	3b c0       	rjmp	.+118    	; 0x21e0 <malloc+0x12c>
    216a:	20 91 38 06 	lds	r18, 0x0638
    216e:	30 91 39 06 	lds	r19, 0x0639
    2172:	21 15       	cp	r18, r1
    2174:	31 05       	cpc	r19, r1
    2176:	41 f4       	brne	.+16     	; 0x2188 <malloc+0xd4>
    2178:	20 91 16 01 	lds	r18, 0x0116
    217c:	30 91 17 01 	lds	r19, 0x0117
    2180:	30 93 39 06 	sts	0x0639, r19
    2184:	20 93 38 06 	sts	0x0638, r18
    2188:	20 91 18 01 	lds	r18, 0x0118
    218c:	30 91 19 01 	lds	r19, 0x0119
    2190:	21 15       	cp	r18, r1
    2192:	31 05       	cpc	r19, r1
    2194:	41 f4       	brne	.+16     	; 0x21a6 <malloc+0xf2>
    2196:	2d b7       	in	r18, 0x3d	; 61
    2198:	3e b7       	in	r19, 0x3e	; 62
    219a:	40 91 14 01 	lds	r20, 0x0114
    219e:	50 91 15 01 	lds	r21, 0x0115
    21a2:	24 1b       	sub	r18, r20
    21a4:	35 0b       	sbc	r19, r21
    21a6:	e0 91 38 06 	lds	r30, 0x0638
    21aa:	f0 91 39 06 	lds	r31, 0x0639
    21ae:	e2 17       	cp	r30, r18
    21b0:	f3 07       	cpc	r31, r19
    21b2:	a0 f4       	brcc	.+40     	; 0x21dc <malloc+0x128>
    21b4:	2e 1b       	sub	r18, r30
    21b6:	3f 0b       	sbc	r19, r31
    21b8:	28 17       	cp	r18, r24
    21ba:	39 07       	cpc	r19, r25
    21bc:	78 f0       	brcs	.+30     	; 0x21dc <malloc+0x128>
    21be:	ac 01       	movw	r20, r24
    21c0:	4e 5f       	subi	r20, 0xFE	; 254
    21c2:	5f 4f       	sbci	r21, 0xFF	; 255
    21c4:	24 17       	cp	r18, r20
    21c6:	35 07       	cpc	r19, r21
    21c8:	48 f0       	brcs	.+18     	; 0x21dc <malloc+0x128>
    21ca:	4e 0f       	add	r20, r30
    21cc:	5f 1f       	adc	r21, r31
    21ce:	50 93 39 06 	sts	0x0639, r21
    21d2:	40 93 38 06 	sts	0x0638, r20
    21d6:	81 93       	st	Z+, r24
    21d8:	91 93       	st	Z+, r25
    21da:	02 c0       	rjmp	.+4      	; 0x21e0 <malloc+0x12c>
    21dc:	e0 e0       	ldi	r30, 0x00	; 0
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	cf 01       	movw	r24, r30
    21e2:	df 91       	pop	r29
    21e4:	cf 91       	pop	r28
    21e6:	08 95       	ret

000021e8 <free>:
    21e8:	cf 93       	push	r28
    21ea:	df 93       	push	r29
    21ec:	00 97       	sbiw	r24, 0x00	; 0
    21ee:	09 f4       	brne	.+2      	; 0x21f2 <free+0xa>
    21f0:	91 c0       	rjmp	.+290    	; 0x2314 <free+0x12c>
    21f2:	fc 01       	movw	r30, r24
    21f4:	32 97       	sbiw	r30, 0x02	; 2
    21f6:	13 82       	std	Z+3, r1	; 0x03
    21f8:	12 82       	std	Z+2, r1	; 0x02
    21fa:	60 91 3a 06 	lds	r22, 0x063A
    21fe:	70 91 3b 06 	lds	r23, 0x063B
    2202:	61 15       	cp	r22, r1
    2204:	71 05       	cpc	r23, r1
    2206:	81 f4       	brne	.+32     	; 0x2228 <free+0x40>
    2208:	20 81       	ld	r18, Z
    220a:	31 81       	ldd	r19, Z+1	; 0x01
    220c:	28 0f       	add	r18, r24
    220e:	39 1f       	adc	r19, r25
    2210:	80 91 38 06 	lds	r24, 0x0638
    2214:	90 91 39 06 	lds	r25, 0x0639
    2218:	82 17       	cp	r24, r18
    221a:	93 07       	cpc	r25, r19
    221c:	99 f5       	brne	.+102    	; 0x2284 <free+0x9c>
    221e:	f0 93 39 06 	sts	0x0639, r31
    2222:	e0 93 38 06 	sts	0x0638, r30
    2226:	76 c0       	rjmp	.+236    	; 0x2314 <free+0x12c>
    2228:	db 01       	movw	r26, r22
    222a:	80 e0       	ldi	r24, 0x00	; 0
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	02 c0       	rjmp	.+4      	; 0x2234 <free+0x4c>
    2230:	cd 01       	movw	r24, r26
    2232:	d9 01       	movw	r26, r18
    2234:	ae 17       	cp	r26, r30
    2236:	bf 07       	cpc	r27, r31
    2238:	48 f4       	brcc	.+18     	; 0x224c <free+0x64>
    223a:	12 96       	adiw	r26, 0x02	; 2
    223c:	2d 91       	ld	r18, X+
    223e:	3c 91       	ld	r19, X
    2240:	13 97       	sbiw	r26, 0x03	; 3
    2242:	21 15       	cp	r18, r1
    2244:	31 05       	cpc	r19, r1
    2246:	a1 f7       	brne	.-24     	; 0x2230 <free+0x48>
    2248:	cd 01       	movw	r24, r26
    224a:	21 c0       	rjmp	.+66     	; 0x228e <free+0xa6>
    224c:	b3 83       	std	Z+3, r27	; 0x03
    224e:	a2 83       	std	Z+2, r26	; 0x02
    2250:	ef 01       	movw	r28, r30
    2252:	49 91       	ld	r20, Y+
    2254:	59 91       	ld	r21, Y+
    2256:	9e 01       	movw	r18, r28
    2258:	24 0f       	add	r18, r20
    225a:	35 1f       	adc	r19, r21
    225c:	a2 17       	cp	r26, r18
    225e:	b3 07       	cpc	r27, r19
    2260:	79 f4       	brne	.+30     	; 0x2280 <free+0x98>
    2262:	2d 91       	ld	r18, X+
    2264:	3c 91       	ld	r19, X
    2266:	11 97       	sbiw	r26, 0x01	; 1
    2268:	24 0f       	add	r18, r20
    226a:	35 1f       	adc	r19, r21
    226c:	2e 5f       	subi	r18, 0xFE	; 254
    226e:	3f 4f       	sbci	r19, 0xFF	; 255
    2270:	31 83       	std	Z+1, r19	; 0x01
    2272:	20 83       	st	Z, r18
    2274:	12 96       	adiw	r26, 0x02	; 2
    2276:	2d 91       	ld	r18, X+
    2278:	3c 91       	ld	r19, X
    227a:	13 97       	sbiw	r26, 0x03	; 3
    227c:	33 83       	std	Z+3, r19	; 0x03
    227e:	22 83       	std	Z+2, r18	; 0x02
    2280:	00 97       	sbiw	r24, 0x00	; 0
    2282:	29 f4       	brne	.+10     	; 0x228e <free+0xa6>
    2284:	f0 93 3b 06 	sts	0x063B, r31
    2288:	e0 93 3a 06 	sts	0x063A, r30
    228c:	43 c0       	rjmp	.+134    	; 0x2314 <free+0x12c>
    228e:	dc 01       	movw	r26, r24
    2290:	13 96       	adiw	r26, 0x03	; 3
    2292:	fc 93       	st	X, r31
    2294:	ee 93       	st	-X, r30
    2296:	12 97       	sbiw	r26, 0x02	; 2
    2298:	4d 91       	ld	r20, X+
    229a:	5d 91       	ld	r21, X+
    229c:	a4 0f       	add	r26, r20
    229e:	b5 1f       	adc	r27, r21
    22a0:	ea 17       	cp	r30, r26
    22a2:	fb 07       	cpc	r31, r27
    22a4:	69 f4       	brne	.+26     	; 0x22c0 <free+0xd8>
    22a6:	20 81       	ld	r18, Z
    22a8:	31 81       	ldd	r19, Z+1	; 0x01
    22aa:	24 0f       	add	r18, r20
    22ac:	35 1f       	adc	r19, r21
    22ae:	2e 5f       	subi	r18, 0xFE	; 254
    22b0:	3f 4f       	sbci	r19, 0xFF	; 255
    22b2:	ec 01       	movw	r28, r24
    22b4:	39 83       	std	Y+1, r19	; 0x01
    22b6:	28 83       	st	Y, r18
    22b8:	22 81       	ldd	r18, Z+2	; 0x02
    22ba:	33 81       	ldd	r19, Z+3	; 0x03
    22bc:	3b 83       	std	Y+3, r19	; 0x03
    22be:	2a 83       	std	Y+2, r18	; 0x02
    22c0:	e0 e0       	ldi	r30, 0x00	; 0
    22c2:	f0 e0       	ldi	r31, 0x00	; 0
    22c4:	02 c0       	rjmp	.+4      	; 0x22ca <free+0xe2>
    22c6:	fb 01       	movw	r30, r22
    22c8:	bc 01       	movw	r22, r24
    22ca:	db 01       	movw	r26, r22
    22cc:	12 96       	adiw	r26, 0x02	; 2
    22ce:	8d 91       	ld	r24, X+
    22d0:	9c 91       	ld	r25, X
    22d2:	13 97       	sbiw	r26, 0x03	; 3
    22d4:	00 97       	sbiw	r24, 0x00	; 0
    22d6:	b9 f7       	brne	.-18     	; 0x22c6 <free+0xde>
    22d8:	9b 01       	movw	r18, r22
    22da:	2e 5f       	subi	r18, 0xFE	; 254
    22dc:	3f 4f       	sbci	r19, 0xFF	; 255
    22de:	8d 91       	ld	r24, X+
    22e0:	9c 91       	ld	r25, X
    22e2:	11 97       	sbiw	r26, 0x01	; 1
    22e4:	82 0f       	add	r24, r18
    22e6:	93 1f       	adc	r25, r19
    22e8:	40 91 38 06 	lds	r20, 0x0638
    22ec:	50 91 39 06 	lds	r21, 0x0639
    22f0:	48 17       	cp	r20, r24
    22f2:	59 07       	cpc	r21, r25
    22f4:	79 f4       	brne	.+30     	; 0x2314 <free+0x12c>
    22f6:	30 97       	sbiw	r30, 0x00	; 0
    22f8:	29 f4       	brne	.+10     	; 0x2304 <free+0x11c>
    22fa:	10 92 3b 06 	sts	0x063B, r1
    22fe:	10 92 3a 06 	sts	0x063A, r1
    2302:	02 c0       	rjmp	.+4      	; 0x2308 <free+0x120>
    2304:	13 82       	std	Z+3, r1	; 0x03
    2306:	12 82       	std	Z+2, r1	; 0x02
    2308:	22 50       	subi	r18, 0x02	; 2
    230a:	30 40       	sbci	r19, 0x00	; 0
    230c:	30 93 39 06 	sts	0x0639, r19
    2310:	20 93 38 06 	sts	0x0638, r18
    2314:	df 91       	pop	r29
    2316:	cf 91       	pop	r28
    2318:	08 95       	ret

0000231a <memset>:
    231a:	dc 01       	movw	r26, r24
    231c:	01 c0       	rjmp	.+2      	; 0x2320 <memset+0x6>
    231e:	6d 93       	st	X+, r22
    2320:	41 50       	subi	r20, 0x01	; 1
    2322:	50 40       	sbci	r21, 0x00	; 0
    2324:	e0 f7       	brcc	.-8      	; 0x231e <memset+0x4>
    2326:	08 95       	ret

00002328 <strlen>:
    2328:	fc 01       	movw	r30, r24
    232a:	01 90       	ld	r0, Z+
    232c:	00 20       	and	r0, r0
    232e:	e9 f7       	brne	.-6      	; 0x232a <strlen+0x2>
    2330:	80 95       	com	r24
    2332:	90 95       	com	r25
    2334:	8e 0f       	add	r24, r30
    2336:	9f 1f       	adc	r25, r31
    2338:	08 95       	ret

0000233a <sprintf>:
    233a:	ae e0       	ldi	r26, 0x0E	; 14
    233c:	b0 e0       	ldi	r27, 0x00	; 0
    233e:	e3 ea       	ldi	r30, 0xA3	; 163
    2340:	f1 e1       	ldi	r31, 0x11	; 17
    2342:	0c 94 0d 10 	jmp	0x201a	; 0x201a <__prologue_saves__+0x1c>
    2346:	0d 89       	ldd	r16, Y+21	; 0x15
    2348:	1e 89       	ldd	r17, Y+22	; 0x16
    234a:	86 e0       	ldi	r24, 0x06	; 6
    234c:	8c 83       	std	Y+4, r24	; 0x04
    234e:	1a 83       	std	Y+2, r17	; 0x02
    2350:	09 83       	std	Y+1, r16	; 0x01
    2352:	8f ef       	ldi	r24, 0xFF	; 255
    2354:	9f e7       	ldi	r25, 0x7F	; 127
    2356:	9e 83       	std	Y+6, r25	; 0x06
    2358:	8d 83       	std	Y+5, r24	; 0x05
    235a:	9e 01       	movw	r18, r28
    235c:	27 5e       	subi	r18, 0xE7	; 231
    235e:	3f 4f       	sbci	r19, 0xFF	; 255
    2360:	ce 01       	movw	r24, r28
    2362:	01 96       	adiw	r24, 0x01	; 1
    2364:	6f 89       	ldd	r22, Y+23	; 0x17
    2366:	78 8d       	ldd	r23, Y+24	; 0x18
    2368:	a9 01       	movw	r20, r18
    236a:	0e 94 c0 11 	call	0x2380	; 0x2380 <vfprintf>
    236e:	ef 81       	ldd	r30, Y+7	; 0x07
    2370:	f8 85       	ldd	r31, Y+8	; 0x08
    2372:	e0 0f       	add	r30, r16
    2374:	f1 1f       	adc	r31, r17
    2376:	10 82       	st	Z, r1
    2378:	2e 96       	adiw	r28, 0x0e	; 14
    237a:	e4 e0       	ldi	r30, 0x04	; 4
    237c:	0c 94 29 10 	jmp	0x2052	; 0x2052 <__epilogue_restores__+0x1c>

00002380 <vfprintf>:
    2380:	ac e0       	ldi	r26, 0x0C	; 12
    2382:	b0 e0       	ldi	r27, 0x00	; 0
    2384:	e6 ec       	ldi	r30, 0xC6	; 198
    2386:	f1 e1       	ldi	r31, 0x11	; 17
    2388:	0c 94 ff 0f 	jmp	0x1ffe	; 0x1ffe <__prologue_saves__>
    238c:	6c 01       	movw	r12, r24
    238e:	1b 01       	movw	r2, r22
    2390:	8a 01       	movw	r16, r20
    2392:	fc 01       	movw	r30, r24
    2394:	17 82       	std	Z+7, r1	; 0x07
    2396:	16 82       	std	Z+6, r1	; 0x06
    2398:	83 81       	ldd	r24, Z+3	; 0x03
    239a:	81 ff       	sbrs	r24, 1
    239c:	d1 c1       	rjmp	.+930    	; 0x2740 <vfprintf+0x3c0>
    239e:	2e 01       	movw	r4, r28
    23a0:	08 94       	sec
    23a2:	41 1c       	adc	r4, r1
    23a4:	51 1c       	adc	r5, r1
    23a6:	f6 01       	movw	r30, r12
    23a8:	93 81       	ldd	r25, Z+3	; 0x03
    23aa:	f1 01       	movw	r30, r2
    23ac:	93 fd       	sbrc	r25, 3
    23ae:	85 91       	lpm	r24, Z+
    23b0:	93 ff       	sbrs	r25, 3
    23b2:	81 91       	ld	r24, Z+
    23b4:	1f 01       	movw	r2, r30
    23b6:	88 23       	and	r24, r24
    23b8:	09 f4       	brne	.+2      	; 0x23bc <vfprintf+0x3c>
    23ba:	be c1       	rjmp	.+892    	; 0x2738 <vfprintf+0x3b8>
    23bc:	85 32       	cpi	r24, 0x25	; 37
    23be:	39 f4       	brne	.+14     	; 0x23ce <vfprintf+0x4e>
    23c0:	93 fd       	sbrc	r25, 3
    23c2:	85 91       	lpm	r24, Z+
    23c4:	93 ff       	sbrs	r25, 3
    23c6:	81 91       	ld	r24, Z+
    23c8:	1f 01       	movw	r2, r30
    23ca:	85 32       	cpi	r24, 0x25	; 37
    23cc:	29 f4       	brne	.+10     	; 0x23d8 <vfprintf+0x58>
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	b6 01       	movw	r22, r12
    23d2:	0e 94 bd 13 	call	0x277a	; 0x277a <fputc>
    23d6:	e7 cf       	rjmp	.-50     	; 0x23a6 <vfprintf+0x26>
    23d8:	ee 24       	eor	r14, r14
    23da:	ff 24       	eor	r15, r15
    23dc:	20 e0       	ldi	r18, 0x00	; 0
    23de:	20 32       	cpi	r18, 0x20	; 32
    23e0:	b0 f4       	brcc	.+44     	; 0x240e <vfprintf+0x8e>
    23e2:	8b 32       	cpi	r24, 0x2B	; 43
    23e4:	69 f0       	breq	.+26     	; 0x2400 <vfprintf+0x80>
    23e6:	8c 32       	cpi	r24, 0x2C	; 44
    23e8:	28 f4       	brcc	.+10     	; 0x23f4 <vfprintf+0x74>
    23ea:	80 32       	cpi	r24, 0x20	; 32
    23ec:	51 f0       	breq	.+20     	; 0x2402 <vfprintf+0x82>
    23ee:	83 32       	cpi	r24, 0x23	; 35
    23f0:	71 f4       	brne	.+28     	; 0x240e <vfprintf+0x8e>
    23f2:	0b c0       	rjmp	.+22     	; 0x240a <vfprintf+0x8a>
    23f4:	8d 32       	cpi	r24, 0x2D	; 45
    23f6:	39 f0       	breq	.+14     	; 0x2406 <vfprintf+0x86>
    23f8:	80 33       	cpi	r24, 0x30	; 48
    23fa:	49 f4       	brne	.+18     	; 0x240e <vfprintf+0x8e>
    23fc:	21 60       	ori	r18, 0x01	; 1
    23fe:	2c c0       	rjmp	.+88     	; 0x2458 <vfprintf+0xd8>
    2400:	22 60       	ori	r18, 0x02	; 2
    2402:	24 60       	ori	r18, 0x04	; 4
    2404:	29 c0       	rjmp	.+82     	; 0x2458 <vfprintf+0xd8>
    2406:	28 60       	ori	r18, 0x08	; 8
    2408:	27 c0       	rjmp	.+78     	; 0x2458 <vfprintf+0xd8>
    240a:	20 61       	ori	r18, 0x10	; 16
    240c:	25 c0       	rjmp	.+74     	; 0x2458 <vfprintf+0xd8>
    240e:	27 fd       	sbrc	r18, 7
    2410:	2c c0       	rjmp	.+88     	; 0x246a <vfprintf+0xea>
    2412:	38 2f       	mov	r19, r24
    2414:	30 53       	subi	r19, 0x30	; 48
    2416:	3a 30       	cpi	r19, 0x0A	; 10
    2418:	98 f4       	brcc	.+38     	; 0x2440 <vfprintf+0xc0>
    241a:	26 ff       	sbrs	r18, 6
    241c:	08 c0       	rjmp	.+16     	; 0x242e <vfprintf+0xae>
    241e:	8e 2d       	mov	r24, r14
    2420:	88 0f       	add	r24, r24
    2422:	e8 2e       	mov	r14, r24
    2424:	ee 0c       	add	r14, r14
    2426:	ee 0c       	add	r14, r14
    2428:	e8 0e       	add	r14, r24
    242a:	e3 0e       	add	r14, r19
    242c:	15 c0       	rjmp	.+42     	; 0x2458 <vfprintf+0xd8>
    242e:	8f 2d       	mov	r24, r15
    2430:	88 0f       	add	r24, r24
    2432:	f8 2e       	mov	r15, r24
    2434:	ff 0c       	add	r15, r15
    2436:	ff 0c       	add	r15, r15
    2438:	f8 0e       	add	r15, r24
    243a:	f3 0e       	add	r15, r19
    243c:	20 62       	ori	r18, 0x20	; 32
    243e:	0c c0       	rjmp	.+24     	; 0x2458 <vfprintf+0xd8>
    2440:	8e 32       	cpi	r24, 0x2E	; 46
    2442:	21 f4       	brne	.+8      	; 0x244c <vfprintf+0xcc>
    2444:	26 fd       	sbrc	r18, 6
    2446:	78 c1       	rjmp	.+752    	; 0x2738 <vfprintf+0x3b8>
    2448:	20 64       	ori	r18, 0x40	; 64
    244a:	06 c0       	rjmp	.+12     	; 0x2458 <vfprintf+0xd8>
    244c:	8c 36       	cpi	r24, 0x6C	; 108
    244e:	11 f4       	brne	.+4      	; 0x2454 <vfprintf+0xd4>
    2450:	20 68       	ori	r18, 0x80	; 128
    2452:	02 c0       	rjmp	.+4      	; 0x2458 <vfprintf+0xd8>
    2454:	88 36       	cpi	r24, 0x68	; 104
    2456:	49 f4       	brne	.+18     	; 0x246a <vfprintf+0xea>
    2458:	f1 01       	movw	r30, r2
    245a:	93 fd       	sbrc	r25, 3
    245c:	85 91       	lpm	r24, Z+
    245e:	93 ff       	sbrs	r25, 3
    2460:	81 91       	ld	r24, Z+
    2462:	1f 01       	movw	r2, r30
    2464:	88 23       	and	r24, r24
    2466:	09 f0       	breq	.+2      	; 0x246a <vfprintf+0xea>
    2468:	ba cf       	rjmp	.-140    	; 0x23de <vfprintf+0x5e>
    246a:	98 2f       	mov	r25, r24
    246c:	95 54       	subi	r25, 0x45	; 69
    246e:	93 30       	cpi	r25, 0x03	; 3
    2470:	18 f0       	brcs	.+6      	; 0x2478 <vfprintf+0xf8>
    2472:	90 52       	subi	r25, 0x20	; 32
    2474:	93 30       	cpi	r25, 0x03	; 3
    2476:	28 f4       	brcc	.+10     	; 0x2482 <vfprintf+0x102>
    2478:	0c 5f       	subi	r16, 0xFC	; 252
    247a:	1f 4f       	sbci	r17, 0xFF	; 255
    247c:	ff e3       	ldi	r31, 0x3F	; 63
    247e:	f9 83       	std	Y+1, r31	; 0x01
    2480:	0d c0       	rjmp	.+26     	; 0x249c <vfprintf+0x11c>
    2482:	83 36       	cpi	r24, 0x63	; 99
    2484:	31 f0       	breq	.+12     	; 0x2492 <vfprintf+0x112>
    2486:	83 37       	cpi	r24, 0x73	; 115
    2488:	71 f0       	breq	.+28     	; 0x24a6 <vfprintf+0x126>
    248a:	83 35       	cpi	r24, 0x53	; 83
    248c:	09 f0       	breq	.+2      	; 0x2490 <vfprintf+0x110>
    248e:	60 c0       	rjmp	.+192    	; 0x2550 <vfprintf+0x1d0>
    2490:	22 c0       	rjmp	.+68     	; 0x24d6 <vfprintf+0x156>
    2492:	f8 01       	movw	r30, r16
    2494:	80 81       	ld	r24, Z
    2496:	89 83       	std	Y+1, r24	; 0x01
    2498:	0e 5f       	subi	r16, 0xFE	; 254
    249a:	1f 4f       	sbci	r17, 0xFF	; 255
    249c:	42 01       	movw	r8, r4
    249e:	71 e0       	ldi	r23, 0x01	; 1
    24a0:	a7 2e       	mov	r10, r23
    24a2:	b1 2c       	mov	r11, r1
    24a4:	16 c0       	rjmp	.+44     	; 0x24d2 <vfprintf+0x152>
    24a6:	62 e0       	ldi	r22, 0x02	; 2
    24a8:	66 2e       	mov	r6, r22
    24aa:	71 2c       	mov	r7, r1
    24ac:	60 0e       	add	r6, r16
    24ae:	71 1e       	adc	r7, r17
    24b0:	f8 01       	movw	r30, r16
    24b2:	80 80       	ld	r8, Z
    24b4:	91 80       	ldd	r9, Z+1	; 0x01
    24b6:	26 ff       	sbrs	r18, 6
    24b8:	03 c0       	rjmp	.+6      	; 0x24c0 <vfprintf+0x140>
    24ba:	6e 2d       	mov	r22, r14
    24bc:	70 e0       	ldi	r23, 0x00	; 0
    24be:	02 c0       	rjmp	.+4      	; 0x24c4 <vfprintf+0x144>
    24c0:	6f ef       	ldi	r22, 0xFF	; 255
    24c2:	7f ef       	ldi	r23, 0xFF	; 255
    24c4:	c4 01       	movw	r24, r8
    24c6:	2c 87       	std	Y+12, r18	; 0x0c
    24c8:	0e 94 b2 13 	call	0x2764	; 0x2764 <strnlen>
    24cc:	5c 01       	movw	r10, r24
    24ce:	83 01       	movw	r16, r6
    24d0:	2c 85       	ldd	r18, Y+12	; 0x0c
    24d2:	2f 77       	andi	r18, 0x7F	; 127
    24d4:	17 c0       	rjmp	.+46     	; 0x2504 <vfprintf+0x184>
    24d6:	52 e0       	ldi	r21, 0x02	; 2
    24d8:	65 2e       	mov	r6, r21
    24da:	71 2c       	mov	r7, r1
    24dc:	60 0e       	add	r6, r16
    24de:	71 1e       	adc	r7, r17
    24e0:	f8 01       	movw	r30, r16
    24e2:	80 80       	ld	r8, Z
    24e4:	91 80       	ldd	r9, Z+1	; 0x01
    24e6:	26 ff       	sbrs	r18, 6
    24e8:	03 c0       	rjmp	.+6      	; 0x24f0 <vfprintf+0x170>
    24ea:	6e 2d       	mov	r22, r14
    24ec:	70 e0       	ldi	r23, 0x00	; 0
    24ee:	02 c0       	rjmp	.+4      	; 0x24f4 <vfprintf+0x174>
    24f0:	6f ef       	ldi	r22, 0xFF	; 255
    24f2:	7f ef       	ldi	r23, 0xFF	; 255
    24f4:	c4 01       	movw	r24, r8
    24f6:	2c 87       	std	Y+12, r18	; 0x0c
    24f8:	0e 94 a7 13 	call	0x274e	; 0x274e <strnlen_P>
    24fc:	5c 01       	movw	r10, r24
    24fe:	2c 85       	ldd	r18, Y+12	; 0x0c
    2500:	20 68       	ori	r18, 0x80	; 128
    2502:	83 01       	movw	r16, r6
    2504:	23 fd       	sbrc	r18, 3
    2506:	20 c0       	rjmp	.+64     	; 0x2548 <vfprintf+0x1c8>
    2508:	08 c0       	rjmp	.+16     	; 0x251a <vfprintf+0x19a>
    250a:	80 e2       	ldi	r24, 0x20	; 32
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	b6 01       	movw	r22, r12
    2510:	2c 87       	std	Y+12, r18	; 0x0c
    2512:	0e 94 bd 13 	call	0x277a	; 0x277a <fputc>
    2516:	fa 94       	dec	r15
    2518:	2c 85       	ldd	r18, Y+12	; 0x0c
    251a:	8f 2d       	mov	r24, r15
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	a8 16       	cp	r10, r24
    2520:	b9 06       	cpc	r11, r25
    2522:	98 f3       	brcs	.-26     	; 0x250a <vfprintf+0x18a>
    2524:	11 c0       	rjmp	.+34     	; 0x2548 <vfprintf+0x1c8>
    2526:	f4 01       	movw	r30, r8
    2528:	27 fd       	sbrc	r18, 7
    252a:	85 91       	lpm	r24, Z+
    252c:	27 ff       	sbrs	r18, 7
    252e:	81 91       	ld	r24, Z+
    2530:	4f 01       	movw	r8, r30
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	b6 01       	movw	r22, r12
    2536:	2c 87       	std	Y+12, r18	; 0x0c
    2538:	0e 94 bd 13 	call	0x277a	; 0x277a <fputc>
    253c:	2c 85       	ldd	r18, Y+12	; 0x0c
    253e:	f1 10       	cpse	r15, r1
    2540:	fa 94       	dec	r15
    2542:	08 94       	sec
    2544:	a1 08       	sbc	r10, r1
    2546:	b1 08       	sbc	r11, r1
    2548:	a1 14       	cp	r10, r1
    254a:	b1 04       	cpc	r11, r1
    254c:	61 f7       	brne	.-40     	; 0x2526 <vfprintf+0x1a6>
    254e:	f1 c0       	rjmp	.+482    	; 0x2732 <vfprintf+0x3b2>
    2550:	84 36       	cpi	r24, 0x64	; 100
    2552:	11 f0       	breq	.+4      	; 0x2558 <vfprintf+0x1d8>
    2554:	89 36       	cpi	r24, 0x69	; 105
    2556:	49 f5       	brne	.+82     	; 0x25aa <vfprintf+0x22a>
    2558:	27 ff       	sbrs	r18, 7
    255a:	08 c0       	rjmp	.+16     	; 0x256c <vfprintf+0x1ec>
    255c:	f8 01       	movw	r30, r16
    255e:	60 81       	ld	r22, Z
    2560:	71 81       	ldd	r23, Z+1	; 0x01
    2562:	82 81       	ldd	r24, Z+2	; 0x02
    2564:	93 81       	ldd	r25, Z+3	; 0x03
    2566:	0c 5f       	subi	r16, 0xFC	; 252
    2568:	1f 4f       	sbci	r17, 0xFF	; 255
    256a:	09 c0       	rjmp	.+18     	; 0x257e <vfprintf+0x1fe>
    256c:	f8 01       	movw	r30, r16
    256e:	60 81       	ld	r22, Z
    2570:	71 81       	ldd	r23, Z+1	; 0x01
    2572:	88 27       	eor	r24, r24
    2574:	77 fd       	sbrc	r23, 7
    2576:	80 95       	com	r24
    2578:	98 2f       	mov	r25, r24
    257a:	0e 5f       	subi	r16, 0xFE	; 254
    257c:	1f 4f       	sbci	r17, 0xFF	; 255
    257e:	4f e6       	ldi	r20, 0x6F	; 111
    2580:	b4 2e       	mov	r11, r20
    2582:	b2 22       	and	r11, r18
    2584:	97 ff       	sbrs	r25, 7
    2586:	09 c0       	rjmp	.+18     	; 0x259a <vfprintf+0x21a>
    2588:	90 95       	com	r25
    258a:	80 95       	com	r24
    258c:	70 95       	com	r23
    258e:	61 95       	neg	r22
    2590:	7f 4f       	sbci	r23, 0xFF	; 255
    2592:	8f 4f       	sbci	r24, 0xFF	; 255
    2594:	9f 4f       	sbci	r25, 0xFF	; 255
    2596:	f0 e8       	ldi	r31, 0x80	; 128
    2598:	bf 2a       	or	r11, r31
    259a:	a2 01       	movw	r20, r4
    259c:	2a e0       	ldi	r18, 0x0A	; 10
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <__ultoa_invert>
    25a4:	78 2e       	mov	r7, r24
    25a6:	74 18       	sub	r7, r4
    25a8:	45 c0       	rjmp	.+138    	; 0x2634 <vfprintf+0x2b4>
    25aa:	85 37       	cpi	r24, 0x75	; 117
    25ac:	31 f4       	brne	.+12     	; 0x25ba <vfprintf+0x23a>
    25ae:	3f ee       	ldi	r19, 0xEF	; 239
    25b0:	b3 2e       	mov	r11, r19
    25b2:	b2 22       	and	r11, r18
    25b4:	2a e0       	ldi	r18, 0x0A	; 10
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	25 c0       	rjmp	.+74     	; 0x2604 <vfprintf+0x284>
    25ba:	99 ef       	ldi	r25, 0xF9	; 249
    25bc:	b9 2e       	mov	r11, r25
    25be:	b2 22       	and	r11, r18
    25c0:	8f 36       	cpi	r24, 0x6F	; 111
    25c2:	c1 f0       	breq	.+48     	; 0x25f4 <vfprintf+0x274>
    25c4:	80 37       	cpi	r24, 0x70	; 112
    25c6:	20 f4       	brcc	.+8      	; 0x25d0 <vfprintf+0x250>
    25c8:	88 35       	cpi	r24, 0x58	; 88
    25ca:	09 f0       	breq	.+2      	; 0x25ce <vfprintf+0x24e>
    25cc:	b5 c0       	rjmp	.+362    	; 0x2738 <vfprintf+0x3b8>
    25ce:	0d c0       	rjmp	.+26     	; 0x25ea <vfprintf+0x26a>
    25d0:	80 37       	cpi	r24, 0x70	; 112
    25d2:	21 f0       	breq	.+8      	; 0x25dc <vfprintf+0x25c>
    25d4:	88 37       	cpi	r24, 0x78	; 120
    25d6:	09 f0       	breq	.+2      	; 0x25da <vfprintf+0x25a>
    25d8:	af c0       	rjmp	.+350    	; 0x2738 <vfprintf+0x3b8>
    25da:	02 c0       	rjmp	.+4      	; 0x25e0 <vfprintf+0x260>
    25dc:	20 e1       	ldi	r18, 0x10	; 16
    25de:	b2 2a       	or	r11, r18
    25e0:	b4 fe       	sbrs	r11, 4
    25e2:	0b c0       	rjmp	.+22     	; 0x25fa <vfprintf+0x27a>
    25e4:	84 e0       	ldi	r24, 0x04	; 4
    25e6:	b8 2a       	or	r11, r24
    25e8:	08 c0       	rjmp	.+16     	; 0x25fa <vfprintf+0x27a>
    25ea:	b4 fe       	sbrs	r11, 4
    25ec:	09 c0       	rjmp	.+18     	; 0x2600 <vfprintf+0x280>
    25ee:	e6 e0       	ldi	r30, 0x06	; 6
    25f0:	be 2a       	or	r11, r30
    25f2:	06 c0       	rjmp	.+12     	; 0x2600 <vfprintf+0x280>
    25f4:	28 e0       	ldi	r18, 0x08	; 8
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	05 c0       	rjmp	.+10     	; 0x2604 <vfprintf+0x284>
    25fa:	20 e1       	ldi	r18, 0x10	; 16
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	02 c0       	rjmp	.+4      	; 0x2604 <vfprintf+0x284>
    2600:	20 e1       	ldi	r18, 0x10	; 16
    2602:	32 e0       	ldi	r19, 0x02	; 2
    2604:	b7 fe       	sbrs	r11, 7
    2606:	08 c0       	rjmp	.+16     	; 0x2618 <vfprintf+0x298>
    2608:	f8 01       	movw	r30, r16
    260a:	60 81       	ld	r22, Z
    260c:	71 81       	ldd	r23, Z+1	; 0x01
    260e:	82 81       	ldd	r24, Z+2	; 0x02
    2610:	93 81       	ldd	r25, Z+3	; 0x03
    2612:	0c 5f       	subi	r16, 0xFC	; 252
    2614:	1f 4f       	sbci	r17, 0xFF	; 255
    2616:	07 c0       	rjmp	.+14     	; 0x2626 <vfprintf+0x2a6>
    2618:	f8 01       	movw	r30, r16
    261a:	60 81       	ld	r22, Z
    261c:	71 81       	ldd	r23, Z+1	; 0x01
    261e:	80 e0       	ldi	r24, 0x00	; 0
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	0e 5f       	subi	r16, 0xFE	; 254
    2624:	1f 4f       	sbci	r17, 0xFF	; 255
    2626:	a2 01       	movw	r20, r4
    2628:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <__ultoa_invert>
    262c:	78 2e       	mov	r7, r24
    262e:	74 18       	sub	r7, r4
    2630:	ff e7       	ldi	r31, 0x7F	; 127
    2632:	bf 22       	and	r11, r31
    2634:	b6 fe       	sbrs	r11, 6
    2636:	0b c0       	rjmp	.+22     	; 0x264e <vfprintf+0x2ce>
    2638:	2e ef       	ldi	r18, 0xFE	; 254
    263a:	b2 22       	and	r11, r18
    263c:	7e 14       	cp	r7, r14
    263e:	38 f4       	brcc	.+14     	; 0x264e <vfprintf+0x2ce>
    2640:	b4 fe       	sbrs	r11, 4
    2642:	07 c0       	rjmp	.+14     	; 0x2652 <vfprintf+0x2d2>
    2644:	b2 fc       	sbrc	r11, 2
    2646:	05 c0       	rjmp	.+10     	; 0x2652 <vfprintf+0x2d2>
    2648:	8f ee       	ldi	r24, 0xEF	; 239
    264a:	b8 22       	and	r11, r24
    264c:	02 c0       	rjmp	.+4      	; 0x2652 <vfprintf+0x2d2>
    264e:	a7 2c       	mov	r10, r7
    2650:	01 c0       	rjmp	.+2      	; 0x2654 <vfprintf+0x2d4>
    2652:	ae 2c       	mov	r10, r14
    2654:	8b 2d       	mov	r24, r11
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	b4 fe       	sbrs	r11, 4
    265a:	0d c0       	rjmp	.+26     	; 0x2676 <vfprintf+0x2f6>
    265c:	fe 01       	movw	r30, r28
    265e:	e7 0d       	add	r30, r7
    2660:	f1 1d       	adc	r31, r1
    2662:	20 81       	ld	r18, Z
    2664:	20 33       	cpi	r18, 0x30	; 48
    2666:	19 f4       	brne	.+6      	; 0x266e <vfprintf+0x2ee>
    2668:	e9 ee       	ldi	r30, 0xE9	; 233
    266a:	be 22       	and	r11, r30
    266c:	09 c0       	rjmp	.+18     	; 0x2680 <vfprintf+0x300>
    266e:	a3 94       	inc	r10
    2670:	b2 fe       	sbrs	r11, 2
    2672:	06 c0       	rjmp	.+12     	; 0x2680 <vfprintf+0x300>
    2674:	04 c0       	rjmp	.+8      	; 0x267e <vfprintf+0x2fe>
    2676:	86 78       	andi	r24, 0x86	; 134
    2678:	90 70       	andi	r25, 0x00	; 0
    267a:	00 97       	sbiw	r24, 0x00	; 0
    267c:	09 f0       	breq	.+2      	; 0x2680 <vfprintf+0x300>
    267e:	a3 94       	inc	r10
    2680:	8b 2c       	mov	r8, r11
    2682:	99 24       	eor	r9, r9
    2684:	b3 fc       	sbrc	r11, 3
    2686:	14 c0       	rjmp	.+40     	; 0x26b0 <vfprintf+0x330>
    2688:	b0 fe       	sbrs	r11, 0
    268a:	0f c0       	rjmp	.+30     	; 0x26aa <vfprintf+0x32a>
    268c:	af 14       	cp	r10, r15
    268e:	28 f4       	brcc	.+10     	; 0x269a <vfprintf+0x31a>
    2690:	e7 2c       	mov	r14, r7
    2692:	ef 0c       	add	r14, r15
    2694:	ea 18       	sub	r14, r10
    2696:	af 2c       	mov	r10, r15
    2698:	08 c0       	rjmp	.+16     	; 0x26aa <vfprintf+0x32a>
    269a:	e7 2c       	mov	r14, r7
    269c:	06 c0       	rjmp	.+12     	; 0x26aa <vfprintf+0x32a>
    269e:	80 e2       	ldi	r24, 0x20	; 32
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	b6 01       	movw	r22, r12
    26a4:	0e 94 bd 13 	call	0x277a	; 0x277a <fputc>
    26a8:	a3 94       	inc	r10
    26aa:	af 14       	cp	r10, r15
    26ac:	c0 f3       	brcs	.-16     	; 0x269e <vfprintf+0x31e>
    26ae:	04 c0       	rjmp	.+8      	; 0x26b8 <vfprintf+0x338>
    26b0:	af 14       	cp	r10, r15
    26b2:	10 f4       	brcc	.+4      	; 0x26b8 <vfprintf+0x338>
    26b4:	fa 18       	sub	r15, r10
    26b6:	01 c0       	rjmp	.+2      	; 0x26ba <vfprintf+0x33a>
    26b8:	ff 24       	eor	r15, r15
    26ba:	84 fe       	sbrs	r8, 4
    26bc:	0f c0       	rjmp	.+30     	; 0x26dc <vfprintf+0x35c>
    26be:	80 e3       	ldi	r24, 0x30	; 48
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	b6 01       	movw	r22, r12
    26c4:	0e 94 bd 13 	call	0x277a	; 0x277a <fputc>
    26c8:	82 fe       	sbrs	r8, 2
    26ca:	1f c0       	rjmp	.+62     	; 0x270a <vfprintf+0x38a>
    26cc:	81 fe       	sbrs	r8, 1
    26ce:	03 c0       	rjmp	.+6      	; 0x26d6 <vfprintf+0x356>
    26d0:	88 e5       	ldi	r24, 0x58	; 88
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	10 c0       	rjmp	.+32     	; 0x26f6 <vfprintf+0x376>
    26d6:	88 e7       	ldi	r24, 0x78	; 120
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	0d c0       	rjmp	.+26     	; 0x26f6 <vfprintf+0x376>
    26dc:	c4 01       	movw	r24, r8
    26de:	86 78       	andi	r24, 0x86	; 134
    26e0:	90 70       	andi	r25, 0x00	; 0
    26e2:	00 97       	sbiw	r24, 0x00	; 0
    26e4:	91 f0       	breq	.+36     	; 0x270a <vfprintf+0x38a>
    26e6:	81 fc       	sbrc	r8, 1
    26e8:	02 c0       	rjmp	.+4      	; 0x26ee <vfprintf+0x36e>
    26ea:	80 e2       	ldi	r24, 0x20	; 32
    26ec:	01 c0       	rjmp	.+2      	; 0x26f0 <vfprintf+0x370>
    26ee:	8b e2       	ldi	r24, 0x2B	; 43
    26f0:	b7 fc       	sbrc	r11, 7
    26f2:	8d e2       	ldi	r24, 0x2D	; 45
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	b6 01       	movw	r22, r12
    26f8:	0e 94 bd 13 	call	0x277a	; 0x277a <fputc>
    26fc:	06 c0       	rjmp	.+12     	; 0x270a <vfprintf+0x38a>
    26fe:	80 e3       	ldi	r24, 0x30	; 48
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	b6 01       	movw	r22, r12
    2704:	0e 94 bd 13 	call	0x277a	; 0x277a <fputc>
    2708:	ea 94       	dec	r14
    270a:	7e 14       	cp	r7, r14
    270c:	c0 f3       	brcs	.-16     	; 0x26fe <vfprintf+0x37e>
    270e:	7a 94       	dec	r7
    2710:	f2 01       	movw	r30, r4
    2712:	e7 0d       	add	r30, r7
    2714:	f1 1d       	adc	r31, r1
    2716:	80 81       	ld	r24, Z
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	b6 01       	movw	r22, r12
    271c:	0e 94 bd 13 	call	0x277a	; 0x277a <fputc>
    2720:	77 20       	and	r7, r7
    2722:	a9 f7       	brne	.-22     	; 0x270e <vfprintf+0x38e>
    2724:	06 c0       	rjmp	.+12     	; 0x2732 <vfprintf+0x3b2>
    2726:	80 e2       	ldi	r24, 0x20	; 32
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	b6 01       	movw	r22, r12
    272c:	0e 94 bd 13 	call	0x277a	; 0x277a <fputc>
    2730:	fa 94       	dec	r15
    2732:	ff 20       	and	r15, r15
    2734:	c1 f7       	brne	.-16     	; 0x2726 <vfprintf+0x3a6>
    2736:	37 ce       	rjmp	.-914    	; 0x23a6 <vfprintf+0x26>
    2738:	f6 01       	movw	r30, r12
    273a:	26 81       	ldd	r18, Z+6	; 0x06
    273c:	37 81       	ldd	r19, Z+7	; 0x07
    273e:	02 c0       	rjmp	.+4      	; 0x2744 <vfprintf+0x3c4>
    2740:	2f ef       	ldi	r18, 0xFF	; 255
    2742:	3f ef       	ldi	r19, 0xFF	; 255
    2744:	c9 01       	movw	r24, r18
    2746:	2c 96       	adiw	r28, 0x0c	; 12
    2748:	e2 e1       	ldi	r30, 0x12	; 18
    274a:	0c 94 1b 10 	jmp	0x2036	; 0x2036 <__epilogue_restores__>

0000274e <strnlen_P>:
    274e:	fc 01       	movw	r30, r24
    2750:	05 90       	lpm	r0, Z+
    2752:	61 50       	subi	r22, 0x01	; 1
    2754:	70 40       	sbci	r23, 0x00	; 0
    2756:	01 10       	cpse	r0, r1
    2758:	d8 f7       	brcc	.-10     	; 0x2750 <strnlen_P+0x2>
    275a:	80 95       	com	r24
    275c:	90 95       	com	r25
    275e:	8e 0f       	add	r24, r30
    2760:	9f 1f       	adc	r25, r31
    2762:	08 95       	ret

00002764 <strnlen>:
    2764:	fc 01       	movw	r30, r24
    2766:	61 50       	subi	r22, 0x01	; 1
    2768:	70 40       	sbci	r23, 0x00	; 0
    276a:	01 90       	ld	r0, Z+
    276c:	01 10       	cpse	r0, r1
    276e:	d8 f7       	brcc	.-10     	; 0x2766 <strnlen+0x2>
    2770:	80 95       	com	r24
    2772:	90 95       	com	r25
    2774:	8e 0f       	add	r24, r30
    2776:	9f 1f       	adc	r25, r31
    2778:	08 95       	ret

0000277a <fputc>:
    277a:	0f 93       	push	r16
    277c:	1f 93       	push	r17
    277e:	cf 93       	push	r28
    2780:	df 93       	push	r29
    2782:	8c 01       	movw	r16, r24
    2784:	eb 01       	movw	r28, r22
    2786:	8b 81       	ldd	r24, Y+3	; 0x03
    2788:	81 ff       	sbrs	r24, 1
    278a:	1b c0       	rjmp	.+54     	; 0x27c2 <fputc+0x48>
    278c:	82 ff       	sbrs	r24, 2
    278e:	0d c0       	rjmp	.+26     	; 0x27aa <fputc+0x30>
    2790:	2e 81       	ldd	r18, Y+6	; 0x06
    2792:	3f 81       	ldd	r19, Y+7	; 0x07
    2794:	8c 81       	ldd	r24, Y+4	; 0x04
    2796:	9d 81       	ldd	r25, Y+5	; 0x05
    2798:	28 17       	cp	r18, r24
    279a:	39 07       	cpc	r19, r25
    279c:	64 f4       	brge	.+24     	; 0x27b6 <fputc+0x3c>
    279e:	e8 81       	ld	r30, Y
    27a0:	f9 81       	ldd	r31, Y+1	; 0x01
    27a2:	01 93       	st	Z+, r16
    27a4:	f9 83       	std	Y+1, r31	; 0x01
    27a6:	e8 83       	st	Y, r30
    27a8:	06 c0       	rjmp	.+12     	; 0x27b6 <fputc+0x3c>
    27aa:	e8 85       	ldd	r30, Y+8	; 0x08
    27ac:	f9 85       	ldd	r31, Y+9	; 0x09
    27ae:	80 2f       	mov	r24, r16
    27b0:	09 95       	icall
    27b2:	00 97       	sbiw	r24, 0x00	; 0
    27b4:	31 f4       	brne	.+12     	; 0x27c2 <fputc+0x48>
    27b6:	8e 81       	ldd	r24, Y+6	; 0x06
    27b8:	9f 81       	ldd	r25, Y+7	; 0x07
    27ba:	01 96       	adiw	r24, 0x01	; 1
    27bc:	9f 83       	std	Y+7, r25	; 0x07
    27be:	8e 83       	std	Y+6, r24	; 0x06
    27c0:	02 c0       	rjmp	.+4      	; 0x27c6 <fputc+0x4c>
    27c2:	0f ef       	ldi	r16, 0xFF	; 255
    27c4:	1f ef       	ldi	r17, 0xFF	; 255
    27c6:	c8 01       	movw	r24, r16
    27c8:	df 91       	pop	r29
    27ca:	cf 91       	pop	r28
    27cc:	1f 91       	pop	r17
    27ce:	0f 91       	pop	r16
    27d0:	08 95       	ret

000027d2 <__ultoa_invert>:
    27d2:	fa 01       	movw	r30, r20
    27d4:	aa 27       	eor	r26, r26
    27d6:	28 30       	cpi	r18, 0x08	; 8
    27d8:	51 f1       	breq	.+84     	; 0x282e <__ultoa_invert+0x5c>
    27da:	20 31       	cpi	r18, 0x10	; 16
    27dc:	81 f1       	breq	.+96     	; 0x283e <__ultoa_invert+0x6c>
    27de:	e8 94       	clt
    27e0:	6f 93       	push	r22
    27e2:	6e 7f       	andi	r22, 0xFE	; 254
    27e4:	6e 5f       	subi	r22, 0xFE	; 254
    27e6:	7f 4f       	sbci	r23, 0xFF	; 255
    27e8:	8f 4f       	sbci	r24, 0xFF	; 255
    27ea:	9f 4f       	sbci	r25, 0xFF	; 255
    27ec:	af 4f       	sbci	r26, 0xFF	; 255
    27ee:	b1 e0       	ldi	r27, 0x01	; 1
    27f0:	3e d0       	rcall	.+124    	; 0x286e <__ultoa_invert+0x9c>
    27f2:	b4 e0       	ldi	r27, 0x04	; 4
    27f4:	3c d0       	rcall	.+120    	; 0x286e <__ultoa_invert+0x9c>
    27f6:	67 0f       	add	r22, r23
    27f8:	78 1f       	adc	r23, r24
    27fa:	89 1f       	adc	r24, r25
    27fc:	9a 1f       	adc	r25, r26
    27fe:	a1 1d       	adc	r26, r1
    2800:	68 0f       	add	r22, r24
    2802:	79 1f       	adc	r23, r25
    2804:	8a 1f       	adc	r24, r26
    2806:	91 1d       	adc	r25, r1
    2808:	a1 1d       	adc	r26, r1
    280a:	6a 0f       	add	r22, r26
    280c:	71 1d       	adc	r23, r1
    280e:	81 1d       	adc	r24, r1
    2810:	91 1d       	adc	r25, r1
    2812:	a1 1d       	adc	r26, r1
    2814:	20 d0       	rcall	.+64     	; 0x2856 <__ultoa_invert+0x84>
    2816:	09 f4       	brne	.+2      	; 0x281a <__ultoa_invert+0x48>
    2818:	68 94       	set
    281a:	3f 91       	pop	r19
    281c:	2a e0       	ldi	r18, 0x0A	; 10
    281e:	26 9f       	mul	r18, r22
    2820:	11 24       	eor	r1, r1
    2822:	30 19       	sub	r19, r0
    2824:	30 5d       	subi	r19, 0xD0	; 208
    2826:	31 93       	st	Z+, r19
    2828:	de f6       	brtc	.-74     	; 0x27e0 <__ultoa_invert+0xe>
    282a:	cf 01       	movw	r24, r30
    282c:	08 95       	ret
    282e:	46 2f       	mov	r20, r22
    2830:	47 70       	andi	r20, 0x07	; 7
    2832:	40 5d       	subi	r20, 0xD0	; 208
    2834:	41 93       	st	Z+, r20
    2836:	b3 e0       	ldi	r27, 0x03	; 3
    2838:	0f d0       	rcall	.+30     	; 0x2858 <__ultoa_invert+0x86>
    283a:	c9 f7       	brne	.-14     	; 0x282e <__ultoa_invert+0x5c>
    283c:	f6 cf       	rjmp	.-20     	; 0x282a <__ultoa_invert+0x58>
    283e:	46 2f       	mov	r20, r22
    2840:	4f 70       	andi	r20, 0x0F	; 15
    2842:	40 5d       	subi	r20, 0xD0	; 208
    2844:	4a 33       	cpi	r20, 0x3A	; 58
    2846:	18 f0       	brcs	.+6      	; 0x284e <__ultoa_invert+0x7c>
    2848:	49 5d       	subi	r20, 0xD9	; 217
    284a:	31 fd       	sbrc	r19, 1
    284c:	40 52       	subi	r20, 0x20	; 32
    284e:	41 93       	st	Z+, r20
    2850:	02 d0       	rcall	.+4      	; 0x2856 <__ultoa_invert+0x84>
    2852:	a9 f7       	brne	.-22     	; 0x283e <__ultoa_invert+0x6c>
    2854:	ea cf       	rjmp	.-44     	; 0x282a <__ultoa_invert+0x58>
    2856:	b4 e0       	ldi	r27, 0x04	; 4
    2858:	a6 95       	lsr	r26
    285a:	97 95       	ror	r25
    285c:	87 95       	ror	r24
    285e:	77 95       	ror	r23
    2860:	67 95       	ror	r22
    2862:	ba 95       	dec	r27
    2864:	c9 f7       	brne	.-14     	; 0x2858 <__ultoa_invert+0x86>
    2866:	00 97       	sbiw	r24, 0x00	; 0
    2868:	61 05       	cpc	r22, r1
    286a:	71 05       	cpc	r23, r1
    286c:	08 95       	ret
    286e:	9b 01       	movw	r18, r22
    2870:	ac 01       	movw	r20, r24
    2872:	0a 2e       	mov	r0, r26
    2874:	06 94       	lsr	r0
    2876:	57 95       	ror	r21
    2878:	47 95       	ror	r20
    287a:	37 95       	ror	r19
    287c:	27 95       	ror	r18
    287e:	ba 95       	dec	r27
    2880:	c9 f7       	brne	.-14     	; 0x2874 <__ultoa_invert+0xa2>
    2882:	62 0f       	add	r22, r18
    2884:	73 1f       	adc	r23, r19
    2886:	84 1f       	adc	r24, r20
    2888:	95 1f       	adc	r25, r21
    288a:	a0 1d       	adc	r26, r0
    288c:	08 95       	ret

0000288e <_exit>:
    288e:	f8 94       	cli

00002890 <__stop_program>:
    2890:	ff cf       	rjmp	.-2      	; 0x2890 <__stop_program>
