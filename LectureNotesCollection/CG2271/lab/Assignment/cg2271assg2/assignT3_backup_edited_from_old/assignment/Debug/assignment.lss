
assignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00002970  00002a04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002970  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000522  0080011a  0080011a  00002a1e  2**0
                  ALLOC
  3 .stab         00000d74  00000000  00000000  00002a20  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000027a  00000000  00000000  00003794  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000268  00000000  00000000  00003a0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000529  00000000  00000000  00003c76  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000032f0  00000000  00000000  0000419f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001890  00000000  00000000  0000748f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002d04  00000000  00000000  00008d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000410  00000000  00000000  0000ba24  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000009da  00000000  00000000  0000be34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000015fb  00000000  00000000  0000c80e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000760  00000000  00000000  0000de09  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000a0  00000000  00000000  0000e569  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 a1 08 	jmp	0x1142	; 0x1142 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 ca 09 	jmp	0x1394	; 0x1394 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 6f 09 	jmp	0x12de	; 0x12de <__vector_20>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 e7       	ldi	r30, 0x70	; 112
      7c:	f9 e2       	ldi	r31, 0x29	; 41
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 31       	cpi	r26, 0x1A	; 26
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	16 e0       	ldi	r17, 0x06	; 6
      8c:	aa e1       	ldi	r26, 0x1A	; 26
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ac 33       	cpi	r26, 0x3C	; 60
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 ae 01 	call	0x35c	; 0x35c <main>
      9e:	0c 94 b6 14 	jmp	0x296c	; 0x296c <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <task1>:
// Tasks 1 and 2 will increment a global variable ctr, and every 10 increments task 1 will send the resulting value in ctr to task3 via a queue.
// Task 3 will then send it via serial to the PC. 

// In addition, do something fun and creative with this program, the serial port and the components you have. Describe it in your report. :)
void task1(void *p)
{
      a6:	df 93       	push	r29
      a8:	cf 93       	push	r28
      aa:	00 d0       	rcall	.+0      	; 0xac <task1+0x6>
      ac:	cd b7       	in	r28, 0x3d	; 61
      ae:	de b7       	in	r29, 0x3e	; 62
      b0:	9a 83       	std	Y+2, r25	; 0x02
      b2:	89 83       	std	Y+1, r24	; 0x01
	while(1)
	{
		enterCritical();
      b4:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <enterCritical>
		variable++;
      b8:	80 91 1a 01 	lds	r24, 0x011A
      bc:	90 91 1b 01 	lds	r25, 0x011B
      c0:	01 96       	adiw	r24, 0x01	; 1
      c2:	90 93 1b 01 	sts	0x011B, r25
      c6:	80 93 1a 01 	sts	0x011A, r24
		if(variable % 10 == 0){
      ca:	80 91 1a 01 	lds	r24, 0x011A
      ce:	90 91 1b 01 	lds	r25, 0x011B
      d2:	2a e0       	ldi	r18, 0x0A	; 10
      d4:	30 e0       	ldi	r19, 0x00	; 0
      d6:	b9 01       	movw	r22, r18
      d8:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <__divmodhi4>
      dc:	00 97       	sbiw	r24, 0x00	; 0
      de:	51 f4       	brne	.+20     	; 0xf4 <task1+0x4e>
			//PORTD ^= 0b10000000;
			OSenq(queue,&variable);
      e0:	80 91 60 01 	lds	r24, 0x0160
      e4:	90 91 61 01 	lds	r25, 0x0161
      e8:	2a e1       	ldi	r18, 0x1A	; 26
      ea:	31 e0       	ldi	r19, 0x01	; 1
      ec:	b9 01       	movw	r22, r18
      ee:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <OSenq>
      f2:	0c c0       	rjmp	.+24     	; 0x10c <task1+0x66>
		} else if(variable == MAXINT){
      f4:	80 91 1a 01 	lds	r24, 0x011A
      f8:	90 91 1b 01 	lds	r25, 0x011B
      fc:	25 e7       	ldi	r18, 0x75	; 117
      fe:	85 33       	cpi	r24, 0x35	; 53
     100:	92 07       	cpc	r25, r18
     102:	21 f4       	brne	.+8      	; 0x10c <task1+0x66>
			variable = 0;
     104:	10 92 1b 01 	sts	0x011B, r1
     108:	10 92 1a 01 	sts	0x011A, r1
		}
		
		leaveCritical();
     10c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <leaveCritical>
	}
     110:	d1 cf       	rjmp	.-94     	; 0xb4 <task1+0xe>

00000112 <task2>:
}

void task2(void *p)
{
     112:	df 93       	push	r29
     114:	cf 93       	push	r28
     116:	00 d0       	rcall	.+0      	; 0x118 <task2+0x6>
     118:	cd b7       	in	r28, 0x3d	; 61
     11a:	de b7       	in	r29, 0x3e	; 62
     11c:	9a 83       	std	Y+2, r25	; 0x02
     11e:	89 83       	std	Y+1, r24	; 0x01
	while(1)
	{
		enterCritical();
     120:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <enterCritical>
		variable++;
     124:	80 91 1a 01 	lds	r24, 0x011A
     128:	90 91 1b 01 	lds	r25, 0x011B
     12c:	01 96       	adiw	r24, 0x01	; 1
     12e:	90 93 1b 01 	sts	0x011B, r25
     132:	80 93 1a 01 	sts	0x011A, r24
		if(variable % 10 == 0){
     136:	80 91 1a 01 	lds	r24, 0x011A
     13a:	90 91 1b 01 	lds	r25, 0x011B
     13e:	2a e0       	ldi	r18, 0x0A	; 10
     140:	30 e0       	ldi	r19, 0x00	; 0
     142:	b9 01       	movw	r22, r18
     144:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <__divmodhi4>
     148:	00 97       	sbiw	r24, 0x00	; 0
     14a:	51 f4       	brne	.+20     	; 0x160 <task2+0x4e>
			//PORTD ^= 0b01000000;
			OSenq(queue,&variable);
     14c:	80 91 60 01 	lds	r24, 0x0160
     150:	90 91 61 01 	lds	r25, 0x0161
     154:	2a e1       	ldi	r18, 0x1A	; 26
     156:	31 e0       	ldi	r19, 0x01	; 1
     158:	b9 01       	movw	r22, r18
     15a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <OSenq>
     15e:	0c c0       	rjmp	.+24     	; 0x178 <task2+0x66>
		} else if(variable == MAXINT){	// avoid overflow
     160:	80 91 1a 01 	lds	r24, 0x011A
     164:	90 91 1b 01 	lds	r25, 0x011B
     168:	25 e7       	ldi	r18, 0x75	; 117
     16a:	85 33       	cpi	r24, 0x35	; 53
     16c:	92 07       	cpc	r25, r18
     16e:	21 f4       	brne	.+8      	; 0x178 <task2+0x66>
			variable = 0;
     170:	10 92 1b 01 	sts	0x011B, r1
     174:	10 92 1a 01 	sts	0x011A, r1
		}
		
		leaveCritical();
     178:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <leaveCritical>
	}
     17c:	d1 cf       	rjmp	.-94     	; 0x120 <task2+0xe>

0000017e <task3>:
}

void task3(void *p)
{
     17e:	0f 93       	push	r16
     180:	1f 93       	push	r17
     182:	df 93       	push	r29
     184:	cf 93       	push	r28
     186:	cd b7       	in	r28, 0x3d	; 61
     188:	de b7       	in	r29, 0x3e	; 62
     18a:	64 97       	sbiw	r28, 0x14	; 20
     18c:	0f b6       	in	r0, 0x3f	; 63
     18e:	f8 94       	cli
     190:	de bf       	out	0x3e, r29	; 62
     192:	0f be       	out	0x3f, r0	; 63
     194:	cd bf       	out	0x3d, r28	; 61
     196:	9c 8b       	std	Y+20, r25	; 0x14
     198:	8b 8b       	std	Y+19, r24	; 0x13
     19a:	01 c0       	rjmp	.+2      	; 0x19e <task3+0x20>
			say(sayBuf);
			_delay_ms(20);
			leaveCritical();
			//PORTD ^= 0b00100000;
		}
	}
     19c:	00 00       	nop
{
	void *addr;
	int res,i;
	while(1)
	{
		if(queue->size > 0){
     19e:	80 91 60 01 	lds	r24, 0x0160
     1a2:	90 91 61 01 	lds	r25, 0x0161
     1a6:	fc 01       	movw	r30, r24
     1a8:	86 81       	ldd	r24, Z+6	; 0x06
     1aa:	97 81       	ldd	r25, Z+7	; 0x07
     1ac:	18 16       	cp	r1, r24
     1ae:	19 06       	cpc	r1, r25
     1b0:	ac f7       	brge	.-22     	; 0x19c <task3+0x1e>
			enterCritical();
     1b2:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <enterCritical>
			addr = OSdeq(queue);
     1b6:	80 91 60 01 	lds	r24, 0x0160
     1ba:	90 91 61 01 	lds	r25, 0x0161
     1be:	0e 94 8d 05 	call	0xb1a	; 0xb1a <OSdeq>
     1c2:	9a 83       	std	Y+2, r25	; 0x02
     1c4:	89 83       	std	Y+1, r24	; 0x01
			res = *(int*)addr;
     1c6:	89 81       	ldd	r24, Y+1	; 0x01
     1c8:	9a 81       	ldd	r25, Y+2	; 0x02
     1ca:	fc 01       	movw	r30, r24
     1cc:	80 81       	ld	r24, Z
     1ce:	91 81       	ldd	r25, Z+1	; 0x01
     1d0:	9c 83       	std	Y+4, r25	; 0x04
     1d2:	8b 83       	std	Y+3, r24	; 0x03
			
			sprintf(sayBuf,"r:%d \n\r",res);
     1d4:	00 d0       	rcall	.+0      	; 0x1d6 <task3+0x58>
     1d6:	00 d0       	rcall	.+0      	; 0x1d8 <task3+0x5a>
     1d8:	00 d0       	rcall	.+0      	; 0x1da <task3+0x5c>
     1da:	8d b7       	in	r24, 0x3d	; 61
     1dc:	9e b7       	in	r25, 0x3e	; 62
     1de:	01 96       	adiw	r24, 0x01	; 1
     1e0:	20 e2       	ldi	r18, 0x20	; 32
     1e2:	31 e0       	ldi	r19, 0x01	; 1
     1e4:	fc 01       	movw	r30, r24
     1e6:	31 83       	std	Z+1, r19	; 0x01
     1e8:	20 83       	st	Z, r18
     1ea:	20 e0       	ldi	r18, 0x00	; 0
     1ec:	31 e0       	ldi	r19, 0x01	; 1
     1ee:	fc 01       	movw	r30, r24
     1f0:	33 83       	std	Z+3, r19	; 0x03
     1f2:	22 83       	std	Z+2, r18	; 0x02
     1f4:	2b 81       	ldd	r18, Y+3	; 0x03
     1f6:	3c 81       	ldd	r19, Y+4	; 0x04
     1f8:	fc 01       	movw	r30, r24
     1fa:	35 83       	std	Z+5, r19	; 0x05
     1fc:	24 83       	std	Z+4, r18	; 0x04
     1fe:	0e 94 0c 12 	call	0x2418	; 0x2418 <sprintf>
     202:	8d b7       	in	r24, 0x3d	; 61
     204:	9e b7       	in	r25, 0x3e	; 62
     206:	06 96       	adiw	r24, 0x06	; 6
     208:	0f b6       	in	r0, 0x3f	; 63
     20a:	f8 94       	cli
     20c:	9e bf       	out	0x3e, r25	; 62
     20e:	0f be       	out	0x3f, r0	; 63
     210:	8d bf       	out	0x3d, r24	; 61
			say(sayBuf);
     212:	80 e2       	ldi	r24, 0x20	; 32
     214:	91 e0       	ldi	r25, 0x01	; 1
     216:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <say>
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	a0 ea       	ldi	r26, 0xA0	; 160
     220:	b1 e4       	ldi	r27, 0x41	; 65
     222:	8d 83       	std	Y+5, r24	; 0x05
     224:	9e 83       	std	Y+6, r25	; 0x06
     226:	af 83       	std	Y+7, r26	; 0x07
     228:	b8 87       	std	Y+8, r27	; 0x08
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     22a:	6d 81       	ldd	r22, Y+5	; 0x05
     22c:	7e 81       	ldd	r23, Y+6	; 0x06
     22e:	8f 81       	ldd	r24, Y+7	; 0x07
     230:	98 85       	ldd	r25, Y+8	; 0x08
     232:	20 e0       	ldi	r18, 0x00	; 0
     234:	30 e0       	ldi	r19, 0x00	; 0
     236:	4a e7       	ldi	r20, 0x7A	; 122
     238:	55 e4       	ldi	r21, 0x45	; 69
     23a:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__mulsf3>
     23e:	dc 01       	movw	r26, r24
     240:	cb 01       	movw	r24, r22
     242:	89 87       	std	Y+9, r24	; 0x09
     244:	9a 87       	std	Y+10, r25	; 0x0a
     246:	ab 87       	std	Y+11, r26	; 0x0b
     248:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     24a:	11 e0       	ldi	r17, 0x01	; 1
     24c:	69 85       	ldd	r22, Y+9	; 0x09
     24e:	7a 85       	ldd	r23, Y+10	; 0x0a
     250:	8b 85       	ldd	r24, Y+11	; 0x0b
     252:	9c 85       	ldd	r25, Y+12	; 0x0c
     254:	20 e0       	ldi	r18, 0x00	; 0
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	40 e8       	ldi	r20, 0x80	; 128
     25a:	5f e3       	ldi	r21, 0x3F	; 63
     25c:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <__ltsf2>
     260:	88 23       	and	r24, r24
     262:	0c f0       	brlt	.+2      	; 0x266 <task3+0xe8>
     264:	10 e0       	ldi	r17, 0x00	; 0
     266:	11 23       	and	r17, r17
     268:	29 f0       	breq	.+10     	; 0x274 <task3+0xf6>
		__ticks = 1;
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	9e 87       	std	Y+14, r25	; 0x0e
     270:	8d 87       	std	Y+13, r24	; 0x0d
     272:	46 c0       	rjmp	.+140    	; 0x300 <task3+0x182>
	else if (__tmp > 65535)
     274:	11 e0       	ldi	r17, 0x01	; 1
     276:	69 85       	ldd	r22, Y+9	; 0x09
     278:	7a 85       	ldd	r23, Y+10	; 0x0a
     27a:	8b 85       	ldd	r24, Y+11	; 0x0b
     27c:	9c 85       	ldd	r25, Y+12	; 0x0c
     27e:	20 e0       	ldi	r18, 0x00	; 0
     280:	3f ef       	ldi	r19, 0xFF	; 255
     282:	4f e7       	ldi	r20, 0x7F	; 127
     284:	57 e4       	ldi	r21, 0x47	; 71
     286:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__gtsf2>
     28a:	18 16       	cp	r1, r24
     28c:	0c f0       	brlt	.+2      	; 0x290 <task3+0x112>
     28e:	10 e0       	ldi	r17, 0x00	; 0
     290:	11 23       	and	r17, r17
     292:	61 f1       	breq	.+88     	; 0x2ec <task3+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     294:	6d 81       	ldd	r22, Y+5	; 0x05
     296:	7e 81       	ldd	r23, Y+6	; 0x06
     298:	8f 81       	ldd	r24, Y+7	; 0x07
     29a:	98 85       	ldd	r25, Y+8	; 0x08
     29c:	20 e0       	ldi	r18, 0x00	; 0
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	40 e2       	ldi	r20, 0x20	; 32
     2a2:	51 e4       	ldi	r21, 0x41	; 65
     2a4:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__mulsf3>
     2a8:	dc 01       	movw	r26, r24
     2aa:	cb 01       	movw	r24, r22
     2ac:	bc 01       	movw	r22, r24
     2ae:	cd 01       	movw	r24, r26
     2b0:	0e 94 07 0b 	call	0x160e	; 0x160e <__fixunssfsi>
     2b4:	dc 01       	movw	r26, r24
     2b6:	cb 01       	movw	r24, r22
     2b8:	9e 87       	std	Y+14, r25	; 0x0e
     2ba:	8d 87       	std	Y+13, r24	; 0x0d
     2bc:	12 c0       	rjmp	.+36     	; 0x2e2 <task3+0x164>
     2be:	80 e9       	ldi	r24, 0x90	; 144
     2c0:	91 e0       	ldi	r25, 0x01	; 1
     2c2:	98 8b       	std	Y+16, r25	; 0x10
     2c4:	8f 87       	std	Y+15, r24	; 0x0f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2c6:	8f 85       	ldd	r24, Y+15	; 0x0f
     2c8:	98 89       	ldd	r25, Y+16	; 0x10
     2ca:	8c 01       	movw	r16, r24
     2cc:	f8 01       	movw	r30, r16
     2ce:	31 97       	sbiw	r30, 0x01	; 1
     2d0:	f1 f7       	brne	.-4      	; 0x2ce <task3+0x150>
     2d2:	8f 01       	movw	r16, r30
     2d4:	18 8b       	std	Y+16, r17	; 0x10
     2d6:	0f 87       	std	Y+15, r16	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2d8:	8d 85       	ldd	r24, Y+13	; 0x0d
     2da:	9e 85       	ldd	r25, Y+14	; 0x0e
     2dc:	01 97       	sbiw	r24, 0x01	; 1
     2de:	9e 87       	std	Y+14, r25	; 0x0e
     2e0:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2e2:	8d 85       	ldd	r24, Y+13	; 0x0d
     2e4:	9e 85       	ldd	r25, Y+14	; 0x0e
     2e6:	00 97       	sbiw	r24, 0x00	; 0
     2e8:	51 f7       	brne	.-44     	; 0x2be <task3+0x140>
     2ea:	17 c0       	rjmp	.+46     	; 0x31a <task3+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2ec:	69 85       	ldd	r22, Y+9	; 0x09
     2ee:	7a 85       	ldd	r23, Y+10	; 0x0a
     2f0:	8b 85       	ldd	r24, Y+11	; 0x0b
     2f2:	9c 85       	ldd	r25, Y+12	; 0x0c
     2f4:	0e 94 07 0b 	call	0x160e	; 0x160e <__fixunssfsi>
     2f8:	dc 01       	movw	r26, r24
     2fa:	cb 01       	movw	r24, r22
     2fc:	9e 87       	std	Y+14, r25	; 0x0e
     2fe:	8d 87       	std	Y+13, r24	; 0x0d
     300:	8d 85       	ldd	r24, Y+13	; 0x0d
     302:	9e 85       	ldd	r25, Y+14	; 0x0e
     304:	9a 8b       	std	Y+18, r25	; 0x12
     306:	89 8b       	std	Y+17, r24	; 0x11
     308:	89 89       	ldd	r24, Y+17	; 0x11
     30a:	9a 89       	ldd	r25, Y+18	; 0x12
     30c:	8c 01       	movw	r16, r24
     30e:	c8 01       	movw	r24, r16
     310:	01 97       	sbiw	r24, 0x01	; 1
     312:	f1 f7       	brne	.-4      	; 0x310 <task3+0x192>
     314:	8c 01       	movw	r16, r24
     316:	1a 8b       	std	Y+18, r17	; 0x12
     318:	09 8b       	std	Y+17, r16	; 0x11
			_delay_ms(20);
			leaveCritical();
     31a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <leaveCritical>
			//PORTD ^= 0b00100000;
		}
	}
     31e:	3f cf       	rjmp	.-386    	; 0x19e <task3+0x20>

00000320 <setup>:
}

void setup()
{
     320:	df 93       	push	r29
     322:	cf 93       	push	r28
     324:	cd b7       	in	r28, 0x3d	; 61
     326:	de b7       	in	r29, 0x3e	; 62
	// create a global queue
	queue = (OSSignal*)OSmakeQ(MAX_QUEUE_SIZE,sizeof(int));
     328:	84 e1       	ldi	r24, 0x14	; 20
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	62 e0       	ldi	r22, 0x02	; 2
     32e:	70 e0       	ldi	r23, 0x00	; 0
     330:	0e 94 26 04 	call	0x84c	; 0x84c <OSmakeQ>
     334:	90 93 61 01 	sts	0x0161, r25
     338:	80 93 60 01 	sts	0x0160, r24
	
	// for testing only
	DDRD |= 0b11111100;
     33c:	8a e2       	ldi	r24, 0x2A	; 42
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	2a e2       	ldi	r18, 0x2A	; 42
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	f9 01       	movw	r30, r18
     346:	20 81       	ld	r18, Z
     348:	2c 6f       	ori	r18, 0xFC	; 252
     34a:	fc 01       	movw	r30, r24
     34c:	20 83       	st	Z, r18
	
	
	// signal OS running correctly
	//PORTD |= 0b00001000;
	
	variable = 0;
     34e:	10 92 1b 01 	sts	0x011B, r1
     352:	10 92 1a 01 	sts	0x011A, r1
}
     356:	cf 91       	pop	r28
     358:	df 91       	pop	r29
     35a:	08 95       	ret

0000035c <main>:




int main()
{
     35c:	df 93       	push	r29
     35e:	cf 93       	push	r28
     360:	cd b7       	in	r28, 0x3d	; 61
     362:	de b7       	in	r29, 0x3e	; 62
	setupSerial();
     364:	0e 94 37 09 	call	0x126e	; 0x126e <setupSerial>
	
	cli();
     368:	f8 94       	cli
	
	OSInit();
     36a:	0e 94 a5 08 	call	0x114a	; 0x114a <OSInit>
	
	setup();
     36e:	0e 94 90 01 	call	0x320	; 0x320 <setup>
	
	// Create the tasks. Task1 is for the buzzer and we pass in the base frequency as an argument.
	
	OSAddTask(task1, 0, NULL);
     372:	83 e5       	ldi	r24, 0x53	; 83
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	60 e0       	ldi	r22, 0x00	; 0
     378:	70 e0       	ldi	r23, 0x00	; 0
     37a:	40 e0       	ldi	r20, 0x00	; 0
     37c:	50 e0       	ldi	r21, 0x00	; 0
     37e:	0e 94 bf 08 	call	0x117e	; 0x117e <OSAddTask>
	
	OSAddTask(task2, 1, NULL);
     382:	89 e8       	ldi	r24, 0x89	; 137
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	61 e0       	ldi	r22, 0x01	; 1
     388:	70 e0       	ldi	r23, 0x00	; 0
     38a:	40 e0       	ldi	r20, 0x00	; 0
     38c:	50 e0       	ldi	r21, 0x00	; 0
     38e:	0e 94 bf 08 	call	0x117e	; 0x117e <OSAddTask>
	
	OSAddTask(task3, 1, NULL);
     392:	8f eb       	ldi	r24, 0xBF	; 191
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	61 e0       	ldi	r22, 0x01	; 1
     398:	70 e0       	ldi	r23, 0x00	; 0
     39a:	40 e0       	ldi	r20, 0x00	; 0
     39c:	50 e0       	ldi	r21, 0x00	; 0
     39e:	0e 94 bf 08 	call	0x117e	; 0x117e <OSAddTask>
	
	// start the OS
	OSRun();
     3a2:	0e 94 1c 09 	call	0x1238	; 0x1238 <OSRun>
	
	while(1);
     3a6:	ff cf       	rjmp	.-2      	; 0x3a6 <main+0x4a>

000003a8 <enterCritical>:

/* ======================================= */
/* Critical section management             */
/* ======================================= */
inline void enterCritical()
{
     3a8:	df 93       	push	r29
     3aa:	cf 93       	push	r28
     3ac:	cd b7       	in	r28, 0x3d	; 61
     3ae:	de b7       	in	r29, 0x3e	; 62
	cli();
     3b0:	f8 94       	cli
}
     3b2:	cf 91       	pop	r28
     3b4:	df 91       	pop	r29
     3b6:	08 95       	ret

000003b8 <leaveCritical>:

inline void leaveCritical()
{
     3b8:	df 93       	push	r29
     3ba:	cf 93       	push	r28
     3bc:	cd b7       	in	r28, 0x3d	; 61
     3be:	de b7       	in	r29, 0x3e	; 62
	sei();
     3c0:	78 94       	sei
}
     3c2:	cf 91       	pop	r28
     3c4:	df 91       	pop	r29
     3c6:	08 95       	ret

000003c8 <OSmakeSema>:

#ifdef OSIncludeSema

// Creates a semaphore with initial value initval
OSSignal *OSmakeSema(int initval)
{
     3c8:	df 93       	push	r29
     3ca:	cf 93       	push	r28
     3cc:	00 d0       	rcall	.+0      	; 0x3ce <OSmakeSema+0x6>
     3ce:	00 d0       	rcall	.+0      	; 0x3d0 <OSmakeSema+0x8>
     3d0:	cd b7       	in	r28, 0x3d	; 61
     3d2:	de b7       	in	r29, 0x3e	; 62
     3d4:	9c 83       	std	Y+4, r25	; 0x04
     3d6:	8b 83       	std	Y+3, r24	; 0x03
	OSSignal *sem = (OSSignal *) malloc(sizeof(OSSignal));
     3d8:	8c e0       	ldi	r24, 0x0C	; 12
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	0e 94 c9 10 	call	0x2192	; 0x2192 <malloc>
     3e0:	9a 83       	std	Y+2, r25	; 0x02
     3e2:	89 83       	std	Y+1, r24	; 0x01
	if(!sem){	// when the space allocation is not successful
     3e4:	89 81       	ldd	r24, Y+1	; 0x01
     3e6:	9a 81       	ldd	r25, Y+2	; 0x02
     3e8:	00 97       	sbiw	r24, 0x00	; 0
     3ea:	61 f4       	brne	.+24     	; 0x404 <OSmakeSema+0x3c>
		PORTD |= 0b00001000;	// signal error
     3ec:	8b e2       	ldi	r24, 0x2B	; 43
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	2b e2       	ldi	r18, 0x2B	; 43
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	f9 01       	movw	r30, r18
     3f6:	20 81       	ld	r18, Z
     3f8:	28 60       	ori	r18, 0x08	; 8
     3fa:	fc 01       	movw	r30, r24
     3fc:	20 83       	st	Z, r18
		return NULL;
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	50 c0       	rjmp	.+160    	; 0x4a4 <OSmakeSema+0xdc>
	}
	
	sem->type	= SEMAPHORE_TYPE;
     404:	89 81       	ldd	r24, Y+1	; 0x01
     406:	9a 81       	ldd	r25, Y+2	; 0x02
     408:	fc 01       	movw	r30, r24
     40a:	11 82       	std	Z+1, r1	; 0x01
     40c:	10 82       	st	Z, r1
	sem->num	= initval;	// the (-num) is qsize; when num >= 0, qsize = 0
     40e:	89 81       	ldd	r24, Y+1	; 0x01
     410:	9a 81       	ldd	r25, Y+2	; 0x02
     412:	2b 81       	ldd	r18, Y+3	; 0x03
     414:	3c 81       	ldd	r19, Y+4	; 0x04
     416:	fc 01       	movw	r30, r24
     418:	33 83       	std	Z+3, r19	; 0x03
     41a:	22 83       	std	Z+2, r18	; 0x02
	sem->esize	= sizeof(int);	// store the task id
     41c:	89 81       	ldd	r24, Y+1	; 0x01
     41e:	9a 81       	ldd	r25, Y+2	; 0x02
     420:	22 e0       	ldi	r18, 0x02	; 2
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	fc 01       	movw	r30, r24
     426:	35 83       	std	Z+5, r19	; 0x05
     428:	24 83       	std	Z+4, r18	; 0x04
	sem->size	= OS_NUM_TASKS;	// the maximum is the number of tasks system has
     42a:	89 81       	ldd	r24, Y+1	; 0x01
     42c:	9a 81       	ldd	r25, Y+2	; 0x02
     42e:	24 e0       	ldi	r18, 0x04	; 4
     430:	30 e0       	ldi	r19, 0x00	; 0
     432:	fc 01       	movw	r30, r24
     434:	37 83       	std	Z+7, r19	; 0x07
     436:	26 83       	std	Z+6, r18	; 0x06
	sem->start	= calloc(sem->size,sem->esize);
     438:	89 81       	ldd	r24, Y+1	; 0x01
     43a:	9a 81       	ldd	r25, Y+2	; 0x02
     43c:	fc 01       	movw	r30, r24
     43e:	86 81       	ldd	r24, Z+6	; 0x06
     440:	97 81       	ldd	r25, Z+7	; 0x07
     442:	29 81       	ldd	r18, Y+1	; 0x01
     444:	3a 81       	ldd	r19, Y+2	; 0x02
     446:	f9 01       	movw	r30, r18
     448:	24 81       	ldd	r18, Z+4	; 0x04
     44a:	35 81       	ldd	r19, Z+5	; 0x05
     44c:	b9 01       	movw	r22, r18
     44e:	0e 94 a5 10 	call	0x214a	; 0x214a <calloc>
     452:	9c 01       	movw	r18, r24
     454:	89 81       	ldd	r24, Y+1	; 0x01
     456:	9a 81       	ldd	r25, Y+2	; 0x02
     458:	fc 01       	movw	r30, r24
     45a:	31 87       	std	Z+9, r19	; 0x09
     45c:	20 87       	std	Z+8, r18	; 0x08
	
	if(!(sem->start)){	// when the space allocation is not successful
     45e:	89 81       	ldd	r24, Y+1	; 0x01
     460:	9a 81       	ldd	r25, Y+2	; 0x02
     462:	fc 01       	movw	r30, r24
     464:	80 85       	ldd	r24, Z+8	; 0x08
     466:	91 85       	ldd	r25, Z+9	; 0x09
     468:	00 97       	sbiw	r24, 0x00	; 0
     46a:	81 f4       	brne	.+32     	; 0x48c <OSmakeSema+0xc4>
		free(sem);
     46c:	89 81       	ldd	r24, Y+1	; 0x01
     46e:	9a 81       	ldd	r25, Y+2	; 0x02
     470:	0e 94 63 11 	call	0x22c6	; 0x22c6 <free>
		PORTD |= 0b00001000;	// signal error
     474:	8b e2       	ldi	r24, 0x2B	; 43
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	2b e2       	ldi	r18, 0x2B	; 43
     47a:	30 e0       	ldi	r19, 0x00	; 0
     47c:	f9 01       	movw	r30, r18
     47e:	20 81       	ld	r18, Z
     480:	28 60       	ori	r18, 0x08	; 8
     482:	fc 01       	movw	r30, r24
     484:	20 83       	st	Z, r18
		return NULL;
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	0c c0       	rjmp	.+24     	; 0x4a4 <OSmakeSema+0xdc>
	}
	
	sem->head	= sem->start;
     48c:	89 81       	ldd	r24, Y+1	; 0x01
     48e:	9a 81       	ldd	r25, Y+2	; 0x02
     490:	fc 01       	movw	r30, r24
     492:	20 85       	ldd	r18, Z+8	; 0x08
     494:	31 85       	ldd	r19, Z+9	; 0x09
     496:	89 81       	ldd	r24, Y+1	; 0x01
     498:	9a 81       	ldd	r25, Y+2	; 0x02
     49a:	fc 01       	movw	r30, r24
     49c:	33 87       	std	Z+11, r19	; 0x0b
     49e:	22 87       	std	Z+10, r18	; 0x0a
	
	return sem;
     4a0:	89 81       	ldd	r24, Y+1	; 0x01
     4a2:	9a 81       	ldd	r25, Y+2	; 0x02
}
     4a4:	0f 90       	pop	r0
     4a6:	0f 90       	pop	r0
     4a8:	0f 90       	pop	r0
     4aa:	0f 90       	pop	r0
     4ac:	cf 91       	pop	r28
     4ae:	df 91       	pop	r29
     4b0:	08 95       	ret

000004b2 <OSSemPend>:

// Takes a semaphore. Blocks if semaphore is 0.
void OSSemPend(OSSignal *sema)
{
     4b2:	df 93       	push	r29
     4b4:	cf 93       	push	r28
     4b6:	00 d0       	rcall	.+0      	; 0x4b8 <OSSemPend+0x6>
     4b8:	00 d0       	rcall	.+0      	; 0x4ba <OSSemPend+0x8>
     4ba:	00 d0       	rcall	.+0      	; 0x4bc <OSSemPend+0xa>
     4bc:	cd b7       	in	r28, 0x3d	; 61
     4be:	de b7       	in	r29, 0x3e	; 62
     4c0:	9e 83       	std	Y+6, r25	; 0x06
     4c2:	8d 83       	std	Y+5, r24	; 0x05
	enterCritical();
     4c4:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <enterCritical>
	
	// wrong type no use
	if(sema == NULL || sema->type != SEMAPHORE_TYPE){
     4c8:	8d 81       	ldd	r24, Y+5	; 0x05
     4ca:	9e 81       	ldd	r25, Y+6	; 0x06
     4cc:	00 97       	sbiw	r24, 0x00	; 0
     4ce:	39 f0       	breq	.+14     	; 0x4de <OSSemPend+0x2c>
     4d0:	8d 81       	ldd	r24, Y+5	; 0x05
     4d2:	9e 81       	ldd	r25, Y+6	; 0x06
     4d4:	fc 01       	movw	r30, r24
     4d6:	80 81       	ld	r24, Z
     4d8:	91 81       	ldd	r25, Z+1	; 0x01
     4da:	00 97       	sbiw	r24, 0x00	; 0
     4dc:	19 f0       	breq	.+6      	; 0x4e4 <OSSemPend+0x32>
		leaveCritical();
     4de:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <leaveCritical>
		return;
     4e2:	cb c0       	rjmp	.+406    	; 0x67a <OSSemPend+0x1c8>
	}
	
	if(sema->num <= 0){
     4e4:	8d 81       	ldd	r24, Y+5	; 0x05
     4e6:	9e 81       	ldd	r25, Y+6	; 0x06
     4e8:	fc 01       	movw	r30, r24
     4ea:	82 81       	ldd	r24, Z+2	; 0x02
     4ec:	93 81       	ldd	r25, Z+3	; 0x03
     4ee:	18 16       	cp	r1, r24
     4f0:	19 06       	cpc	r1, r25
     4f2:	0c f4       	brge	.+2      	; 0x4f6 <OSSemPend+0x44>
     4f4:	b3 c0       	rjmp	.+358    	; 0x65c <OSSemPend+0x1aa>
		// the queue used in the semaphore would be always less than the maximum
		// but check to avoid overflow
		if(-(sema->num) > sema->size){
     4f6:	8d 81       	ldd	r24, Y+5	; 0x05
     4f8:	9e 81       	ldd	r25, Y+6	; 0x06
     4fa:	fc 01       	movw	r30, r24
     4fc:	82 81       	ldd	r24, Z+2	; 0x02
     4fe:	93 81       	ldd	r25, Z+3	; 0x03
     500:	22 27       	eor	r18, r18
     502:	33 27       	eor	r19, r19
     504:	28 1b       	sub	r18, r24
     506:	39 0b       	sbc	r19, r25
     508:	8d 81       	ldd	r24, Y+5	; 0x05
     50a:	9e 81       	ldd	r25, Y+6	; 0x06
     50c:	fc 01       	movw	r30, r24
     50e:	86 81       	ldd	r24, Z+6	; 0x06
     510:	97 81       	ldd	r25, Z+7	; 0x07
     512:	82 17       	cp	r24, r18
     514:	93 07       	cpc	r25, r19
     516:	6c f4       	brge	.+26     	; 0x532 <OSSemPend+0x80>
			cli();	// TESTING
     518:	f8 94       	cli
			PORTD |= 0b00001000;	// signal error
     51a:	8b e2       	ldi	r24, 0x2B	; 43
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	2b e2       	ldi	r18, 0x2B	; 43
     520:	30 e0       	ldi	r19, 0x00	; 0
     522:	f9 01       	movw	r30, r18
     524:	20 81       	ld	r18, Z
     526:	28 60       	ori	r18, 0x08	; 8
     528:	fc 01       	movw	r30, r24
     52a:	20 83       	st	Z, r18
			leaveCritical();
     52c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <leaveCritical>
			return;
     530:	a4 c0       	rjmp	.+328    	; 0x67a <OSSemPend+0x1c8>
		} else if(currentTask == -1){	// when possibly os not run
     532:	80 91 0a 01 	lds	r24, 0x010A
     536:	90 91 0b 01 	lds	r25, 0x010B
     53a:	ff ef       	ldi	r31, 0xFF	; 255
     53c:	8f 3f       	cpi	r24, 0xFF	; 255
     53e:	9f 07       	cpc	r25, r31
     540:	61 f4       	brne	.+24     	; 0x55a <OSSemPend+0xa8>
			PORTD |= 0b00001000;	// signal error
     542:	8b e2       	ldi	r24, 0x2B	; 43
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	2b e2       	ldi	r18, 0x2B	; 43
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	f9 01       	movw	r30, r18
     54c:	20 81       	ld	r18, Z
     54e:	28 60       	ori	r18, 0x08	; 8
     550:	fc 01       	movw	r30, r24
     552:	20 83       	st	Z, r18
			leaveCritical();
     554:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <leaveCritical>
			return;
     558:	90 c0       	rjmp	.+288    	; 0x67a <OSSemPend+0x1c8>
		}
		
		// set current task to block state, save the # of current task
		
		// current blocked by this semaphore
		taskTable[currentTask].sem_counter++;
     55a:	80 91 0a 01 	lds	r24, 0x010A
     55e:	90 91 0b 01 	lds	r25, 0x010B
     562:	4f e0       	ldi	r20, 0x0F	; 15
     564:	51 e0       	ldi	r21, 0x01	; 1
     566:	84 9f       	mul	r24, r20
     568:	90 01       	movw	r18, r0
     56a:	85 9f       	mul	r24, r21
     56c:	30 0d       	add	r19, r0
     56e:	94 9f       	mul	r25, r20
     570:	30 0d       	add	r19, r0
     572:	11 24       	eor	r1, r1
     574:	27 58       	subi	r18, 0x87	; 135
     576:	3d 4f       	sbci	r19, 0xFD	; 253
     578:	f9 01       	movw	r30, r18
     57a:	20 81       	ld	r18, Z
     57c:	31 81       	ldd	r19, Z+1	; 0x01
     57e:	2f 5f       	subi	r18, 0xFF	; 255
     580:	3f 4f       	sbci	r19, 0xFF	; 255
     582:	6f e0       	ldi	r22, 0x0F	; 15
     584:	71 e0       	ldi	r23, 0x01	; 1
     586:	86 9f       	mul	r24, r22
     588:	a0 01       	movw	r20, r0
     58a:	87 9f       	mul	r24, r23
     58c:	50 0d       	add	r21, r0
     58e:	96 9f       	mul	r25, r22
     590:	50 0d       	add	r21, r0
     592:	11 24       	eor	r1, r1
     594:	ca 01       	movw	r24, r20
     596:	87 58       	subi	r24, 0x87	; 135
     598:	9d 4f       	sbci	r25, 0xFD	; 253
     59a:	fc 01       	movw	r30, r24
     59c:	31 83       	std	Z+1, r19	; 0x01
     59e:	20 83       	st	Z, r18
		
		
		unsigned shift = 
			(unsigned)(sema->head - sema->start + (-sema->num * sema->esize)) %
     5a0:	8d 81       	ldd	r24, Y+5	; 0x05
     5a2:	9e 81       	ldd	r25, Y+6	; 0x06
     5a4:	fc 01       	movw	r30, r24
     5a6:	82 85       	ldd	r24, Z+10	; 0x0a
     5a8:	93 85       	ldd	r25, Z+11	; 0x0b
     5aa:	9c 01       	movw	r18, r24
     5ac:	8d 81       	ldd	r24, Y+5	; 0x05
     5ae:	9e 81       	ldd	r25, Y+6	; 0x06
     5b0:	fc 01       	movw	r30, r24
     5b2:	80 85       	ldd	r24, Z+8	; 0x08
     5b4:	91 85       	ldd	r25, Z+9	; 0x09
     5b6:	28 1b       	sub	r18, r24
     5b8:	39 0b       	sbc	r19, r25
     5ba:	8d 81       	ldd	r24, Y+5	; 0x05
     5bc:	9e 81       	ldd	r25, Y+6	; 0x06
     5be:	fc 01       	movw	r30, r24
     5c0:	82 81       	ldd	r24, Z+2	; 0x02
     5c2:	93 81       	ldd	r25, Z+3	; 0x03
     5c4:	66 27       	eor	r22, r22
     5c6:	77 27       	eor	r23, r23
     5c8:	68 1b       	sub	r22, r24
     5ca:	79 0b       	sbc	r23, r25
     5cc:	8d 81       	ldd	r24, Y+5	; 0x05
     5ce:	9e 81       	ldd	r25, Y+6	; 0x06
     5d0:	fc 01       	movw	r30, r24
     5d2:	44 81       	ldd	r20, Z+4	; 0x04
     5d4:	55 81       	ldd	r21, Z+5	; 0x05
     5d6:	64 9f       	mul	r22, r20
     5d8:	c0 01       	movw	r24, r0
     5da:	65 9f       	mul	r22, r21
     5dc:	90 0d       	add	r25, r0
     5de:	74 9f       	mul	r23, r20
     5e0:	90 0d       	add	r25, r0
     5e2:	11 24       	eor	r1, r1
     5e4:	82 0f       	add	r24, r18
     5e6:	93 1f       	adc	r25, r19
			(unsigned)(sema->size * sema->esize);
     5e8:	2d 81       	ldd	r18, Y+5	; 0x05
     5ea:	3e 81       	ldd	r19, Y+6	; 0x06
     5ec:	f9 01       	movw	r30, r18
     5ee:	66 81       	ldd	r22, Z+6	; 0x06
     5f0:	77 81       	ldd	r23, Z+7	; 0x07
     5f2:	2d 81       	ldd	r18, Y+5	; 0x05
     5f4:	3e 81       	ldd	r19, Y+6	; 0x06
     5f6:	f9 01       	movw	r30, r18
     5f8:	44 81       	ldd	r20, Z+4	; 0x04
     5fa:	55 81       	ldd	r21, Z+5	; 0x05
     5fc:	64 9f       	mul	r22, r20
     5fe:	90 01       	movw	r18, r0
     600:	65 9f       	mul	r22, r21
     602:	30 0d       	add	r19, r0
     604:	74 9f       	mul	r23, r20
     606:	30 0d       	add	r19, r0
     608:	11 24       	eor	r1, r1
		
		// current blocked by this semaphore
		taskTable[currentTask].sem_counter++;
		
		
		unsigned shift = 
     60a:	b9 01       	movw	r22, r18
     60c:	0e 94 47 10 	call	0x208e	; 0x208e <__udivmodhi4>
     610:	9a 83       	std	Y+2, r25	; 0x02
     612:	89 83       	std	Y+1, r24	; 0x01
			(unsigned)(sema->head - sema->start + (-sema->num * sema->esize)) %
			(unsigned)(sema->size * sema->esize);
		void *currentPos = sema->start + shift;
     614:	8d 81       	ldd	r24, Y+5	; 0x05
     616:	9e 81       	ldd	r25, Y+6	; 0x06
     618:	fc 01       	movw	r30, r24
     61a:	20 85       	ldd	r18, Z+8	; 0x08
     61c:	31 85       	ldd	r19, Z+9	; 0x09
     61e:	89 81       	ldd	r24, Y+1	; 0x01
     620:	9a 81       	ldd	r25, Y+2	; 0x02
     622:	82 0f       	add	r24, r18
     624:	93 1f       	adc	r25, r19
     626:	9c 83       	std	Y+4, r25	; 0x04
     628:	8b 83       	std	Y+3, r24	; 0x03
		
		// then push the currentTask id into queue
		*(int*)(currentPos) = currentTask;
     62a:	8b 81       	ldd	r24, Y+3	; 0x03
     62c:	9c 81       	ldd	r25, Y+4	; 0x04
     62e:	20 91 0a 01 	lds	r18, 0x010A
     632:	30 91 0b 01 	lds	r19, 0x010B
     636:	fc 01       	movw	r30, r24
     638:	31 83       	std	Z+1, r19	; 0x01
     63a:	20 83       	st	Z, r18
		
		sema->num--;
     63c:	8d 81       	ldd	r24, Y+5	; 0x05
     63e:	9e 81       	ldd	r25, Y+6	; 0x06
     640:	fc 01       	movw	r30, r24
     642:	82 81       	ldd	r24, Z+2	; 0x02
     644:	93 81       	ldd	r25, Z+3	; 0x03
     646:	9c 01       	movw	r18, r24
     648:	21 50       	subi	r18, 0x01	; 1
     64a:	30 40       	sbci	r19, 0x00	; 0
     64c:	8d 81       	ldd	r24, Y+5	; 0x05
     64e:	9e 81       	ldd	r25, Y+6	; 0x06
     650:	fc 01       	movw	r30, r24
     652:	33 83       	std	Z+3, r19	; 0x03
     654:	22 83       	std	Z+2, r18	; 0x02

		OSSwapTask();
     656:	0e 94 ba 07 	call	0xf74	; 0xf74 <OSSwapTask>
     65a:	0d c0       	rjmp	.+26     	; 0x676 <OSSemPend+0x1c4>
	} else (sema->num)--;
     65c:	8d 81       	ldd	r24, Y+5	; 0x05
     65e:	9e 81       	ldd	r25, Y+6	; 0x06
     660:	fc 01       	movw	r30, r24
     662:	82 81       	ldd	r24, Z+2	; 0x02
     664:	93 81       	ldd	r25, Z+3	; 0x03
     666:	9c 01       	movw	r18, r24
     668:	21 50       	subi	r18, 0x01	; 1
     66a:	30 40       	sbci	r19, 0x00	; 0
     66c:	8d 81       	ldd	r24, Y+5	; 0x05
     66e:	9e 81       	ldd	r25, Y+6	; 0x06
     670:	fc 01       	movw	r30, r24
     672:	33 83       	std	Z+3, r19	; 0x03
     674:	22 83       	std	Z+2, r18	; 0x02
	
	leaveCritical();
     676:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <leaveCritical>
}
     67a:	26 96       	adiw	r28, 0x06	; 6
     67c:	0f b6       	in	r0, 0x3f	; 63
     67e:	f8 94       	cli
     680:	de bf       	out	0x3e, r29	; 62
     682:	0f be       	out	0x3f, r0	; 63
     684:	cd bf       	out	0x3d, r28	; 61
     686:	cf 91       	pop	r28
     688:	df 91       	pop	r29
     68a:	08 95       	ret

0000068c <OSSemPost>:

// Posts a semaphore.
void OSSemPost(OSSignal *sema)
{
     68c:	df 93       	push	r29
     68e:	cf 93       	push	r28
     690:	00 d0       	rcall	.+0      	; 0x692 <OSSemPost+0x6>
     692:	00 d0       	rcall	.+0      	; 0x694 <OSSemPost+0x8>
     694:	cd b7       	in	r28, 0x3d	; 61
     696:	de b7       	in	r29, 0x3e	; 62
     698:	9c 83       	std	Y+4, r25	; 0x04
     69a:	8b 83       	std	Y+3, r24	; 0x03
	enterCritical();
     69c:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <enterCritical>
	
	// wrong type no use
	if(sema == NULL || sema->type != SEMAPHORE_TYPE){
     6a0:	8b 81       	ldd	r24, Y+3	; 0x03
     6a2:	9c 81       	ldd	r25, Y+4	; 0x04
     6a4:	00 97       	sbiw	r24, 0x00	; 0
     6a6:	41 f0       	breq	.+16     	; 0x6b8 <OSSemPost+0x2c>
     6a8:	8b 81       	ldd	r24, Y+3	; 0x03
     6aa:	9c 81       	ldd	r25, Y+4	; 0x04
     6ac:	dc 01       	movw	r26, r24
     6ae:	8d 91       	ld	r24, X+
     6b0:	9c 91       	ld	r25, X
     6b2:	11 97       	sbiw	r26, 0x01	; 1
     6b4:	00 97       	sbiw	r24, 0x00	; 0
     6b6:	19 f0       	breq	.+6      	; 0x6be <OSSemPost+0x32>
		leaveCritical();
     6b8:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <leaveCritical>
		return;
     6bc:	c0 c0       	rjmp	.+384    	; 0x83e <OSSemPost+0x1b2>
	}
	
	if(sema->num < 0){	// only when queue has element
     6be:	8b 81       	ldd	r24, Y+3	; 0x03
     6c0:	9c 81       	ldd	r25, Y+4	; 0x04
     6c2:	fc 01       	movw	r30, r24
     6c4:	82 81       	ldd	r24, Z+2	; 0x02
     6c6:	93 81       	ldd	r25, Z+3	; 0x03
     6c8:	99 23       	and	r25, r25
     6ca:	0c f0       	brlt	.+2      	; 0x6ce <OSSemPost+0x42>
     6cc:	9e c0       	rjmp	.+316    	; 0x80a <OSSemPost+0x17e>
		if(currentTask == -1){	// when possibly os not run
     6ce:	80 91 0a 01 	lds	r24, 0x010A
     6d2:	90 91 0b 01 	lds	r25, 0x010B
     6d6:	ff ef       	ldi	r31, 0xFF	; 255
     6d8:	8f 3f       	cpi	r24, 0xFF	; 255
     6da:	9f 07       	cpc	r25, r31
     6dc:	61 f4       	brne	.+24     	; 0x6f6 <OSSemPost+0x6a>
			PORTD |= 0b00001000;	// signal error	TODO
     6de:	8b e2       	ldi	r24, 0x2B	; 43
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	2b e2       	ldi	r18, 0x2B	; 43
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	d9 01       	movw	r26, r18
     6e8:	2c 91       	ld	r18, X
     6ea:	28 60       	ori	r18, 0x08	; 8
     6ec:	fc 01       	movw	r30, r24
     6ee:	20 83       	st	Z, r18
			leaveCritical();
     6f0:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <leaveCritical>
			return;
     6f4:	a4 c0       	rjmp	.+328    	; 0x83e <OSSemPost+0x1b2>
		}
		
		// pop the element from the head
		int taskId = *(int*)sema->head;
     6f6:	8b 81       	ldd	r24, Y+3	; 0x03
     6f8:	9c 81       	ldd	r25, Y+4	; 0x04
     6fa:	dc 01       	movw	r26, r24
     6fc:	1a 96       	adiw	r26, 0x0a	; 10
     6fe:	8d 91       	ld	r24, X+
     700:	9c 91       	ld	r25, X
     702:	1b 97       	sbiw	r26, 0x0b	; 11
     704:	fc 01       	movw	r30, r24
     706:	80 81       	ld	r24, Z
     708:	91 81       	ldd	r25, Z+1	; 0x01
     70a:	9a 83       	std	Y+2, r25	; 0x02
     70c:	89 83       	std	Y+1, r24	; 0x01
		
		// decrease the counter because of current semaphore
		taskTable[taskId].sem_counter--;
     70e:	49 81       	ldd	r20, Y+1	; 0x01
     710:	5a 81       	ldd	r21, Y+2	; 0x02
     712:	2f e0       	ldi	r18, 0x0F	; 15
     714:	31 e0       	ldi	r19, 0x01	; 1
     716:	42 9f       	mul	r20, r18
     718:	c0 01       	movw	r24, r0
     71a:	43 9f       	mul	r20, r19
     71c:	90 0d       	add	r25, r0
     71e:	52 9f       	mul	r21, r18
     720:	90 0d       	add	r25, r0
     722:	11 24       	eor	r1, r1
     724:	87 58       	subi	r24, 0x87	; 135
     726:	9d 4f       	sbci	r25, 0xFD	; 253
     728:	dc 01       	movw	r26, r24
     72a:	8d 91       	ld	r24, X+
     72c:	9c 91       	ld	r25, X
     72e:	9c 01       	movw	r18, r24
     730:	21 50       	subi	r18, 0x01	; 1
     732:	30 40       	sbci	r19, 0x00	; 0
     734:	69 81       	ldd	r22, Y+1	; 0x01
     736:	7a 81       	ldd	r23, Y+2	; 0x02
     738:	4f e0       	ldi	r20, 0x0F	; 15
     73a:	51 e0       	ldi	r21, 0x01	; 1
     73c:	64 9f       	mul	r22, r20
     73e:	c0 01       	movw	r24, r0
     740:	65 9f       	mul	r22, r21
     742:	90 0d       	add	r25, r0
     744:	74 9f       	mul	r23, r20
     746:	90 0d       	add	r25, r0
     748:	11 24       	eor	r1, r1
     74a:	87 58       	subi	r24, 0x87	; 135
     74c:	9d 4f       	sbci	r25, 0xFD	; 253
     74e:	fc 01       	movw	r30, r24
     750:	31 83       	std	Z+1, r19	; 0x01
     752:	20 83       	st	Z, r18
		
		// then update the queue
		sema->num++;
     754:	8b 81       	ldd	r24, Y+3	; 0x03
     756:	9c 81       	ldd	r25, Y+4	; 0x04
     758:	dc 01       	movw	r26, r24
     75a:	12 96       	adiw	r26, 0x02	; 2
     75c:	8d 91       	ld	r24, X+
     75e:	9c 91       	ld	r25, X
     760:	13 97       	sbiw	r26, 0x03	; 3
     762:	9c 01       	movw	r18, r24
     764:	2f 5f       	subi	r18, 0xFF	; 255
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	8b 81       	ldd	r24, Y+3	; 0x03
     76a:	9c 81       	ldd	r25, Y+4	; 0x04
     76c:	fc 01       	movw	r30, r24
     76e:	33 83       	std	Z+3, r19	; 0x03
     770:	22 83       	std	Z+2, r18	; 0x02
		
		sema->head += sema->esize;
     772:	8b 81       	ldd	r24, Y+3	; 0x03
     774:	9c 81       	ldd	r25, Y+4	; 0x04
     776:	dc 01       	movw	r26, r24
     778:	1a 96       	adiw	r26, 0x0a	; 10
     77a:	2d 91       	ld	r18, X+
     77c:	3c 91       	ld	r19, X
     77e:	1b 97       	sbiw	r26, 0x0b	; 11
     780:	8b 81       	ldd	r24, Y+3	; 0x03
     782:	9c 81       	ldd	r25, Y+4	; 0x04
     784:	fc 01       	movw	r30, r24
     786:	84 81       	ldd	r24, Z+4	; 0x04
     788:	95 81       	ldd	r25, Z+5	; 0x05
     78a:	28 0f       	add	r18, r24
     78c:	39 1f       	adc	r19, r25
     78e:	8b 81       	ldd	r24, Y+3	; 0x03
     790:	9c 81       	ldd	r25, Y+4	; 0x04
     792:	dc 01       	movw	r26, r24
     794:	1b 96       	adiw	r26, 0x0b	; 11
     796:	3c 93       	st	X, r19
     798:	2e 93       	st	-X, r18
     79a:	1a 97       	sbiw	r26, 0x0a	; 10
		if(sema->head == sema->start + (-sema->num * sema->esize) ){
     79c:	8b 81       	ldd	r24, Y+3	; 0x03
     79e:	9c 81       	ldd	r25, Y+4	; 0x04
     7a0:	fc 01       	movw	r30, r24
     7a2:	22 85       	ldd	r18, Z+10	; 0x0a
     7a4:	33 85       	ldd	r19, Z+11	; 0x0b
     7a6:	8b 81       	ldd	r24, Y+3	; 0x03
     7a8:	9c 81       	ldd	r25, Y+4	; 0x04
     7aa:	dc 01       	movw	r26, r24
     7ac:	18 96       	adiw	r26, 0x08	; 8
     7ae:	4d 91       	ld	r20, X+
     7b0:	5c 91       	ld	r21, X
     7b2:	19 97       	sbiw	r26, 0x09	; 9
     7b4:	8b 81       	ldd	r24, Y+3	; 0x03
     7b6:	9c 81       	ldd	r25, Y+4	; 0x04
     7b8:	fc 01       	movw	r30, r24
     7ba:	82 81       	ldd	r24, Z+2	; 0x02
     7bc:	93 81       	ldd	r25, Z+3	; 0x03
     7be:	ee 27       	eor	r30, r30
     7c0:	ff 27       	eor	r31, r31
     7c2:	e8 1b       	sub	r30, r24
     7c4:	f9 0b       	sbc	r31, r25
     7c6:	8b 81       	ldd	r24, Y+3	; 0x03
     7c8:	9c 81       	ldd	r25, Y+4	; 0x04
     7ca:	dc 01       	movw	r26, r24
     7cc:	14 96       	adiw	r26, 0x04	; 4
     7ce:	6d 91       	ld	r22, X+
     7d0:	7c 91       	ld	r23, X
     7d2:	15 97       	sbiw	r26, 0x05	; 5
     7d4:	e6 9f       	mul	r30, r22
     7d6:	c0 01       	movw	r24, r0
     7d8:	e7 9f       	mul	r30, r23
     7da:	90 0d       	add	r25, r0
     7dc:	f6 9f       	mul	r31, r22
     7de:	90 0d       	add	r25, r0
     7e0:	11 24       	eor	r1, r1
     7e2:	84 0f       	add	r24, r20
     7e4:	95 1f       	adc	r25, r21
     7e6:	28 17       	cp	r18, r24
     7e8:	39 07       	cpc	r19, r25
     7ea:	61 f4       	brne	.+24     	; 0x804 <OSSemPost+0x178>
			sema->head = sema->start;
     7ec:	8b 81       	ldd	r24, Y+3	; 0x03
     7ee:	9c 81       	ldd	r25, Y+4	; 0x04
     7f0:	fc 01       	movw	r30, r24
     7f2:	20 85       	ldd	r18, Z+8	; 0x08
     7f4:	31 85       	ldd	r19, Z+9	; 0x09
     7f6:	8b 81       	ldd	r24, Y+3	; 0x03
     7f8:	9c 81       	ldd	r25, Y+4	; 0x04
     7fa:	dc 01       	movw	r26, r24
     7fc:	1b 96       	adiw	r26, 0x0b	; 11
     7fe:	3c 93       	st	X, r19
     800:	2e 93       	st	-X, r18
     802:	1a 97       	sbiw	r26, 0x0a	; 10
		}
		
		OSSwapTask();
     804:	0e 94 ba 07 	call	0xf74	; 0xf74 <OSSwapTask>
     808:	18 c0       	rjmp	.+48     	; 0x83a <OSSemPost+0x1ae>
	} else{
		// set an upper limit to avoid overflow
		if(sema->num <= 10000)	(sema->num)++;
     80a:	8b 81       	ldd	r24, Y+3	; 0x03
     80c:	9c 81       	ldd	r25, Y+4	; 0x04
     80e:	fc 01       	movw	r30, r24
     810:	82 81       	ldd	r24, Z+2	; 0x02
     812:	93 81       	ldd	r25, Z+3	; 0x03
     814:	f7 e2       	ldi	r31, 0x27	; 39
     816:	81 31       	cpi	r24, 0x11	; 17
     818:	9f 07       	cpc	r25, r31
     81a:	7c f4       	brge	.+30     	; 0x83a <OSSemPost+0x1ae>
     81c:	8b 81       	ldd	r24, Y+3	; 0x03
     81e:	9c 81       	ldd	r25, Y+4	; 0x04
     820:	dc 01       	movw	r26, r24
     822:	12 96       	adiw	r26, 0x02	; 2
     824:	8d 91       	ld	r24, X+
     826:	9c 91       	ld	r25, X
     828:	13 97       	sbiw	r26, 0x03	; 3
     82a:	9c 01       	movw	r18, r24
     82c:	2f 5f       	subi	r18, 0xFF	; 255
     82e:	3f 4f       	sbci	r19, 0xFF	; 255
     830:	8b 81       	ldd	r24, Y+3	; 0x03
     832:	9c 81       	ldd	r25, Y+4	; 0x04
     834:	fc 01       	movw	r30, r24
     836:	33 83       	std	Z+3, r19	; 0x03
     838:	22 83       	std	Z+2, r18	; 0x02
	}
	
	leaveCritical();
     83a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <leaveCritical>
}
     83e:	0f 90       	pop	r0
     840:	0f 90       	pop	r0
     842:	0f 90       	pop	r0
     844:	0f 90       	pop	r0
     846:	cf 91       	pop	r28
     848:	df 91       	pop	r29
     84a:	08 95       	ret

0000084c <OSmakeQ>:
#ifdef OSIncludeQueues

// qsize=number of elements in the queue. esize=size of each element. So calling makeQ(10, sizeof(int)) would produce a queue of 10 elements, 
// with each element being the size of an integer.
OSSignal *OSmakeQ(int qsize, int esize)
{
     84c:	df 93       	push	r29
     84e:	cf 93       	push	r28
     850:	00 d0       	rcall	.+0      	; 0x852 <OSmakeQ+0x6>
     852:	00 d0       	rcall	.+0      	; 0x854 <OSmakeQ+0x8>
     854:	00 d0       	rcall	.+0      	; 0x856 <OSmakeQ+0xa>
     856:	cd b7       	in	r28, 0x3d	; 61
     858:	de b7       	in	r29, 0x3e	; 62
     85a:	9c 83       	std	Y+4, r25	; 0x04
     85c:	8b 83       	std	Y+3, r24	; 0x03
     85e:	7e 83       	std	Y+6, r23	; 0x06
     860:	6d 83       	std	Y+5, r22	; 0x05
	// use the q_sema
	if(q_sema_empty == NULL)	q_sema_empty = (OSSignal*)OSmakeSema(0);
     862:	80 91 62 01 	lds	r24, 0x0162
     866:	90 91 63 01 	lds	r25, 0x0163
     86a:	00 97       	sbiw	r24, 0x00	; 0
     86c:	41 f4       	brne	.+16     	; 0x87e <OSmakeQ+0x32>
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <OSmakeSema>
     876:	90 93 63 01 	sts	0x0163, r25
     87a:	80 93 62 01 	sts	0x0162, r24
	if(q_sema_full == NULL)		q_sema_full  = (OSSignal*)OSmakeSema(0);
     87e:	80 91 64 01 	lds	r24, 0x0164
     882:	90 91 65 01 	lds	r25, 0x0165
     886:	00 97       	sbiw	r24, 0x00	; 0
     888:	41 f4       	brne	.+16     	; 0x89a <OSmakeQ+0x4e>
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <OSmakeSema>
     892:	90 93 65 01 	sts	0x0165, r25
     896:	80 93 64 01 	sts	0x0164, r24
	if(q_sema_empty == NULL	||	q_sema_full == NULL){	// semaphore creation failed
     89a:	80 91 62 01 	lds	r24, 0x0162
     89e:	90 91 63 01 	lds	r25, 0x0163
     8a2:	00 97       	sbiw	r24, 0x00	; 0
     8a4:	31 f0       	breq	.+12     	; 0x8b2 <OSmakeQ+0x66>
     8a6:	80 91 64 01 	lds	r24, 0x0164
     8aa:	90 91 65 01 	lds	r25, 0x0165
     8ae:	00 97       	sbiw	r24, 0x00	; 0
     8b0:	61 f4       	brne	.+24     	; 0x8ca <OSmakeQ+0x7e>
		PORTD |= 0b00001000;
     8b2:	8b e2       	ldi	r24, 0x2B	; 43
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	2b e2       	ldi	r18, 0x2B	; 43
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	f9 01       	movw	r30, r18
     8bc:	20 81       	ld	r18, Z
     8be:	28 60       	ori	r18, 0x08	; 8
     8c0:	fc 01       	movw	r30, r24
     8c2:	20 83       	st	Z, r18
		return NULL;
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	66 c0       	rjmp	.+204    	; 0x996 <__stack+0x97>
	}
	
	OSSignal *que = (OSSignal *) malloc(sizeof(OSSignal));
     8ca:	8c e0       	ldi	r24, 0x0C	; 12
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	0e 94 c9 10 	call	0x2192	; 0x2192 <malloc>
     8d2:	9a 83       	std	Y+2, r25	; 0x02
     8d4:	89 83       	std	Y+1, r24	; 0x01
	if(!que){	// when the space allocation is not successful
     8d6:	89 81       	ldd	r24, Y+1	; 0x01
     8d8:	9a 81       	ldd	r25, Y+2	; 0x02
     8da:	00 97       	sbiw	r24, 0x00	; 0
     8dc:	61 f4       	brne	.+24     	; 0x8f6 <OSmakeQ+0xaa>
		PORTD |= 0b00001000;	// signal error
     8de:	8b e2       	ldi	r24, 0x2B	; 43
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	2b e2       	ldi	r18, 0x2B	; 43
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	f9 01       	movw	r30, r18
     8e8:	20 81       	ld	r18, Z
     8ea:	28 60       	ori	r18, 0x08	; 8
     8ec:	fc 01       	movw	r30, r24
     8ee:	20 83       	st	Z, r18
		return NULL;
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	50 c0       	rjmp	.+160    	; 0x996 <__stack+0x97>
	}
	
	que->type	= QUEUE_TYPE;
     8f6:	89 81       	ldd	r24, Y+1	; 0x01
     8f8:	9a 81       	ldd	r25, Y+2	; 0x02
     8fa:	21 e0       	ldi	r18, 0x01	; 1
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	fc 01       	movw	r30, r24
     900:	31 83       	std	Z+1, r19	; 0x01
     902:	20 83       	st	Z, r18
	que->num	= 0;	// initially empty
     904:	89 81       	ldd	r24, Y+1	; 0x01
     906:	9a 81       	ldd	r25, Y+2	; 0x02
     908:	fc 01       	movw	r30, r24
     90a:	13 82       	std	Z+3, r1	; 0x03
     90c:	12 82       	std	Z+2, r1	; 0x02
	que->esize	= esize;	// store the task id
     90e:	89 81       	ldd	r24, Y+1	; 0x01
     910:	9a 81       	ldd	r25, Y+2	; 0x02
     912:	2d 81       	ldd	r18, Y+5	; 0x05
     914:	3e 81       	ldd	r19, Y+6	; 0x06
     916:	fc 01       	movw	r30, r24
     918:	35 83       	std	Z+5, r19	; 0x05
     91a:	24 83       	std	Z+4, r18	; 0x04
	que->size	= qsize;	// the maximum is the number of tasks system has
     91c:	89 81       	ldd	r24, Y+1	; 0x01
     91e:	9a 81       	ldd	r25, Y+2	; 0x02
     920:	2b 81       	ldd	r18, Y+3	; 0x03
     922:	3c 81       	ldd	r19, Y+4	; 0x04
     924:	fc 01       	movw	r30, r24
     926:	37 83       	std	Z+7, r19	; 0x07
     928:	26 83       	std	Z+6, r18	; 0x06
	que->start	= calloc(que->size,que->esize);
     92a:	89 81       	ldd	r24, Y+1	; 0x01
     92c:	9a 81       	ldd	r25, Y+2	; 0x02
     92e:	fc 01       	movw	r30, r24
     930:	86 81       	ldd	r24, Z+6	; 0x06
     932:	97 81       	ldd	r25, Z+7	; 0x07
     934:	29 81       	ldd	r18, Y+1	; 0x01
     936:	3a 81       	ldd	r19, Y+2	; 0x02
     938:	f9 01       	movw	r30, r18
     93a:	24 81       	ldd	r18, Z+4	; 0x04
     93c:	35 81       	ldd	r19, Z+5	; 0x05
     93e:	b9 01       	movw	r22, r18
     940:	0e 94 a5 10 	call	0x214a	; 0x214a <calloc>
     944:	9c 01       	movw	r18, r24
     946:	89 81       	ldd	r24, Y+1	; 0x01
     948:	9a 81       	ldd	r25, Y+2	; 0x02
     94a:	fc 01       	movw	r30, r24
     94c:	31 87       	std	Z+9, r19	; 0x09
     94e:	20 87       	std	Z+8, r18	; 0x08
	
	if(!(que->start)){	// when the space allocation is not successful
     950:	89 81       	ldd	r24, Y+1	; 0x01
     952:	9a 81       	ldd	r25, Y+2	; 0x02
     954:	fc 01       	movw	r30, r24
     956:	80 85       	ldd	r24, Z+8	; 0x08
     958:	91 85       	ldd	r25, Z+9	; 0x09
     95a:	00 97       	sbiw	r24, 0x00	; 0
     95c:	81 f4       	brne	.+32     	; 0x97e <__stack+0x7f>
		free(que);
     95e:	89 81       	ldd	r24, Y+1	; 0x01
     960:	9a 81       	ldd	r25, Y+2	; 0x02
     962:	0e 94 63 11 	call	0x22c6	; 0x22c6 <free>
		PORTD |= 0b00001000;	// signal error
     966:	8b e2       	ldi	r24, 0x2B	; 43
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	2b e2       	ldi	r18, 0x2B	; 43
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	f9 01       	movw	r30, r18
     970:	20 81       	ld	r18, Z
     972:	28 60       	ori	r18, 0x08	; 8
     974:	fc 01       	movw	r30, r24
     976:	20 83       	st	Z, r18
		return NULL;
     978:	80 e0       	ldi	r24, 0x00	; 0
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	0c c0       	rjmp	.+24     	; 0x996 <__stack+0x97>
	}
	
	que->head	= que->start;
     97e:	89 81       	ldd	r24, Y+1	; 0x01
     980:	9a 81       	ldd	r25, Y+2	; 0x02
     982:	fc 01       	movw	r30, r24
     984:	20 85       	ldd	r18, Z+8	; 0x08
     986:	31 85       	ldd	r19, Z+9	; 0x09
     988:	89 81       	ldd	r24, Y+1	; 0x01
     98a:	9a 81       	ldd	r25, Y+2	; 0x02
     98c:	fc 01       	movw	r30, r24
     98e:	33 87       	std	Z+11, r19	; 0x0b
     990:	22 87       	std	Z+10, r18	; 0x0a
	
	return que;
     992:	89 81       	ldd	r24, Y+1	; 0x01
     994:	9a 81       	ldd	r25, Y+2	; 0x02
}
     996:	26 96       	adiw	r28, 0x06	; 6
     998:	0f b6       	in	r0, 0x3f	; 63
     99a:	f8 94       	cli
     99c:	de bf       	out	0x3e, r29	; 62
     99e:	0f be       	out	0x3f, r0	; 63
     9a0:	cd bf       	out	0x3d, r28	; 61
     9a2:	cf 91       	pop	r28
     9a4:	df 91       	pop	r29
     9a6:	08 95       	ret

000009a8 <OSenq>:

// Inserts item into queue q
void OSenq(OSSignal *q, void *item)
{
     9a8:	df 93       	push	r29
     9aa:	cf 93       	push	r28
     9ac:	cd b7       	in	r28, 0x3d	; 61
     9ae:	de b7       	in	r29, 0x3e	; 62
     9b0:	2a 97       	sbiw	r28, 0x0a	; 10
     9b2:	0f b6       	in	r0, 0x3f	; 63
     9b4:	f8 94       	cli
     9b6:	de bf       	out	0x3e, r29	; 62
     9b8:	0f be       	out	0x3f, r0	; 63
     9ba:	cd bf       	out	0x3d, r28	; 61
     9bc:	98 87       	std	Y+8, r25	; 0x08
     9be:	8f 83       	std	Y+7, r24	; 0x07
     9c0:	7a 87       	std	Y+10, r23	; 0x0a
     9c2:	69 87       	std	Y+9, r22	; 0x09
	enterCritical();
     9c4:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <enterCritical>
	
	// wrong type no use
	if(q == NULL || q->type != QUEUE_TYPE){
     9c8:	8f 81       	ldd	r24, Y+7	; 0x07
     9ca:	98 85       	ldd	r25, Y+8	; 0x08
     9cc:	00 97       	sbiw	r24, 0x00	; 0
     9ce:	41 f0       	breq	.+16     	; 0x9e0 <OSenq+0x38>
     9d0:	8f 81       	ldd	r24, Y+7	; 0x07
     9d2:	98 85       	ldd	r25, Y+8	; 0x08
     9d4:	fc 01       	movw	r30, r24
     9d6:	80 81       	ld	r24, Z
     9d8:	91 81       	ldd	r25, Z+1	; 0x01
     9da:	81 30       	cpi	r24, 0x01	; 1
     9dc:	91 05       	cpc	r25, r1
     9de:	71 f0       	breq	.+28     	; 0x9fc <OSenq+0x54>
		leaveCritical();
     9e0:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <leaveCritical>
		return;
     9e4:	91 c0       	rjmp	.+290    	; 0xb08 <OSenq+0x160>
	}
	
	while(q->num == q->size){	// queue full
		leaveCritical();	// can let others to run here
     9e6:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <leaveCritical>
		OSSemPend(q_sema_full);
     9ea:	80 91 64 01 	lds	r24, 0x0164
     9ee:	90 91 65 01 	lds	r25, 0x0165
     9f2:	0e 94 59 02 	call	0x4b2	; 0x4b2 <OSSemPend>
		enterCritical();	// but after the pend, would go back to run
     9f6:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <enterCritical>
     9fa:	01 c0       	rjmp	.+2      	; 0x9fe <OSenq+0x56>
	if(q == NULL || q->type != QUEUE_TYPE){
		leaveCritical();
		return;
	}
	
	while(q->num == q->size){	// queue full
     9fc:	00 00       	nop
     9fe:	8f 81       	ldd	r24, Y+7	; 0x07
     a00:	98 85       	ldd	r25, Y+8	; 0x08
     a02:	fc 01       	movw	r30, r24
     a04:	22 81       	ldd	r18, Z+2	; 0x02
     a06:	33 81       	ldd	r19, Z+3	; 0x03
     a08:	8f 81       	ldd	r24, Y+7	; 0x07
     a0a:	98 85       	ldd	r25, Y+8	; 0x08
     a0c:	fc 01       	movw	r30, r24
     a0e:	86 81       	ldd	r24, Z+6	; 0x06
     a10:	97 81       	ldd	r25, Z+7	; 0x07
     a12:	28 17       	cp	r18, r24
     a14:	39 07       	cpc	r19, r25
     a16:	39 f3       	breq	.-50     	; 0x9e6 <OSenq+0x3e>
		OSSemPend(q_sema_full);
		enterCritical();	// but after the pend, would go back to run
	}
	
	unsigned shift = 
		(unsigned)(q->head - q->start + (q->num * q->esize)) %
     a18:	8f 81       	ldd	r24, Y+7	; 0x07
     a1a:	98 85       	ldd	r25, Y+8	; 0x08
     a1c:	fc 01       	movw	r30, r24
     a1e:	82 85       	ldd	r24, Z+10	; 0x0a
     a20:	93 85       	ldd	r25, Z+11	; 0x0b
     a22:	9c 01       	movw	r18, r24
     a24:	8f 81       	ldd	r24, Y+7	; 0x07
     a26:	98 85       	ldd	r25, Y+8	; 0x08
     a28:	fc 01       	movw	r30, r24
     a2a:	80 85       	ldd	r24, Z+8	; 0x08
     a2c:	91 85       	ldd	r25, Z+9	; 0x09
     a2e:	28 1b       	sub	r18, r24
     a30:	39 0b       	sbc	r19, r25
     a32:	8f 81       	ldd	r24, Y+7	; 0x07
     a34:	98 85       	ldd	r25, Y+8	; 0x08
     a36:	fc 01       	movw	r30, r24
     a38:	62 81       	ldd	r22, Z+2	; 0x02
     a3a:	73 81       	ldd	r23, Z+3	; 0x03
     a3c:	8f 81       	ldd	r24, Y+7	; 0x07
     a3e:	98 85       	ldd	r25, Y+8	; 0x08
     a40:	fc 01       	movw	r30, r24
     a42:	44 81       	ldd	r20, Z+4	; 0x04
     a44:	55 81       	ldd	r21, Z+5	; 0x05
     a46:	64 9f       	mul	r22, r20
     a48:	c0 01       	movw	r24, r0
     a4a:	65 9f       	mul	r22, r21
     a4c:	90 0d       	add	r25, r0
     a4e:	74 9f       	mul	r23, r20
     a50:	90 0d       	add	r25, r0
     a52:	11 24       	eor	r1, r1
     a54:	82 0f       	add	r24, r18
     a56:	93 1f       	adc	r25, r19
		(unsigned)(q->size * q->esize);
     a58:	2f 81       	ldd	r18, Y+7	; 0x07
     a5a:	38 85       	ldd	r19, Y+8	; 0x08
     a5c:	f9 01       	movw	r30, r18
     a5e:	66 81       	ldd	r22, Z+6	; 0x06
     a60:	77 81       	ldd	r23, Z+7	; 0x07
     a62:	2f 81       	ldd	r18, Y+7	; 0x07
     a64:	38 85       	ldd	r19, Y+8	; 0x08
     a66:	f9 01       	movw	r30, r18
     a68:	44 81       	ldd	r20, Z+4	; 0x04
     a6a:	55 81       	ldd	r21, Z+5	; 0x05
     a6c:	64 9f       	mul	r22, r20
     a6e:	90 01       	movw	r18, r0
     a70:	65 9f       	mul	r22, r21
     a72:	30 0d       	add	r19, r0
     a74:	74 9f       	mul	r23, r20
     a76:	30 0d       	add	r19, r0
     a78:	11 24       	eor	r1, r1
		leaveCritical();	// can let others to run here
		OSSemPend(q_sema_full);
		enterCritical();	// but after the pend, would go back to run
	}
	
	unsigned shift = 
     a7a:	b9 01       	movw	r22, r18
     a7c:	0e 94 47 10 	call	0x208e	; 0x208e <__udivmodhi4>
     a80:	9c 83       	std	Y+4, r25	; 0x04
     a82:	8b 83       	std	Y+3, r24	; 0x03
		(unsigned)(q->head - q->start + (q->num * q->esize)) %
		(unsigned)(q->size * q->esize);
	void *currentPos = q->start + shift;
     a84:	8f 81       	ldd	r24, Y+7	; 0x07
     a86:	98 85       	ldd	r25, Y+8	; 0x08
     a88:	fc 01       	movw	r30, r24
     a8a:	20 85       	ldd	r18, Z+8	; 0x08
     a8c:	31 85       	ldd	r19, Z+9	; 0x09
     a8e:	8b 81       	ldd	r24, Y+3	; 0x03
     a90:	9c 81       	ldd	r25, Y+4	; 0x04
     a92:	82 0f       	add	r24, r18
     a94:	93 1f       	adc	r25, r19
     a96:	9e 83       	std	Y+6, r25	; 0x06
     a98:	8d 83       	std	Y+5, r24	; 0x05
	
	// then copy the element into queue
	for(int i=0;i< q->esize; i++){
     a9a:	1a 82       	std	Y+2, r1	; 0x02
     a9c:	19 82       	std	Y+1, r1	; 0x01
     a9e:	15 c0       	rjmp	.+42     	; 0xaca <OSenq+0x122>
		*(char*)(currentPos + i) = *(char*)(item + i);
     aa0:	2d 81       	ldd	r18, Y+5	; 0x05
     aa2:	3e 81       	ldd	r19, Y+6	; 0x06
     aa4:	89 81       	ldd	r24, Y+1	; 0x01
     aa6:	9a 81       	ldd	r25, Y+2	; 0x02
     aa8:	82 0f       	add	r24, r18
     aaa:	93 1f       	adc	r25, r19
     aac:	49 85       	ldd	r20, Y+9	; 0x09
     aae:	5a 85       	ldd	r21, Y+10	; 0x0a
     ab0:	29 81       	ldd	r18, Y+1	; 0x01
     ab2:	3a 81       	ldd	r19, Y+2	; 0x02
     ab4:	24 0f       	add	r18, r20
     ab6:	35 1f       	adc	r19, r21
     ab8:	f9 01       	movw	r30, r18
     aba:	20 81       	ld	r18, Z
     abc:	fc 01       	movw	r30, r24
     abe:	20 83       	st	Z, r18
		(unsigned)(q->head - q->start + (q->num * q->esize)) %
		(unsigned)(q->size * q->esize);
	void *currentPos = q->start + shift;
	
	// then copy the element into queue
	for(int i=0;i< q->esize; i++){
     ac0:	89 81       	ldd	r24, Y+1	; 0x01
     ac2:	9a 81       	ldd	r25, Y+2	; 0x02
     ac4:	01 96       	adiw	r24, 0x01	; 1
     ac6:	9a 83       	std	Y+2, r25	; 0x02
     ac8:	89 83       	std	Y+1, r24	; 0x01
     aca:	8f 81       	ldd	r24, Y+7	; 0x07
     acc:	98 85       	ldd	r25, Y+8	; 0x08
     ace:	fc 01       	movw	r30, r24
     ad0:	24 81       	ldd	r18, Z+4	; 0x04
     ad2:	35 81       	ldd	r19, Z+5	; 0x05
     ad4:	89 81       	ldd	r24, Y+1	; 0x01
     ad6:	9a 81       	ldd	r25, Y+2	; 0x02
     ad8:	82 17       	cp	r24, r18
     ada:	93 07       	cpc	r25, r19
     adc:	0c f3       	brlt	.-62     	; 0xaa0 <OSenq+0xf8>
		*(char*)(currentPos + i) = *(char*)(item + i);
	}
	
	q->num++;
     ade:	8f 81       	ldd	r24, Y+7	; 0x07
     ae0:	98 85       	ldd	r25, Y+8	; 0x08
     ae2:	fc 01       	movw	r30, r24
     ae4:	82 81       	ldd	r24, Z+2	; 0x02
     ae6:	93 81       	ldd	r25, Z+3	; 0x03
     ae8:	9c 01       	movw	r18, r24
     aea:	2f 5f       	subi	r18, 0xFF	; 255
     aec:	3f 4f       	sbci	r19, 0xFF	; 255
     aee:	8f 81       	ldd	r24, Y+7	; 0x07
     af0:	98 85       	ldd	r25, Y+8	; 0x08
     af2:	fc 01       	movw	r30, r24
     af4:	33 83       	std	Z+3, r19	; 0x03
     af6:	22 83       	std	Z+2, r18	; 0x02
	
	// produced one
	OSSemPost(q_sema_empty);
     af8:	80 91 62 01 	lds	r24, 0x0162
     afc:	90 91 63 01 	lds	r25, 0x0163
     b00:	0e 94 46 03 	call	0x68c	; 0x68c <OSSemPost>
	
	leaveCritical();
     b04:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <leaveCritical>
}
     b08:	2a 96       	adiw	r28, 0x0a	; 10
     b0a:	0f b6       	in	r0, 0x3f	; 63
     b0c:	f8 94       	cli
     b0e:	de bf       	out	0x3e, r29	; 62
     b10:	0f be       	out	0x3f, r0	; 63
     b12:	cd bf       	out	0x3d, r28	; 61
     b14:	cf 91       	pop	r28
     b16:	df 91       	pop	r29
     b18:	08 95       	ret

00000b1a <OSdeq>:

// Removes and returns item from head of queue. Process blocks if queue is empty.
void *OSdeq(OSSignal *q)
{
     b1a:	df 93       	push	r29
     b1c:	cf 93       	push	r28
     b1e:	00 d0       	rcall	.+0      	; 0xb20 <OSdeq+0x6>
     b20:	00 d0       	rcall	.+0      	; 0xb22 <OSdeq+0x8>
     b22:	cd b7       	in	r28, 0x3d	; 61
     b24:	de b7       	in	r29, 0x3e	; 62
     b26:	9c 83       	std	Y+4, r25	; 0x04
     b28:	8b 83       	std	Y+3, r24	; 0x03
	enterCritical();
     b2a:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <enterCritical>
	
	// wrong type no use
	if(q == NULL || q->type != QUEUE_TYPE){
     b2e:	8b 81       	ldd	r24, Y+3	; 0x03
     b30:	9c 81       	ldd	r25, Y+4	; 0x04
     b32:	00 97       	sbiw	r24, 0x00	; 0
     b34:	49 f0       	breq	.+18     	; 0xb48 <OSdeq+0x2e>
     b36:	8b 81       	ldd	r24, Y+3	; 0x03
     b38:	9c 81       	ldd	r25, Y+4	; 0x04
     b3a:	dc 01       	movw	r26, r24
     b3c:	8d 91       	ld	r24, X+
     b3e:	9c 91       	ld	r25, X
     b40:	11 97       	sbiw	r26, 0x01	; 1
     b42:	81 30       	cpi	r24, 0x01	; 1
     b44:	91 05       	cpc	r25, r1
     b46:	11 f1       	breq	.+68     	; 0xb8c <OSdeq+0x72>
		leaveCritical();
     b48:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <leaveCritical>
     b4c:	8f c0       	rjmp	.+286    	; 0xc6c <OSdeq+0x152>
		return;
	}
	
	while(q->num <= 0){	// queue empty -- simply wait
		PORTD ^= 0b01000000;
     b4e:	8b e2       	ldi	r24, 0x2B	; 43
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	2b e2       	ldi	r18, 0x2B	; 43
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	f9 01       	movw	r30, r18
     b58:	30 81       	ld	r19, Z
     b5a:	20 e4       	ldi	r18, 0x40	; 64
     b5c:	23 27       	eor	r18, r19
     b5e:	dc 01       	movw	r26, r24
     b60:	2c 93       	st	X, r18
		leaveCritical();	// can let others to run here
     b62:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <leaveCritical>
		
		PORTD ^= 0b10000000;
     b66:	8b e2       	ldi	r24, 0x2B	; 43
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	2b e2       	ldi	r18, 0x2B	; 43
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	f9 01       	movw	r30, r18
     b70:	30 81       	ld	r19, Z
     b72:	20 e8       	ldi	r18, 0x80	; 128
     b74:	23 27       	eor	r18, r19
     b76:	dc 01       	movw	r26, r24
     b78:	2c 93       	st	X, r18
		OSSemPend(q_sema_empty);
     b7a:	80 91 62 01 	lds	r24, 0x0162
     b7e:	90 91 63 01 	lds	r25, 0x0163
     b82:	0e 94 59 02 	call	0x4b2	; 0x4b2 <OSSemPend>
		enterCritical();	// but after the pend, would go back to run
     b86:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <enterCritical>
     b8a:	01 c0       	rjmp	.+2      	; 0xb8e <OSdeq+0x74>
	if(q == NULL || q->type != QUEUE_TYPE){
		leaveCritical();
		return;
	}
	
	while(q->num <= 0){	// queue empty -- simply wait
     b8c:	00 00       	nop
     b8e:	8b 81       	ldd	r24, Y+3	; 0x03
     b90:	9c 81       	ldd	r25, Y+4	; 0x04
     b92:	fc 01       	movw	r30, r24
     b94:	82 81       	ldd	r24, Z+2	; 0x02
     b96:	93 81       	ldd	r25, Z+3	; 0x03
     b98:	18 16       	cp	r1, r24
     b9a:	19 06       	cpc	r1, r25
     b9c:	c4 f6       	brge	.-80     	; 0xb4e <OSdeq+0x34>
		PORTD ^= 0b10000000;
		OSSemPend(q_sema_empty);
		enterCritical();	// but after the pend, would go back to run
	}

	void* res = q->head;
     b9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ba0:	9c 81       	ldd	r25, Y+4	; 0x04
     ba2:	dc 01       	movw	r26, r24
     ba4:	1a 96       	adiw	r26, 0x0a	; 10
     ba6:	8d 91       	ld	r24, X+
     ba8:	9c 91       	ld	r25, X
     baa:	1b 97       	sbiw	r26, 0x0b	; 11
     bac:	9a 83       	std	Y+2, r25	; 0x02
     bae:	89 83       	std	Y+1, r24	; 0x01
	
	q->head += q->esize;
     bb0:	8b 81       	ldd	r24, Y+3	; 0x03
     bb2:	9c 81       	ldd	r25, Y+4	; 0x04
     bb4:	fc 01       	movw	r30, r24
     bb6:	22 85       	ldd	r18, Z+10	; 0x0a
     bb8:	33 85       	ldd	r19, Z+11	; 0x0b
     bba:	8b 81       	ldd	r24, Y+3	; 0x03
     bbc:	9c 81       	ldd	r25, Y+4	; 0x04
     bbe:	dc 01       	movw	r26, r24
     bc0:	14 96       	adiw	r26, 0x04	; 4
     bc2:	8d 91       	ld	r24, X+
     bc4:	9c 91       	ld	r25, X
     bc6:	15 97       	sbiw	r26, 0x05	; 5
     bc8:	28 0f       	add	r18, r24
     bca:	39 1f       	adc	r19, r25
     bcc:	8b 81       	ldd	r24, Y+3	; 0x03
     bce:	9c 81       	ldd	r25, Y+4	; 0x04
     bd0:	fc 01       	movw	r30, r24
     bd2:	33 87       	std	Z+11, r19	; 0x0b
     bd4:	22 87       	std	Z+10, r18	; 0x0a
	if(q->head == q->start + (q->num * q->esize) ){
     bd6:	8b 81       	ldd	r24, Y+3	; 0x03
     bd8:	9c 81       	ldd	r25, Y+4	; 0x04
     bda:	dc 01       	movw	r26, r24
     bdc:	1a 96       	adiw	r26, 0x0a	; 10
     bde:	2d 91       	ld	r18, X+
     be0:	3c 91       	ld	r19, X
     be2:	1b 97       	sbiw	r26, 0x0b	; 11
     be4:	8b 81       	ldd	r24, Y+3	; 0x03
     be6:	9c 81       	ldd	r25, Y+4	; 0x04
     be8:	fc 01       	movw	r30, r24
     bea:	40 85       	ldd	r20, Z+8	; 0x08
     bec:	51 85       	ldd	r21, Z+9	; 0x09
     bee:	8b 81       	ldd	r24, Y+3	; 0x03
     bf0:	9c 81       	ldd	r25, Y+4	; 0x04
     bf2:	dc 01       	movw	r26, r24
     bf4:	12 96       	adiw	r26, 0x02	; 2
     bf6:	ed 91       	ld	r30, X+
     bf8:	fc 91       	ld	r31, X
     bfa:	13 97       	sbiw	r26, 0x03	; 3
     bfc:	8b 81       	ldd	r24, Y+3	; 0x03
     bfe:	9c 81       	ldd	r25, Y+4	; 0x04
     c00:	dc 01       	movw	r26, r24
     c02:	14 96       	adiw	r26, 0x04	; 4
     c04:	6d 91       	ld	r22, X+
     c06:	7c 91       	ld	r23, X
     c08:	15 97       	sbiw	r26, 0x05	; 5
     c0a:	e6 9f       	mul	r30, r22
     c0c:	c0 01       	movw	r24, r0
     c0e:	e7 9f       	mul	r30, r23
     c10:	90 0d       	add	r25, r0
     c12:	f6 9f       	mul	r31, r22
     c14:	90 0d       	add	r25, r0
     c16:	11 24       	eor	r1, r1
     c18:	84 0f       	add	r24, r20
     c1a:	95 1f       	adc	r25, r21
     c1c:	28 17       	cp	r18, r24
     c1e:	39 07       	cpc	r19, r25
     c20:	61 f4       	brne	.+24     	; 0xc3a <OSdeq+0x120>
		q->head = q->start;
     c22:	8b 81       	ldd	r24, Y+3	; 0x03
     c24:	9c 81       	ldd	r25, Y+4	; 0x04
     c26:	fc 01       	movw	r30, r24
     c28:	20 85       	ldd	r18, Z+8	; 0x08
     c2a:	31 85       	ldd	r19, Z+9	; 0x09
     c2c:	8b 81       	ldd	r24, Y+3	; 0x03
     c2e:	9c 81       	ldd	r25, Y+4	; 0x04
     c30:	dc 01       	movw	r26, r24
     c32:	1b 96       	adiw	r26, 0x0b	; 11
     c34:	3c 93       	st	X, r19
     c36:	2e 93       	st	-X, r18
     c38:	1a 97       	sbiw	r26, 0x0a	; 10
	}
	
	q->num--;
     c3a:	8b 81       	ldd	r24, Y+3	; 0x03
     c3c:	9c 81       	ldd	r25, Y+4	; 0x04
     c3e:	fc 01       	movw	r30, r24
     c40:	82 81       	ldd	r24, Z+2	; 0x02
     c42:	93 81       	ldd	r25, Z+3	; 0x03
     c44:	9c 01       	movw	r18, r24
     c46:	21 50       	subi	r18, 0x01	; 1
     c48:	30 40       	sbci	r19, 0x00	; 0
     c4a:	8b 81       	ldd	r24, Y+3	; 0x03
     c4c:	9c 81       	ldd	r25, Y+4	; 0x04
     c4e:	dc 01       	movw	r26, r24
     c50:	13 96       	adiw	r26, 0x03	; 3
     c52:	3c 93       	st	X, r19
     c54:	2e 93       	st	-X, r18
     c56:	12 97       	sbiw	r26, 0x02	; 2
	
	// consumed one
	OSSemPost(q_sema_full);
     c58:	80 91 64 01 	lds	r24, 0x0164
     c5c:	90 91 65 01 	lds	r25, 0x0165
     c60:	0e 94 46 03 	call	0x68c	; 0x68c <OSSemPost>
	
	leaveCritical();
     c64:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <leaveCritical>
	return res;
     c68:	89 81       	ldd	r24, Y+1	; 0x01
     c6a:	9a 81       	ldd	r25, Y+2	; 0x02
}
     c6c:	0f 90       	pop	r0
     c6e:	0f 90       	pop	r0
     c70:	0f 90       	pop	r0
     c72:	0f 90       	pop	r0
     c74:	cf 91       	pop	r28
     c76:	df 91       	pop	r29
     c78:	08 95       	ret

00000c7a <OSdestroyQ>:

// Destroys the queue
void *OSdestroyQ(OSSignal *q)
{
     c7a:	df 93       	push	r29
     c7c:	cf 93       	push	r28
     c7e:	00 d0       	rcall	.+0      	; 0xc80 <OSdestroyQ+0x6>
     c80:	cd b7       	in	r28, 0x3d	; 61
     c82:	de b7       	in	r29, 0x3e	; 62
     c84:	9a 83       	std	Y+2, r25	; 0x02
     c86:	89 83       	std	Y+1, r24	; 0x01
	enterCritical();
     c88:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <enterCritical>
	if(q != NULL){
     c8c:	89 81       	ldd	r24, Y+1	; 0x01
     c8e:	9a 81       	ldd	r25, Y+2	; 0x02
     c90:	00 97       	sbiw	r24, 0x00	; 0
     c92:	91 f0       	breq	.+36     	; 0xcb8 <OSdestroyQ+0x3e>
		if(q->start != NULL)	free(q->start);
     c94:	89 81       	ldd	r24, Y+1	; 0x01
     c96:	9a 81       	ldd	r25, Y+2	; 0x02
     c98:	fc 01       	movw	r30, r24
     c9a:	80 85       	ldd	r24, Z+8	; 0x08
     c9c:	91 85       	ldd	r25, Z+9	; 0x09
     c9e:	00 97       	sbiw	r24, 0x00	; 0
     ca0:	39 f0       	breq	.+14     	; 0xcb0 <OSdestroyQ+0x36>
     ca2:	89 81       	ldd	r24, Y+1	; 0x01
     ca4:	9a 81       	ldd	r25, Y+2	; 0x02
     ca6:	fc 01       	movw	r30, r24
     ca8:	80 85       	ldd	r24, Z+8	; 0x08
     caa:	91 85       	ldd	r25, Z+9	; 0x09
     cac:	0e 94 63 11 	call	0x22c6	; 0x22c6 <free>
		free(q);
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	9a 81       	ldd	r25, Y+2	; 0x02
     cb4:	0e 94 63 11 	call	0x22c6	; 0x22c6 <free>
	}
	leaveCritical();
     cb8:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <leaveCritical>
}
     cbc:	0f 90       	pop	r0
     cbe:	0f 90       	pop	r0
     cc0:	cf 91       	pop	r28
     cc2:	df 91       	pop	r29
     cc4:	08 95       	ret

00000cc6 <runTaskFirstTime>:
	"pop r0	\n\t"\
	"out __SREG__, r0\n\t"\
	"pop r0	\n\t": : "r" (pxCurrentTCB):\
	);

void runTaskFirstTime(int i){
     cc6:	df 93       	push	r29
     cc8:	cf 93       	push	r28
     cca:	00 d0       	rcall	.+0      	; 0xccc <runTaskFirstTime+0x6>
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
     cd0:	9a 83       	std	Y+2, r25	; 0x02
     cd2:	89 83       	std	Y+1, r24	; 0x01
	cli();
     cd4:	f8 94       	cli
	currentTask = i;
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	9a 81       	ldd	r25, Y+2	; 0x02
     cda:	90 93 0b 01 	sts	0x010B, r25
     cde:	80 93 0a 01 	sts	0x010A, r24
	taskTable[currentTask].runflag = 1;
     ce2:	40 91 0a 01 	lds	r20, 0x010A
     ce6:	50 91 0b 01 	lds	r21, 0x010B
     cea:	2f e0       	ldi	r18, 0x0F	; 15
     cec:	31 e0       	ldi	r19, 0x01	; 1
     cee:	42 9f       	mul	r20, r18
     cf0:	c0 01       	movw	r24, r0
     cf2:	43 9f       	mul	r20, r19
     cf4:	90 0d       	add	r25, r0
     cf6:	52 9f       	mul	r21, r18
     cf8:	90 0d       	add	r25, r0
     cfa:	11 24       	eor	r1, r1
     cfc:	84 59       	subi	r24, 0x94	; 148
     cfe:	9e 4f       	sbci	r25, 0xFE	; 254
     d00:	21 e0       	ldi	r18, 0x01	; 1
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	fc 01       	movw	r30, r24
     d06:	31 83       	std	Z+1, r19	; 0x01
     d08:	20 83       	st	Z, r18
	taskTable[currentTask].skipedTimes = 0;
     d0a:	40 91 0a 01 	lds	r20, 0x010A
     d0e:	50 91 0b 01 	lds	r21, 0x010B
     d12:	2f e0       	ldi	r18, 0x0F	; 15
     d14:	31 e0       	ldi	r19, 0x01	; 1
     d16:	42 9f       	mul	r20, r18
     d18:	c0 01       	movw	r24, r0
     d1a:	43 9f       	mul	r20, r19
     d1c:	90 0d       	add	r25, r0
     d1e:	52 9f       	mul	r21, r18
     d20:	90 0d       	add	r25, r0
     d22:	11 24       	eor	r1, r1
     d24:	89 58       	subi	r24, 0x89	; 137
     d26:	9d 4f       	sbci	r25, 0xFD	; 253
     d28:	fc 01       	movw	r30, r24
     d2a:	11 82       	std	Z+1, r1	; 0x01
     d2c:	10 82       	st	Z, r1
    
	pxCurrentTCB = (unsigned long)(taskTable[currentTask].stack + TASK_STACK_SIZE - 1);
     d2e:	40 91 0a 01 	lds	r20, 0x010A
     d32:	50 91 0b 01 	lds	r21, 0x010B
     d36:	2f e0       	ldi	r18, 0x0F	; 15
     d38:	31 e0       	ldi	r19, 0x01	; 1
     d3a:	42 9f       	mul	r20, r18
     d3c:	c0 01       	movw	r24, r0
     d3e:	43 9f       	mul	r20, r19
     d40:	90 0d       	add	r25, r0
     d42:	52 9f       	mul	r21, r18
     d44:	90 0d       	add	r25, r0
     d46:	11 24       	eor	r1, r1
     d48:	86 5f       	subi	r24, 0xF6	; 246
     d4a:	9e 4f       	sbci	r25, 0xFE	; 254
     d4c:	84 59       	subi	r24, 0x94	; 148
     d4e:	9e 4f       	sbci	r25, 0xFE	; 254
     d50:	aa 27       	eor	r26, r26
     d52:	97 fd       	sbrc	r25, 7
     d54:	a0 95       	com	r26
     d56:	ba 2f       	mov	r27, r26
     d58:	80 93 66 01 	sts	0x0166, r24
     d5c:	90 93 67 01 	sts	0x0167, r25
     d60:	a0 93 68 01 	sts	0x0168, r26
     d64:	b0 93 69 01 	sts	0x0169, r27
	
    asm volatile ("\n\t"\
     d68:	a0 91 66 01 	lds	r26, 0x0166
     d6c:	b0 91 67 01 	lds	r27, 0x0167
     d70:	ad bf       	out	0x3d, r26	; 61
     d72:	be bf       	out	0x3e, r27	; 62
                  "lds r26, pxCurrentTCB \n\t"\
                  "lds r27, pxCurrentTCB+1 \n\t"\
                  "out __SP_L__, r26 \n\t"\
                  "out __SP_H__, r27 \n\t"\
                  );
	sei();
     d74:	78 94       	sei
    taskTable[currentTask].fptr(taskTable[currentTask].arg);
     d76:	40 91 0a 01 	lds	r20, 0x010A
     d7a:	50 91 0b 01 	lds	r21, 0x010B
     d7e:	2f e0       	ldi	r18, 0x0F	; 15
     d80:	31 e0       	ldi	r19, 0x01	; 1
     d82:	42 9f       	mul	r20, r18
     d84:	c0 01       	movw	r24, r0
     d86:	43 9f       	mul	r20, r19
     d88:	90 0d       	add	r25, r0
     d8a:	52 9f       	mul	r21, r18
     d8c:	90 0d       	add	r25, r0
     d8e:	11 24       	eor	r1, r1
     d90:	80 59       	subi	r24, 0x90	; 144
     d92:	9e 4f       	sbci	r25, 0xFE	; 254
     d94:	fc 01       	movw	r30, r24
     d96:	20 81       	ld	r18, Z
     d98:	31 81       	ldd	r19, Z+1	; 0x01
     d9a:	60 91 0a 01 	lds	r22, 0x010A
     d9e:	70 91 0b 01 	lds	r23, 0x010B
     da2:	4f e0       	ldi	r20, 0x0F	; 15
     da4:	51 e0       	ldi	r21, 0x01	; 1
     da6:	64 9f       	mul	r22, r20
     da8:	c0 01       	movw	r24, r0
     daa:	65 9f       	mul	r22, r21
     dac:	90 0d       	add	r25, r0
     dae:	74 9f       	mul	r23, r20
     db0:	90 0d       	add	r25, r0
     db2:	11 24       	eor	r1, r1
     db4:	8e 58       	subi	r24, 0x8E	; 142
     db6:	9e 4f       	sbci	r25, 0xFE	; 254
     db8:	fc 01       	movw	r30, r24
     dba:	80 81       	ld	r24, Z
     dbc:	91 81       	ldd	r25, Z+1	; 0x01
     dbe:	f9 01       	movw	r30, r18
     dc0:	09 95       	icall
}
     dc2:	0f 90       	pop	r0
     dc4:	0f 90       	pop	r0
     dc6:	cf 91       	pop	r28
     dc8:	df 91       	pop	r29
     dca:	08 95       	ret

00000dcc <OSMakeAtomic>:



void OSMakeAtomic()
{
     dcc:	df 93       	push	r29
     dce:	cf 93       	push	r28
     dd0:	cd b7       	in	r28, 0x3d	; 61
     dd2:	de b7       	in	r29, 0x3e	; 62
	// Disables interrupts to create an atomic section.
	cli();
     dd4:	f8 94       	cli
}
     dd6:	cf 91       	pop	r28
     dd8:	df 91       	pop	r29
     dda:	08 95       	ret

00000ddc <OSLeaveAtomic>:

void OSLeaveAtomic()
{
     ddc:	df 93       	push	r29
     dde:	cf 93       	push	r28
     de0:	cd b7       	in	r28, 0x3d	; 61
     de2:	de b7       	in	r29, 0x3e	; 62
	// Leaves atomic section by re-enabling interrupts.
	sei();
     de4:	78 94       	sei
}
     de6:	cf 91       	pop	r28
     de8:	df 91       	pop	r29
     dea:	08 95       	ret

00000dec <findNextTask>:
// DO NOT modify this!
void OSSwapTask() __attribute__ ((naked));


int findNextTask()
{
     dec:	df 93       	push	r29
     dee:	cf 93       	push	r28
     df0:	cd b7       	in	r28, 0x3d	; 61
     df2:	de b7       	in	r29, 0x3e	; 62
	// Note that OS_NUM_TASKS in kernel.h is the MAXIMUM number of tasks that can be created, not the actual number
	// created. So OS_NUM_TASKS can be 10 although in actual fact only 4 tasks were created. You should pick only amongst
	// these 4 tasks.
	
	// find the one being skipped the most of the times
	maxVal = -1;tempTaskNum = -1;
     df4:	8f ef       	ldi	r24, 0xFF	; 255
     df6:	9f ef       	ldi	r25, 0xFF	; 255
     df8:	90 93 1d 01 	sts	0x011D, r25
     dfc:	80 93 1c 01 	sts	0x011C, r24
     e00:	8f ef       	ldi	r24, 0xFF	; 255
     e02:	9f ef       	ldi	r25, 0xFF	; 255
     e04:	90 93 09 01 	sts	0x0109, r25
     e08:	80 93 08 01 	sts	0x0108, r24
	for(iter = 0; iter < task_counter; iter++){
     e0c:	10 92 6b 01 	sts	0x016B, r1
     e10:	10 92 6a 01 	sts	0x016A, r1
     e14:	9c c0       	rjmp	.+312    	; 0xf4e <findNextTask+0x162>
		if(taskTable[iter].sem_counter){
     e16:	40 91 6a 01 	lds	r20, 0x016A
     e1a:	50 91 6b 01 	lds	r21, 0x016B
     e1e:	2f e0       	ldi	r18, 0x0F	; 15
     e20:	31 e0       	ldi	r19, 0x01	; 1
     e22:	42 9f       	mul	r20, r18
     e24:	c0 01       	movw	r24, r0
     e26:	43 9f       	mul	r20, r19
     e28:	90 0d       	add	r25, r0
     e2a:	52 9f       	mul	r21, r18
     e2c:	90 0d       	add	r25, r0
     e2e:	11 24       	eor	r1, r1
     e30:	87 58       	subi	r24, 0x87	; 135
     e32:	9d 4f       	sbci	r25, 0xFD	; 253
     e34:	fc 01       	movw	r30, r24
     e36:	80 81       	ld	r24, Z
     e38:	91 81       	ldd	r25, Z+1	; 0x01
     e3a:	00 97       	sbiw	r24, 0x00	; 0
     e3c:	21 f1       	breq	.+72     	; 0xe86 <findNextTask+0x9a>
			taskTable[iter].skipedTimes++;
     e3e:	80 91 6a 01 	lds	r24, 0x016A
     e42:	90 91 6b 01 	lds	r25, 0x016B
     e46:	4f e0       	ldi	r20, 0x0F	; 15
     e48:	51 e0       	ldi	r21, 0x01	; 1
     e4a:	84 9f       	mul	r24, r20
     e4c:	90 01       	movw	r18, r0
     e4e:	85 9f       	mul	r24, r21
     e50:	30 0d       	add	r19, r0
     e52:	94 9f       	mul	r25, r20
     e54:	30 0d       	add	r19, r0
     e56:	11 24       	eor	r1, r1
     e58:	29 58       	subi	r18, 0x89	; 137
     e5a:	3d 4f       	sbci	r19, 0xFD	; 253
     e5c:	f9 01       	movw	r30, r18
     e5e:	20 81       	ld	r18, Z
     e60:	31 81       	ldd	r19, Z+1	; 0x01
     e62:	2f 5f       	subi	r18, 0xFF	; 255
     e64:	3f 4f       	sbci	r19, 0xFF	; 255
     e66:	6f e0       	ldi	r22, 0x0F	; 15
     e68:	71 e0       	ldi	r23, 0x01	; 1
     e6a:	86 9f       	mul	r24, r22
     e6c:	a0 01       	movw	r20, r0
     e6e:	87 9f       	mul	r24, r23
     e70:	50 0d       	add	r21, r0
     e72:	96 9f       	mul	r25, r22
     e74:	50 0d       	add	r21, r0
     e76:	11 24       	eor	r1, r1
     e78:	ca 01       	movw	r24, r20
     e7a:	89 58       	subi	r24, 0x89	; 137
     e7c:	9d 4f       	sbci	r25, 0xFD	; 253
     e7e:	fc 01       	movw	r30, r24
     e80:	31 83       	std	Z+1, r19	; 0x01
     e82:	20 83       	st	Z, r18
			continue;
     e84:	5b c0       	rjmp	.+182    	; 0xf3c <findNextTask+0x150>
		} else if(taskTable[iter].skipedTimes > maxVal){
     e86:	40 91 6a 01 	lds	r20, 0x016A
     e8a:	50 91 6b 01 	lds	r21, 0x016B
     e8e:	2f e0       	ldi	r18, 0x0F	; 15
     e90:	31 e0       	ldi	r19, 0x01	; 1
     e92:	42 9f       	mul	r20, r18
     e94:	c0 01       	movw	r24, r0
     e96:	43 9f       	mul	r20, r19
     e98:	90 0d       	add	r25, r0
     e9a:	52 9f       	mul	r21, r18
     e9c:	90 0d       	add	r25, r0
     e9e:	11 24       	eor	r1, r1
     ea0:	89 58       	subi	r24, 0x89	; 137
     ea2:	9d 4f       	sbci	r25, 0xFD	; 253
     ea4:	fc 01       	movw	r30, r24
     ea6:	20 81       	ld	r18, Z
     ea8:	31 81       	ldd	r19, Z+1	; 0x01
     eaa:	80 91 1c 01 	lds	r24, 0x011C
     eae:	90 91 1d 01 	lds	r25, 0x011D
     eb2:	82 17       	cp	r24, r18
     eb4:	93 07       	cpc	r25, r19
     eb6:	fc f4       	brge	.+62     	; 0xef6 <findNextTask+0x10a>
			tempTaskNum = iter;
     eb8:	80 91 6a 01 	lds	r24, 0x016A
     ebc:	90 91 6b 01 	lds	r25, 0x016B
     ec0:	90 93 09 01 	sts	0x0109, r25
     ec4:	80 93 08 01 	sts	0x0108, r24
			maxVal = taskTable[iter].skipedTimes;
     ec8:	40 91 6a 01 	lds	r20, 0x016A
     ecc:	50 91 6b 01 	lds	r21, 0x016B
     ed0:	2f e0       	ldi	r18, 0x0F	; 15
     ed2:	31 e0       	ldi	r19, 0x01	; 1
     ed4:	42 9f       	mul	r20, r18
     ed6:	c0 01       	movw	r24, r0
     ed8:	43 9f       	mul	r20, r19
     eda:	90 0d       	add	r25, r0
     edc:	52 9f       	mul	r21, r18
     ede:	90 0d       	add	r25, r0
     ee0:	11 24       	eor	r1, r1
     ee2:	89 58       	subi	r24, 0x89	; 137
     ee4:	9d 4f       	sbci	r25, 0xFD	; 253
     ee6:	fc 01       	movw	r30, r24
     ee8:	80 81       	ld	r24, Z
     eea:	91 81       	ldd	r25, Z+1	; 0x01
     eec:	90 93 1d 01 	sts	0x011D, r25
     ef0:	80 93 1c 01 	sts	0x011C, r24
     ef4:	23 c0       	rjmp	.+70     	; 0xf3c <findNextTask+0x150>
		} else{
			taskTable[iter].skipedTimes++;
     ef6:	80 91 6a 01 	lds	r24, 0x016A
     efa:	90 91 6b 01 	lds	r25, 0x016B
     efe:	4f e0       	ldi	r20, 0x0F	; 15
     f00:	51 e0       	ldi	r21, 0x01	; 1
     f02:	84 9f       	mul	r24, r20
     f04:	90 01       	movw	r18, r0
     f06:	85 9f       	mul	r24, r21
     f08:	30 0d       	add	r19, r0
     f0a:	94 9f       	mul	r25, r20
     f0c:	30 0d       	add	r19, r0
     f0e:	11 24       	eor	r1, r1
     f10:	29 58       	subi	r18, 0x89	; 137
     f12:	3d 4f       	sbci	r19, 0xFD	; 253
     f14:	f9 01       	movw	r30, r18
     f16:	20 81       	ld	r18, Z
     f18:	31 81       	ldd	r19, Z+1	; 0x01
     f1a:	2f 5f       	subi	r18, 0xFF	; 255
     f1c:	3f 4f       	sbci	r19, 0xFF	; 255
     f1e:	6f e0       	ldi	r22, 0x0F	; 15
     f20:	71 e0       	ldi	r23, 0x01	; 1
     f22:	86 9f       	mul	r24, r22
     f24:	a0 01       	movw	r20, r0
     f26:	87 9f       	mul	r24, r23
     f28:	50 0d       	add	r21, r0
     f2a:	96 9f       	mul	r25, r22
     f2c:	50 0d       	add	r21, r0
     f2e:	11 24       	eor	r1, r1
     f30:	ca 01       	movw	r24, r20
     f32:	89 58       	subi	r24, 0x89	; 137
     f34:	9d 4f       	sbci	r25, 0xFD	; 253
     f36:	fc 01       	movw	r30, r24
     f38:	31 83       	std	Z+1, r19	; 0x01
     f3a:	20 83       	st	Z, r18
	// created. So OS_NUM_TASKS can be 10 although in actual fact only 4 tasks were created. You should pick only amongst
	// these 4 tasks.
	
	// find the one being skipped the most of the times
	maxVal = -1;tempTaskNum = -1;
	for(iter = 0; iter < task_counter; iter++){
     f3c:	80 91 6a 01 	lds	r24, 0x016A
     f40:	90 91 6b 01 	lds	r25, 0x016B
     f44:	01 96       	adiw	r24, 0x01	; 1
     f46:	90 93 6b 01 	sts	0x016B, r25
     f4a:	80 93 6a 01 	sts	0x016A, r24
     f4e:	20 91 6a 01 	lds	r18, 0x016A
     f52:	30 91 6b 01 	lds	r19, 0x016B
     f56:	80 91 1e 01 	lds	r24, 0x011E
     f5a:	90 91 1f 01 	lds	r25, 0x011F
     f5e:	28 17       	cp	r18, r24
     f60:	39 07       	cpc	r19, r25
     f62:	0c f4       	brge	.+2      	; 0xf66 <findNextTask+0x17a>
     f64:	58 cf       	rjmp	.-336    	; 0xe16 <findNextTask+0x2a>
		} else{
			taskTable[iter].skipedTimes++;
		}
	}
	
	return tempTaskNum;	// unsuccessful
     f66:	80 91 08 01 	lds	r24, 0x0108
     f6a:	90 91 09 01 	lds	r25, 0x0109
}
     f6e:	cf 91       	pop	r28
     f70:	df 91       	pop	r29
     f72:	08 95       	ret

00000f74 <OSSwapTask>:
 {
	// assumption: when this method is being called, there's always a running task; otherwise it would do nothing
	//if(currentTask < 0)	return;
	
	// assumption: when this method is being called, there's always a running task; otherwise it would do nothing
	if(currentTask > OS_NUM_TASKS || currentTask < -1){
     f74:	80 91 0a 01 	lds	r24, 0x010A
     f78:	90 91 0b 01 	lds	r25, 0x010B
     f7c:	85 30       	cpi	r24, 0x05	; 5
     f7e:	91 05       	cpc	r25, r1
     f80:	44 f4       	brge	.+16     	; 0xf92 <OSSwapTask+0x1e>
     f82:	80 91 0a 01 	lds	r24, 0x010A
     f86:	90 91 0b 01 	lds	r25, 0x010B
     f8a:	2f ef       	ldi	r18, 0xFF	; 255
     f8c:	8f 3f       	cpi	r24, 0xFF	; 255
     f8e:	92 07       	cpc	r25, r18
     f90:	14 f4       	brge	.+4      	; 0xf96 <OSSwapTask+0x22>
		// use this code to test overflow
		// value of current task over flow
		//PORTD ^= 0b00010000;
		asm("ret");
     f92:	08 95       	ret
     f94:	09 c0       	rjmp	.+18     	; 0xfa8 <OSSwapTask+0x34>
	} else if(currentTask == -1){
     f96:	80 91 0a 01 	lds	r24, 0x010A
     f9a:	90 91 0b 01 	lds	r25, 0x010B
     f9e:	ef ef       	ldi	r30, 0xFF	; 255
     fa0:	8f 3f       	cpi	r24, 0xFF	; 255
     fa2:	9e 07       	cpc	r25, r30
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <OSSwapTask+0x34>
		asm("ret");	// never got any task run
     fa6:	08 95       	ret
	}
	
	// Call findNextTask to decide which task to run next.
	tempTaskNum = findNextTask();
     fa8:	0e 94 f6 06 	call	0xdec	; 0xdec <findNextTask>
     fac:	90 93 09 01 	sts	0x0109, r25
     fb0:	80 93 08 01 	sts	0x0108, r24
	if(tempTaskNum < 0)	asm("ret");	// no task to swap
     fb4:	80 91 08 01 	lds	r24, 0x0108
     fb8:	90 91 09 01 	lds	r25, 0x0109
     fbc:	99 23       	and	r25, r25
     fbe:	0c f4       	brge	.+2      	; 0xfc2 <OSSwapTask+0x4e>
     fc0:	08 95       	ret
	cli();
     fc2:	f8 94       	cli
	// Save the context of the current task, and copy the task stack pointer to the task's entry in the Task Control Block (tcb).
	portSAVE_CONTEXT();
     fc4:	0f 92       	push	r0
     fc6:	0f b6       	in	r0, 0x3f	; 63
     fc8:	0f 92       	push	r0
     fca:	1f 92       	push	r1
     fcc:	11 24       	eor	r1, r1
     fce:	2f 92       	push	r2
     fd0:	3f 92       	push	r3
     fd2:	4f 92       	push	r4
     fd4:	5f 92       	push	r5
     fd6:	6f 92       	push	r6
     fd8:	7f 92       	push	r7
     fda:	8f 92       	push	r8
     fdc:	9f 92       	push	r9
     fde:	af 92       	push	r10
     fe0:	bf 92       	push	r11
     fe2:	cf 92       	push	r12
     fe4:	df 92       	push	r13
     fe6:	ef 92       	push	r14
     fe8:	ff 92       	push	r15
     fea:	0f 93       	push	r16
     fec:	1f 93       	push	r17
     fee:	2f 93       	push	r18
     ff0:	3f 93       	push	r19
     ff2:	4f 93       	push	r20
     ff4:	5f 93       	push	r21
     ff6:	6f 93       	push	r22
     ff8:	7f 93       	push	r23
     ffa:	8f 93       	push	r24
     ffc:	9f 93       	push	r25
     ffe:	af 93       	push	r26
    1000:	bf 93       	push	r27
    1002:	cf 93       	push	r28
    1004:	df 93       	push	r29
    1006:	ef 93       	push	r30
    1008:	ff 93       	push	r31
    100a:	ad b7       	in	r26, 0x3d	; 61
    100c:	be b7       	in	r27, 0x3e	; 62
    100e:	b0 93 67 01 	sts	0x0167, r27
    1012:	a0 93 66 01 	sts	0x0166, r26
	
	// save the current stack pointer
	taskTable[currentTask].stack_ptr = pxCurrentTCB;
    1016:	60 91 0a 01 	lds	r22, 0x010A
    101a:	70 91 0b 01 	lds	r23, 0x010B
    101e:	80 91 66 01 	lds	r24, 0x0166
    1022:	90 91 67 01 	lds	r25, 0x0167
    1026:	a0 91 68 01 	lds	r26, 0x0168
    102a:	b0 91 69 01 	lds	r27, 0x0169
    102e:	4f e0       	ldi	r20, 0x0F	; 15
    1030:	51 e0       	ldi	r21, 0x01	; 1
    1032:	64 9f       	mul	r22, r20
    1034:	90 01       	movw	r18, r0
    1036:	65 9f       	mul	r22, r21
    1038:	30 0d       	add	r19, r0
    103a:	74 9f       	mul	r23, r20
    103c:	30 0d       	add	r19, r0
    103e:	11 24       	eor	r1, r1
    1040:	2c 58       	subi	r18, 0x8C	; 140
    1042:	3e 4f       	sbci	r19, 0xFE	; 254
    1044:	f9 01       	movw	r30, r18
    1046:	80 83       	st	Z, r24
    1048:	91 83       	std	Z+1, r25	; 0x01
    104a:	a2 83       	std	Z+2, r26	; 0x02
    104c:	b3 83       	std	Z+3, r27	; 0x03
	
	// update the "currentTask" to be the next task to run
	currentTask = tempTaskNum;
    104e:	80 91 08 01 	lds	r24, 0x0108
    1052:	90 91 09 01 	lds	r25, 0x0109
    1056:	90 93 0b 01 	sts	0x010B, r25
    105a:	80 93 0a 01 	sts	0x010A, r24
	
	TTaskBlock *t = &taskTable[currentTask];
    105e:	80 91 0a 01 	lds	r24, 0x010A
    1062:	90 91 0b 01 	lds	r25, 0x010B
    1066:	ac 01       	movw	r20, r24
    1068:	2f e0       	ldi	r18, 0x0F	; 15
    106a:	31 e0       	ldi	r19, 0x01	; 1
    106c:	42 9f       	mul	r20, r18
    106e:	c0 01       	movw	r24, r0
    1070:	43 9f       	mul	r20, r19
    1072:	90 0d       	add	r25, r0
    1074:	52 9f       	mul	r21, r18
    1076:	90 0d       	add	r25, r0
    1078:	11 24       	eor	r1, r1
    107a:	84 59       	subi	r24, 0x94	; 148
    107c:	9e 4f       	sbci	r25, 0xFE	; 254
    107e:	9a 83       	std	Y+2, r25	; 0x02
    1080:	89 83       	std	Y+1, r24	; 0x01
	
	if(t->runflag){	// has been run
    1082:	89 81       	ldd	r24, Y+1	; 0x01
    1084:	9a 81       	ldd	r25, Y+2	; 0x02
    1086:	fc 01       	movw	r30, r24
    1088:	80 81       	ld	r24, Z
    108a:	91 81       	ldd	r25, Z+1	; 0x01
    108c:	00 97       	sbiw	r24, 0x00	; 0
    108e:	09 f4       	brne	.+2      	; 0x1092 <OSSwapTask+0x11e>
    1090:	51 c0       	rjmp	.+162    	; 0x1134 <OSSwapTask+0x1c0>
		// reset the skiped times flag
		t->skipedTimes = 0;
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	9a 81       	ldd	r25, Y+2	; 0x02
    1096:	85 5f       	subi	r24, 0xF5	; 245
    1098:	9e 4f       	sbci	r25, 0xFE	; 254
    109a:	fc 01       	movw	r30, r24
    109c:	11 82       	std	Z+1, r1	; 0x01
    109e:	10 82       	st	Z, r1
		
		// get the stack pointer saved
		pxCurrentTCB = taskTable[currentTask].stack_ptr;
    10a0:	40 91 0a 01 	lds	r20, 0x010A
    10a4:	50 91 0b 01 	lds	r21, 0x010B
    10a8:	2f e0       	ldi	r18, 0x0F	; 15
    10aa:	31 e0       	ldi	r19, 0x01	; 1
    10ac:	42 9f       	mul	r20, r18
    10ae:	c0 01       	movw	r24, r0
    10b0:	43 9f       	mul	r20, r19
    10b2:	90 0d       	add	r25, r0
    10b4:	52 9f       	mul	r21, r18
    10b6:	90 0d       	add	r25, r0
    10b8:	11 24       	eor	r1, r1
    10ba:	8c 58       	subi	r24, 0x8C	; 140
    10bc:	9e 4f       	sbci	r25, 0xFE	; 254
    10be:	fc 01       	movw	r30, r24
    10c0:	80 81       	ld	r24, Z
    10c2:	91 81       	ldd	r25, Z+1	; 0x01
    10c4:	a2 81       	ldd	r26, Z+2	; 0x02
    10c6:	b3 81       	ldd	r27, Z+3	; 0x03
    10c8:	80 93 66 01 	sts	0x0166, r24
    10cc:	90 93 67 01 	sts	0x0167, r25
    10d0:	a0 93 68 01 	sts	0x0168, r26
    10d4:	b0 93 69 01 	sts	0x0169, r27
		portRESTORE_CONTEXT();
    10d8:	80 91 66 01 	lds	r24, 0x0166
    10dc:	90 91 67 01 	lds	r25, 0x0167
    10e0:	a0 91 68 01 	lds	r26, 0x0168
    10e4:	b0 91 69 01 	lds	r27, 0x0169
    10e8:	8d bf       	out	0x3d, r24	; 61
    10ea:	9e bf       	out	0x3e, r25	; 62
    10ec:	ff 91       	pop	r31
    10ee:	ef 91       	pop	r30
    10f0:	df 91       	pop	r29
    10f2:	cf 91       	pop	r28
    10f4:	bf 91       	pop	r27
    10f6:	af 91       	pop	r26
    10f8:	9f 91       	pop	r25
    10fa:	8f 91       	pop	r24
    10fc:	7f 91       	pop	r23
    10fe:	6f 91       	pop	r22
    1100:	5f 91       	pop	r21
    1102:	4f 91       	pop	r20
    1104:	3f 91       	pop	r19
    1106:	2f 91       	pop	r18
    1108:	1f 91       	pop	r17
    110a:	0f 91       	pop	r16
    110c:	ff 90       	pop	r15
    110e:	ef 90       	pop	r14
    1110:	df 90       	pop	r13
    1112:	cf 90       	pop	r12
    1114:	bf 90       	pop	r11
    1116:	af 90       	pop	r10
    1118:	9f 90       	pop	r9
    111a:	8f 90       	pop	r8
    111c:	7f 90       	pop	r7
    111e:	6f 90       	pop	r6
    1120:	5f 90       	pop	r5
    1122:	4f 90       	pop	r4
    1124:	3f 90       	pop	r3
    1126:	2f 90       	pop	r2
    1128:	1f 90       	pop	r1
    112a:	0f 90       	pop	r0
    112c:	0f be       	out	0x3f, r0	; 63
    112e:	0f 90       	pop	r0
		sei();
    1130:	78 94       	sei
    1132:	06 c0       	rjmp	.+12     	; 0x1140 <OSSwapTask+0x1cc>
	}else{	// never run -> then run
		runTaskFirstTime(currentTask);
    1134:	80 91 0a 01 	lds	r24, 0x010A
    1138:	90 91 0b 01 	lds	r25, 0x010B
    113c:	0e 94 63 06 	call	0xcc6	; 0xcc6 <runTaskFirstTime>
	}
	
	// Do not modify the line below!	
	asm("ret");
    1140:	08 95       	ret

00001142 <__vector_14>:
// ISR for the timer. IMPLEMENT ONLY IN PART 2!


ISR(TIMER0_COMPA_vect, ISR_NAKED)
{
	cli();
    1142:	f8 94       	cli
	
	OSSwapTask();
    1144:	0e 94 ba 07 	call	0xf74	; 0xf74 <OSSwapTask>
	
	// Do not change this!
	asm("reti");
    1148:	18 95       	reti

0000114a <OSInit>:
}

void OSInit()
{ 
    114a:	df 93       	push	r29
    114c:	cf 93       	push	r28
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
	// Initialize all OS state variables, hardware used DIRECTLY by the OS, etc etc. Do not initialize variables or hardware
	// used by the application. Only those used by the OS.
	int i;
	
	// initialize timer 0
	TCNT0 = 0; OCR0A = 100;
    1152:	86 e4       	ldi	r24, 0x46	; 70
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	fc 01       	movw	r30, r24
    1158:	10 82       	st	Z, r1
    115a:	87 e4       	ldi	r24, 0x47	; 71
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	24 e6       	ldi	r18, 0x64	; 100
    1160:	fc 01       	movw	r30, r24
    1162:	20 83       	st	Z, r18
	TCCR0A = 0b00000010;
    1164:	84 e4       	ldi	r24, 0x44	; 68
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	22 e0       	ldi	r18, 0x02	; 2
    116a:	fc 01       	movw	r30, r24
    116c:	20 83       	st	Z, r18
	TCCR0B = 0b00000101;
    116e:	85 e4       	ldi	r24, 0x45	; 69
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	25 e0       	ldi	r18, 0x05	; 5
    1174:	fc 01       	movw	r30, r24
    1176:	20 83       	st	Z, r18
}
    1178:	cf 91       	pop	r28
    117a:	df 91       	pop	r29
    117c:	08 95       	ret

0000117e <OSAddTask>:
// First argument is a pointer to the task's function code, the second is a priority number (0=highest priority)
// and the 3rd argument is an argument that will be passed to the task function the first time it is run.
// E.g. OSAddTask(task1, 0, (void *) 5) causes a task called task1 to be created with priority 0, and the integer
// 5 is passed to task1 when it is first called. See app.c to fully understand how OSAddTask is used.
int OSAddTask(void (*taskptr)(void *), int prio, void* arg)
{
    117e:	df 93       	push	r29
    1180:	cf 93       	push	r28
    1182:	cd b7       	in	r28, 0x3d	; 61
    1184:	de b7       	in	r29, 0x3e	; 62
    1186:	28 97       	sbiw	r28, 0x08	; 8
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	f8 94       	cli
    118c:	de bf       	out	0x3e, r29	; 62
    118e:	0f be       	out	0x3f, r0	; 63
    1190:	cd bf       	out	0x3d, r28	; 61
    1192:	9c 83       	std	Y+4, r25	; 0x04
    1194:	8b 83       	std	Y+3, r24	; 0x03
    1196:	7e 83       	std	Y+6, r23	; 0x06
    1198:	6d 83       	std	Y+5, r22	; 0x05
    119a:	58 87       	std	Y+8, r21	; 0x08
    119c:	4f 83       	std	Y+7, r20	; 0x07
	// Adds a new entry to the TCB. Returns a -1 if # of tasks > OS_NUM_TASKS. Note that OS_NUM_TASKS is the MAXIMUM
	// number of tasks that can be created, not the actual number.
	if(task_counter >= OS_NUM_TASKS)	return -1;
    119e:	80 91 1e 01 	lds	r24, 0x011E
    11a2:	90 91 1f 01 	lds	r25, 0x011F
    11a6:	84 30       	cpi	r24, 0x04	; 4
    11a8:	91 05       	cpc	r25, r1
    11aa:	1c f0       	brlt	.+6      	; 0x11b2 <OSAddTask+0x34>
    11ac:	8f ef       	ldi	r24, 0xFF	; 255
    11ae:	9f ef       	ldi	r25, 0xFF	; 255
    11b0:	3a c0       	rjmp	.+116    	; 0x1226 <OSAddTask+0xa8>
	TTaskBlock *t = &taskTable[task_counter++];
    11b2:	80 91 1e 01 	lds	r24, 0x011E
    11b6:	90 91 1f 01 	lds	r25, 0x011F
    11ba:	bc 01       	movw	r22, r24
    11bc:	4f e0       	ldi	r20, 0x0F	; 15
    11be:	51 e0       	ldi	r21, 0x01	; 1
    11c0:	64 9f       	mul	r22, r20
    11c2:	90 01       	movw	r18, r0
    11c4:	65 9f       	mul	r22, r21
    11c6:	30 0d       	add	r19, r0
    11c8:	74 9f       	mul	r23, r20
    11ca:	30 0d       	add	r19, r0
    11cc:	11 24       	eor	r1, r1
    11ce:	24 59       	subi	r18, 0x94	; 148
    11d0:	3e 4f       	sbci	r19, 0xFE	; 254
    11d2:	3a 83       	std	Y+2, r19	; 0x02
    11d4:	29 83       	std	Y+1, r18	; 0x01
    11d6:	01 96       	adiw	r24, 0x01	; 1
    11d8:	90 93 1f 01 	sts	0x011F, r25
    11dc:	80 93 1e 01 	sts	0x011E, r24
	t->fptr = taskptr;
    11e0:	89 81       	ldd	r24, Y+1	; 0x01
    11e2:	9a 81       	ldd	r25, Y+2	; 0x02
    11e4:	2b 81       	ldd	r18, Y+3	; 0x03
    11e6:	3c 81       	ldd	r19, Y+4	; 0x04
    11e8:	fc 01       	movw	r30, r24
    11ea:	35 83       	std	Z+5, r19	; 0x05
    11ec:	24 83       	std	Z+4, r18	; 0x04
	t->prio = prio;
    11ee:	89 81       	ldd	r24, Y+1	; 0x01
    11f0:	9a 81       	ldd	r25, Y+2	; 0x02
    11f2:	2d 81       	ldd	r18, Y+5	; 0x05
    11f4:	3e 81       	ldd	r19, Y+6	; 0x06
    11f6:	fc 01       	movw	r30, r24
    11f8:	33 83       	std	Z+3, r19	; 0x03
    11fa:	22 83       	std	Z+2, r18	; 0x02
	t->arg = arg;
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
    11fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1200:	2f 81       	ldd	r18, Y+7	; 0x07
    1202:	38 85       	ldd	r19, Y+8	; 0x08
    1204:	fc 01       	movw	r30, r24
    1206:	37 83       	std	Z+7, r19	; 0x07
    1208:	26 83       	std	Z+6, r18	; 0x06
	t->runflag = 0;
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	9a 81       	ldd	r25, Y+2	; 0x02
    120e:	fc 01       	movw	r30, r24
    1210:	11 82       	std	Z+1, r1	; 0x01
    1212:	10 82       	st	Z, r1
	t->sem_counter = 0;
    1214:	89 81       	ldd	r24, Y+1	; 0x01
    1216:	9a 81       	ldd	r25, Y+2	; 0x02
    1218:	83 5f       	subi	r24, 0xF3	; 243
    121a:	9e 4f       	sbci	r25, 0xFE	; 254
    121c:	fc 01       	movw	r30, r24
    121e:	11 82       	std	Z+1, r1	; 0x01
    1220:	10 82       	st	Z, r1
	
	return 0;
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	90 e0       	ldi	r25, 0x00	; 0
}
    1226:	28 96       	adiw	r28, 0x08	; 8
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	cd bf       	out	0x3d, r28	; 61
    1232:	cf 91       	pop	r28
    1234:	df 91       	pop	r29
    1236:	08 95       	ret

00001238 <OSRun>:

void OSRun()
{
    1238:	df 93       	push	r29
    123a:	cf 93       	push	r28
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62
	// start timer 0
	TIMSK0 |= 0b10;
    1240:	8e e6       	ldi	r24, 0x6E	; 110
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	2e e6       	ldi	r18, 0x6E	; 110
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	f9 01       	movw	r30, r18
    124a:	20 81       	ld	r18, Z
    124c:	22 60       	ori	r18, 0x02	; 2
    124e:	fc 01       	movw	r30, r24
    1250:	20 83       	st	Z, r18
	// enable global interrupt
	sei();
    1252:	78 94       	sei
	
	// Starts by executing the first task
	currentTask = 0;
    1254:	10 92 0b 01 	sts	0x010B, r1
    1258:	10 92 0a 01 	sts	0x010A, r1
	runTaskFirstTime(currentTask);
    125c:	80 91 0a 01 	lds	r24, 0x010A
    1260:	90 91 0b 01 	lds	r25, 0x010B
    1264:	0e 94 63 06 	call	0xcc6	; 0xcc6 <runTaskFirstTime>
    1268:	cf 91       	pop	r28
    126a:	df 91       	pop	r29
    126c:	08 95       	ret

0000126e <setupSerial>:
#define enter_atomic() cli()
#define leave_atomic() sei()

// Set up for 9600 8N1
void setupSerial()
{
    126e:	df 93       	push	r29
    1270:	cf 93       	push	r28
    1272:	cd b7       	in	r28, 0x3d	; 61
    1274:	de b7       	in	r29, 0x3e	; 62
	enter_atomic();
    1276:	f8 94       	cli
	qcount=0;
    1278:	10 92 f3 05 	sts	0x05F3, r1
    127c:	10 92 f2 05 	sts	0x05F2, r1
	qhead=0;
    1280:	10 92 37 06 	sts	0x0637, r1
    1284:	10 92 36 06 	sts	0x0636, r1
	qtail=0;
    1288:	10 92 f5 05 	sts	0x05F5, r1
    128c:	10 92 f4 05 	sts	0x05F4, r1
	lqhead=0;
    1290:	10 92 ef 05 	sts	0x05EF, r1
    1294:	10 92 ee 05 	sts	0x05EE, r1
	lqtail=0;
    1298:	10 92 f1 05 	sts	0x05F1, r1
    129c:	10 92 f0 05 	sts	0x05F0, r1
	lqcount=0;
    12a0:	10 92 ed 05 	sts	0x05ED, r1
    12a4:	10 92 ec 05 	sts	0x05EC, r1

	// Set up baud rate generator. UBBR=16000000/(16*9600)-1 = 103
	UBRR0L=103;
    12a8:	84 ec       	ldi	r24, 0xC4	; 196
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	27 e6       	ldi	r18, 0x67	; 103
    12ae:	fc 01       	movw	r30, r24
    12b0:	20 83       	st	Z, r18
	UBRR0H=0;
    12b2:	85 ec       	ldi	r24, 0xC5	; 197
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	fc 01       	movw	r30, r24
    12b8:	10 82       	st	Z, r1
	
	// Set up 8N1
	UCSR0C=0b110;
    12ba:	82 ec       	ldi	r24, 0xC2	; 194
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	26 e0       	ldi	r18, 0x06	; 6
    12c0:	fc 01       	movw	r30, r24
    12c2:	20 83       	st	Z, r18
	
	// Enable RX and TX.
	UCSR0B=0b10011000;
    12c4:	81 ec       	ldi	r24, 0xC1	; 193
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	28 e9       	ldi	r18, 0x98	; 152
    12ca:	fc 01       	movw	r30, r24
    12cc:	20 83       	st	Z, r18
	UCSR0A=0;
    12ce:	80 ec       	ldi	r24, 0xC0	; 192
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	fc 01       	movw	r30, r24
    12d4:	10 82       	st	Z, r1
	leave_atomic();
    12d6:	78 94       	sei
}
    12d8:	cf 91       	pop	r28
    12da:	df 91       	pop	r29
    12dc:	08 95       	ret

000012de <__vector_20>:

// ISR for transmit end.
ISR(USART_TX_vect)
{
    12de:	1f 92       	push	r1
    12e0:	0f 92       	push	r0
    12e2:	0f b6       	in	r0, 0x3f	; 63
    12e4:	0f 92       	push	r0
    12e6:	11 24       	eor	r1, r1
    12e8:	2f 93       	push	r18
    12ea:	3f 93       	push	r19
    12ec:	5f 93       	push	r21
    12ee:	6f 93       	push	r22
    12f0:	7f 93       	push	r23
    12f2:	8f 93       	push	r24
    12f4:	9f 93       	push	r25
    12f6:	af 93       	push	r26
    12f8:	bf 93       	push	r27
    12fa:	ef 93       	push	r30
    12fc:	ff 93       	push	r31
    12fe:	df 93       	push	r29
    1300:	cf 93       	push	r28
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62

	enter_atomic();
    1306:	f8 94       	cli
	// Disable interrupts. 
	if(qcount==0)
    1308:	80 91 f2 05 	lds	r24, 0x05F2
    130c:	90 91 f3 05 	lds	r25, 0x05F3
    1310:	00 97       	sbiw	r24, 0x00	; 0
    1312:	51 f4       	brne	.+20     	; 0x1328 <__vector_20+0x4a>
		UCSR0B&=0b10111111;
    1314:	81 ec       	ldi	r24, 0xC1	; 193
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	21 ec       	ldi	r18, 0xC1	; 193
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	f9 01       	movw	r30, r18
    131e:	20 81       	ld	r18, Z
    1320:	2f 7b       	andi	r18, 0xBF	; 191
    1322:	fc 01       	movw	r30, r24
    1324:	20 83       	st	Z, r18
    1326:	23 c0       	rjmp	.+70     	; 0x136e <__vector_20+0x90>
	else
	{
		UDR0=q[qtail];
    1328:	86 ec       	ldi	r24, 0xC6	; 198
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	20 91 f4 05 	lds	r18, 0x05F4
    1330:	30 91 f5 05 	lds	r19, 0x05F5
    1334:	2a 50       	subi	r18, 0x0A	; 10
    1336:	3a 4f       	sbci	r19, 0xFA	; 250
    1338:	f9 01       	movw	r30, r18
    133a:	20 81       	ld	r18, Z
    133c:	fc 01       	movw	r30, r24
    133e:	20 83       	st	Z, r18
		qtail=(qtail+1)%QLEN;
    1340:	80 91 f4 05 	lds	r24, 0x05F4
    1344:	90 91 f5 05 	lds	r25, 0x05F5
    1348:	01 96       	adiw	r24, 0x01	; 1
    134a:	20 e4       	ldi	r18, 0x40	; 64
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	b9 01       	movw	r22, r18
    1350:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <__divmodhi4>
    1354:	90 93 f5 05 	sts	0x05F5, r25
    1358:	80 93 f4 05 	sts	0x05F4, r24
		qcount--;
    135c:	80 91 f2 05 	lds	r24, 0x05F2
    1360:	90 91 f3 05 	lds	r25, 0x05F3
    1364:	01 97       	sbiw	r24, 0x01	; 1
    1366:	90 93 f3 05 	sts	0x05F3, r25
    136a:	80 93 f2 05 	sts	0x05F2, r24
	}	
	leave_atomic();
    136e:	78 94       	sei
}
    1370:	cf 91       	pop	r28
    1372:	df 91       	pop	r29
    1374:	ff 91       	pop	r31
    1376:	ef 91       	pop	r30
    1378:	bf 91       	pop	r27
    137a:	af 91       	pop	r26
    137c:	9f 91       	pop	r25
    137e:	8f 91       	pop	r24
    1380:	7f 91       	pop	r23
    1382:	6f 91       	pop	r22
    1384:	5f 91       	pop	r21
    1386:	3f 91       	pop	r19
    1388:	2f 91       	pop	r18
    138a:	0f 90       	pop	r0
    138c:	0f be       	out	0x3f, r0	; 63
    138e:	0f 90       	pop	r0
    1390:	1f 90       	pop	r1
    1392:	18 95       	reti

00001394 <__vector_18>:

// Listener
ISR(USART_RX_vect)
{
    1394:	1f 92       	push	r1
    1396:	0f 92       	push	r0
    1398:	0f b6       	in	r0, 0x3f	; 63
    139a:	0f 92       	push	r0
    139c:	11 24       	eor	r1, r1
    139e:	2f 93       	push	r18
    13a0:	3f 93       	push	r19
    13a2:	5f 93       	push	r21
    13a4:	6f 93       	push	r22
    13a6:	7f 93       	push	r23
    13a8:	8f 93       	push	r24
    13aa:	9f 93       	push	r25
    13ac:	af 93       	push	r26
    13ae:	bf 93       	push	r27
    13b0:	ef 93       	push	r30
    13b2:	ff 93       	push	r31
    13b4:	df 93       	push	r29
    13b6:	cf 93       	push	r28
    13b8:	0f 92       	push	r0
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
	// Guarantee atomicity
	enter_atomic();
    13be:	f8 94       	cli
		
	// Get the character
	char ch=UDR0;
    13c0:	86 ec       	ldi	r24, 0xC6	; 198
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	fc 01       	movw	r30, r24
    13c6:	80 81       	ld	r24, Z
    13c8:	89 83       	std	Y+1, r24	; 0x01
	if(lqcount<LQLEN)
    13ca:	80 91 ec 05 	lds	r24, 0x05EC
    13ce:	90 91 ed 05 	lds	r25, 0x05ED
    13d2:	80 38       	cpi	r24, 0x80	; 128
    13d4:	91 05       	cpc	r25, r1
    13d6:	04 f5       	brge	.+64     	; 0x1418 <__vector_18+0x84>
	{
		lq[lqhead]=ch;
    13d8:	80 91 ee 05 	lds	r24, 0x05EE
    13dc:	90 91 ef 05 	lds	r25, 0x05EF
    13e0:	84 55       	subi	r24, 0x54	; 84
    13e2:	9a 4f       	sbci	r25, 0xFA	; 250
    13e4:	29 81       	ldd	r18, Y+1	; 0x01
    13e6:	fc 01       	movw	r30, r24
    13e8:	20 83       	st	Z, r18
		lqhead=(lqhead+1)%LQLEN;
    13ea:	80 91 ee 05 	lds	r24, 0x05EE
    13ee:	90 91 ef 05 	lds	r25, 0x05EF
    13f2:	01 96       	adiw	r24, 0x01	; 1
    13f4:	20 e8       	ldi	r18, 0x80	; 128
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	b9 01       	movw	r22, r18
    13fa:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <__divmodhi4>
    13fe:	90 93 ef 05 	sts	0x05EF, r25
    1402:	80 93 ee 05 	sts	0x05EE, r24
		lqcount++;
    1406:	80 91 ec 05 	lds	r24, 0x05EC
    140a:	90 91 ed 05 	lds	r25, 0x05ED
    140e:	01 96       	adiw	r24, 0x01	; 1
    1410:	90 93 ed 05 	sts	0x05ED, r25
    1414:	80 93 ec 05 	sts	0x05EC, r24
	}	
	
	leave_atomic();
    1418:	78 94       	sei
}
    141a:	0f 90       	pop	r0
    141c:	cf 91       	pop	r28
    141e:	df 91       	pop	r29
    1420:	ff 91       	pop	r31
    1422:	ef 91       	pop	r30
    1424:	bf 91       	pop	r27
    1426:	af 91       	pop	r26
    1428:	9f 91       	pop	r25
    142a:	8f 91       	pop	r24
    142c:	7f 91       	pop	r23
    142e:	6f 91       	pop	r22
    1430:	5f 91       	pop	r21
    1432:	3f 91       	pop	r19
    1434:	2f 91       	pop	r18
    1436:	0f 90       	pop	r0
    1438:	0f be       	out	0x3f, r0	; 63
    143a:	0f 90       	pop	r0
    143c:	1f 90       	pop	r1
    143e:	18 95       	reti

00001440 <hear>:

void hear(char *str, int *len)
{
    1440:	df 93       	push	r29
    1442:	cf 93       	push	r28
    1444:	00 d0       	rcall	.+0      	; 0x1446 <hear+0x6>
    1446:	00 d0       	rcall	.+0      	; 0x1448 <hear+0x8>
    1448:	00 d0       	rcall	.+0      	; 0x144a <hear+0xa>
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
    144e:	9c 83       	std	Y+4, r25	; 0x04
    1450:	8b 83       	std	Y+3, r24	; 0x03
    1452:	7e 83       	std	Y+6, r23	; 0x06
    1454:	6d 83       	std	Y+5, r22	; 0x05
	int i;
	
	enter_atomic();
    1456:	f8 94       	cli
	for(i=0; i<lqcount; i++)
    1458:	1a 82       	std	Y+2, r1	; 0x02
    145a:	19 82       	std	Y+1, r1	; 0x01
    145c:	23 c0       	rjmp	.+70     	; 0x14a4 <hear+0x64>
	{
		str[i]=lq[lqtail];
    145e:	89 81       	ldd	r24, Y+1	; 0x01
    1460:	9a 81       	ldd	r25, Y+2	; 0x02
    1462:	2b 81       	ldd	r18, Y+3	; 0x03
    1464:	3c 81       	ldd	r19, Y+4	; 0x04
    1466:	82 0f       	add	r24, r18
    1468:	93 1f       	adc	r25, r19
    146a:	20 91 f0 05 	lds	r18, 0x05F0
    146e:	30 91 f1 05 	lds	r19, 0x05F1
    1472:	24 55       	subi	r18, 0x54	; 84
    1474:	3a 4f       	sbci	r19, 0xFA	; 250
    1476:	f9 01       	movw	r30, r18
    1478:	20 81       	ld	r18, Z
    147a:	fc 01       	movw	r30, r24
    147c:	20 83       	st	Z, r18
		lqtail=(lqtail+1)%LQLEN;
    147e:	80 91 f0 05 	lds	r24, 0x05F0
    1482:	90 91 f1 05 	lds	r25, 0x05F1
    1486:	01 96       	adiw	r24, 0x01	; 1
    1488:	20 e8       	ldi	r18, 0x80	; 128
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	b9 01       	movw	r22, r18
    148e:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <__divmodhi4>
    1492:	90 93 f1 05 	sts	0x05F1, r25
    1496:	80 93 f0 05 	sts	0x05F0, r24
void hear(char *str, int *len)
{
	int i;
	
	enter_atomic();
	for(i=0; i<lqcount; i++)
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	9a 81       	ldd	r25, Y+2	; 0x02
    149e:	01 96       	adiw	r24, 0x01	; 1
    14a0:	9a 83       	std	Y+2, r25	; 0x02
    14a2:	89 83       	std	Y+1, r24	; 0x01
    14a4:	80 91 ec 05 	lds	r24, 0x05EC
    14a8:	90 91 ed 05 	lds	r25, 0x05ED
    14ac:	29 81       	ldd	r18, Y+1	; 0x01
    14ae:	3a 81       	ldd	r19, Y+2	; 0x02
    14b0:	28 17       	cp	r18, r24
    14b2:	39 07       	cpc	r19, r25
    14b4:	a4 f2       	brlt	.-88     	; 0x145e <hear+0x1e>
	{
		str[i]=lq[lqtail];
		lqtail=(lqtail+1)%LQLEN;
	}	
	
	str[lqtail]=0;
    14b6:	80 91 f0 05 	lds	r24, 0x05F0
    14ba:	90 91 f1 05 	lds	r25, 0x05F1
    14be:	2b 81       	ldd	r18, Y+3	; 0x03
    14c0:	3c 81       	ldd	r19, Y+4	; 0x04
    14c2:	82 0f       	add	r24, r18
    14c4:	93 1f       	adc	r25, r19
    14c6:	fc 01       	movw	r30, r24
    14c8:	10 82       	st	Z, r1
	
	*len=lqcount;
    14ca:	20 91 ec 05 	lds	r18, 0x05EC
    14ce:	30 91 ed 05 	lds	r19, 0x05ED
    14d2:	8d 81       	ldd	r24, Y+5	; 0x05
    14d4:	9e 81       	ldd	r25, Y+6	; 0x06
    14d6:	fc 01       	movw	r30, r24
    14d8:	31 83       	std	Z+1, r19	; 0x01
    14da:	20 83       	st	Z, r18
	lqcount=0;
    14dc:	10 92 ed 05 	sts	0x05ED, r1
    14e0:	10 92 ec 05 	sts	0x05EC, r1
	
	leave_atomic();
    14e4:	78 94       	sei
}
    14e6:	26 96       	adiw	r28, 0x06	; 6
    14e8:	0f b6       	in	r0, 0x3f	; 63
    14ea:	f8 94       	cli
    14ec:	de bf       	out	0x3e, r29	; 62
    14ee:	0f be       	out	0x3f, r0	; 63
    14f0:	cd bf       	out	0x3d, r28	; 61
    14f2:	cf 91       	pop	r28
    14f4:	df 91       	pop	r29
    14f6:	08 95       	ret

000014f8 <say>:

void say(char *str)
{
    14f8:	0f 93       	push	r16
    14fa:	1f 93       	push	r17
    14fc:	df 93       	push	r29
    14fe:	cf 93       	push	r28
    1500:	00 d0       	rcall	.+0      	; 0x1502 <say+0xa>
    1502:	00 d0       	rcall	.+0      	; 0x1504 <say+0xc>
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
    1508:	9c 83       	std	Y+4, r25	; 0x04
    150a:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	
	// Guarantee atomicity
	enter_atomic();
    150c:	f8 94       	cli
	for(i=0; i<strlen(str) && qcount < QLEN; i++)
    150e:	1a 82       	std	Y+2, r1	; 0x02
    1510:	19 82       	std	Y+1, r1	; 0x01
    1512:	62 c0       	rjmp	.+196    	; 0x15d8 <say+0xe0>
	{
		q[qhead]=str[i];
    1514:	80 91 36 06 	lds	r24, 0x0636
    1518:	90 91 37 06 	lds	r25, 0x0637
    151c:	29 81       	ldd	r18, Y+1	; 0x01
    151e:	3a 81       	ldd	r19, Y+2	; 0x02
    1520:	4b 81       	ldd	r20, Y+3	; 0x03
    1522:	5c 81       	ldd	r21, Y+4	; 0x04
    1524:	24 0f       	add	r18, r20
    1526:	35 1f       	adc	r19, r21
    1528:	f9 01       	movw	r30, r18
    152a:	20 81       	ld	r18, Z
    152c:	8a 50       	subi	r24, 0x0A	; 10
    152e:	9a 4f       	sbci	r25, 0xFA	; 250
    1530:	fc 01       	movw	r30, r24
    1532:	20 83       	st	Z, r18
		qhead=(qhead+1) %QLEN;
    1534:	80 91 36 06 	lds	r24, 0x0636
    1538:	90 91 37 06 	lds	r25, 0x0637
    153c:	01 96       	adiw	r24, 0x01	; 1
    153e:	20 e4       	ldi	r18, 0x40	; 64
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	b9 01       	movw	r22, r18
    1544:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <__divmodhi4>
    1548:	90 93 37 06 	sts	0x0637, r25
    154c:	80 93 36 06 	sts	0x0636, r24
		qcount++;			
    1550:	80 91 f2 05 	lds	r24, 0x05F2
    1554:	90 91 f3 05 	lds	r25, 0x05F3
    1558:	01 96       	adiw	r24, 0x01	; 1
    155a:	90 93 f3 05 	sts	0x05F3, r25
    155e:	80 93 f2 05 	sts	0x05F2, r24
	
		if(!(UCSR0B & 0b01000000))
    1562:	81 ec       	ldi	r24, 0xC1	; 193
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	fc 01       	movw	r30, r24
    1568:	80 81       	ld	r24, Z
    156a:	88 2f       	mov	r24, r24
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	80 74       	andi	r24, 0x40	; 64
    1570:	90 70       	andi	r25, 0x00	; 0
    1572:	00 97       	sbiw	r24, 0x00	; 0
    1574:	61 f5       	brne	.+88     	; 0x15ce <say+0xd6>
		{
			UDR0=q[qtail];
    1576:	86 ec       	ldi	r24, 0xC6	; 198
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	20 91 f4 05 	lds	r18, 0x05F4
    157e:	30 91 f5 05 	lds	r19, 0x05F5
    1582:	2a 50       	subi	r18, 0x0A	; 10
    1584:	3a 4f       	sbci	r19, 0xFA	; 250
    1586:	f9 01       	movw	r30, r18
    1588:	20 81       	ld	r18, Z
    158a:	fc 01       	movw	r30, r24
    158c:	20 83       	st	Z, r18
			qtail=(qtail+1)%QLEN;
    158e:	80 91 f4 05 	lds	r24, 0x05F4
    1592:	90 91 f5 05 	lds	r25, 0x05F5
    1596:	01 96       	adiw	r24, 0x01	; 1
    1598:	20 e4       	ldi	r18, 0x40	; 64
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	b9 01       	movw	r22, r18
    159e:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <__divmodhi4>
    15a2:	90 93 f5 05 	sts	0x05F5, r25
    15a6:	80 93 f4 05 	sts	0x05F4, r24
			qcount--;
    15aa:	80 91 f2 05 	lds	r24, 0x05F2
    15ae:	90 91 f3 05 	lds	r25, 0x05F3
    15b2:	01 97       	sbiw	r24, 0x01	; 1
    15b4:	90 93 f3 05 	sts	0x05F3, r25
    15b8:	80 93 f2 05 	sts	0x05F2, r24
			UCSR0B|=0b01000000;
    15bc:	81 ec       	ldi	r24, 0xC1	; 193
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	21 ec       	ldi	r18, 0xC1	; 193
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	f9 01       	movw	r30, r18
    15c6:	20 81       	ld	r18, Z
    15c8:	20 64       	ori	r18, 0x40	; 64
    15ca:	fc 01       	movw	r30, r24
    15cc:	20 83       	st	Z, r18
{
	int i;
	
	// Guarantee atomicity
	enter_atomic();
	for(i=0; i<strlen(str) && qcount < QLEN; i++)
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
    15d0:	9a 81       	ldd	r25, Y+2	; 0x02
    15d2:	01 96       	adiw	r24, 0x01	; 1
    15d4:	9a 83       	std	Y+2, r25	; 0x02
    15d6:	89 83       	std	Y+1, r24	; 0x01
    15d8:	09 81       	ldd	r16, Y+1	; 0x01
    15da:	1a 81       	ldd	r17, Y+2	; 0x02
    15dc:	8b 81       	ldd	r24, Y+3	; 0x03
    15de:	9c 81       	ldd	r25, Y+4	; 0x04
    15e0:	0e 94 03 12 	call	0x2406	; 0x2406 <strlen>
    15e4:	08 17       	cp	r16, r24
    15e6:	19 07       	cpc	r17, r25
    15e8:	40 f4       	brcc	.+16     	; 0x15fa <say+0x102>
    15ea:	80 91 f2 05 	lds	r24, 0x05F2
    15ee:	90 91 f3 05 	lds	r25, 0x05F3
    15f2:	80 34       	cpi	r24, 0x40	; 64
    15f4:	91 05       	cpc	r25, r1
    15f6:	0c f4       	brge	.+2      	; 0x15fa <say+0x102>
    15f8:	8d cf       	rjmp	.-230    	; 0x1514 <say+0x1c>
			qtail=(qtail+1)%QLEN;
			qcount--;
			UCSR0B|=0b01000000;
		}
	}
	leave_atomic();
    15fa:	78 94       	sei
}
    15fc:	0f 90       	pop	r0
    15fe:	0f 90       	pop	r0
    1600:	0f 90       	pop	r0
    1602:	0f 90       	pop	r0
    1604:	cf 91       	pop	r28
    1606:	df 91       	pop	r29
    1608:	1f 91       	pop	r17
    160a:	0f 91       	pop	r16
    160c:	08 95       	ret

0000160e <__fixunssfsi>:
    160e:	ef 92       	push	r14
    1610:	ff 92       	push	r15
    1612:	0f 93       	push	r16
    1614:	1f 93       	push	r17
    1616:	7b 01       	movw	r14, r22
    1618:	8c 01       	movw	r16, r24
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	40 e0       	ldi	r20, 0x00	; 0
    1620:	5f e4       	ldi	r21, 0x4F	; 79
    1622:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <__gesf2>
    1626:	87 fd       	sbrc	r24, 7
    1628:	11 c0       	rjmp	.+34     	; 0x164c <__fixunssfsi+0x3e>
    162a:	c8 01       	movw	r24, r16
    162c:	b7 01       	movw	r22, r14
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	40 e0       	ldi	r20, 0x00	; 0
    1634:	5f e4       	ldi	r21, 0x4F	; 79
    1636:	0e 94 aa 0c 	call	0x1954	; 0x1954 <__subsf3>
    163a:	0e 94 65 0e 	call	0x1cca	; 0x1cca <__fixsfsi>
    163e:	9b 01       	movw	r18, r22
    1640:	ac 01       	movw	r20, r24
    1642:	20 50       	subi	r18, 0x00	; 0
    1644:	30 40       	sbci	r19, 0x00	; 0
    1646:	40 40       	sbci	r20, 0x00	; 0
    1648:	50 48       	sbci	r21, 0x80	; 128
    164a:	06 c0       	rjmp	.+12     	; 0x1658 <__fixunssfsi+0x4a>
    164c:	c8 01       	movw	r24, r16
    164e:	b7 01       	movw	r22, r14
    1650:	0e 94 65 0e 	call	0x1cca	; 0x1cca <__fixsfsi>
    1654:	9b 01       	movw	r18, r22
    1656:	ac 01       	movw	r20, r24
    1658:	b9 01       	movw	r22, r18
    165a:	ca 01       	movw	r24, r20
    165c:	1f 91       	pop	r17
    165e:	0f 91       	pop	r16
    1660:	ff 90       	pop	r15
    1662:	ef 90       	pop	r14
    1664:	08 95       	ret

00001666 <_fpadd_parts>:
    1666:	a0 e0       	ldi	r26, 0x00	; 0
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	e9 e3       	ldi	r30, 0x39	; 57
    166c:	fb e0       	ldi	r31, 0x0B	; 11
    166e:	0c 94 72 10 	jmp	0x20e4	; 0x20e4 <__prologue_saves__+0x8>
    1672:	fc 01       	movw	r30, r24
    1674:	ea 01       	movw	r28, r20
    1676:	80 81       	ld	r24, Z
    1678:	82 30       	cpi	r24, 0x02	; 2
    167a:	08 f4       	brcc	.+2      	; 0x167e <_fpadd_parts+0x18>
    167c:	38 c1       	rjmp	.+624    	; 0x18ee <_fpadd_parts+0x288>
    167e:	db 01       	movw	r26, r22
    1680:	9c 91       	ld	r25, X
    1682:	92 30       	cpi	r25, 0x02	; 2
    1684:	08 f4       	brcc	.+2      	; 0x1688 <_fpadd_parts+0x22>
    1686:	30 c1       	rjmp	.+608    	; 0x18e8 <_fpadd_parts+0x282>
    1688:	84 30       	cpi	r24, 0x04	; 4
    168a:	59 f4       	brne	.+22     	; 0x16a2 <_fpadd_parts+0x3c>
    168c:	94 30       	cpi	r25, 0x04	; 4
    168e:	09 f0       	breq	.+2      	; 0x1692 <_fpadd_parts+0x2c>
    1690:	2e c1       	rjmp	.+604    	; 0x18ee <_fpadd_parts+0x288>
    1692:	91 81       	ldd	r25, Z+1	; 0x01
    1694:	11 96       	adiw	r26, 0x01	; 1
    1696:	8c 91       	ld	r24, X
    1698:	11 97       	sbiw	r26, 0x01	; 1
    169a:	98 17       	cp	r25, r24
    169c:	09 f0       	breq	.+2      	; 0x16a0 <_fpadd_parts+0x3a>
    169e:	21 c1       	rjmp	.+578    	; 0x18e2 <_fpadd_parts+0x27c>
    16a0:	26 c1       	rjmp	.+588    	; 0x18ee <_fpadd_parts+0x288>
    16a2:	94 30       	cpi	r25, 0x04	; 4
    16a4:	09 f4       	brne	.+2      	; 0x16a8 <_fpadd_parts+0x42>
    16a6:	20 c1       	rjmp	.+576    	; 0x18e8 <_fpadd_parts+0x282>
    16a8:	92 30       	cpi	r25, 0x02	; 2
    16aa:	b1 f4       	brne	.+44     	; 0x16d8 <_fpadd_parts+0x72>
    16ac:	82 30       	cpi	r24, 0x02	; 2
    16ae:	09 f0       	breq	.+2      	; 0x16b2 <_fpadd_parts+0x4c>
    16b0:	1e c1       	rjmp	.+572    	; 0x18ee <_fpadd_parts+0x288>
    16b2:	ca 01       	movw	r24, r20
    16b4:	af 01       	movw	r20, r30
    16b6:	28 e0       	ldi	r18, 0x08	; 8
    16b8:	da 01       	movw	r26, r20
    16ba:	0d 90       	ld	r0, X+
    16bc:	ad 01       	movw	r20, r26
    16be:	dc 01       	movw	r26, r24
    16c0:	0d 92       	st	X+, r0
    16c2:	cd 01       	movw	r24, r26
    16c4:	21 50       	subi	r18, 0x01	; 1
    16c6:	c1 f7       	brne	.-16     	; 0x16b8 <_fpadd_parts+0x52>
    16c8:	db 01       	movw	r26, r22
    16ca:	11 96       	adiw	r26, 0x01	; 1
    16cc:	8c 91       	ld	r24, X
    16ce:	11 97       	sbiw	r26, 0x01	; 1
    16d0:	91 81       	ldd	r25, Z+1	; 0x01
    16d2:	89 23       	and	r24, r25
    16d4:	89 83       	std	Y+1, r24	; 0x01
    16d6:	0a c1       	rjmp	.+532    	; 0x18ec <_fpadd_parts+0x286>
    16d8:	82 30       	cpi	r24, 0x02	; 2
    16da:	09 f4       	brne	.+2      	; 0x16de <_fpadd_parts+0x78>
    16dc:	05 c1       	rjmp	.+522    	; 0x18e8 <_fpadd_parts+0x282>
    16de:	c2 80       	ldd	r12, Z+2	; 0x02
    16e0:	d3 80       	ldd	r13, Z+3	; 0x03
    16e2:	db 01       	movw	r26, r22
    16e4:	12 96       	adiw	r26, 0x02	; 2
    16e6:	6d 90       	ld	r6, X+
    16e8:	7c 90       	ld	r7, X
    16ea:	13 97       	sbiw	r26, 0x03	; 3
    16ec:	24 81       	ldd	r18, Z+4	; 0x04
    16ee:	35 81       	ldd	r19, Z+5	; 0x05
    16f0:	46 81       	ldd	r20, Z+6	; 0x06
    16f2:	57 81       	ldd	r21, Z+7	; 0x07
    16f4:	14 96       	adiw	r26, 0x04	; 4
    16f6:	ed 90       	ld	r14, X+
    16f8:	fd 90       	ld	r15, X+
    16fa:	0d 91       	ld	r16, X+
    16fc:	1c 91       	ld	r17, X
    16fe:	17 97       	sbiw	r26, 0x07	; 7
    1700:	c6 01       	movw	r24, r12
    1702:	86 19       	sub	r24, r6
    1704:	97 09       	sbc	r25, r7
    1706:	5c 01       	movw	r10, r24
    1708:	97 ff       	sbrs	r25, 7
    170a:	04 c0       	rjmp	.+8      	; 0x1714 <_fpadd_parts+0xae>
    170c:	aa 24       	eor	r10, r10
    170e:	bb 24       	eor	r11, r11
    1710:	a8 1a       	sub	r10, r24
    1712:	b9 0a       	sbc	r11, r25
    1714:	b0 e2       	ldi	r27, 0x20	; 32
    1716:	ab 16       	cp	r10, r27
    1718:	b1 04       	cpc	r11, r1
    171a:	0c f0       	brlt	.+2      	; 0x171e <_fpadd_parts+0xb8>
    171c:	61 c0       	rjmp	.+194    	; 0x17e0 <_fpadd_parts+0x17a>
    171e:	18 16       	cp	r1, r24
    1720:	19 06       	cpc	r1, r25
    1722:	6c f5       	brge	.+90     	; 0x177e <_fpadd_parts+0x118>
    1724:	37 01       	movw	r6, r14
    1726:	48 01       	movw	r8, r16
    1728:	0a 2c       	mov	r0, r10
    172a:	04 c0       	rjmp	.+8      	; 0x1734 <_fpadd_parts+0xce>
    172c:	96 94       	lsr	r9
    172e:	87 94       	ror	r8
    1730:	77 94       	ror	r7
    1732:	67 94       	ror	r6
    1734:	0a 94       	dec	r0
    1736:	d2 f7       	brpl	.-12     	; 0x172c <_fpadd_parts+0xc6>
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	a0 e0       	ldi	r26, 0x00	; 0
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	0a 2c       	mov	r0, r10
    1742:	04 c0       	rjmp	.+8      	; 0x174c <_fpadd_parts+0xe6>
    1744:	88 0f       	add	r24, r24
    1746:	99 1f       	adc	r25, r25
    1748:	aa 1f       	adc	r26, r26
    174a:	bb 1f       	adc	r27, r27
    174c:	0a 94       	dec	r0
    174e:	d2 f7       	brpl	.-12     	; 0x1744 <_fpadd_parts+0xde>
    1750:	01 97       	sbiw	r24, 0x01	; 1
    1752:	a1 09       	sbc	r26, r1
    1754:	b1 09       	sbc	r27, r1
    1756:	8e 21       	and	r24, r14
    1758:	9f 21       	and	r25, r15
    175a:	a0 23       	and	r26, r16
    175c:	b1 23       	and	r27, r17
    175e:	ee 24       	eor	r14, r14
    1760:	ff 24       	eor	r15, r15
    1762:	87 01       	movw	r16, r14
    1764:	e3 94       	inc	r14
    1766:	00 97       	sbiw	r24, 0x00	; 0
    1768:	a1 05       	cpc	r26, r1
    176a:	b1 05       	cpc	r27, r1
    176c:	19 f4       	brne	.+6      	; 0x1774 <_fpadd_parts+0x10e>
    176e:	ee 24       	eor	r14, r14
    1770:	ff 24       	eor	r15, r15
    1772:	87 01       	movw	r16, r14
    1774:	e6 28       	or	r14, r6
    1776:	f7 28       	or	r15, r7
    1778:	08 29       	or	r16, r8
    177a:	19 29       	or	r17, r9
    177c:	3c c0       	rjmp	.+120    	; 0x17f6 <_fpadd_parts+0x190>
    177e:	00 97       	sbiw	r24, 0x00	; 0
    1780:	d1 f1       	breq	.+116    	; 0x17f6 <_fpadd_parts+0x190>
    1782:	ca 0c       	add	r12, r10
    1784:	db 1c       	adc	r13, r11
    1786:	39 01       	movw	r6, r18
    1788:	4a 01       	movw	r8, r20
    178a:	0a 2c       	mov	r0, r10
    178c:	04 c0       	rjmp	.+8      	; 0x1796 <_fpadd_parts+0x130>
    178e:	96 94       	lsr	r9
    1790:	87 94       	ror	r8
    1792:	77 94       	ror	r7
    1794:	67 94       	ror	r6
    1796:	0a 94       	dec	r0
    1798:	d2 f7       	brpl	.-12     	; 0x178e <_fpadd_parts+0x128>
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	a0 e0       	ldi	r26, 0x00	; 0
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	0a 2c       	mov	r0, r10
    17a4:	04 c0       	rjmp	.+8      	; 0x17ae <_fpadd_parts+0x148>
    17a6:	88 0f       	add	r24, r24
    17a8:	99 1f       	adc	r25, r25
    17aa:	aa 1f       	adc	r26, r26
    17ac:	bb 1f       	adc	r27, r27
    17ae:	0a 94       	dec	r0
    17b0:	d2 f7       	brpl	.-12     	; 0x17a6 <_fpadd_parts+0x140>
    17b2:	01 97       	sbiw	r24, 0x01	; 1
    17b4:	a1 09       	sbc	r26, r1
    17b6:	b1 09       	sbc	r27, r1
    17b8:	82 23       	and	r24, r18
    17ba:	93 23       	and	r25, r19
    17bc:	a4 23       	and	r26, r20
    17be:	b5 23       	and	r27, r21
    17c0:	21 e0       	ldi	r18, 0x01	; 1
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	40 e0       	ldi	r20, 0x00	; 0
    17c6:	50 e0       	ldi	r21, 0x00	; 0
    17c8:	00 97       	sbiw	r24, 0x00	; 0
    17ca:	a1 05       	cpc	r26, r1
    17cc:	b1 05       	cpc	r27, r1
    17ce:	19 f4       	brne	.+6      	; 0x17d6 <_fpadd_parts+0x170>
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	a9 01       	movw	r20, r18
    17d6:	26 29       	or	r18, r6
    17d8:	37 29       	or	r19, r7
    17da:	48 29       	or	r20, r8
    17dc:	59 29       	or	r21, r9
    17de:	0b c0       	rjmp	.+22     	; 0x17f6 <_fpadd_parts+0x190>
    17e0:	6c 14       	cp	r6, r12
    17e2:	7d 04       	cpc	r7, r13
    17e4:	24 f4       	brge	.+8      	; 0x17ee <_fpadd_parts+0x188>
    17e6:	ee 24       	eor	r14, r14
    17e8:	ff 24       	eor	r15, r15
    17ea:	87 01       	movw	r16, r14
    17ec:	04 c0       	rjmp	.+8      	; 0x17f6 <_fpadd_parts+0x190>
    17ee:	63 01       	movw	r12, r6
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	a9 01       	movw	r20, r18
    17f6:	81 81       	ldd	r24, Z+1	; 0x01
    17f8:	fb 01       	movw	r30, r22
    17fa:	91 81       	ldd	r25, Z+1	; 0x01
    17fc:	89 17       	cp	r24, r25
    17fe:	09 f4       	brne	.+2      	; 0x1802 <_fpadd_parts+0x19c>
    1800:	45 c0       	rjmp	.+138    	; 0x188c <_fpadd_parts+0x226>
    1802:	88 23       	and	r24, r24
    1804:	49 f0       	breq	.+18     	; 0x1818 <_fpadd_parts+0x1b2>
    1806:	d8 01       	movw	r26, r16
    1808:	c7 01       	movw	r24, r14
    180a:	82 1b       	sub	r24, r18
    180c:	93 0b       	sbc	r25, r19
    180e:	a4 0b       	sbc	r26, r20
    1810:	b5 0b       	sbc	r27, r21
    1812:	9c 01       	movw	r18, r24
    1814:	ad 01       	movw	r20, r26
    1816:	04 c0       	rjmp	.+8      	; 0x1820 <_fpadd_parts+0x1ba>
    1818:	2e 19       	sub	r18, r14
    181a:	3f 09       	sbc	r19, r15
    181c:	40 0b       	sbc	r20, r16
    181e:	51 0b       	sbc	r21, r17
    1820:	57 fd       	sbrc	r21, 7
    1822:	04 c0       	rjmp	.+8      	; 0x182c <_fpadd_parts+0x1c6>
    1824:	19 82       	std	Y+1, r1	; 0x01
    1826:	db 82       	std	Y+3, r13	; 0x03
    1828:	ca 82       	std	Y+2, r12	; 0x02
    182a:	0b c0       	rjmp	.+22     	; 0x1842 <_fpadd_parts+0x1dc>
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	89 83       	std	Y+1, r24	; 0x01
    1830:	db 82       	std	Y+3, r13	; 0x03
    1832:	ca 82       	std	Y+2, r12	; 0x02
    1834:	50 95       	com	r21
    1836:	40 95       	com	r20
    1838:	30 95       	com	r19
    183a:	21 95       	neg	r18
    183c:	3f 4f       	sbci	r19, 0xFF	; 255
    183e:	4f 4f       	sbci	r20, 0xFF	; 255
    1840:	5f 4f       	sbci	r21, 0xFF	; 255
    1842:	2c 83       	std	Y+4, r18	; 0x04
    1844:	3d 83       	std	Y+5, r19	; 0x05
    1846:	4e 83       	std	Y+6, r20	; 0x06
    1848:	5f 83       	std	Y+7, r21	; 0x07
    184a:	0d c0       	rjmp	.+26     	; 0x1866 <_fpadd_parts+0x200>
    184c:	88 0f       	add	r24, r24
    184e:	99 1f       	adc	r25, r25
    1850:	aa 1f       	adc	r26, r26
    1852:	bb 1f       	adc	r27, r27
    1854:	8c 83       	std	Y+4, r24	; 0x04
    1856:	9d 83       	std	Y+5, r25	; 0x05
    1858:	ae 83       	std	Y+6, r26	; 0x06
    185a:	bf 83       	std	Y+7, r27	; 0x07
    185c:	8a 81       	ldd	r24, Y+2	; 0x02
    185e:	9b 81       	ldd	r25, Y+3	; 0x03
    1860:	01 97       	sbiw	r24, 0x01	; 1
    1862:	9b 83       	std	Y+3, r25	; 0x03
    1864:	8a 83       	std	Y+2, r24	; 0x02
    1866:	8c 81       	ldd	r24, Y+4	; 0x04
    1868:	9d 81       	ldd	r25, Y+5	; 0x05
    186a:	ae 81       	ldd	r26, Y+6	; 0x06
    186c:	bf 81       	ldd	r27, Y+7	; 0x07
    186e:	9c 01       	movw	r18, r24
    1870:	ad 01       	movw	r20, r26
    1872:	21 50       	subi	r18, 0x01	; 1
    1874:	30 40       	sbci	r19, 0x00	; 0
    1876:	40 40       	sbci	r20, 0x00	; 0
    1878:	50 40       	sbci	r21, 0x00	; 0
    187a:	2f 3f       	cpi	r18, 0xFF	; 255
    187c:	ef ef       	ldi	r30, 0xFF	; 255
    187e:	3e 07       	cpc	r19, r30
    1880:	ef ef       	ldi	r30, 0xFF	; 255
    1882:	4e 07       	cpc	r20, r30
    1884:	ef e3       	ldi	r30, 0x3F	; 63
    1886:	5e 07       	cpc	r21, r30
    1888:	08 f3       	brcs	.-62     	; 0x184c <_fpadd_parts+0x1e6>
    188a:	0b c0       	rjmp	.+22     	; 0x18a2 <_fpadd_parts+0x23c>
    188c:	89 83       	std	Y+1, r24	; 0x01
    188e:	db 82       	std	Y+3, r13	; 0x03
    1890:	ca 82       	std	Y+2, r12	; 0x02
    1892:	2e 0d       	add	r18, r14
    1894:	3f 1d       	adc	r19, r15
    1896:	40 1f       	adc	r20, r16
    1898:	51 1f       	adc	r21, r17
    189a:	2c 83       	std	Y+4, r18	; 0x04
    189c:	3d 83       	std	Y+5, r19	; 0x05
    189e:	4e 83       	std	Y+6, r20	; 0x06
    18a0:	5f 83       	std	Y+7, r21	; 0x07
    18a2:	83 e0       	ldi	r24, 0x03	; 3
    18a4:	88 83       	st	Y, r24
    18a6:	2c 81       	ldd	r18, Y+4	; 0x04
    18a8:	3d 81       	ldd	r19, Y+5	; 0x05
    18aa:	4e 81       	ldd	r20, Y+6	; 0x06
    18ac:	5f 81       	ldd	r21, Y+7	; 0x07
    18ae:	57 ff       	sbrs	r21, 7
    18b0:	1d c0       	rjmp	.+58     	; 0x18ec <_fpadd_parts+0x286>
    18b2:	da 01       	movw	r26, r20
    18b4:	c9 01       	movw	r24, r18
    18b6:	81 70       	andi	r24, 0x01	; 1
    18b8:	90 70       	andi	r25, 0x00	; 0
    18ba:	a0 70       	andi	r26, 0x00	; 0
    18bc:	b0 70       	andi	r27, 0x00	; 0
    18be:	56 95       	lsr	r21
    18c0:	47 95       	ror	r20
    18c2:	37 95       	ror	r19
    18c4:	27 95       	ror	r18
    18c6:	82 2b       	or	r24, r18
    18c8:	93 2b       	or	r25, r19
    18ca:	a4 2b       	or	r26, r20
    18cc:	b5 2b       	or	r27, r21
    18ce:	8c 83       	std	Y+4, r24	; 0x04
    18d0:	9d 83       	std	Y+5, r25	; 0x05
    18d2:	ae 83       	std	Y+6, r26	; 0x06
    18d4:	bf 83       	std	Y+7, r27	; 0x07
    18d6:	8a 81       	ldd	r24, Y+2	; 0x02
    18d8:	9b 81       	ldd	r25, Y+3	; 0x03
    18da:	01 96       	adiw	r24, 0x01	; 1
    18dc:	9b 83       	std	Y+3, r25	; 0x03
    18de:	8a 83       	std	Y+2, r24	; 0x02
    18e0:	05 c0       	rjmp	.+10     	; 0x18ec <_fpadd_parts+0x286>
    18e2:	ec e0       	ldi	r30, 0x0C	; 12
    18e4:	f1 e0       	ldi	r31, 0x01	; 1
    18e6:	03 c0       	rjmp	.+6      	; 0x18ee <_fpadd_parts+0x288>
    18e8:	fb 01       	movw	r30, r22
    18ea:	01 c0       	rjmp	.+2      	; 0x18ee <_fpadd_parts+0x288>
    18ec:	fe 01       	movw	r30, r28
    18ee:	cf 01       	movw	r24, r30
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
    18f4:	ee e0       	ldi	r30, 0x0E	; 14
    18f6:	0c 94 8e 10 	jmp	0x211c	; 0x211c <__epilogue_restores__+0x8>

000018fa <__addsf3>:
    18fa:	a0 e2       	ldi	r26, 0x20	; 32
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	e3 e8       	ldi	r30, 0x83	; 131
    1900:	fc e0       	ldi	r31, 0x0C	; 12
    1902:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__prologue_saves__+0x18>
    1906:	69 83       	std	Y+1, r22	; 0x01
    1908:	7a 83       	std	Y+2, r23	; 0x02
    190a:	8b 83       	std	Y+3, r24	; 0x03
    190c:	9c 83       	std	Y+4, r25	; 0x04
    190e:	2d 83       	std	Y+5, r18	; 0x05
    1910:	3e 83       	std	Y+6, r19	; 0x06
    1912:	4f 83       	std	Y+7, r20	; 0x07
    1914:	58 87       	std	Y+8, r21	; 0x08
    1916:	89 e0       	ldi	r24, 0x09	; 9
    1918:	e8 2e       	mov	r14, r24
    191a:	f1 2c       	mov	r15, r1
    191c:	ec 0e       	add	r14, r28
    191e:	fd 1e       	adc	r15, r29
    1920:	ce 01       	movw	r24, r28
    1922:	01 96       	adiw	r24, 0x01	; 1
    1924:	b7 01       	movw	r22, r14
    1926:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__unpack_f>
    192a:	8e 01       	movw	r16, r28
    192c:	0f 5e       	subi	r16, 0xEF	; 239
    192e:	1f 4f       	sbci	r17, 0xFF	; 255
    1930:	ce 01       	movw	r24, r28
    1932:	05 96       	adiw	r24, 0x05	; 5
    1934:	b8 01       	movw	r22, r16
    1936:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__unpack_f>
    193a:	c7 01       	movw	r24, r14
    193c:	b8 01       	movw	r22, r16
    193e:	ae 01       	movw	r20, r28
    1940:	47 5e       	subi	r20, 0xE7	; 231
    1942:	5f 4f       	sbci	r21, 0xFF	; 255
    1944:	0e 94 33 0b 	call	0x1666	; 0x1666 <_fpadd_parts>
    1948:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <__pack_f>
    194c:	a0 96       	adiw	r28, 0x20	; 32
    194e:	e6 e0       	ldi	r30, 0x06	; 6
    1950:	0c 94 96 10 	jmp	0x212c	; 0x212c <__epilogue_restores__+0x18>

00001954 <__subsf3>:
    1954:	a0 e2       	ldi	r26, 0x20	; 32
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	e0 eb       	ldi	r30, 0xB0	; 176
    195a:	fc e0       	ldi	r31, 0x0C	; 12
    195c:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__prologue_saves__+0x18>
    1960:	69 83       	std	Y+1, r22	; 0x01
    1962:	7a 83       	std	Y+2, r23	; 0x02
    1964:	8b 83       	std	Y+3, r24	; 0x03
    1966:	9c 83       	std	Y+4, r25	; 0x04
    1968:	2d 83       	std	Y+5, r18	; 0x05
    196a:	3e 83       	std	Y+6, r19	; 0x06
    196c:	4f 83       	std	Y+7, r20	; 0x07
    196e:	58 87       	std	Y+8, r21	; 0x08
    1970:	8e 01       	movw	r16, r28
    1972:	07 5f       	subi	r16, 0xF7	; 247
    1974:	1f 4f       	sbci	r17, 0xFF	; 255
    1976:	ce 01       	movw	r24, r28
    1978:	01 96       	adiw	r24, 0x01	; 1
    197a:	b8 01       	movw	r22, r16
    197c:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__unpack_f>
    1980:	91 e1       	ldi	r25, 0x11	; 17
    1982:	e9 2e       	mov	r14, r25
    1984:	f1 2c       	mov	r15, r1
    1986:	ec 0e       	add	r14, r28
    1988:	fd 1e       	adc	r15, r29
    198a:	ce 01       	movw	r24, r28
    198c:	05 96       	adiw	r24, 0x05	; 5
    198e:	b7 01       	movw	r22, r14
    1990:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__unpack_f>
    1994:	8a 89       	ldd	r24, Y+18	; 0x12
    1996:	91 e0       	ldi	r25, 0x01	; 1
    1998:	89 27       	eor	r24, r25
    199a:	8a 8b       	std	Y+18, r24	; 0x12
    199c:	c8 01       	movw	r24, r16
    199e:	b7 01       	movw	r22, r14
    19a0:	ae 01       	movw	r20, r28
    19a2:	47 5e       	subi	r20, 0xE7	; 231
    19a4:	5f 4f       	sbci	r21, 0xFF	; 255
    19a6:	0e 94 33 0b 	call	0x1666	; 0x1666 <_fpadd_parts>
    19aa:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <__pack_f>
    19ae:	a0 96       	adiw	r28, 0x20	; 32
    19b0:	e6 e0       	ldi	r30, 0x06	; 6
    19b2:	0c 94 96 10 	jmp	0x212c	; 0x212c <__epilogue_restores__+0x18>

000019b6 <__mulsf3>:
    19b6:	a0 e2       	ldi	r26, 0x20	; 32
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	e1 ee       	ldi	r30, 0xE1	; 225
    19bc:	fc e0       	ldi	r31, 0x0C	; 12
    19be:	0c 94 6e 10 	jmp	0x20dc	; 0x20dc <__prologue_saves__>
    19c2:	69 83       	std	Y+1, r22	; 0x01
    19c4:	7a 83       	std	Y+2, r23	; 0x02
    19c6:	8b 83       	std	Y+3, r24	; 0x03
    19c8:	9c 83       	std	Y+4, r25	; 0x04
    19ca:	2d 83       	std	Y+5, r18	; 0x05
    19cc:	3e 83       	std	Y+6, r19	; 0x06
    19ce:	4f 83       	std	Y+7, r20	; 0x07
    19d0:	58 87       	std	Y+8, r21	; 0x08
    19d2:	ce 01       	movw	r24, r28
    19d4:	01 96       	adiw	r24, 0x01	; 1
    19d6:	be 01       	movw	r22, r28
    19d8:	67 5f       	subi	r22, 0xF7	; 247
    19da:	7f 4f       	sbci	r23, 0xFF	; 255
    19dc:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__unpack_f>
    19e0:	ce 01       	movw	r24, r28
    19e2:	05 96       	adiw	r24, 0x05	; 5
    19e4:	be 01       	movw	r22, r28
    19e6:	6f 5e       	subi	r22, 0xEF	; 239
    19e8:	7f 4f       	sbci	r23, 0xFF	; 255
    19ea:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__unpack_f>
    19ee:	99 85       	ldd	r25, Y+9	; 0x09
    19f0:	92 30       	cpi	r25, 0x02	; 2
    19f2:	78 f0       	brcs	.+30     	; 0x1a12 <__mulsf3+0x5c>
    19f4:	89 89       	ldd	r24, Y+17	; 0x11
    19f6:	82 30       	cpi	r24, 0x02	; 2
    19f8:	c0 f0       	brcs	.+48     	; 0x1a2a <__mulsf3+0x74>
    19fa:	94 30       	cpi	r25, 0x04	; 4
    19fc:	19 f4       	brne	.+6      	; 0x1a04 <__mulsf3+0x4e>
    19fe:	82 30       	cpi	r24, 0x02	; 2
    1a00:	41 f4       	brne	.+16     	; 0x1a12 <__mulsf3+0x5c>
    1a02:	cb c0       	rjmp	.+406    	; 0x1b9a <__mulsf3+0x1e4>
    1a04:	84 30       	cpi	r24, 0x04	; 4
    1a06:	19 f4       	brne	.+6      	; 0x1a0e <__mulsf3+0x58>
    1a08:	92 30       	cpi	r25, 0x02	; 2
    1a0a:	79 f4       	brne	.+30     	; 0x1a2a <__mulsf3+0x74>
    1a0c:	c6 c0       	rjmp	.+396    	; 0x1b9a <__mulsf3+0x1e4>
    1a0e:	92 30       	cpi	r25, 0x02	; 2
    1a10:	51 f4       	brne	.+20     	; 0x1a26 <__mulsf3+0x70>
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a16:	9a 89       	ldd	r25, Y+18	; 0x12
    1a18:	29 17       	cp	r18, r25
    1a1a:	09 f4       	brne	.+2      	; 0x1a1e <__mulsf3+0x68>
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	8a 87       	std	Y+10, r24	; 0x0a
    1a20:	ce 01       	movw	r24, r28
    1a22:	09 96       	adiw	r24, 0x09	; 9
    1a24:	bc c0       	rjmp	.+376    	; 0x1b9e <__mulsf3+0x1e8>
    1a26:	82 30       	cpi	r24, 0x02	; 2
    1a28:	51 f4       	brne	.+20     	; 0x1a3e <__mulsf3+0x88>
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a2e:	9a 89       	ldd	r25, Y+18	; 0x12
    1a30:	29 17       	cp	r18, r25
    1a32:	09 f4       	brne	.+2      	; 0x1a36 <__mulsf3+0x80>
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	8a 8b       	std	Y+18, r24	; 0x12
    1a38:	ce 01       	movw	r24, r28
    1a3a:	41 96       	adiw	r24, 0x11	; 17
    1a3c:	b0 c0       	rjmp	.+352    	; 0x1b9e <__mulsf3+0x1e8>
    1a3e:	6d 84       	ldd	r6, Y+13	; 0x0d
    1a40:	7e 84       	ldd	r7, Y+14	; 0x0e
    1a42:	8f 84       	ldd	r8, Y+15	; 0x0f
    1a44:	98 88       	ldd	r9, Y+16	; 0x10
    1a46:	ed 88       	ldd	r14, Y+21	; 0x15
    1a48:	fe 88       	ldd	r15, Y+22	; 0x16
    1a4a:	0f 89       	ldd	r16, Y+23	; 0x17
    1a4c:	18 8d       	ldd	r17, Y+24	; 0x18
    1a4e:	e0 e2       	ldi	r30, 0x20	; 32
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	dc 01       	movw	r26, r24
    1a58:	aa 24       	eor	r10, r10
    1a5a:	bb 24       	eor	r11, r11
    1a5c:	65 01       	movw	r12, r10
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	a9 01       	movw	r20, r18
    1a64:	b3 01       	movw	r22, r6
    1a66:	61 70       	andi	r22, 0x01	; 1
    1a68:	70 70       	andi	r23, 0x00	; 0
    1a6a:	61 15       	cp	r22, r1
    1a6c:	71 05       	cpc	r23, r1
    1a6e:	d1 f0       	breq	.+52     	; 0x1aa4 <__mulsf3+0xee>
    1a70:	2e 0d       	add	r18, r14
    1a72:	3f 1d       	adc	r19, r15
    1a74:	40 1f       	adc	r20, r16
    1a76:	51 1f       	adc	r21, r17
    1a78:	15 01       	movw	r2, r10
    1a7a:	26 01       	movw	r4, r12
    1a7c:	28 0e       	add	r2, r24
    1a7e:	39 1e       	adc	r3, r25
    1a80:	4a 1e       	adc	r4, r26
    1a82:	5b 1e       	adc	r5, r27
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	a0 e0       	ldi	r26, 0x00	; 0
    1a8a:	b0 e0       	ldi	r27, 0x00	; 0
    1a8c:	2e 15       	cp	r18, r14
    1a8e:	3f 05       	cpc	r19, r15
    1a90:	40 07       	cpc	r20, r16
    1a92:	51 07       	cpc	r21, r17
    1a94:	18 f0       	brcs	.+6      	; 0x1a9c <__mulsf3+0xe6>
    1a96:	80 e0       	ldi	r24, 0x00	; 0
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	82 0d       	add	r24, r2
    1a9e:	93 1d       	adc	r25, r3
    1aa0:	a4 1d       	adc	r26, r4
    1aa2:	b5 1d       	adc	r27, r5
    1aa4:	aa 0c       	add	r10, r10
    1aa6:	bb 1c       	adc	r11, r11
    1aa8:	cc 1c       	adc	r12, r12
    1aaa:	dd 1c       	adc	r13, r13
    1aac:	17 ff       	sbrs	r17, 7
    1aae:	09 c0       	rjmp	.+18     	; 0x1ac2 <__mulsf3+0x10c>
    1ab0:	61 e0       	ldi	r22, 0x01	; 1
    1ab2:	26 2e       	mov	r2, r22
    1ab4:	31 2c       	mov	r3, r1
    1ab6:	41 2c       	mov	r4, r1
    1ab8:	51 2c       	mov	r5, r1
    1aba:	a2 28       	or	r10, r2
    1abc:	b3 28       	or	r11, r3
    1abe:	c4 28       	or	r12, r4
    1ac0:	d5 28       	or	r13, r5
    1ac2:	31 97       	sbiw	r30, 0x01	; 1
    1ac4:	49 f0       	breq	.+18     	; 0x1ad8 <__mulsf3+0x122>
    1ac6:	ee 0c       	add	r14, r14
    1ac8:	ff 1c       	adc	r15, r15
    1aca:	00 1f       	adc	r16, r16
    1acc:	11 1f       	adc	r17, r17
    1ace:	96 94       	lsr	r9
    1ad0:	87 94       	ror	r8
    1ad2:	77 94       	ror	r7
    1ad4:	67 94       	ror	r6
    1ad6:	c6 cf       	rjmp	.-116    	; 0x1a64 <__mulsf3+0xae>
    1ad8:	6b 89       	ldd	r22, Y+19	; 0x13
    1ada:	7c 89       	ldd	r23, Y+20	; 0x14
    1adc:	eb 85       	ldd	r30, Y+11	; 0x0b
    1ade:	fc 85       	ldd	r31, Y+12	; 0x0c
    1ae0:	6e 0f       	add	r22, r30
    1ae2:	7f 1f       	adc	r23, r31
    1ae4:	6e 5f       	subi	r22, 0xFE	; 254
    1ae6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae8:	7c 8f       	std	Y+28, r23	; 0x1c
    1aea:	6b 8f       	std	Y+27, r22	; 0x1b
    1aec:	61 e0       	ldi	r22, 0x01	; 1
    1aee:	ea 85       	ldd	r30, Y+10	; 0x0a
    1af0:	7a 89       	ldd	r23, Y+18	; 0x12
    1af2:	e7 17       	cp	r30, r23
    1af4:	09 f4       	brne	.+2      	; 0x1af8 <__mulsf3+0x142>
    1af6:	60 e0       	ldi	r22, 0x00	; 0
    1af8:	6a 8f       	std	Y+26, r22	; 0x1a
    1afa:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1afc:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1afe:	10 c0       	rjmp	.+32     	; 0x1b20 <__mulsf3+0x16a>
    1b00:	fc 01       	movw	r30, r24
    1b02:	e1 70       	andi	r30, 0x01	; 1
    1b04:	f0 70       	andi	r31, 0x00	; 0
    1b06:	30 97       	sbiw	r30, 0x00	; 0
    1b08:	29 f0       	breq	.+10     	; 0x1b14 <__mulsf3+0x15e>
    1b0a:	56 95       	lsr	r21
    1b0c:	47 95       	ror	r20
    1b0e:	37 95       	ror	r19
    1b10:	27 95       	ror	r18
    1b12:	50 68       	ori	r21, 0x80	; 128
    1b14:	b6 95       	lsr	r27
    1b16:	a7 95       	ror	r26
    1b18:	97 95       	ror	r25
    1b1a:	87 95       	ror	r24
    1b1c:	6f 5f       	subi	r22, 0xFF	; 255
    1b1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b20:	b7 fd       	sbrc	r27, 7
    1b22:	ee cf       	rjmp	.-36     	; 0x1b00 <__mulsf3+0x14a>
    1b24:	0c c0       	rjmp	.+24     	; 0x1b3e <__mulsf3+0x188>
    1b26:	88 0f       	add	r24, r24
    1b28:	99 1f       	adc	r25, r25
    1b2a:	aa 1f       	adc	r26, r26
    1b2c:	bb 1f       	adc	r27, r27
    1b2e:	57 fd       	sbrc	r21, 7
    1b30:	81 60       	ori	r24, 0x01	; 1
    1b32:	22 0f       	add	r18, r18
    1b34:	33 1f       	adc	r19, r19
    1b36:	44 1f       	adc	r20, r20
    1b38:	55 1f       	adc	r21, r21
    1b3a:	61 50       	subi	r22, 0x01	; 1
    1b3c:	70 40       	sbci	r23, 0x00	; 0
    1b3e:	80 30       	cpi	r24, 0x00	; 0
    1b40:	e0 e0       	ldi	r30, 0x00	; 0
    1b42:	9e 07       	cpc	r25, r30
    1b44:	e0 e0       	ldi	r30, 0x00	; 0
    1b46:	ae 07       	cpc	r26, r30
    1b48:	e0 e4       	ldi	r30, 0x40	; 64
    1b4a:	be 07       	cpc	r27, r30
    1b4c:	60 f3       	brcs	.-40     	; 0x1b26 <__mulsf3+0x170>
    1b4e:	6b 8f       	std	Y+27, r22	; 0x1b
    1b50:	7c 8f       	std	Y+28, r23	; 0x1c
    1b52:	6f e7       	ldi	r22, 0x7F	; 127
    1b54:	e6 2e       	mov	r14, r22
    1b56:	f1 2c       	mov	r15, r1
    1b58:	01 2d       	mov	r16, r1
    1b5a:	11 2d       	mov	r17, r1
    1b5c:	e8 22       	and	r14, r24
    1b5e:	f9 22       	and	r15, r25
    1b60:	0a 23       	and	r16, r26
    1b62:	1b 23       	and	r17, r27
    1b64:	60 e4       	ldi	r22, 0x40	; 64
    1b66:	e6 16       	cp	r14, r22
    1b68:	f1 04       	cpc	r15, r1
    1b6a:	01 05       	cpc	r16, r1
    1b6c:	11 05       	cpc	r17, r1
    1b6e:	61 f4       	brne	.+24     	; 0x1b88 <__mulsf3+0x1d2>
    1b70:	87 fd       	sbrc	r24, 7
    1b72:	0a c0       	rjmp	.+20     	; 0x1b88 <__mulsf3+0x1d2>
    1b74:	21 15       	cp	r18, r1
    1b76:	31 05       	cpc	r19, r1
    1b78:	41 05       	cpc	r20, r1
    1b7a:	51 05       	cpc	r21, r1
    1b7c:	29 f0       	breq	.+10     	; 0x1b88 <__mulsf3+0x1d2>
    1b7e:	80 5c       	subi	r24, 0xC0	; 192
    1b80:	9f 4f       	sbci	r25, 0xFF	; 255
    1b82:	af 4f       	sbci	r26, 0xFF	; 255
    1b84:	bf 4f       	sbci	r27, 0xFF	; 255
    1b86:	80 78       	andi	r24, 0x80	; 128
    1b88:	8d 8f       	std	Y+29, r24	; 0x1d
    1b8a:	9e 8f       	std	Y+30, r25	; 0x1e
    1b8c:	af 8f       	std	Y+31, r26	; 0x1f
    1b8e:	b8 a3       	std	Y+32, r27	; 0x20
    1b90:	83 e0       	ldi	r24, 0x03	; 3
    1b92:	89 8f       	std	Y+25, r24	; 0x19
    1b94:	ce 01       	movw	r24, r28
    1b96:	49 96       	adiw	r24, 0x19	; 25
    1b98:	02 c0       	rjmp	.+4      	; 0x1b9e <__mulsf3+0x1e8>
    1b9a:	8c e0       	ldi	r24, 0x0C	; 12
    1b9c:	91 e0       	ldi	r25, 0x01	; 1
    1b9e:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <__pack_f>
    1ba2:	a0 96       	adiw	r28, 0x20	; 32
    1ba4:	e2 e1       	ldi	r30, 0x12	; 18
    1ba6:	0c 94 8a 10 	jmp	0x2114	; 0x2114 <__epilogue_restores__>

00001baa <__gtsf2>:
    1baa:	a8 e1       	ldi	r26, 0x18	; 24
    1bac:	b0 e0       	ldi	r27, 0x00	; 0
    1bae:	eb ed       	ldi	r30, 0xDB	; 219
    1bb0:	fd e0       	ldi	r31, 0x0D	; 13
    1bb2:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__prologue_saves__+0x18>
    1bb6:	69 83       	std	Y+1, r22	; 0x01
    1bb8:	7a 83       	std	Y+2, r23	; 0x02
    1bba:	8b 83       	std	Y+3, r24	; 0x03
    1bbc:	9c 83       	std	Y+4, r25	; 0x04
    1bbe:	2d 83       	std	Y+5, r18	; 0x05
    1bc0:	3e 83       	std	Y+6, r19	; 0x06
    1bc2:	4f 83       	std	Y+7, r20	; 0x07
    1bc4:	58 87       	std	Y+8, r21	; 0x08
    1bc6:	8e 01       	movw	r16, r28
    1bc8:	07 5f       	subi	r16, 0xF7	; 247
    1bca:	1f 4f       	sbci	r17, 0xFF	; 255
    1bcc:	ce 01       	movw	r24, r28
    1bce:	01 96       	adiw	r24, 0x01	; 1
    1bd0:	b8 01       	movw	r22, r16
    1bd2:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__unpack_f>
    1bd6:	81 e1       	ldi	r24, 0x11	; 17
    1bd8:	e8 2e       	mov	r14, r24
    1bda:	f1 2c       	mov	r15, r1
    1bdc:	ec 0e       	add	r14, r28
    1bde:	fd 1e       	adc	r15, r29
    1be0:	ce 01       	movw	r24, r28
    1be2:	05 96       	adiw	r24, 0x05	; 5
    1be4:	b7 01       	movw	r22, r14
    1be6:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__unpack_f>
    1bea:	89 85       	ldd	r24, Y+9	; 0x09
    1bec:	82 30       	cpi	r24, 0x02	; 2
    1bee:	40 f0       	brcs	.+16     	; 0x1c00 <__gtsf2+0x56>
    1bf0:	89 89       	ldd	r24, Y+17	; 0x11
    1bf2:	82 30       	cpi	r24, 0x02	; 2
    1bf4:	28 f0       	brcs	.+10     	; 0x1c00 <__gtsf2+0x56>
    1bf6:	c8 01       	movw	r24, r16
    1bf8:	b7 01       	movw	r22, r14
    1bfa:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fpcmp_parts_f>
    1bfe:	01 c0       	rjmp	.+2      	; 0x1c02 <__gtsf2+0x58>
    1c00:	8f ef       	ldi	r24, 0xFF	; 255
    1c02:	68 96       	adiw	r28, 0x18	; 24
    1c04:	e6 e0       	ldi	r30, 0x06	; 6
    1c06:	0c 94 96 10 	jmp	0x212c	; 0x212c <__epilogue_restores__+0x18>

00001c0a <__gesf2>:
    1c0a:	a8 e1       	ldi	r26, 0x18	; 24
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	eb e0       	ldi	r30, 0x0B	; 11
    1c10:	fe e0       	ldi	r31, 0x0E	; 14
    1c12:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__prologue_saves__+0x18>
    1c16:	69 83       	std	Y+1, r22	; 0x01
    1c18:	7a 83       	std	Y+2, r23	; 0x02
    1c1a:	8b 83       	std	Y+3, r24	; 0x03
    1c1c:	9c 83       	std	Y+4, r25	; 0x04
    1c1e:	2d 83       	std	Y+5, r18	; 0x05
    1c20:	3e 83       	std	Y+6, r19	; 0x06
    1c22:	4f 83       	std	Y+7, r20	; 0x07
    1c24:	58 87       	std	Y+8, r21	; 0x08
    1c26:	8e 01       	movw	r16, r28
    1c28:	07 5f       	subi	r16, 0xF7	; 247
    1c2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c2c:	ce 01       	movw	r24, r28
    1c2e:	01 96       	adiw	r24, 0x01	; 1
    1c30:	b8 01       	movw	r22, r16
    1c32:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__unpack_f>
    1c36:	81 e1       	ldi	r24, 0x11	; 17
    1c38:	e8 2e       	mov	r14, r24
    1c3a:	f1 2c       	mov	r15, r1
    1c3c:	ec 0e       	add	r14, r28
    1c3e:	fd 1e       	adc	r15, r29
    1c40:	ce 01       	movw	r24, r28
    1c42:	05 96       	adiw	r24, 0x05	; 5
    1c44:	b7 01       	movw	r22, r14
    1c46:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__unpack_f>
    1c4a:	89 85       	ldd	r24, Y+9	; 0x09
    1c4c:	82 30       	cpi	r24, 0x02	; 2
    1c4e:	40 f0       	brcs	.+16     	; 0x1c60 <__gesf2+0x56>
    1c50:	89 89       	ldd	r24, Y+17	; 0x11
    1c52:	82 30       	cpi	r24, 0x02	; 2
    1c54:	28 f0       	brcs	.+10     	; 0x1c60 <__gesf2+0x56>
    1c56:	c8 01       	movw	r24, r16
    1c58:	b7 01       	movw	r22, r14
    1c5a:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fpcmp_parts_f>
    1c5e:	01 c0       	rjmp	.+2      	; 0x1c62 <__gesf2+0x58>
    1c60:	8f ef       	ldi	r24, 0xFF	; 255
    1c62:	68 96       	adiw	r28, 0x18	; 24
    1c64:	e6 e0       	ldi	r30, 0x06	; 6
    1c66:	0c 94 96 10 	jmp	0x212c	; 0x212c <__epilogue_restores__+0x18>

00001c6a <__ltsf2>:
    1c6a:	a8 e1       	ldi	r26, 0x18	; 24
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	eb e3       	ldi	r30, 0x3B	; 59
    1c70:	fe e0       	ldi	r31, 0x0E	; 14
    1c72:	0c 94 7a 10 	jmp	0x20f4	; 0x20f4 <__prologue_saves__+0x18>
    1c76:	69 83       	std	Y+1, r22	; 0x01
    1c78:	7a 83       	std	Y+2, r23	; 0x02
    1c7a:	8b 83       	std	Y+3, r24	; 0x03
    1c7c:	9c 83       	std	Y+4, r25	; 0x04
    1c7e:	2d 83       	std	Y+5, r18	; 0x05
    1c80:	3e 83       	std	Y+6, r19	; 0x06
    1c82:	4f 83       	std	Y+7, r20	; 0x07
    1c84:	58 87       	std	Y+8, r21	; 0x08
    1c86:	8e 01       	movw	r16, r28
    1c88:	07 5f       	subi	r16, 0xF7	; 247
    1c8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c8c:	ce 01       	movw	r24, r28
    1c8e:	01 96       	adiw	r24, 0x01	; 1
    1c90:	b8 01       	movw	r22, r16
    1c92:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__unpack_f>
    1c96:	81 e1       	ldi	r24, 0x11	; 17
    1c98:	e8 2e       	mov	r14, r24
    1c9a:	f1 2c       	mov	r15, r1
    1c9c:	ec 0e       	add	r14, r28
    1c9e:	fd 1e       	adc	r15, r29
    1ca0:	ce 01       	movw	r24, r28
    1ca2:	05 96       	adiw	r24, 0x05	; 5
    1ca4:	b7 01       	movw	r22, r14
    1ca6:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__unpack_f>
    1caa:	89 85       	ldd	r24, Y+9	; 0x09
    1cac:	82 30       	cpi	r24, 0x02	; 2
    1cae:	40 f0       	brcs	.+16     	; 0x1cc0 <__ltsf2+0x56>
    1cb0:	89 89       	ldd	r24, Y+17	; 0x11
    1cb2:	82 30       	cpi	r24, 0x02	; 2
    1cb4:	28 f0       	brcs	.+10     	; 0x1cc0 <__ltsf2+0x56>
    1cb6:	c8 01       	movw	r24, r16
    1cb8:	b7 01       	movw	r22, r14
    1cba:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <__fpcmp_parts_f>
    1cbe:	01 c0       	rjmp	.+2      	; 0x1cc2 <__ltsf2+0x58>
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	68 96       	adiw	r28, 0x18	; 24
    1cc4:	e6 e0       	ldi	r30, 0x06	; 6
    1cc6:	0c 94 96 10 	jmp	0x212c	; 0x212c <__epilogue_restores__+0x18>

00001cca <__fixsfsi>:
    1cca:	ac e0       	ldi	r26, 0x0C	; 12
    1ccc:	b0 e0       	ldi	r27, 0x00	; 0
    1cce:	eb e6       	ldi	r30, 0x6B	; 107
    1cd0:	fe e0       	ldi	r31, 0x0E	; 14
    1cd2:	0c 94 7e 10 	jmp	0x20fc	; 0x20fc <__prologue_saves__+0x20>
    1cd6:	69 83       	std	Y+1, r22	; 0x01
    1cd8:	7a 83       	std	Y+2, r23	; 0x02
    1cda:	8b 83       	std	Y+3, r24	; 0x03
    1cdc:	9c 83       	std	Y+4, r25	; 0x04
    1cde:	ce 01       	movw	r24, r28
    1ce0:	01 96       	adiw	r24, 0x01	; 1
    1ce2:	be 01       	movw	r22, r28
    1ce4:	6b 5f       	subi	r22, 0xFB	; 251
    1ce6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ce8:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__unpack_f>
    1cec:	8d 81       	ldd	r24, Y+5	; 0x05
    1cee:	82 30       	cpi	r24, 0x02	; 2
    1cf0:	81 f1       	breq	.+96     	; 0x1d52 <__fixsfsi+0x88>
    1cf2:	82 30       	cpi	r24, 0x02	; 2
    1cf4:	70 f1       	brcs	.+92     	; 0x1d52 <__fixsfsi+0x88>
    1cf6:	84 30       	cpi	r24, 0x04	; 4
    1cf8:	21 f4       	brne	.+8      	; 0x1d02 <__fixsfsi+0x38>
    1cfa:	8e 81       	ldd	r24, Y+6	; 0x06
    1cfc:	88 23       	and	r24, r24
    1cfe:	69 f1       	breq	.+90     	; 0x1d5a <__fixsfsi+0x90>
    1d00:	0a c0       	rjmp	.+20     	; 0x1d16 <__fixsfsi+0x4c>
    1d02:	2f 81       	ldd	r18, Y+7	; 0x07
    1d04:	38 85       	ldd	r19, Y+8	; 0x08
    1d06:	37 fd       	sbrc	r19, 7
    1d08:	24 c0       	rjmp	.+72     	; 0x1d52 <__fixsfsi+0x88>
    1d0a:	6e 81       	ldd	r22, Y+6	; 0x06
    1d0c:	2f 31       	cpi	r18, 0x1F	; 31
    1d0e:	31 05       	cpc	r19, r1
    1d10:	3c f0       	brlt	.+14     	; 0x1d20 <__fixsfsi+0x56>
    1d12:	66 23       	and	r22, r22
    1d14:	11 f1       	breq	.+68     	; 0x1d5a <__fixsfsi+0x90>
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	40 e0       	ldi	r20, 0x00	; 0
    1d1c:	50 e8       	ldi	r21, 0x80	; 128
    1d1e:	21 c0       	rjmp	.+66     	; 0x1d62 <__fixsfsi+0x98>
    1d20:	8e e1       	ldi	r24, 0x1E	; 30
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	82 1b       	sub	r24, r18
    1d26:	93 0b       	sbc	r25, r19
    1d28:	29 85       	ldd	r18, Y+9	; 0x09
    1d2a:	3a 85       	ldd	r19, Y+10	; 0x0a
    1d2c:	4b 85       	ldd	r20, Y+11	; 0x0b
    1d2e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1d30:	04 c0       	rjmp	.+8      	; 0x1d3a <__fixsfsi+0x70>
    1d32:	56 95       	lsr	r21
    1d34:	47 95       	ror	r20
    1d36:	37 95       	ror	r19
    1d38:	27 95       	ror	r18
    1d3a:	8a 95       	dec	r24
    1d3c:	d2 f7       	brpl	.-12     	; 0x1d32 <__fixsfsi+0x68>
    1d3e:	66 23       	and	r22, r22
    1d40:	81 f0       	breq	.+32     	; 0x1d62 <__fixsfsi+0x98>
    1d42:	50 95       	com	r21
    1d44:	40 95       	com	r20
    1d46:	30 95       	com	r19
    1d48:	21 95       	neg	r18
    1d4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d4c:	4f 4f       	sbci	r20, 0xFF	; 255
    1d4e:	5f 4f       	sbci	r21, 0xFF	; 255
    1d50:	08 c0       	rjmp	.+16     	; 0x1d62 <__fixsfsi+0x98>
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	a9 01       	movw	r20, r18
    1d58:	04 c0       	rjmp	.+8      	; 0x1d62 <__fixsfsi+0x98>
    1d5a:	2f ef       	ldi	r18, 0xFF	; 255
    1d5c:	3f ef       	ldi	r19, 0xFF	; 255
    1d5e:	4f ef       	ldi	r20, 0xFF	; 255
    1d60:	5f e7       	ldi	r21, 0x7F	; 127
    1d62:	b9 01       	movw	r22, r18
    1d64:	ca 01       	movw	r24, r20
    1d66:	2c 96       	adiw	r28, 0x0c	; 12
    1d68:	e2 e0       	ldi	r30, 0x02	; 2
    1d6a:	0c 94 9a 10 	jmp	0x2134	; 0x2134 <__epilogue_restores__+0x20>

00001d6e <__pack_f>:
    1d6e:	ef 92       	push	r14
    1d70:	ff 92       	push	r15
    1d72:	0f 93       	push	r16
    1d74:	1f 93       	push	r17
    1d76:	cf 93       	push	r28
    1d78:	df 93       	push	r29
    1d7a:	fc 01       	movw	r30, r24
    1d7c:	24 81       	ldd	r18, Z+4	; 0x04
    1d7e:	35 81       	ldd	r19, Z+5	; 0x05
    1d80:	46 81       	ldd	r20, Z+6	; 0x06
    1d82:	57 81       	ldd	r21, Z+7	; 0x07
    1d84:	61 81       	ldd	r22, Z+1	; 0x01
    1d86:	80 81       	ld	r24, Z
    1d88:	82 30       	cpi	r24, 0x02	; 2
    1d8a:	20 f4       	brcc	.+8      	; 0x1d94 <__pack_f+0x26>
    1d8c:	40 61       	ori	r20, 0x10	; 16
    1d8e:	ef ef       	ldi	r30, 0xFF	; 255
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	a3 c0       	rjmp	.+326    	; 0x1eda <__pack_f+0x16c>
    1d94:	84 30       	cpi	r24, 0x04	; 4
    1d96:	09 f4       	brne	.+2      	; 0x1d9a <__pack_f+0x2c>
    1d98:	9b c0       	rjmp	.+310    	; 0x1ed0 <__pack_f+0x162>
    1d9a:	82 30       	cpi	r24, 0x02	; 2
    1d9c:	09 f4       	brne	.+2      	; 0x1da0 <__pack_f+0x32>
    1d9e:	92 c0       	rjmp	.+292    	; 0x1ec4 <__pack_f+0x156>
    1da0:	21 15       	cp	r18, r1
    1da2:	31 05       	cpc	r19, r1
    1da4:	41 05       	cpc	r20, r1
    1da6:	51 05       	cpc	r21, r1
    1da8:	09 f4       	brne	.+2      	; 0x1dac <__pack_f+0x3e>
    1daa:	8f c0       	rjmp	.+286    	; 0x1eca <__pack_f+0x15c>
    1dac:	02 80       	ldd	r0, Z+2	; 0x02
    1dae:	f3 81       	ldd	r31, Z+3	; 0x03
    1db0:	e0 2d       	mov	r30, r0
    1db2:	8f ef       	ldi	r24, 0xFF	; 255
    1db4:	e2 38       	cpi	r30, 0x82	; 130
    1db6:	f8 07       	cpc	r31, r24
    1db8:	0c f0       	brlt	.+2      	; 0x1dbc <__pack_f+0x4e>
    1dba:	5a c0       	rjmp	.+180    	; 0x1e70 <__pack_f+0x102>
    1dbc:	c2 e8       	ldi	r28, 0x82	; 130
    1dbe:	df ef       	ldi	r29, 0xFF	; 255
    1dc0:	ce 1b       	sub	r28, r30
    1dc2:	df 0b       	sbc	r29, r31
    1dc4:	ca 31       	cpi	r28, 0x1A	; 26
    1dc6:	d1 05       	cpc	r29, r1
    1dc8:	6c f5       	brge	.+90     	; 0x1e24 <__pack_f+0xb6>
    1dca:	79 01       	movw	r14, r18
    1dcc:	8a 01       	movw	r16, r20
    1dce:	0c 2e       	mov	r0, r28
    1dd0:	04 c0       	rjmp	.+8      	; 0x1dda <__pack_f+0x6c>
    1dd2:	16 95       	lsr	r17
    1dd4:	07 95       	ror	r16
    1dd6:	f7 94       	ror	r15
    1dd8:	e7 94       	ror	r14
    1dda:	0a 94       	dec	r0
    1ddc:	d2 f7       	brpl	.-12     	; 0x1dd2 <__pack_f+0x64>
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	a0 e0       	ldi	r26, 0x00	; 0
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	0c 2e       	mov	r0, r28
    1de8:	04 c0       	rjmp	.+8      	; 0x1df2 <__pack_f+0x84>
    1dea:	88 0f       	add	r24, r24
    1dec:	99 1f       	adc	r25, r25
    1dee:	aa 1f       	adc	r26, r26
    1df0:	bb 1f       	adc	r27, r27
    1df2:	0a 94       	dec	r0
    1df4:	d2 f7       	brpl	.-12     	; 0x1dea <__pack_f+0x7c>
    1df6:	01 97       	sbiw	r24, 0x01	; 1
    1df8:	a1 09       	sbc	r26, r1
    1dfa:	b1 09       	sbc	r27, r1
    1dfc:	82 23       	and	r24, r18
    1dfe:	93 23       	and	r25, r19
    1e00:	a4 23       	and	r26, r20
    1e02:	b5 23       	and	r27, r21
    1e04:	21 e0       	ldi	r18, 0x01	; 1
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	40 e0       	ldi	r20, 0x00	; 0
    1e0a:	50 e0       	ldi	r21, 0x00	; 0
    1e0c:	00 97       	sbiw	r24, 0x00	; 0
    1e0e:	a1 05       	cpc	r26, r1
    1e10:	b1 05       	cpc	r27, r1
    1e12:	19 f4       	brne	.+6      	; 0x1e1a <__pack_f+0xac>
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	a9 01       	movw	r20, r18
    1e1a:	2e 29       	or	r18, r14
    1e1c:	3f 29       	or	r19, r15
    1e1e:	40 2b       	or	r20, r16
    1e20:	51 2b       	or	r21, r17
    1e22:	03 c0       	rjmp	.+6      	; 0x1e2a <__pack_f+0xbc>
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	a9 01       	movw	r20, r18
    1e2a:	da 01       	movw	r26, r20
    1e2c:	c9 01       	movw	r24, r18
    1e2e:	8f 77       	andi	r24, 0x7F	; 127
    1e30:	90 70       	andi	r25, 0x00	; 0
    1e32:	a0 70       	andi	r26, 0x00	; 0
    1e34:	b0 70       	andi	r27, 0x00	; 0
    1e36:	80 34       	cpi	r24, 0x40	; 64
    1e38:	91 05       	cpc	r25, r1
    1e3a:	a1 05       	cpc	r26, r1
    1e3c:	b1 05       	cpc	r27, r1
    1e3e:	39 f4       	brne	.+14     	; 0x1e4e <__pack_f+0xe0>
    1e40:	27 ff       	sbrs	r18, 7
    1e42:	09 c0       	rjmp	.+18     	; 0x1e56 <__pack_f+0xe8>
    1e44:	20 5c       	subi	r18, 0xC0	; 192
    1e46:	3f 4f       	sbci	r19, 0xFF	; 255
    1e48:	4f 4f       	sbci	r20, 0xFF	; 255
    1e4a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e4c:	04 c0       	rjmp	.+8      	; 0x1e56 <__pack_f+0xe8>
    1e4e:	21 5c       	subi	r18, 0xC1	; 193
    1e50:	3f 4f       	sbci	r19, 0xFF	; 255
    1e52:	4f 4f       	sbci	r20, 0xFF	; 255
    1e54:	5f 4f       	sbci	r21, 0xFF	; 255
    1e56:	e1 e0       	ldi	r30, 0x01	; 1
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	20 30       	cpi	r18, 0x00	; 0
    1e5c:	80 e0       	ldi	r24, 0x00	; 0
    1e5e:	38 07       	cpc	r19, r24
    1e60:	80 e0       	ldi	r24, 0x00	; 0
    1e62:	48 07       	cpc	r20, r24
    1e64:	80 e4       	ldi	r24, 0x40	; 64
    1e66:	58 07       	cpc	r21, r24
    1e68:	28 f5       	brcc	.+74     	; 0x1eb4 <__pack_f+0x146>
    1e6a:	e0 e0       	ldi	r30, 0x00	; 0
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	22 c0       	rjmp	.+68     	; 0x1eb4 <__pack_f+0x146>
    1e70:	e0 38       	cpi	r30, 0x80	; 128
    1e72:	f1 05       	cpc	r31, r1
    1e74:	6c f5       	brge	.+90     	; 0x1ed0 <__pack_f+0x162>
    1e76:	e1 58       	subi	r30, 0x81	; 129
    1e78:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7a:	da 01       	movw	r26, r20
    1e7c:	c9 01       	movw	r24, r18
    1e7e:	8f 77       	andi	r24, 0x7F	; 127
    1e80:	90 70       	andi	r25, 0x00	; 0
    1e82:	a0 70       	andi	r26, 0x00	; 0
    1e84:	b0 70       	andi	r27, 0x00	; 0
    1e86:	80 34       	cpi	r24, 0x40	; 64
    1e88:	91 05       	cpc	r25, r1
    1e8a:	a1 05       	cpc	r26, r1
    1e8c:	b1 05       	cpc	r27, r1
    1e8e:	39 f4       	brne	.+14     	; 0x1e9e <__pack_f+0x130>
    1e90:	27 ff       	sbrs	r18, 7
    1e92:	09 c0       	rjmp	.+18     	; 0x1ea6 <__pack_f+0x138>
    1e94:	20 5c       	subi	r18, 0xC0	; 192
    1e96:	3f 4f       	sbci	r19, 0xFF	; 255
    1e98:	4f 4f       	sbci	r20, 0xFF	; 255
    1e9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e9c:	04 c0       	rjmp	.+8      	; 0x1ea6 <__pack_f+0x138>
    1e9e:	21 5c       	subi	r18, 0xC1	; 193
    1ea0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ea2:	4f 4f       	sbci	r20, 0xFF	; 255
    1ea4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ea6:	57 ff       	sbrs	r21, 7
    1ea8:	05 c0       	rjmp	.+10     	; 0x1eb4 <__pack_f+0x146>
    1eaa:	56 95       	lsr	r21
    1eac:	47 95       	ror	r20
    1eae:	37 95       	ror	r19
    1eb0:	27 95       	ror	r18
    1eb2:	31 96       	adiw	r30, 0x01	; 1
    1eb4:	87 e0       	ldi	r24, 0x07	; 7
    1eb6:	56 95       	lsr	r21
    1eb8:	47 95       	ror	r20
    1eba:	37 95       	ror	r19
    1ebc:	27 95       	ror	r18
    1ebe:	8a 95       	dec	r24
    1ec0:	d1 f7       	brne	.-12     	; 0x1eb6 <__pack_f+0x148>
    1ec2:	0b c0       	rjmp	.+22     	; 0x1eda <__pack_f+0x16c>
    1ec4:	e0 e0       	ldi	r30, 0x00	; 0
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	05 c0       	rjmp	.+10     	; 0x1ed4 <__pack_f+0x166>
    1eca:	e0 e0       	ldi	r30, 0x00	; 0
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	05 c0       	rjmp	.+10     	; 0x1eda <__pack_f+0x16c>
    1ed0:	ef ef       	ldi	r30, 0xFF	; 255
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	a9 01       	movw	r20, r18
    1eda:	8e 2f       	mov	r24, r30
    1edc:	87 95       	ror	r24
    1ede:	88 27       	eor	r24, r24
    1ee0:	87 95       	ror	r24
    1ee2:	94 2f       	mov	r25, r20
    1ee4:	9f 77       	andi	r25, 0x7F	; 127
    1ee6:	67 95       	ror	r22
    1ee8:	66 27       	eor	r22, r22
    1eea:	67 95       	ror	r22
    1eec:	e6 95       	lsr	r30
    1eee:	e2 2e       	mov	r14, r18
    1ef0:	a9 2f       	mov	r26, r25
    1ef2:	a8 2b       	or	r26, r24
    1ef4:	fe 2f       	mov	r31, r30
    1ef6:	f6 2b       	or	r31, r22
    1ef8:	62 2f       	mov	r22, r18
    1efa:	73 2f       	mov	r23, r19
    1efc:	8a 2f       	mov	r24, r26
    1efe:	9f 2f       	mov	r25, r31
    1f00:	cd b7       	in	r28, 0x3d	; 61
    1f02:	de b7       	in	r29, 0x3e	; 62
    1f04:	e6 e0       	ldi	r30, 0x06	; 6
    1f06:	0c 94 96 10 	jmp	0x212c	; 0x212c <__epilogue_restores__+0x18>

00001f0a <__unpack_f>:
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	fb 01       	movw	r30, r22
    1f0e:	2c 91       	ld	r18, X
    1f10:	11 96       	adiw	r26, 0x01	; 1
    1f12:	3c 91       	ld	r19, X
    1f14:	11 97       	sbiw	r26, 0x01	; 1
    1f16:	12 96       	adiw	r26, 0x02	; 2
    1f18:	8c 91       	ld	r24, X
    1f1a:	12 97       	sbiw	r26, 0x02	; 2
    1f1c:	48 2f       	mov	r20, r24
    1f1e:	4f 77       	andi	r20, 0x7F	; 127
    1f20:	50 e0       	ldi	r21, 0x00	; 0
    1f22:	98 2f       	mov	r25, r24
    1f24:	99 1f       	adc	r25, r25
    1f26:	99 27       	eor	r25, r25
    1f28:	99 1f       	adc	r25, r25
    1f2a:	13 96       	adiw	r26, 0x03	; 3
    1f2c:	6c 91       	ld	r22, X
    1f2e:	13 97       	sbiw	r26, 0x03	; 3
    1f30:	86 2f       	mov	r24, r22
    1f32:	88 0f       	add	r24, r24
    1f34:	89 2b       	or	r24, r25
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	66 1f       	adc	r22, r22
    1f3a:	66 27       	eor	r22, r22
    1f3c:	66 1f       	adc	r22, r22
    1f3e:	61 83       	std	Z+1, r22	; 0x01
    1f40:	00 97       	sbiw	r24, 0x00	; 0
    1f42:	39 f5       	brne	.+78     	; 0x1f92 <__unpack_f+0x88>
    1f44:	21 15       	cp	r18, r1
    1f46:	31 05       	cpc	r19, r1
    1f48:	41 05       	cpc	r20, r1
    1f4a:	51 05       	cpc	r21, r1
    1f4c:	11 f4       	brne	.+4      	; 0x1f52 <__unpack_f+0x48>
    1f4e:	82 e0       	ldi	r24, 0x02	; 2
    1f50:	29 c0       	rjmp	.+82     	; 0x1fa4 <__unpack_f+0x9a>
    1f52:	82 e8       	ldi	r24, 0x82	; 130
    1f54:	9f ef       	ldi	r25, 0xFF	; 255
    1f56:	93 83       	std	Z+3, r25	; 0x03
    1f58:	82 83       	std	Z+2, r24	; 0x02
    1f5a:	67 e0       	ldi	r22, 0x07	; 7
    1f5c:	22 0f       	add	r18, r18
    1f5e:	33 1f       	adc	r19, r19
    1f60:	44 1f       	adc	r20, r20
    1f62:	55 1f       	adc	r21, r21
    1f64:	6a 95       	dec	r22
    1f66:	d1 f7       	brne	.-12     	; 0x1f5c <__unpack_f+0x52>
    1f68:	83 e0       	ldi	r24, 0x03	; 3
    1f6a:	80 83       	st	Z, r24
    1f6c:	09 c0       	rjmp	.+18     	; 0x1f80 <__unpack_f+0x76>
    1f6e:	22 0f       	add	r18, r18
    1f70:	33 1f       	adc	r19, r19
    1f72:	44 1f       	adc	r20, r20
    1f74:	55 1f       	adc	r21, r21
    1f76:	82 81       	ldd	r24, Z+2	; 0x02
    1f78:	93 81       	ldd	r25, Z+3	; 0x03
    1f7a:	01 97       	sbiw	r24, 0x01	; 1
    1f7c:	93 83       	std	Z+3, r25	; 0x03
    1f7e:	82 83       	std	Z+2, r24	; 0x02
    1f80:	20 30       	cpi	r18, 0x00	; 0
    1f82:	80 e0       	ldi	r24, 0x00	; 0
    1f84:	38 07       	cpc	r19, r24
    1f86:	80 e0       	ldi	r24, 0x00	; 0
    1f88:	48 07       	cpc	r20, r24
    1f8a:	80 e4       	ldi	r24, 0x40	; 64
    1f8c:	58 07       	cpc	r21, r24
    1f8e:	78 f3       	brcs	.-34     	; 0x1f6e <__unpack_f+0x64>
    1f90:	20 c0       	rjmp	.+64     	; 0x1fd2 <__unpack_f+0xc8>
    1f92:	8f 3f       	cpi	r24, 0xFF	; 255
    1f94:	91 05       	cpc	r25, r1
    1f96:	79 f4       	brne	.+30     	; 0x1fb6 <__unpack_f+0xac>
    1f98:	21 15       	cp	r18, r1
    1f9a:	31 05       	cpc	r19, r1
    1f9c:	41 05       	cpc	r20, r1
    1f9e:	51 05       	cpc	r21, r1
    1fa0:	19 f4       	brne	.+6      	; 0x1fa8 <__unpack_f+0x9e>
    1fa2:	84 e0       	ldi	r24, 0x04	; 4
    1fa4:	80 83       	st	Z, r24
    1fa6:	08 95       	ret
    1fa8:	44 ff       	sbrs	r20, 4
    1faa:	03 c0       	rjmp	.+6      	; 0x1fb2 <__unpack_f+0xa8>
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	80 83       	st	Z, r24
    1fb0:	10 c0       	rjmp	.+32     	; 0x1fd2 <__unpack_f+0xc8>
    1fb2:	10 82       	st	Z, r1
    1fb4:	0e c0       	rjmp	.+28     	; 0x1fd2 <__unpack_f+0xc8>
    1fb6:	8f 57       	subi	r24, 0x7F	; 127
    1fb8:	90 40       	sbci	r25, 0x00	; 0
    1fba:	93 83       	std	Z+3, r25	; 0x03
    1fbc:	82 83       	std	Z+2, r24	; 0x02
    1fbe:	83 e0       	ldi	r24, 0x03	; 3
    1fc0:	80 83       	st	Z, r24
    1fc2:	87 e0       	ldi	r24, 0x07	; 7
    1fc4:	22 0f       	add	r18, r18
    1fc6:	33 1f       	adc	r19, r19
    1fc8:	44 1f       	adc	r20, r20
    1fca:	55 1f       	adc	r21, r21
    1fcc:	8a 95       	dec	r24
    1fce:	d1 f7       	brne	.-12     	; 0x1fc4 <__unpack_f+0xba>
    1fd0:	50 64       	ori	r21, 0x40	; 64
    1fd2:	24 83       	std	Z+4, r18	; 0x04
    1fd4:	35 83       	std	Z+5, r19	; 0x05
    1fd6:	46 83       	std	Z+6, r20	; 0x06
    1fd8:	57 83       	std	Z+7, r21	; 0x07
    1fda:	08 95       	ret

00001fdc <__fpcmp_parts_f>:
    1fdc:	fc 01       	movw	r30, r24
    1fde:	db 01       	movw	r26, r22
    1fe0:	90 81       	ld	r25, Z
    1fe2:	92 30       	cpi	r25, 0x02	; 2
    1fe4:	08 f4       	brcc	.+2      	; 0x1fe8 <__fpcmp_parts_f+0xc>
    1fe6:	49 c0       	rjmp	.+146    	; 0x207a <__fpcmp_parts_f+0x9e>
    1fe8:	8c 91       	ld	r24, X
    1fea:	82 30       	cpi	r24, 0x02	; 2
    1fec:	08 f4       	brcc	.+2      	; 0x1ff0 <__fpcmp_parts_f+0x14>
    1fee:	45 c0       	rjmp	.+138    	; 0x207a <__fpcmp_parts_f+0x9e>
    1ff0:	94 30       	cpi	r25, 0x04	; 4
    1ff2:	51 f4       	brne	.+20     	; 0x2008 <__fpcmp_parts_f+0x2c>
    1ff4:	61 81       	ldd	r22, Z+1	; 0x01
    1ff6:	84 30       	cpi	r24, 0x04	; 4
    1ff8:	b1 f5       	brne	.+108    	; 0x2066 <__fpcmp_parts_f+0x8a>
    1ffa:	11 96       	adiw	r26, 0x01	; 1
    1ffc:	2c 91       	ld	r18, X
    1ffe:	11 97       	sbiw	r26, 0x01	; 1
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	26 1b       	sub	r18, r22
    2004:	31 09       	sbc	r19, r1
    2006:	41 c0       	rjmp	.+130    	; 0x208a <__fpcmp_parts_f+0xae>
    2008:	84 30       	cpi	r24, 0x04	; 4
    200a:	21 f0       	breq	.+8      	; 0x2014 <__fpcmp_parts_f+0x38>
    200c:	92 30       	cpi	r25, 0x02	; 2
    200e:	41 f4       	brne	.+16     	; 0x2020 <__fpcmp_parts_f+0x44>
    2010:	82 30       	cpi	r24, 0x02	; 2
    2012:	b1 f1       	breq	.+108    	; 0x2080 <__fpcmp_parts_f+0xa4>
    2014:	11 96       	adiw	r26, 0x01	; 1
    2016:	8c 91       	ld	r24, X
    2018:	11 97       	sbiw	r26, 0x01	; 1
    201a:	88 23       	and	r24, r24
    201c:	a1 f1       	breq	.+104    	; 0x2086 <__fpcmp_parts_f+0xaa>
    201e:	2d c0       	rjmp	.+90     	; 0x207a <__fpcmp_parts_f+0x9e>
    2020:	61 81       	ldd	r22, Z+1	; 0x01
    2022:	82 30       	cpi	r24, 0x02	; 2
    2024:	01 f1       	breq	.+64     	; 0x2066 <__fpcmp_parts_f+0x8a>
    2026:	11 96       	adiw	r26, 0x01	; 1
    2028:	8c 91       	ld	r24, X
    202a:	11 97       	sbiw	r26, 0x01	; 1
    202c:	68 17       	cp	r22, r24
    202e:	d9 f4       	brne	.+54     	; 0x2066 <__fpcmp_parts_f+0x8a>
    2030:	22 81       	ldd	r18, Z+2	; 0x02
    2032:	33 81       	ldd	r19, Z+3	; 0x03
    2034:	12 96       	adiw	r26, 0x02	; 2
    2036:	8d 91       	ld	r24, X+
    2038:	9c 91       	ld	r25, X
    203a:	13 97       	sbiw	r26, 0x03	; 3
    203c:	82 17       	cp	r24, r18
    203e:	93 07       	cpc	r25, r19
    2040:	94 f0       	brlt	.+36     	; 0x2066 <__fpcmp_parts_f+0x8a>
    2042:	28 17       	cp	r18, r24
    2044:	39 07       	cpc	r19, r25
    2046:	bc f0       	brlt	.+46     	; 0x2076 <__fpcmp_parts_f+0x9a>
    2048:	24 81       	ldd	r18, Z+4	; 0x04
    204a:	35 81       	ldd	r19, Z+5	; 0x05
    204c:	46 81       	ldd	r20, Z+6	; 0x06
    204e:	57 81       	ldd	r21, Z+7	; 0x07
    2050:	14 96       	adiw	r26, 0x04	; 4
    2052:	8d 91       	ld	r24, X+
    2054:	9d 91       	ld	r25, X+
    2056:	0d 90       	ld	r0, X+
    2058:	bc 91       	ld	r27, X
    205a:	a0 2d       	mov	r26, r0
    205c:	82 17       	cp	r24, r18
    205e:	93 07       	cpc	r25, r19
    2060:	a4 07       	cpc	r26, r20
    2062:	b5 07       	cpc	r27, r21
    2064:	18 f4       	brcc	.+6      	; 0x206c <__fpcmp_parts_f+0x90>
    2066:	66 23       	and	r22, r22
    2068:	41 f0       	breq	.+16     	; 0x207a <__fpcmp_parts_f+0x9e>
    206a:	0d c0       	rjmp	.+26     	; 0x2086 <__fpcmp_parts_f+0xaa>
    206c:	28 17       	cp	r18, r24
    206e:	39 07       	cpc	r19, r25
    2070:	4a 07       	cpc	r20, r26
    2072:	5b 07       	cpc	r21, r27
    2074:	28 f4       	brcc	.+10     	; 0x2080 <__fpcmp_parts_f+0xa4>
    2076:	66 23       	and	r22, r22
    2078:	31 f0       	breq	.+12     	; 0x2086 <__fpcmp_parts_f+0xaa>
    207a:	21 e0       	ldi	r18, 0x01	; 1
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	05 c0       	rjmp	.+10     	; 0x208a <__fpcmp_parts_f+0xae>
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	02 c0       	rjmp	.+4      	; 0x208a <__fpcmp_parts_f+0xae>
    2086:	2f ef       	ldi	r18, 0xFF	; 255
    2088:	3f ef       	ldi	r19, 0xFF	; 255
    208a:	c9 01       	movw	r24, r18
    208c:	08 95       	ret

0000208e <__udivmodhi4>:
    208e:	aa 1b       	sub	r26, r26
    2090:	bb 1b       	sub	r27, r27
    2092:	51 e1       	ldi	r21, 0x11	; 17
    2094:	07 c0       	rjmp	.+14     	; 0x20a4 <__udivmodhi4_ep>

00002096 <__udivmodhi4_loop>:
    2096:	aa 1f       	adc	r26, r26
    2098:	bb 1f       	adc	r27, r27
    209a:	a6 17       	cp	r26, r22
    209c:	b7 07       	cpc	r27, r23
    209e:	10 f0       	brcs	.+4      	; 0x20a4 <__udivmodhi4_ep>
    20a0:	a6 1b       	sub	r26, r22
    20a2:	b7 0b       	sbc	r27, r23

000020a4 <__udivmodhi4_ep>:
    20a4:	88 1f       	adc	r24, r24
    20a6:	99 1f       	adc	r25, r25
    20a8:	5a 95       	dec	r21
    20aa:	a9 f7       	brne	.-22     	; 0x2096 <__udivmodhi4_loop>
    20ac:	80 95       	com	r24
    20ae:	90 95       	com	r25
    20b0:	bc 01       	movw	r22, r24
    20b2:	cd 01       	movw	r24, r26
    20b4:	08 95       	ret

000020b6 <__divmodhi4>:
    20b6:	97 fb       	bst	r25, 7
    20b8:	09 2e       	mov	r0, r25
    20ba:	07 26       	eor	r0, r23
    20bc:	0a d0       	rcall	.+20     	; 0x20d2 <__divmodhi4_neg1>
    20be:	77 fd       	sbrc	r23, 7
    20c0:	04 d0       	rcall	.+8      	; 0x20ca <__divmodhi4_neg2>
    20c2:	e5 df       	rcall	.-54     	; 0x208e <__udivmodhi4>
    20c4:	06 d0       	rcall	.+12     	; 0x20d2 <__divmodhi4_neg1>
    20c6:	00 20       	and	r0, r0
    20c8:	1a f4       	brpl	.+6      	; 0x20d0 <__divmodhi4_exit>

000020ca <__divmodhi4_neg2>:
    20ca:	70 95       	com	r23
    20cc:	61 95       	neg	r22
    20ce:	7f 4f       	sbci	r23, 0xFF	; 255

000020d0 <__divmodhi4_exit>:
    20d0:	08 95       	ret

000020d2 <__divmodhi4_neg1>:
    20d2:	f6 f7       	brtc	.-4      	; 0x20d0 <__divmodhi4_exit>
    20d4:	90 95       	com	r25
    20d6:	81 95       	neg	r24
    20d8:	9f 4f       	sbci	r25, 0xFF	; 255
    20da:	08 95       	ret

000020dc <__prologue_saves__>:
    20dc:	2f 92       	push	r2
    20de:	3f 92       	push	r3
    20e0:	4f 92       	push	r4
    20e2:	5f 92       	push	r5
    20e4:	6f 92       	push	r6
    20e6:	7f 92       	push	r7
    20e8:	8f 92       	push	r8
    20ea:	9f 92       	push	r9
    20ec:	af 92       	push	r10
    20ee:	bf 92       	push	r11
    20f0:	cf 92       	push	r12
    20f2:	df 92       	push	r13
    20f4:	ef 92       	push	r14
    20f6:	ff 92       	push	r15
    20f8:	0f 93       	push	r16
    20fa:	1f 93       	push	r17
    20fc:	cf 93       	push	r28
    20fe:	df 93       	push	r29
    2100:	cd b7       	in	r28, 0x3d	; 61
    2102:	de b7       	in	r29, 0x3e	; 62
    2104:	ca 1b       	sub	r28, r26
    2106:	db 0b       	sbc	r29, r27
    2108:	0f b6       	in	r0, 0x3f	; 63
    210a:	f8 94       	cli
    210c:	de bf       	out	0x3e, r29	; 62
    210e:	0f be       	out	0x3f, r0	; 63
    2110:	cd bf       	out	0x3d, r28	; 61
    2112:	09 94       	ijmp

00002114 <__epilogue_restores__>:
    2114:	2a 88       	ldd	r2, Y+18	; 0x12
    2116:	39 88       	ldd	r3, Y+17	; 0x11
    2118:	48 88       	ldd	r4, Y+16	; 0x10
    211a:	5f 84       	ldd	r5, Y+15	; 0x0f
    211c:	6e 84       	ldd	r6, Y+14	; 0x0e
    211e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2120:	8c 84       	ldd	r8, Y+12	; 0x0c
    2122:	9b 84       	ldd	r9, Y+11	; 0x0b
    2124:	aa 84       	ldd	r10, Y+10	; 0x0a
    2126:	b9 84       	ldd	r11, Y+9	; 0x09
    2128:	c8 84       	ldd	r12, Y+8	; 0x08
    212a:	df 80       	ldd	r13, Y+7	; 0x07
    212c:	ee 80       	ldd	r14, Y+6	; 0x06
    212e:	fd 80       	ldd	r15, Y+5	; 0x05
    2130:	0c 81       	ldd	r16, Y+4	; 0x04
    2132:	1b 81       	ldd	r17, Y+3	; 0x03
    2134:	aa 81       	ldd	r26, Y+2	; 0x02
    2136:	b9 81       	ldd	r27, Y+1	; 0x01
    2138:	ce 0f       	add	r28, r30
    213a:	d1 1d       	adc	r29, r1
    213c:	0f b6       	in	r0, 0x3f	; 63
    213e:	f8 94       	cli
    2140:	de bf       	out	0x3e, r29	; 62
    2142:	0f be       	out	0x3f, r0	; 63
    2144:	cd bf       	out	0x3d, r28	; 61
    2146:	ed 01       	movw	r28, r26
    2148:	08 95       	ret

0000214a <calloc>:
    214a:	ef 92       	push	r14
    214c:	ff 92       	push	r15
    214e:	0f 93       	push	r16
    2150:	1f 93       	push	r17
    2152:	cf 93       	push	r28
    2154:	df 93       	push	r29
    2156:	68 9f       	mul	r22, r24
    2158:	80 01       	movw	r16, r0
    215a:	69 9f       	mul	r22, r25
    215c:	10 0d       	add	r17, r0
    215e:	78 9f       	mul	r23, r24
    2160:	10 0d       	add	r17, r0
    2162:	11 24       	eor	r1, r1
    2164:	c8 01       	movw	r24, r16
    2166:	0e 94 c9 10 	call	0x2192	; 0x2192 <malloc>
    216a:	e8 2e       	mov	r14, r24
    216c:	e7 01       	movw	r28, r14
    216e:	7e 01       	movw	r14, r28
    2170:	f9 2e       	mov	r15, r25
    2172:	e7 01       	movw	r28, r14
    2174:	20 97       	sbiw	r28, 0x00	; 0
    2176:	31 f0       	breq	.+12     	; 0x2184 <calloc+0x3a>
    2178:	8e 2d       	mov	r24, r14
    217a:	60 e0       	ldi	r22, 0x00	; 0
    217c:	70 e0       	ldi	r23, 0x00	; 0
    217e:	a8 01       	movw	r20, r16
    2180:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <memset>
    2184:	7e 01       	movw	r14, r28
    2186:	ce 01       	movw	r24, r28
    2188:	cd b7       	in	r28, 0x3d	; 61
    218a:	de b7       	in	r29, 0x3e	; 62
    218c:	e6 e0       	ldi	r30, 0x06	; 6
    218e:	0c 94 96 10 	jmp	0x212c	; 0x212c <__epilogue_restores__+0x18>

00002192 <malloc>:
    2192:	cf 93       	push	r28
    2194:	df 93       	push	r29
    2196:	82 30       	cpi	r24, 0x02	; 2
    2198:	91 05       	cpc	r25, r1
    219a:	10 f4       	brcc	.+4      	; 0x21a0 <malloc+0xe>
    219c:	82 e0       	ldi	r24, 0x02	; 2
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	e0 91 3a 06 	lds	r30, 0x063A
    21a4:	f0 91 3b 06 	lds	r31, 0x063B
    21a8:	40 e0       	ldi	r20, 0x00	; 0
    21aa:	50 e0       	ldi	r21, 0x00	; 0
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	26 c0       	rjmp	.+76     	; 0x21fe <malloc+0x6c>
    21b2:	60 81       	ld	r22, Z
    21b4:	71 81       	ldd	r23, Z+1	; 0x01
    21b6:	68 17       	cp	r22, r24
    21b8:	79 07       	cpc	r23, r25
    21ba:	e0 f0       	brcs	.+56     	; 0x21f4 <malloc+0x62>
    21bc:	68 17       	cp	r22, r24
    21be:	79 07       	cpc	r23, r25
    21c0:	81 f4       	brne	.+32     	; 0x21e2 <malloc+0x50>
    21c2:	82 81       	ldd	r24, Z+2	; 0x02
    21c4:	93 81       	ldd	r25, Z+3	; 0x03
    21c6:	21 15       	cp	r18, r1
    21c8:	31 05       	cpc	r19, r1
    21ca:	31 f0       	breq	.+12     	; 0x21d8 <malloc+0x46>
    21cc:	d9 01       	movw	r26, r18
    21ce:	13 96       	adiw	r26, 0x03	; 3
    21d0:	9c 93       	st	X, r25
    21d2:	8e 93       	st	-X, r24
    21d4:	12 97       	sbiw	r26, 0x02	; 2
    21d6:	2b c0       	rjmp	.+86     	; 0x222e <malloc+0x9c>
    21d8:	90 93 3b 06 	sts	0x063B, r25
    21dc:	80 93 3a 06 	sts	0x063A, r24
    21e0:	26 c0       	rjmp	.+76     	; 0x222e <malloc+0x9c>
    21e2:	41 15       	cp	r20, r1
    21e4:	51 05       	cpc	r21, r1
    21e6:	19 f0       	breq	.+6      	; 0x21ee <malloc+0x5c>
    21e8:	64 17       	cp	r22, r20
    21ea:	75 07       	cpc	r23, r21
    21ec:	18 f4       	brcc	.+6      	; 0x21f4 <malloc+0x62>
    21ee:	ab 01       	movw	r20, r22
    21f0:	e9 01       	movw	r28, r18
    21f2:	df 01       	movw	r26, r30
    21f4:	9f 01       	movw	r18, r30
    21f6:	72 81       	ldd	r23, Z+2	; 0x02
    21f8:	63 81       	ldd	r22, Z+3	; 0x03
    21fa:	e7 2f       	mov	r30, r23
    21fc:	f6 2f       	mov	r31, r22
    21fe:	30 97       	sbiw	r30, 0x00	; 0
    2200:	c1 f6       	brne	.-80     	; 0x21b2 <malloc+0x20>
    2202:	41 15       	cp	r20, r1
    2204:	51 05       	cpc	r21, r1
    2206:	01 f1       	breq	.+64     	; 0x2248 <malloc+0xb6>
    2208:	48 1b       	sub	r20, r24
    220a:	59 0b       	sbc	r21, r25
    220c:	44 30       	cpi	r20, 0x04	; 4
    220e:	51 05       	cpc	r21, r1
    2210:	80 f4       	brcc	.+32     	; 0x2232 <malloc+0xa0>
    2212:	12 96       	adiw	r26, 0x02	; 2
    2214:	8d 91       	ld	r24, X+
    2216:	9c 91       	ld	r25, X
    2218:	13 97       	sbiw	r26, 0x03	; 3
    221a:	20 97       	sbiw	r28, 0x00	; 0
    221c:	19 f0       	breq	.+6      	; 0x2224 <malloc+0x92>
    221e:	9b 83       	std	Y+3, r25	; 0x03
    2220:	8a 83       	std	Y+2, r24	; 0x02
    2222:	04 c0       	rjmp	.+8      	; 0x222c <malloc+0x9a>
    2224:	90 93 3b 06 	sts	0x063B, r25
    2228:	80 93 3a 06 	sts	0x063A, r24
    222c:	fd 01       	movw	r30, r26
    222e:	32 96       	adiw	r30, 0x02	; 2
    2230:	46 c0       	rjmp	.+140    	; 0x22be <malloc+0x12c>
    2232:	fd 01       	movw	r30, r26
    2234:	e4 0f       	add	r30, r20
    2236:	f5 1f       	adc	r31, r21
    2238:	81 93       	st	Z+, r24
    223a:	91 93       	st	Z+, r25
    223c:	42 50       	subi	r20, 0x02	; 2
    223e:	50 40       	sbci	r21, 0x00	; 0
    2240:	11 96       	adiw	r26, 0x01	; 1
    2242:	5c 93       	st	X, r21
    2244:	4e 93       	st	-X, r20
    2246:	3b c0       	rjmp	.+118    	; 0x22be <malloc+0x12c>
    2248:	20 91 38 06 	lds	r18, 0x0638
    224c:	30 91 39 06 	lds	r19, 0x0639
    2250:	21 15       	cp	r18, r1
    2252:	31 05       	cpc	r19, r1
    2254:	41 f4       	brne	.+16     	; 0x2266 <malloc+0xd4>
    2256:	20 91 16 01 	lds	r18, 0x0116
    225a:	30 91 17 01 	lds	r19, 0x0117
    225e:	30 93 39 06 	sts	0x0639, r19
    2262:	20 93 38 06 	sts	0x0638, r18
    2266:	20 91 18 01 	lds	r18, 0x0118
    226a:	30 91 19 01 	lds	r19, 0x0119
    226e:	21 15       	cp	r18, r1
    2270:	31 05       	cpc	r19, r1
    2272:	41 f4       	brne	.+16     	; 0x2284 <malloc+0xf2>
    2274:	2d b7       	in	r18, 0x3d	; 61
    2276:	3e b7       	in	r19, 0x3e	; 62
    2278:	40 91 14 01 	lds	r20, 0x0114
    227c:	50 91 15 01 	lds	r21, 0x0115
    2280:	24 1b       	sub	r18, r20
    2282:	35 0b       	sbc	r19, r21
    2284:	e0 91 38 06 	lds	r30, 0x0638
    2288:	f0 91 39 06 	lds	r31, 0x0639
    228c:	e2 17       	cp	r30, r18
    228e:	f3 07       	cpc	r31, r19
    2290:	a0 f4       	brcc	.+40     	; 0x22ba <malloc+0x128>
    2292:	2e 1b       	sub	r18, r30
    2294:	3f 0b       	sbc	r19, r31
    2296:	28 17       	cp	r18, r24
    2298:	39 07       	cpc	r19, r25
    229a:	78 f0       	brcs	.+30     	; 0x22ba <malloc+0x128>
    229c:	ac 01       	movw	r20, r24
    229e:	4e 5f       	subi	r20, 0xFE	; 254
    22a0:	5f 4f       	sbci	r21, 0xFF	; 255
    22a2:	24 17       	cp	r18, r20
    22a4:	35 07       	cpc	r19, r21
    22a6:	48 f0       	brcs	.+18     	; 0x22ba <malloc+0x128>
    22a8:	4e 0f       	add	r20, r30
    22aa:	5f 1f       	adc	r21, r31
    22ac:	50 93 39 06 	sts	0x0639, r21
    22b0:	40 93 38 06 	sts	0x0638, r20
    22b4:	81 93       	st	Z+, r24
    22b6:	91 93       	st	Z+, r25
    22b8:	02 c0       	rjmp	.+4      	; 0x22be <malloc+0x12c>
    22ba:	e0 e0       	ldi	r30, 0x00	; 0
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	cf 01       	movw	r24, r30
    22c0:	df 91       	pop	r29
    22c2:	cf 91       	pop	r28
    22c4:	08 95       	ret

000022c6 <free>:
    22c6:	cf 93       	push	r28
    22c8:	df 93       	push	r29
    22ca:	00 97       	sbiw	r24, 0x00	; 0
    22cc:	09 f4       	brne	.+2      	; 0x22d0 <free+0xa>
    22ce:	91 c0       	rjmp	.+290    	; 0x23f2 <free+0x12c>
    22d0:	fc 01       	movw	r30, r24
    22d2:	32 97       	sbiw	r30, 0x02	; 2
    22d4:	13 82       	std	Z+3, r1	; 0x03
    22d6:	12 82       	std	Z+2, r1	; 0x02
    22d8:	60 91 3a 06 	lds	r22, 0x063A
    22dc:	70 91 3b 06 	lds	r23, 0x063B
    22e0:	61 15       	cp	r22, r1
    22e2:	71 05       	cpc	r23, r1
    22e4:	81 f4       	brne	.+32     	; 0x2306 <free+0x40>
    22e6:	20 81       	ld	r18, Z
    22e8:	31 81       	ldd	r19, Z+1	; 0x01
    22ea:	28 0f       	add	r18, r24
    22ec:	39 1f       	adc	r19, r25
    22ee:	80 91 38 06 	lds	r24, 0x0638
    22f2:	90 91 39 06 	lds	r25, 0x0639
    22f6:	82 17       	cp	r24, r18
    22f8:	93 07       	cpc	r25, r19
    22fa:	99 f5       	brne	.+102    	; 0x2362 <free+0x9c>
    22fc:	f0 93 39 06 	sts	0x0639, r31
    2300:	e0 93 38 06 	sts	0x0638, r30
    2304:	76 c0       	rjmp	.+236    	; 0x23f2 <free+0x12c>
    2306:	db 01       	movw	r26, r22
    2308:	80 e0       	ldi	r24, 0x00	; 0
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	02 c0       	rjmp	.+4      	; 0x2312 <free+0x4c>
    230e:	cd 01       	movw	r24, r26
    2310:	d9 01       	movw	r26, r18
    2312:	ae 17       	cp	r26, r30
    2314:	bf 07       	cpc	r27, r31
    2316:	48 f4       	brcc	.+18     	; 0x232a <free+0x64>
    2318:	12 96       	adiw	r26, 0x02	; 2
    231a:	2d 91       	ld	r18, X+
    231c:	3c 91       	ld	r19, X
    231e:	13 97       	sbiw	r26, 0x03	; 3
    2320:	21 15       	cp	r18, r1
    2322:	31 05       	cpc	r19, r1
    2324:	a1 f7       	brne	.-24     	; 0x230e <free+0x48>
    2326:	cd 01       	movw	r24, r26
    2328:	21 c0       	rjmp	.+66     	; 0x236c <free+0xa6>
    232a:	b3 83       	std	Z+3, r27	; 0x03
    232c:	a2 83       	std	Z+2, r26	; 0x02
    232e:	ef 01       	movw	r28, r30
    2330:	49 91       	ld	r20, Y+
    2332:	59 91       	ld	r21, Y+
    2334:	9e 01       	movw	r18, r28
    2336:	24 0f       	add	r18, r20
    2338:	35 1f       	adc	r19, r21
    233a:	a2 17       	cp	r26, r18
    233c:	b3 07       	cpc	r27, r19
    233e:	79 f4       	brne	.+30     	; 0x235e <free+0x98>
    2340:	2d 91       	ld	r18, X+
    2342:	3c 91       	ld	r19, X
    2344:	11 97       	sbiw	r26, 0x01	; 1
    2346:	24 0f       	add	r18, r20
    2348:	35 1f       	adc	r19, r21
    234a:	2e 5f       	subi	r18, 0xFE	; 254
    234c:	3f 4f       	sbci	r19, 0xFF	; 255
    234e:	31 83       	std	Z+1, r19	; 0x01
    2350:	20 83       	st	Z, r18
    2352:	12 96       	adiw	r26, 0x02	; 2
    2354:	2d 91       	ld	r18, X+
    2356:	3c 91       	ld	r19, X
    2358:	13 97       	sbiw	r26, 0x03	; 3
    235a:	33 83       	std	Z+3, r19	; 0x03
    235c:	22 83       	std	Z+2, r18	; 0x02
    235e:	00 97       	sbiw	r24, 0x00	; 0
    2360:	29 f4       	brne	.+10     	; 0x236c <free+0xa6>
    2362:	f0 93 3b 06 	sts	0x063B, r31
    2366:	e0 93 3a 06 	sts	0x063A, r30
    236a:	43 c0       	rjmp	.+134    	; 0x23f2 <free+0x12c>
    236c:	dc 01       	movw	r26, r24
    236e:	13 96       	adiw	r26, 0x03	; 3
    2370:	fc 93       	st	X, r31
    2372:	ee 93       	st	-X, r30
    2374:	12 97       	sbiw	r26, 0x02	; 2
    2376:	4d 91       	ld	r20, X+
    2378:	5d 91       	ld	r21, X+
    237a:	a4 0f       	add	r26, r20
    237c:	b5 1f       	adc	r27, r21
    237e:	ea 17       	cp	r30, r26
    2380:	fb 07       	cpc	r31, r27
    2382:	69 f4       	brne	.+26     	; 0x239e <free+0xd8>
    2384:	20 81       	ld	r18, Z
    2386:	31 81       	ldd	r19, Z+1	; 0x01
    2388:	24 0f       	add	r18, r20
    238a:	35 1f       	adc	r19, r21
    238c:	2e 5f       	subi	r18, 0xFE	; 254
    238e:	3f 4f       	sbci	r19, 0xFF	; 255
    2390:	ec 01       	movw	r28, r24
    2392:	39 83       	std	Y+1, r19	; 0x01
    2394:	28 83       	st	Y, r18
    2396:	22 81       	ldd	r18, Z+2	; 0x02
    2398:	33 81       	ldd	r19, Z+3	; 0x03
    239a:	3b 83       	std	Y+3, r19	; 0x03
    239c:	2a 83       	std	Y+2, r18	; 0x02
    239e:	e0 e0       	ldi	r30, 0x00	; 0
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	02 c0       	rjmp	.+4      	; 0x23a8 <free+0xe2>
    23a4:	fb 01       	movw	r30, r22
    23a6:	bc 01       	movw	r22, r24
    23a8:	db 01       	movw	r26, r22
    23aa:	12 96       	adiw	r26, 0x02	; 2
    23ac:	8d 91       	ld	r24, X+
    23ae:	9c 91       	ld	r25, X
    23b0:	13 97       	sbiw	r26, 0x03	; 3
    23b2:	00 97       	sbiw	r24, 0x00	; 0
    23b4:	b9 f7       	brne	.-18     	; 0x23a4 <free+0xde>
    23b6:	9b 01       	movw	r18, r22
    23b8:	2e 5f       	subi	r18, 0xFE	; 254
    23ba:	3f 4f       	sbci	r19, 0xFF	; 255
    23bc:	8d 91       	ld	r24, X+
    23be:	9c 91       	ld	r25, X
    23c0:	11 97       	sbiw	r26, 0x01	; 1
    23c2:	82 0f       	add	r24, r18
    23c4:	93 1f       	adc	r25, r19
    23c6:	40 91 38 06 	lds	r20, 0x0638
    23ca:	50 91 39 06 	lds	r21, 0x0639
    23ce:	48 17       	cp	r20, r24
    23d0:	59 07       	cpc	r21, r25
    23d2:	79 f4       	brne	.+30     	; 0x23f2 <free+0x12c>
    23d4:	30 97       	sbiw	r30, 0x00	; 0
    23d6:	29 f4       	brne	.+10     	; 0x23e2 <free+0x11c>
    23d8:	10 92 3b 06 	sts	0x063B, r1
    23dc:	10 92 3a 06 	sts	0x063A, r1
    23e0:	02 c0       	rjmp	.+4      	; 0x23e6 <free+0x120>
    23e2:	13 82       	std	Z+3, r1	; 0x03
    23e4:	12 82       	std	Z+2, r1	; 0x02
    23e6:	22 50       	subi	r18, 0x02	; 2
    23e8:	30 40       	sbci	r19, 0x00	; 0
    23ea:	30 93 39 06 	sts	0x0639, r19
    23ee:	20 93 38 06 	sts	0x0638, r18
    23f2:	df 91       	pop	r29
    23f4:	cf 91       	pop	r28
    23f6:	08 95       	ret

000023f8 <memset>:
    23f8:	dc 01       	movw	r26, r24
    23fa:	01 c0       	rjmp	.+2      	; 0x23fe <memset+0x6>
    23fc:	6d 93       	st	X+, r22
    23fe:	41 50       	subi	r20, 0x01	; 1
    2400:	50 40       	sbci	r21, 0x00	; 0
    2402:	e0 f7       	brcc	.-8      	; 0x23fc <memset+0x4>
    2404:	08 95       	ret

00002406 <strlen>:
    2406:	fc 01       	movw	r30, r24
    2408:	01 90       	ld	r0, Z+
    240a:	00 20       	and	r0, r0
    240c:	e9 f7       	brne	.-6      	; 0x2408 <strlen+0x2>
    240e:	80 95       	com	r24
    2410:	90 95       	com	r25
    2412:	8e 0f       	add	r24, r30
    2414:	9f 1f       	adc	r25, r31
    2416:	08 95       	ret

00002418 <sprintf>:
    2418:	ae e0       	ldi	r26, 0x0E	; 14
    241a:	b0 e0       	ldi	r27, 0x00	; 0
    241c:	e2 e1       	ldi	r30, 0x12	; 18
    241e:	f2 e1       	ldi	r31, 0x12	; 18
    2420:	0c 94 7c 10 	jmp	0x20f8	; 0x20f8 <__prologue_saves__+0x1c>
    2424:	0d 89       	ldd	r16, Y+21	; 0x15
    2426:	1e 89       	ldd	r17, Y+22	; 0x16
    2428:	86 e0       	ldi	r24, 0x06	; 6
    242a:	8c 83       	std	Y+4, r24	; 0x04
    242c:	1a 83       	std	Y+2, r17	; 0x02
    242e:	09 83       	std	Y+1, r16	; 0x01
    2430:	8f ef       	ldi	r24, 0xFF	; 255
    2432:	9f e7       	ldi	r25, 0x7F	; 127
    2434:	9e 83       	std	Y+6, r25	; 0x06
    2436:	8d 83       	std	Y+5, r24	; 0x05
    2438:	9e 01       	movw	r18, r28
    243a:	27 5e       	subi	r18, 0xE7	; 231
    243c:	3f 4f       	sbci	r19, 0xFF	; 255
    243e:	ce 01       	movw	r24, r28
    2440:	01 96       	adiw	r24, 0x01	; 1
    2442:	6f 89       	ldd	r22, Y+23	; 0x17
    2444:	78 8d       	ldd	r23, Y+24	; 0x18
    2446:	a9 01       	movw	r20, r18
    2448:	0e 94 2f 12 	call	0x245e	; 0x245e <vfprintf>
    244c:	ef 81       	ldd	r30, Y+7	; 0x07
    244e:	f8 85       	ldd	r31, Y+8	; 0x08
    2450:	e0 0f       	add	r30, r16
    2452:	f1 1f       	adc	r31, r17
    2454:	10 82       	st	Z, r1
    2456:	2e 96       	adiw	r28, 0x0e	; 14
    2458:	e4 e0       	ldi	r30, 0x04	; 4
    245a:	0c 94 98 10 	jmp	0x2130	; 0x2130 <__epilogue_restores__+0x1c>

0000245e <vfprintf>:
    245e:	ac e0       	ldi	r26, 0x0C	; 12
    2460:	b0 e0       	ldi	r27, 0x00	; 0
    2462:	e5 e3       	ldi	r30, 0x35	; 53
    2464:	f2 e1       	ldi	r31, 0x12	; 18
    2466:	0c 94 6e 10 	jmp	0x20dc	; 0x20dc <__prologue_saves__>
    246a:	6c 01       	movw	r12, r24
    246c:	1b 01       	movw	r2, r22
    246e:	8a 01       	movw	r16, r20
    2470:	fc 01       	movw	r30, r24
    2472:	17 82       	std	Z+7, r1	; 0x07
    2474:	16 82       	std	Z+6, r1	; 0x06
    2476:	83 81       	ldd	r24, Z+3	; 0x03
    2478:	81 ff       	sbrs	r24, 1
    247a:	d1 c1       	rjmp	.+930    	; 0x281e <vfprintf+0x3c0>
    247c:	2e 01       	movw	r4, r28
    247e:	08 94       	sec
    2480:	41 1c       	adc	r4, r1
    2482:	51 1c       	adc	r5, r1
    2484:	f6 01       	movw	r30, r12
    2486:	93 81       	ldd	r25, Z+3	; 0x03
    2488:	f1 01       	movw	r30, r2
    248a:	93 fd       	sbrc	r25, 3
    248c:	85 91       	lpm	r24, Z+
    248e:	93 ff       	sbrs	r25, 3
    2490:	81 91       	ld	r24, Z+
    2492:	1f 01       	movw	r2, r30
    2494:	88 23       	and	r24, r24
    2496:	09 f4       	brne	.+2      	; 0x249a <vfprintf+0x3c>
    2498:	be c1       	rjmp	.+892    	; 0x2816 <vfprintf+0x3b8>
    249a:	85 32       	cpi	r24, 0x25	; 37
    249c:	39 f4       	brne	.+14     	; 0x24ac <vfprintf+0x4e>
    249e:	93 fd       	sbrc	r25, 3
    24a0:	85 91       	lpm	r24, Z+
    24a2:	93 ff       	sbrs	r25, 3
    24a4:	81 91       	ld	r24, Z+
    24a6:	1f 01       	movw	r2, r30
    24a8:	85 32       	cpi	r24, 0x25	; 37
    24aa:	29 f4       	brne	.+10     	; 0x24b6 <vfprintf+0x58>
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	b6 01       	movw	r22, r12
    24b0:	0e 94 2c 14 	call	0x2858	; 0x2858 <fputc>
    24b4:	e7 cf       	rjmp	.-50     	; 0x2484 <vfprintf+0x26>
    24b6:	ee 24       	eor	r14, r14
    24b8:	ff 24       	eor	r15, r15
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	20 32       	cpi	r18, 0x20	; 32
    24be:	b0 f4       	brcc	.+44     	; 0x24ec <vfprintf+0x8e>
    24c0:	8b 32       	cpi	r24, 0x2B	; 43
    24c2:	69 f0       	breq	.+26     	; 0x24de <vfprintf+0x80>
    24c4:	8c 32       	cpi	r24, 0x2C	; 44
    24c6:	28 f4       	brcc	.+10     	; 0x24d2 <vfprintf+0x74>
    24c8:	80 32       	cpi	r24, 0x20	; 32
    24ca:	51 f0       	breq	.+20     	; 0x24e0 <vfprintf+0x82>
    24cc:	83 32       	cpi	r24, 0x23	; 35
    24ce:	71 f4       	brne	.+28     	; 0x24ec <vfprintf+0x8e>
    24d0:	0b c0       	rjmp	.+22     	; 0x24e8 <vfprintf+0x8a>
    24d2:	8d 32       	cpi	r24, 0x2D	; 45
    24d4:	39 f0       	breq	.+14     	; 0x24e4 <vfprintf+0x86>
    24d6:	80 33       	cpi	r24, 0x30	; 48
    24d8:	49 f4       	brne	.+18     	; 0x24ec <vfprintf+0x8e>
    24da:	21 60       	ori	r18, 0x01	; 1
    24dc:	2c c0       	rjmp	.+88     	; 0x2536 <vfprintf+0xd8>
    24de:	22 60       	ori	r18, 0x02	; 2
    24e0:	24 60       	ori	r18, 0x04	; 4
    24e2:	29 c0       	rjmp	.+82     	; 0x2536 <vfprintf+0xd8>
    24e4:	28 60       	ori	r18, 0x08	; 8
    24e6:	27 c0       	rjmp	.+78     	; 0x2536 <vfprintf+0xd8>
    24e8:	20 61       	ori	r18, 0x10	; 16
    24ea:	25 c0       	rjmp	.+74     	; 0x2536 <vfprintf+0xd8>
    24ec:	27 fd       	sbrc	r18, 7
    24ee:	2c c0       	rjmp	.+88     	; 0x2548 <vfprintf+0xea>
    24f0:	38 2f       	mov	r19, r24
    24f2:	30 53       	subi	r19, 0x30	; 48
    24f4:	3a 30       	cpi	r19, 0x0A	; 10
    24f6:	98 f4       	brcc	.+38     	; 0x251e <vfprintf+0xc0>
    24f8:	26 ff       	sbrs	r18, 6
    24fa:	08 c0       	rjmp	.+16     	; 0x250c <vfprintf+0xae>
    24fc:	8e 2d       	mov	r24, r14
    24fe:	88 0f       	add	r24, r24
    2500:	e8 2e       	mov	r14, r24
    2502:	ee 0c       	add	r14, r14
    2504:	ee 0c       	add	r14, r14
    2506:	e8 0e       	add	r14, r24
    2508:	e3 0e       	add	r14, r19
    250a:	15 c0       	rjmp	.+42     	; 0x2536 <vfprintf+0xd8>
    250c:	8f 2d       	mov	r24, r15
    250e:	88 0f       	add	r24, r24
    2510:	f8 2e       	mov	r15, r24
    2512:	ff 0c       	add	r15, r15
    2514:	ff 0c       	add	r15, r15
    2516:	f8 0e       	add	r15, r24
    2518:	f3 0e       	add	r15, r19
    251a:	20 62       	ori	r18, 0x20	; 32
    251c:	0c c0       	rjmp	.+24     	; 0x2536 <vfprintf+0xd8>
    251e:	8e 32       	cpi	r24, 0x2E	; 46
    2520:	21 f4       	brne	.+8      	; 0x252a <vfprintf+0xcc>
    2522:	26 fd       	sbrc	r18, 6
    2524:	78 c1       	rjmp	.+752    	; 0x2816 <vfprintf+0x3b8>
    2526:	20 64       	ori	r18, 0x40	; 64
    2528:	06 c0       	rjmp	.+12     	; 0x2536 <vfprintf+0xd8>
    252a:	8c 36       	cpi	r24, 0x6C	; 108
    252c:	11 f4       	brne	.+4      	; 0x2532 <vfprintf+0xd4>
    252e:	20 68       	ori	r18, 0x80	; 128
    2530:	02 c0       	rjmp	.+4      	; 0x2536 <vfprintf+0xd8>
    2532:	88 36       	cpi	r24, 0x68	; 104
    2534:	49 f4       	brne	.+18     	; 0x2548 <vfprintf+0xea>
    2536:	f1 01       	movw	r30, r2
    2538:	93 fd       	sbrc	r25, 3
    253a:	85 91       	lpm	r24, Z+
    253c:	93 ff       	sbrs	r25, 3
    253e:	81 91       	ld	r24, Z+
    2540:	1f 01       	movw	r2, r30
    2542:	88 23       	and	r24, r24
    2544:	09 f0       	breq	.+2      	; 0x2548 <vfprintf+0xea>
    2546:	ba cf       	rjmp	.-140    	; 0x24bc <vfprintf+0x5e>
    2548:	98 2f       	mov	r25, r24
    254a:	95 54       	subi	r25, 0x45	; 69
    254c:	93 30       	cpi	r25, 0x03	; 3
    254e:	18 f0       	brcs	.+6      	; 0x2556 <vfprintf+0xf8>
    2550:	90 52       	subi	r25, 0x20	; 32
    2552:	93 30       	cpi	r25, 0x03	; 3
    2554:	28 f4       	brcc	.+10     	; 0x2560 <vfprintf+0x102>
    2556:	0c 5f       	subi	r16, 0xFC	; 252
    2558:	1f 4f       	sbci	r17, 0xFF	; 255
    255a:	ff e3       	ldi	r31, 0x3F	; 63
    255c:	f9 83       	std	Y+1, r31	; 0x01
    255e:	0d c0       	rjmp	.+26     	; 0x257a <vfprintf+0x11c>
    2560:	83 36       	cpi	r24, 0x63	; 99
    2562:	31 f0       	breq	.+12     	; 0x2570 <vfprintf+0x112>
    2564:	83 37       	cpi	r24, 0x73	; 115
    2566:	71 f0       	breq	.+28     	; 0x2584 <vfprintf+0x126>
    2568:	83 35       	cpi	r24, 0x53	; 83
    256a:	09 f0       	breq	.+2      	; 0x256e <vfprintf+0x110>
    256c:	60 c0       	rjmp	.+192    	; 0x262e <vfprintf+0x1d0>
    256e:	22 c0       	rjmp	.+68     	; 0x25b4 <vfprintf+0x156>
    2570:	f8 01       	movw	r30, r16
    2572:	80 81       	ld	r24, Z
    2574:	89 83       	std	Y+1, r24	; 0x01
    2576:	0e 5f       	subi	r16, 0xFE	; 254
    2578:	1f 4f       	sbci	r17, 0xFF	; 255
    257a:	42 01       	movw	r8, r4
    257c:	71 e0       	ldi	r23, 0x01	; 1
    257e:	a7 2e       	mov	r10, r23
    2580:	b1 2c       	mov	r11, r1
    2582:	16 c0       	rjmp	.+44     	; 0x25b0 <vfprintf+0x152>
    2584:	62 e0       	ldi	r22, 0x02	; 2
    2586:	66 2e       	mov	r6, r22
    2588:	71 2c       	mov	r7, r1
    258a:	60 0e       	add	r6, r16
    258c:	71 1e       	adc	r7, r17
    258e:	f8 01       	movw	r30, r16
    2590:	80 80       	ld	r8, Z
    2592:	91 80       	ldd	r9, Z+1	; 0x01
    2594:	26 ff       	sbrs	r18, 6
    2596:	03 c0       	rjmp	.+6      	; 0x259e <vfprintf+0x140>
    2598:	6e 2d       	mov	r22, r14
    259a:	70 e0       	ldi	r23, 0x00	; 0
    259c:	02 c0       	rjmp	.+4      	; 0x25a2 <vfprintf+0x144>
    259e:	6f ef       	ldi	r22, 0xFF	; 255
    25a0:	7f ef       	ldi	r23, 0xFF	; 255
    25a2:	c4 01       	movw	r24, r8
    25a4:	2c 87       	std	Y+12, r18	; 0x0c
    25a6:	0e 94 21 14 	call	0x2842	; 0x2842 <strnlen>
    25aa:	5c 01       	movw	r10, r24
    25ac:	83 01       	movw	r16, r6
    25ae:	2c 85       	ldd	r18, Y+12	; 0x0c
    25b0:	2f 77       	andi	r18, 0x7F	; 127
    25b2:	17 c0       	rjmp	.+46     	; 0x25e2 <vfprintf+0x184>
    25b4:	52 e0       	ldi	r21, 0x02	; 2
    25b6:	65 2e       	mov	r6, r21
    25b8:	71 2c       	mov	r7, r1
    25ba:	60 0e       	add	r6, r16
    25bc:	71 1e       	adc	r7, r17
    25be:	f8 01       	movw	r30, r16
    25c0:	80 80       	ld	r8, Z
    25c2:	91 80       	ldd	r9, Z+1	; 0x01
    25c4:	26 ff       	sbrs	r18, 6
    25c6:	03 c0       	rjmp	.+6      	; 0x25ce <vfprintf+0x170>
    25c8:	6e 2d       	mov	r22, r14
    25ca:	70 e0       	ldi	r23, 0x00	; 0
    25cc:	02 c0       	rjmp	.+4      	; 0x25d2 <vfprintf+0x174>
    25ce:	6f ef       	ldi	r22, 0xFF	; 255
    25d0:	7f ef       	ldi	r23, 0xFF	; 255
    25d2:	c4 01       	movw	r24, r8
    25d4:	2c 87       	std	Y+12, r18	; 0x0c
    25d6:	0e 94 16 14 	call	0x282c	; 0x282c <strnlen_P>
    25da:	5c 01       	movw	r10, r24
    25dc:	2c 85       	ldd	r18, Y+12	; 0x0c
    25de:	20 68       	ori	r18, 0x80	; 128
    25e0:	83 01       	movw	r16, r6
    25e2:	23 fd       	sbrc	r18, 3
    25e4:	20 c0       	rjmp	.+64     	; 0x2626 <vfprintf+0x1c8>
    25e6:	08 c0       	rjmp	.+16     	; 0x25f8 <vfprintf+0x19a>
    25e8:	80 e2       	ldi	r24, 0x20	; 32
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	b6 01       	movw	r22, r12
    25ee:	2c 87       	std	Y+12, r18	; 0x0c
    25f0:	0e 94 2c 14 	call	0x2858	; 0x2858 <fputc>
    25f4:	fa 94       	dec	r15
    25f6:	2c 85       	ldd	r18, Y+12	; 0x0c
    25f8:	8f 2d       	mov	r24, r15
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	a8 16       	cp	r10, r24
    25fe:	b9 06       	cpc	r11, r25
    2600:	98 f3       	brcs	.-26     	; 0x25e8 <vfprintf+0x18a>
    2602:	11 c0       	rjmp	.+34     	; 0x2626 <vfprintf+0x1c8>
    2604:	f4 01       	movw	r30, r8
    2606:	27 fd       	sbrc	r18, 7
    2608:	85 91       	lpm	r24, Z+
    260a:	27 ff       	sbrs	r18, 7
    260c:	81 91       	ld	r24, Z+
    260e:	4f 01       	movw	r8, r30
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	b6 01       	movw	r22, r12
    2614:	2c 87       	std	Y+12, r18	; 0x0c
    2616:	0e 94 2c 14 	call	0x2858	; 0x2858 <fputc>
    261a:	2c 85       	ldd	r18, Y+12	; 0x0c
    261c:	f1 10       	cpse	r15, r1
    261e:	fa 94       	dec	r15
    2620:	08 94       	sec
    2622:	a1 08       	sbc	r10, r1
    2624:	b1 08       	sbc	r11, r1
    2626:	a1 14       	cp	r10, r1
    2628:	b1 04       	cpc	r11, r1
    262a:	61 f7       	brne	.-40     	; 0x2604 <vfprintf+0x1a6>
    262c:	f1 c0       	rjmp	.+482    	; 0x2810 <vfprintf+0x3b2>
    262e:	84 36       	cpi	r24, 0x64	; 100
    2630:	11 f0       	breq	.+4      	; 0x2636 <vfprintf+0x1d8>
    2632:	89 36       	cpi	r24, 0x69	; 105
    2634:	49 f5       	brne	.+82     	; 0x2688 <vfprintf+0x22a>
    2636:	27 ff       	sbrs	r18, 7
    2638:	08 c0       	rjmp	.+16     	; 0x264a <vfprintf+0x1ec>
    263a:	f8 01       	movw	r30, r16
    263c:	60 81       	ld	r22, Z
    263e:	71 81       	ldd	r23, Z+1	; 0x01
    2640:	82 81       	ldd	r24, Z+2	; 0x02
    2642:	93 81       	ldd	r25, Z+3	; 0x03
    2644:	0c 5f       	subi	r16, 0xFC	; 252
    2646:	1f 4f       	sbci	r17, 0xFF	; 255
    2648:	09 c0       	rjmp	.+18     	; 0x265c <vfprintf+0x1fe>
    264a:	f8 01       	movw	r30, r16
    264c:	60 81       	ld	r22, Z
    264e:	71 81       	ldd	r23, Z+1	; 0x01
    2650:	88 27       	eor	r24, r24
    2652:	77 fd       	sbrc	r23, 7
    2654:	80 95       	com	r24
    2656:	98 2f       	mov	r25, r24
    2658:	0e 5f       	subi	r16, 0xFE	; 254
    265a:	1f 4f       	sbci	r17, 0xFF	; 255
    265c:	4f e6       	ldi	r20, 0x6F	; 111
    265e:	b4 2e       	mov	r11, r20
    2660:	b2 22       	and	r11, r18
    2662:	97 ff       	sbrs	r25, 7
    2664:	09 c0       	rjmp	.+18     	; 0x2678 <vfprintf+0x21a>
    2666:	90 95       	com	r25
    2668:	80 95       	com	r24
    266a:	70 95       	com	r23
    266c:	61 95       	neg	r22
    266e:	7f 4f       	sbci	r23, 0xFF	; 255
    2670:	8f 4f       	sbci	r24, 0xFF	; 255
    2672:	9f 4f       	sbci	r25, 0xFF	; 255
    2674:	f0 e8       	ldi	r31, 0x80	; 128
    2676:	bf 2a       	or	r11, r31
    2678:	a2 01       	movw	r20, r4
    267a:	2a e0       	ldi	r18, 0x0A	; 10
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__ultoa_invert>
    2682:	78 2e       	mov	r7, r24
    2684:	74 18       	sub	r7, r4
    2686:	45 c0       	rjmp	.+138    	; 0x2712 <vfprintf+0x2b4>
    2688:	85 37       	cpi	r24, 0x75	; 117
    268a:	31 f4       	brne	.+12     	; 0x2698 <vfprintf+0x23a>
    268c:	3f ee       	ldi	r19, 0xEF	; 239
    268e:	b3 2e       	mov	r11, r19
    2690:	b2 22       	and	r11, r18
    2692:	2a e0       	ldi	r18, 0x0A	; 10
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	25 c0       	rjmp	.+74     	; 0x26e2 <vfprintf+0x284>
    2698:	99 ef       	ldi	r25, 0xF9	; 249
    269a:	b9 2e       	mov	r11, r25
    269c:	b2 22       	and	r11, r18
    269e:	8f 36       	cpi	r24, 0x6F	; 111
    26a0:	c1 f0       	breq	.+48     	; 0x26d2 <vfprintf+0x274>
    26a2:	80 37       	cpi	r24, 0x70	; 112
    26a4:	20 f4       	brcc	.+8      	; 0x26ae <vfprintf+0x250>
    26a6:	88 35       	cpi	r24, 0x58	; 88
    26a8:	09 f0       	breq	.+2      	; 0x26ac <vfprintf+0x24e>
    26aa:	b5 c0       	rjmp	.+362    	; 0x2816 <vfprintf+0x3b8>
    26ac:	0d c0       	rjmp	.+26     	; 0x26c8 <vfprintf+0x26a>
    26ae:	80 37       	cpi	r24, 0x70	; 112
    26b0:	21 f0       	breq	.+8      	; 0x26ba <vfprintf+0x25c>
    26b2:	88 37       	cpi	r24, 0x78	; 120
    26b4:	09 f0       	breq	.+2      	; 0x26b8 <vfprintf+0x25a>
    26b6:	af c0       	rjmp	.+350    	; 0x2816 <vfprintf+0x3b8>
    26b8:	02 c0       	rjmp	.+4      	; 0x26be <vfprintf+0x260>
    26ba:	20 e1       	ldi	r18, 0x10	; 16
    26bc:	b2 2a       	or	r11, r18
    26be:	b4 fe       	sbrs	r11, 4
    26c0:	0b c0       	rjmp	.+22     	; 0x26d8 <vfprintf+0x27a>
    26c2:	84 e0       	ldi	r24, 0x04	; 4
    26c4:	b8 2a       	or	r11, r24
    26c6:	08 c0       	rjmp	.+16     	; 0x26d8 <vfprintf+0x27a>
    26c8:	b4 fe       	sbrs	r11, 4
    26ca:	09 c0       	rjmp	.+18     	; 0x26de <vfprintf+0x280>
    26cc:	e6 e0       	ldi	r30, 0x06	; 6
    26ce:	be 2a       	or	r11, r30
    26d0:	06 c0       	rjmp	.+12     	; 0x26de <vfprintf+0x280>
    26d2:	28 e0       	ldi	r18, 0x08	; 8
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	05 c0       	rjmp	.+10     	; 0x26e2 <vfprintf+0x284>
    26d8:	20 e1       	ldi	r18, 0x10	; 16
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	02 c0       	rjmp	.+4      	; 0x26e2 <vfprintf+0x284>
    26de:	20 e1       	ldi	r18, 0x10	; 16
    26e0:	32 e0       	ldi	r19, 0x02	; 2
    26e2:	b7 fe       	sbrs	r11, 7
    26e4:	08 c0       	rjmp	.+16     	; 0x26f6 <vfprintf+0x298>
    26e6:	f8 01       	movw	r30, r16
    26e8:	60 81       	ld	r22, Z
    26ea:	71 81       	ldd	r23, Z+1	; 0x01
    26ec:	82 81       	ldd	r24, Z+2	; 0x02
    26ee:	93 81       	ldd	r25, Z+3	; 0x03
    26f0:	0c 5f       	subi	r16, 0xFC	; 252
    26f2:	1f 4f       	sbci	r17, 0xFF	; 255
    26f4:	07 c0       	rjmp	.+14     	; 0x2704 <vfprintf+0x2a6>
    26f6:	f8 01       	movw	r30, r16
    26f8:	60 81       	ld	r22, Z
    26fa:	71 81       	ldd	r23, Z+1	; 0x01
    26fc:	80 e0       	ldi	r24, 0x00	; 0
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	0e 5f       	subi	r16, 0xFE	; 254
    2702:	1f 4f       	sbci	r17, 0xFF	; 255
    2704:	a2 01       	movw	r20, r4
    2706:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__ultoa_invert>
    270a:	78 2e       	mov	r7, r24
    270c:	74 18       	sub	r7, r4
    270e:	ff e7       	ldi	r31, 0x7F	; 127
    2710:	bf 22       	and	r11, r31
    2712:	b6 fe       	sbrs	r11, 6
    2714:	0b c0       	rjmp	.+22     	; 0x272c <vfprintf+0x2ce>
    2716:	2e ef       	ldi	r18, 0xFE	; 254
    2718:	b2 22       	and	r11, r18
    271a:	7e 14       	cp	r7, r14
    271c:	38 f4       	brcc	.+14     	; 0x272c <vfprintf+0x2ce>
    271e:	b4 fe       	sbrs	r11, 4
    2720:	07 c0       	rjmp	.+14     	; 0x2730 <vfprintf+0x2d2>
    2722:	b2 fc       	sbrc	r11, 2
    2724:	05 c0       	rjmp	.+10     	; 0x2730 <vfprintf+0x2d2>
    2726:	8f ee       	ldi	r24, 0xEF	; 239
    2728:	b8 22       	and	r11, r24
    272a:	02 c0       	rjmp	.+4      	; 0x2730 <vfprintf+0x2d2>
    272c:	a7 2c       	mov	r10, r7
    272e:	01 c0       	rjmp	.+2      	; 0x2732 <vfprintf+0x2d4>
    2730:	ae 2c       	mov	r10, r14
    2732:	8b 2d       	mov	r24, r11
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	b4 fe       	sbrs	r11, 4
    2738:	0d c0       	rjmp	.+26     	; 0x2754 <vfprintf+0x2f6>
    273a:	fe 01       	movw	r30, r28
    273c:	e7 0d       	add	r30, r7
    273e:	f1 1d       	adc	r31, r1
    2740:	20 81       	ld	r18, Z
    2742:	20 33       	cpi	r18, 0x30	; 48
    2744:	19 f4       	brne	.+6      	; 0x274c <vfprintf+0x2ee>
    2746:	e9 ee       	ldi	r30, 0xE9	; 233
    2748:	be 22       	and	r11, r30
    274a:	09 c0       	rjmp	.+18     	; 0x275e <vfprintf+0x300>
    274c:	a3 94       	inc	r10
    274e:	b2 fe       	sbrs	r11, 2
    2750:	06 c0       	rjmp	.+12     	; 0x275e <vfprintf+0x300>
    2752:	04 c0       	rjmp	.+8      	; 0x275c <vfprintf+0x2fe>
    2754:	86 78       	andi	r24, 0x86	; 134
    2756:	90 70       	andi	r25, 0x00	; 0
    2758:	00 97       	sbiw	r24, 0x00	; 0
    275a:	09 f0       	breq	.+2      	; 0x275e <vfprintf+0x300>
    275c:	a3 94       	inc	r10
    275e:	8b 2c       	mov	r8, r11
    2760:	99 24       	eor	r9, r9
    2762:	b3 fc       	sbrc	r11, 3
    2764:	14 c0       	rjmp	.+40     	; 0x278e <vfprintf+0x330>
    2766:	b0 fe       	sbrs	r11, 0
    2768:	0f c0       	rjmp	.+30     	; 0x2788 <vfprintf+0x32a>
    276a:	af 14       	cp	r10, r15
    276c:	28 f4       	brcc	.+10     	; 0x2778 <vfprintf+0x31a>
    276e:	e7 2c       	mov	r14, r7
    2770:	ef 0c       	add	r14, r15
    2772:	ea 18       	sub	r14, r10
    2774:	af 2c       	mov	r10, r15
    2776:	08 c0       	rjmp	.+16     	; 0x2788 <vfprintf+0x32a>
    2778:	e7 2c       	mov	r14, r7
    277a:	06 c0       	rjmp	.+12     	; 0x2788 <vfprintf+0x32a>
    277c:	80 e2       	ldi	r24, 0x20	; 32
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	b6 01       	movw	r22, r12
    2782:	0e 94 2c 14 	call	0x2858	; 0x2858 <fputc>
    2786:	a3 94       	inc	r10
    2788:	af 14       	cp	r10, r15
    278a:	c0 f3       	brcs	.-16     	; 0x277c <vfprintf+0x31e>
    278c:	04 c0       	rjmp	.+8      	; 0x2796 <vfprintf+0x338>
    278e:	af 14       	cp	r10, r15
    2790:	10 f4       	brcc	.+4      	; 0x2796 <vfprintf+0x338>
    2792:	fa 18       	sub	r15, r10
    2794:	01 c0       	rjmp	.+2      	; 0x2798 <vfprintf+0x33a>
    2796:	ff 24       	eor	r15, r15
    2798:	84 fe       	sbrs	r8, 4
    279a:	0f c0       	rjmp	.+30     	; 0x27ba <vfprintf+0x35c>
    279c:	80 e3       	ldi	r24, 0x30	; 48
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	b6 01       	movw	r22, r12
    27a2:	0e 94 2c 14 	call	0x2858	; 0x2858 <fputc>
    27a6:	82 fe       	sbrs	r8, 2
    27a8:	1f c0       	rjmp	.+62     	; 0x27e8 <vfprintf+0x38a>
    27aa:	81 fe       	sbrs	r8, 1
    27ac:	03 c0       	rjmp	.+6      	; 0x27b4 <vfprintf+0x356>
    27ae:	88 e5       	ldi	r24, 0x58	; 88
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	10 c0       	rjmp	.+32     	; 0x27d4 <vfprintf+0x376>
    27b4:	88 e7       	ldi	r24, 0x78	; 120
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	0d c0       	rjmp	.+26     	; 0x27d4 <vfprintf+0x376>
    27ba:	c4 01       	movw	r24, r8
    27bc:	86 78       	andi	r24, 0x86	; 134
    27be:	90 70       	andi	r25, 0x00	; 0
    27c0:	00 97       	sbiw	r24, 0x00	; 0
    27c2:	91 f0       	breq	.+36     	; 0x27e8 <vfprintf+0x38a>
    27c4:	81 fc       	sbrc	r8, 1
    27c6:	02 c0       	rjmp	.+4      	; 0x27cc <vfprintf+0x36e>
    27c8:	80 e2       	ldi	r24, 0x20	; 32
    27ca:	01 c0       	rjmp	.+2      	; 0x27ce <vfprintf+0x370>
    27cc:	8b e2       	ldi	r24, 0x2B	; 43
    27ce:	b7 fc       	sbrc	r11, 7
    27d0:	8d e2       	ldi	r24, 0x2D	; 45
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	b6 01       	movw	r22, r12
    27d6:	0e 94 2c 14 	call	0x2858	; 0x2858 <fputc>
    27da:	06 c0       	rjmp	.+12     	; 0x27e8 <vfprintf+0x38a>
    27dc:	80 e3       	ldi	r24, 0x30	; 48
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	b6 01       	movw	r22, r12
    27e2:	0e 94 2c 14 	call	0x2858	; 0x2858 <fputc>
    27e6:	ea 94       	dec	r14
    27e8:	7e 14       	cp	r7, r14
    27ea:	c0 f3       	brcs	.-16     	; 0x27dc <vfprintf+0x37e>
    27ec:	7a 94       	dec	r7
    27ee:	f2 01       	movw	r30, r4
    27f0:	e7 0d       	add	r30, r7
    27f2:	f1 1d       	adc	r31, r1
    27f4:	80 81       	ld	r24, Z
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	b6 01       	movw	r22, r12
    27fa:	0e 94 2c 14 	call	0x2858	; 0x2858 <fputc>
    27fe:	77 20       	and	r7, r7
    2800:	a9 f7       	brne	.-22     	; 0x27ec <vfprintf+0x38e>
    2802:	06 c0       	rjmp	.+12     	; 0x2810 <vfprintf+0x3b2>
    2804:	80 e2       	ldi	r24, 0x20	; 32
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	b6 01       	movw	r22, r12
    280a:	0e 94 2c 14 	call	0x2858	; 0x2858 <fputc>
    280e:	fa 94       	dec	r15
    2810:	ff 20       	and	r15, r15
    2812:	c1 f7       	brne	.-16     	; 0x2804 <vfprintf+0x3a6>
    2814:	37 ce       	rjmp	.-914    	; 0x2484 <vfprintf+0x26>
    2816:	f6 01       	movw	r30, r12
    2818:	26 81       	ldd	r18, Z+6	; 0x06
    281a:	37 81       	ldd	r19, Z+7	; 0x07
    281c:	02 c0       	rjmp	.+4      	; 0x2822 <vfprintf+0x3c4>
    281e:	2f ef       	ldi	r18, 0xFF	; 255
    2820:	3f ef       	ldi	r19, 0xFF	; 255
    2822:	c9 01       	movw	r24, r18
    2824:	2c 96       	adiw	r28, 0x0c	; 12
    2826:	e2 e1       	ldi	r30, 0x12	; 18
    2828:	0c 94 8a 10 	jmp	0x2114	; 0x2114 <__epilogue_restores__>

0000282c <strnlen_P>:
    282c:	fc 01       	movw	r30, r24
    282e:	05 90       	lpm	r0, Z+
    2830:	61 50       	subi	r22, 0x01	; 1
    2832:	70 40       	sbci	r23, 0x00	; 0
    2834:	01 10       	cpse	r0, r1
    2836:	d8 f7       	brcc	.-10     	; 0x282e <strnlen_P+0x2>
    2838:	80 95       	com	r24
    283a:	90 95       	com	r25
    283c:	8e 0f       	add	r24, r30
    283e:	9f 1f       	adc	r25, r31
    2840:	08 95       	ret

00002842 <strnlen>:
    2842:	fc 01       	movw	r30, r24
    2844:	61 50       	subi	r22, 0x01	; 1
    2846:	70 40       	sbci	r23, 0x00	; 0
    2848:	01 90       	ld	r0, Z+
    284a:	01 10       	cpse	r0, r1
    284c:	d8 f7       	brcc	.-10     	; 0x2844 <strnlen+0x2>
    284e:	80 95       	com	r24
    2850:	90 95       	com	r25
    2852:	8e 0f       	add	r24, r30
    2854:	9f 1f       	adc	r25, r31
    2856:	08 95       	ret

00002858 <fputc>:
    2858:	0f 93       	push	r16
    285a:	1f 93       	push	r17
    285c:	cf 93       	push	r28
    285e:	df 93       	push	r29
    2860:	8c 01       	movw	r16, r24
    2862:	eb 01       	movw	r28, r22
    2864:	8b 81       	ldd	r24, Y+3	; 0x03
    2866:	81 ff       	sbrs	r24, 1
    2868:	1b c0       	rjmp	.+54     	; 0x28a0 <fputc+0x48>
    286a:	82 ff       	sbrs	r24, 2
    286c:	0d c0       	rjmp	.+26     	; 0x2888 <fputc+0x30>
    286e:	2e 81       	ldd	r18, Y+6	; 0x06
    2870:	3f 81       	ldd	r19, Y+7	; 0x07
    2872:	8c 81       	ldd	r24, Y+4	; 0x04
    2874:	9d 81       	ldd	r25, Y+5	; 0x05
    2876:	28 17       	cp	r18, r24
    2878:	39 07       	cpc	r19, r25
    287a:	64 f4       	brge	.+24     	; 0x2894 <fputc+0x3c>
    287c:	e8 81       	ld	r30, Y
    287e:	f9 81       	ldd	r31, Y+1	; 0x01
    2880:	01 93       	st	Z+, r16
    2882:	f9 83       	std	Y+1, r31	; 0x01
    2884:	e8 83       	st	Y, r30
    2886:	06 c0       	rjmp	.+12     	; 0x2894 <fputc+0x3c>
    2888:	e8 85       	ldd	r30, Y+8	; 0x08
    288a:	f9 85       	ldd	r31, Y+9	; 0x09
    288c:	80 2f       	mov	r24, r16
    288e:	09 95       	icall
    2890:	00 97       	sbiw	r24, 0x00	; 0
    2892:	31 f4       	brne	.+12     	; 0x28a0 <fputc+0x48>
    2894:	8e 81       	ldd	r24, Y+6	; 0x06
    2896:	9f 81       	ldd	r25, Y+7	; 0x07
    2898:	01 96       	adiw	r24, 0x01	; 1
    289a:	9f 83       	std	Y+7, r25	; 0x07
    289c:	8e 83       	std	Y+6, r24	; 0x06
    289e:	02 c0       	rjmp	.+4      	; 0x28a4 <fputc+0x4c>
    28a0:	0f ef       	ldi	r16, 0xFF	; 255
    28a2:	1f ef       	ldi	r17, 0xFF	; 255
    28a4:	c8 01       	movw	r24, r16
    28a6:	df 91       	pop	r29
    28a8:	cf 91       	pop	r28
    28aa:	1f 91       	pop	r17
    28ac:	0f 91       	pop	r16
    28ae:	08 95       	ret

000028b0 <__ultoa_invert>:
    28b0:	fa 01       	movw	r30, r20
    28b2:	aa 27       	eor	r26, r26
    28b4:	28 30       	cpi	r18, 0x08	; 8
    28b6:	51 f1       	breq	.+84     	; 0x290c <__ultoa_invert+0x5c>
    28b8:	20 31       	cpi	r18, 0x10	; 16
    28ba:	81 f1       	breq	.+96     	; 0x291c <__ultoa_invert+0x6c>
    28bc:	e8 94       	clt
    28be:	6f 93       	push	r22
    28c0:	6e 7f       	andi	r22, 0xFE	; 254
    28c2:	6e 5f       	subi	r22, 0xFE	; 254
    28c4:	7f 4f       	sbci	r23, 0xFF	; 255
    28c6:	8f 4f       	sbci	r24, 0xFF	; 255
    28c8:	9f 4f       	sbci	r25, 0xFF	; 255
    28ca:	af 4f       	sbci	r26, 0xFF	; 255
    28cc:	b1 e0       	ldi	r27, 0x01	; 1
    28ce:	3e d0       	rcall	.+124    	; 0x294c <__ultoa_invert+0x9c>
    28d0:	b4 e0       	ldi	r27, 0x04	; 4
    28d2:	3c d0       	rcall	.+120    	; 0x294c <__ultoa_invert+0x9c>
    28d4:	67 0f       	add	r22, r23
    28d6:	78 1f       	adc	r23, r24
    28d8:	89 1f       	adc	r24, r25
    28da:	9a 1f       	adc	r25, r26
    28dc:	a1 1d       	adc	r26, r1
    28de:	68 0f       	add	r22, r24
    28e0:	79 1f       	adc	r23, r25
    28e2:	8a 1f       	adc	r24, r26
    28e4:	91 1d       	adc	r25, r1
    28e6:	a1 1d       	adc	r26, r1
    28e8:	6a 0f       	add	r22, r26
    28ea:	71 1d       	adc	r23, r1
    28ec:	81 1d       	adc	r24, r1
    28ee:	91 1d       	adc	r25, r1
    28f0:	a1 1d       	adc	r26, r1
    28f2:	20 d0       	rcall	.+64     	; 0x2934 <__ultoa_invert+0x84>
    28f4:	09 f4       	brne	.+2      	; 0x28f8 <__ultoa_invert+0x48>
    28f6:	68 94       	set
    28f8:	3f 91       	pop	r19
    28fa:	2a e0       	ldi	r18, 0x0A	; 10
    28fc:	26 9f       	mul	r18, r22
    28fe:	11 24       	eor	r1, r1
    2900:	30 19       	sub	r19, r0
    2902:	30 5d       	subi	r19, 0xD0	; 208
    2904:	31 93       	st	Z+, r19
    2906:	de f6       	brtc	.-74     	; 0x28be <__ultoa_invert+0xe>
    2908:	cf 01       	movw	r24, r30
    290a:	08 95       	ret
    290c:	46 2f       	mov	r20, r22
    290e:	47 70       	andi	r20, 0x07	; 7
    2910:	40 5d       	subi	r20, 0xD0	; 208
    2912:	41 93       	st	Z+, r20
    2914:	b3 e0       	ldi	r27, 0x03	; 3
    2916:	0f d0       	rcall	.+30     	; 0x2936 <__ultoa_invert+0x86>
    2918:	c9 f7       	brne	.-14     	; 0x290c <__ultoa_invert+0x5c>
    291a:	f6 cf       	rjmp	.-20     	; 0x2908 <__ultoa_invert+0x58>
    291c:	46 2f       	mov	r20, r22
    291e:	4f 70       	andi	r20, 0x0F	; 15
    2920:	40 5d       	subi	r20, 0xD0	; 208
    2922:	4a 33       	cpi	r20, 0x3A	; 58
    2924:	18 f0       	brcs	.+6      	; 0x292c <__ultoa_invert+0x7c>
    2926:	49 5d       	subi	r20, 0xD9	; 217
    2928:	31 fd       	sbrc	r19, 1
    292a:	40 52       	subi	r20, 0x20	; 32
    292c:	41 93       	st	Z+, r20
    292e:	02 d0       	rcall	.+4      	; 0x2934 <__ultoa_invert+0x84>
    2930:	a9 f7       	brne	.-22     	; 0x291c <__ultoa_invert+0x6c>
    2932:	ea cf       	rjmp	.-44     	; 0x2908 <__ultoa_invert+0x58>
    2934:	b4 e0       	ldi	r27, 0x04	; 4
    2936:	a6 95       	lsr	r26
    2938:	97 95       	ror	r25
    293a:	87 95       	ror	r24
    293c:	77 95       	ror	r23
    293e:	67 95       	ror	r22
    2940:	ba 95       	dec	r27
    2942:	c9 f7       	brne	.-14     	; 0x2936 <__ultoa_invert+0x86>
    2944:	00 97       	sbiw	r24, 0x00	; 0
    2946:	61 05       	cpc	r22, r1
    2948:	71 05       	cpc	r23, r1
    294a:	08 95       	ret
    294c:	9b 01       	movw	r18, r22
    294e:	ac 01       	movw	r20, r24
    2950:	0a 2e       	mov	r0, r26
    2952:	06 94       	lsr	r0
    2954:	57 95       	ror	r21
    2956:	47 95       	ror	r20
    2958:	37 95       	ror	r19
    295a:	27 95       	ror	r18
    295c:	ba 95       	dec	r27
    295e:	c9 f7       	brne	.-14     	; 0x2952 <__ultoa_invert+0xa2>
    2960:	62 0f       	add	r22, r18
    2962:	73 1f       	adc	r23, r19
    2964:	84 1f       	adc	r24, r20
    2966:	95 1f       	adc	r25, r21
    2968:	a0 1d       	adc	r26, r0
    296a:	08 95       	ret

0000296c <_exit>:
    296c:	f8 94       	cli

0000296e <__stop_program>:
    296e:	ff cf       	rjmp	.-2      	; 0x296e <__stop_program>
