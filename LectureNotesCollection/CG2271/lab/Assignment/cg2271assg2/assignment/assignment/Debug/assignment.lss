
assignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00001e2e  00001ec2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000562  00800128  00800128  00001eea  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  00001eec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  0000263c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e8  00000000  00000000  00002723  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000049e  00000000  00000000  0000290b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002b2b  00000000  00000000  00002da9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000149e  00000000  00000000  000058d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001f75  00000000  00000000  00006d72  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000390  00000000  00000000  00008ce8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000006c8  00000000  00000000  00009078  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000ea2  00000000  00000000  00009740  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000673  00000000  00000000  0000a5e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000048  00000000  00000000  0000ac55  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 cb 05 	jmp	0xb96	; 0xb96 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 fe 06 	jmp	0xdfc	; 0xdfc <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 a3 06 	jmp	0xd46	; 0xd46 <__vector_20>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee e2       	ldi	r30, 0x2E	; 46
      7c:	fe e1       	ldi	r31, 0x1E	; 30
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 32       	cpi	r26, 0x28	; 40
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	16 e0       	ldi	r17, 0x06	; 6
      8c:	a8 e2       	ldi	r26, 0x28	; 40
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	aa 38       	cpi	r26, 0x8A	; 138
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <main>
      9e:	0c 94 15 0f 	jmp	0x1e2a	; 0x1e2a <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <task1>:
// Tasks 1 and 2 will increment a global variable ctr, and every 10 increments task 1 will send the resulting value in ctr to task3 via a queue.
// Task 3 will then send it via serial to the PC. 

// In addition, do something fun and creative with this program, the serial port and the components you have. Describe it in your report. :)
void task1(void *p)
{
      a6:	df 93       	push	r29
      a8:	cf 93       	push	r28
      aa:	00 d0       	rcall	.+0      	; 0xac <task1+0x6>
      ac:	00 d0       	rcall	.+0      	; 0xae <task1+0x8>
      ae:	cd b7       	in	r28, 0x3d	; 61
      b0:	de b7       	in	r29, 0x3e	; 62
      b2:	9c 83       	std	Y+4, r25	; 0x04
      b4:	8b 83       	std	Y+3, r24	; 0x03
	int count = 0;
      b6:	1a 82       	std	Y+2, r1	; 0x02
      b8:	19 82       	std	Y+1, r1	; 0x01
		}
		leaveCritical();
		//say("0\r\n");
		//_delay_ms(100);
		*/
		PORTD ^= 0b01000000;
      ba:	8b e2       	ldi	r24, 0x2B	; 43
      bc:	90 e0       	ldi	r25, 0x00	; 0
      be:	2b e2       	ldi	r18, 0x2B	; 43
      c0:	30 e0       	ldi	r19, 0x00	; 0
      c2:	f9 01       	movw	r30, r18
      c4:	30 81       	ld	r19, Z
      c6:	20 e4       	ldi	r18, 0x40	; 64
      c8:	23 27       	eor	r18, r19
      ca:	fc 01       	movw	r30, r24
      cc:	20 83       	st	Z, r18
	}
      ce:	f5 cf       	rjmp	.-22     	; 0xba <task1+0x14>

000000d0 <task2>:
}

void task2(void *p)
{
      d0:	df 93       	push	r29
      d2:	cf 93       	push	r28
      d4:	00 d0       	rcall	.+0      	; 0xd6 <task2+0x6>
      d6:	00 d0       	rcall	.+0      	; 0xd8 <task2+0x8>
      d8:	cd b7       	in	r28, 0x3d	; 61
      da:	de b7       	in	r29, 0x3e	; 62
      dc:	9c 83       	std	Y+4, r25	; 0x04
      de:	8b 83       	std	Y+3, r24	; 0x03
	int count = 0;
      e0:	1a 82       	std	Y+2, r1	; 0x02
      e2:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		enterCritical();
      e4:	0e 94 72 02 	call	0x4e4	; 0x4e4 <enterCritical>
		count++;
      e8:	89 81       	ldd	r24, Y+1	; 0x01
      ea:	9a 81       	ldd	r25, Y+2	; 0x02
      ec:	01 96       	adiw	r24, 0x01	; 1
      ee:	9a 83       	std	Y+2, r25	; 0x02
      f0:	89 83       	std	Y+1, r24	; 0x01
		variable++;
      f2:	80 91 28 01 	lds	r24, 0x0128
      f6:	90 91 29 01 	lds	r25, 0x0129
      fa:	01 96       	adiw	r24, 0x01	; 1
      fc:	90 93 29 01 	sts	0x0129, r25
     100:	80 93 28 01 	sts	0x0128, r24
		
		if(count == 10){
     104:	89 81       	ldd	r24, Y+1	; 0x01
     106:	9a 81       	ldd	r25, Y+2	; 0x02
     108:	8a 30       	cpi	r24, 0x0A	; 10
     10a:	91 05       	cpc	r25, r1
     10c:	11 f4       	brne	.+4      	; 0x112 <task2+0x42>
			//OSenq(queue,&variable);
			count = 0;
     10e:	1a 82       	std	Y+2, r1	; 0x02
     110:	19 82       	std	Y+1, r1	; 0x01
		}
		leaveCritical();
     112:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <leaveCritical>
	}
     116:	e6 cf       	rjmp	.-52     	; 0xe4 <task2+0x14>

00000118 <task3>:
}

void task3(void *p)
{
     118:	0f 93       	push	r16
     11a:	1f 93       	push	r17
     11c:	df 93       	push	r29
     11e:	cf 93       	push	r28
     120:	cd b7       	in	r28, 0x3d	; 61
     122:	de b7       	in	r29, 0x3e	; 62
     124:	60 97       	sbiw	r28, 0x10	; 16
     126:	0f b6       	in	r0, 0x3f	; 63
     128:	f8 94       	cli
     12a:	de bf       	out	0x3e, r29	; 62
     12c:	0f be       	out	0x3f, r0	; 63
     12e:	cd bf       	out	0x3d, r28	; 61
     130:	98 8b       	std	Y+16, r25	; 0x10
     132:	8f 87       	std	Y+15, r24	; 0x0f
     134:	01 c0       	rjmp	.+2      	; 0x138 <task3+0x20>
			//sprintf(saykBuf,"abx\n\r",res);
			_delay_ms(1000);
			say("lualla\n\r");
			leaveCritical();
		}
	}
     136:	00 00       	nop

void task3(void *p)
{
	while(1)
	{
		if(queue->num != 0){
     138:	80 91 2c 01 	lds	r24, 0x012C
     13c:	90 91 2d 01 	lds	r25, 0x012D
     140:	fc 01       	movw	r30, r24
     142:	82 81       	ldd	r24, Z+2	; 0x02
     144:	93 81       	ldd	r25, Z+3	; 0x03
     146:	00 97       	sbiw	r24, 0x00	; 0
     148:	b1 f3       	breq	.-20     	; 0x136 <task3+0x1e>
			enterCritical();
     14a:	0e 94 72 02 	call	0x4e4	; 0x4e4 <enterCritical>
     14e:	80 e0       	ldi	r24, 0x00	; 0
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	aa e7       	ldi	r26, 0x7A	; 122
     154:	b4 e4       	ldi	r27, 0x44	; 68
     156:	89 83       	std	Y+1, r24	; 0x01
     158:	9a 83       	std	Y+2, r25	; 0x02
     15a:	ab 83       	std	Y+3, r26	; 0x03
     15c:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     15e:	69 81       	ldd	r22, Y+1	; 0x01
     160:	7a 81       	ldd	r23, Y+2	; 0x02
     162:	8b 81       	ldd	r24, Y+3	; 0x03
     164:	9c 81       	ldd	r25, Y+4	; 0x04
     166:	20 e0       	ldi	r18, 0x00	; 0
     168:	30 e0       	ldi	r19, 0x00	; 0
     16a:	4a e7       	ldi	r20, 0x7A	; 122
     16c:	55 e4       	ldi	r21, 0x45	; 69
     16e:	0e 94 0f 0a 	call	0x141e	; 0x141e <__mulsf3>
     172:	dc 01       	movw	r26, r24
     174:	cb 01       	movw	r24, r22
     176:	8d 83       	std	Y+5, r24	; 0x05
     178:	9e 83       	std	Y+6, r25	; 0x06
     17a:	af 83       	std	Y+7, r26	; 0x07
     17c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     17e:	11 e0       	ldi	r17, 0x01	; 1
     180:	6d 81       	ldd	r22, Y+5	; 0x05
     182:	7e 81       	ldd	r23, Y+6	; 0x06
     184:	8f 81       	ldd	r24, Y+7	; 0x07
     186:	98 85       	ldd	r25, Y+8	; 0x08
     188:	20 e0       	ldi	r18, 0x00	; 0
     18a:	30 e0       	ldi	r19, 0x00	; 0
     18c:	40 e8       	ldi	r20, 0x80	; 128
     18e:	5f e3       	ldi	r21, 0x3F	; 63
     190:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__ltsf2>
     194:	88 23       	and	r24, r24
     196:	0c f0       	brlt	.+2      	; 0x19a <task3+0x82>
     198:	10 e0       	ldi	r17, 0x00	; 0
     19a:	11 23       	and	r17, r17
     19c:	29 f0       	breq	.+10     	; 0x1a8 <task3+0x90>
		__ticks = 1;
     19e:	81 e0       	ldi	r24, 0x01	; 1
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	9a 87       	std	Y+10, r25	; 0x0a
     1a4:	89 87       	std	Y+9, r24	; 0x09
     1a6:	46 c0       	rjmp	.+140    	; 0x234 <task3+0x11c>
	else if (__tmp > 65535)
     1a8:	11 e0       	ldi	r17, 0x01	; 1
     1aa:	6d 81       	ldd	r22, Y+5	; 0x05
     1ac:	7e 81       	ldd	r23, Y+6	; 0x06
     1ae:	8f 81       	ldd	r24, Y+7	; 0x07
     1b0:	98 85       	ldd	r25, Y+8	; 0x08
     1b2:	20 e0       	ldi	r18, 0x00	; 0
     1b4:	3f ef       	ldi	r19, 0xFF	; 255
     1b6:	4f e7       	ldi	r20, 0x7F	; 127
     1b8:	57 e4       	ldi	r21, 0x47	; 71
     1ba:	0e 94 09 0b 	call	0x1612	; 0x1612 <__gtsf2>
     1be:	18 16       	cp	r1, r24
     1c0:	0c f0       	brlt	.+2      	; 0x1c4 <task3+0xac>
     1c2:	10 e0       	ldi	r17, 0x00	; 0
     1c4:	11 23       	and	r17, r17
     1c6:	61 f1       	breq	.+88     	; 0x220 <task3+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1c8:	69 81       	ldd	r22, Y+1	; 0x01
     1ca:	7a 81       	ldd	r23, Y+2	; 0x02
     1cc:	8b 81       	ldd	r24, Y+3	; 0x03
     1ce:	9c 81       	ldd	r25, Y+4	; 0x04
     1d0:	20 e0       	ldi	r18, 0x00	; 0
     1d2:	30 e0       	ldi	r19, 0x00	; 0
     1d4:	40 e2       	ldi	r20, 0x20	; 32
     1d6:	51 e4       	ldi	r21, 0x41	; 65
     1d8:	0e 94 0f 0a 	call	0x141e	; 0x141e <__mulsf3>
     1dc:	dc 01       	movw	r26, r24
     1de:	cb 01       	movw	r24, r22
     1e0:	bc 01       	movw	r22, r24
     1e2:	cd 01       	movw	r24, r26
     1e4:	0e 94 3b 08 	call	0x1076	; 0x1076 <__fixunssfsi>
     1e8:	dc 01       	movw	r26, r24
     1ea:	cb 01       	movw	r24, r22
     1ec:	9a 87       	std	Y+10, r25	; 0x0a
     1ee:	89 87       	std	Y+9, r24	; 0x09
     1f0:	12 c0       	rjmp	.+36     	; 0x216 <task3+0xfe>
     1f2:	80 e9       	ldi	r24, 0x90	; 144
     1f4:	91 e0       	ldi	r25, 0x01	; 1
     1f6:	9c 87       	std	Y+12, r25	; 0x0c
     1f8:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1fa:	8b 85       	ldd	r24, Y+11	; 0x0b
     1fc:	9c 85       	ldd	r25, Y+12	; 0x0c
     1fe:	8c 01       	movw	r16, r24
     200:	c8 01       	movw	r24, r16
     202:	01 97       	sbiw	r24, 0x01	; 1
     204:	f1 f7       	brne	.-4      	; 0x202 <task3+0xea>
     206:	8c 01       	movw	r16, r24
     208:	1c 87       	std	Y+12, r17	; 0x0c
     20a:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     20c:	89 85       	ldd	r24, Y+9	; 0x09
     20e:	9a 85       	ldd	r25, Y+10	; 0x0a
     210:	01 97       	sbiw	r24, 0x01	; 1
     212:	9a 87       	std	Y+10, r25	; 0x0a
     214:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     216:	89 85       	ldd	r24, Y+9	; 0x09
     218:	9a 85       	ldd	r25, Y+10	; 0x0a
     21a:	00 97       	sbiw	r24, 0x00	; 0
     21c:	51 f7       	brne	.-44     	; 0x1f2 <task3+0xda>
     21e:	17 c0       	rjmp	.+46     	; 0x24e <task3+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     220:	6d 81       	ldd	r22, Y+5	; 0x05
     222:	7e 81       	ldd	r23, Y+6	; 0x06
     224:	8f 81       	ldd	r24, Y+7	; 0x07
     226:	98 85       	ldd	r25, Y+8	; 0x08
     228:	0e 94 3b 08 	call	0x1076	; 0x1076 <__fixunssfsi>
     22c:	dc 01       	movw	r26, r24
     22e:	cb 01       	movw	r24, r22
     230:	9a 87       	std	Y+10, r25	; 0x0a
     232:	89 87       	std	Y+9, r24	; 0x09
     234:	89 85       	ldd	r24, Y+9	; 0x09
     236:	9a 85       	ldd	r25, Y+10	; 0x0a
     238:	9e 87       	std	Y+14, r25	; 0x0e
     23a:	8d 87       	std	Y+13, r24	; 0x0d
     23c:	8d 85       	ldd	r24, Y+13	; 0x0d
     23e:	9e 85       	ldd	r25, Y+14	; 0x0e
     240:	8c 01       	movw	r16, r24
     242:	f8 01       	movw	r30, r16
     244:	31 97       	sbiw	r30, 0x01	; 1
     246:	f1 f7       	brne	.-4      	; 0x244 <task3+0x12c>
     248:	8f 01       	movw	r16, r30
     24a:	1e 87       	std	Y+14, r17	; 0x0e
     24c:	0d 87       	std	Y+13, r16	; 0x0d
			//int res = *(int *)OSdeq(queue);
			//sprintf(saykBuf,"abx\n\r",res);
			_delay_ms(1000);
			say("lualla\n\r");
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	91 e0       	ldi	r25, 0x01	; 1
     252:	0e 94 b0 07 	call	0xf60	; 0xf60 <say>
			leaveCritical();
     256:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <leaveCritical>
		}
	}
     25a:	6e cf       	rjmp	.-292    	; 0x138 <task3+0x20>

0000025c <setup>:
}

void setup()
{
     25c:	df 93       	push	r29
     25e:	cf 93       	push	r28
     260:	cd b7       	in	r28, 0x3d	; 61
     262:	de b7       	in	r29, 0x3e	; 62
	// create a global queue
	sema = (OSSignal*)OSmakeSema(1);
     264:	81 e0       	ldi	r24, 0x01	; 1
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	0e 94 82 02 	call	0x504	; 0x504 <OSmakeSema>
     26c:	90 93 2f 01 	sts	0x012F, r25
     270:	80 93 2e 01 	sts	0x012E, r24
	queue = (OSSignal*)OSmakeQ(MAX_QUEUE_SIZE,sizeof(char));
     274:	84 e6       	ldi	r24, 0x64	; 100
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	61 e0       	ldi	r22, 0x01	; 1
     27a:	70 e0       	ldi	r23, 0x00	; 0
     27c:	0e 94 c7 02 	call	0x58e	; 0x58e <OSmakeQ>
     280:	90 93 2d 01 	sts	0x012D, r25
     284:	80 93 2c 01 	sts	0x012C, r24
	
	// for testing only
	DDRD |= 0b11110000;
     288:	8a e2       	ldi	r24, 0x2A	; 42
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	2a e2       	ldi	r18, 0x2A	; 42
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	f9 01       	movw	r30, r18
     292:	20 81       	ld	r18, Z
     294:	20 6f       	ori	r18, 0xF0	; 240
     296:	fc 01       	movw	r30, r24
     298:	20 83       	st	Z, r18
	//PORTD |= 0b10000000;
}
     29a:	cf 91       	pop	r28
     29c:	df 91       	pop	r29
     29e:	08 95       	ret

000002a0 <main>:


int main()
{
     2a0:	0f 93       	push	r16
     2a2:	1f 93       	push	r17
     2a4:	df 93       	push	r29
     2a6:	cf 93       	push	r28
     2a8:	cd b7       	in	r28, 0x3d	; 61
     2aa:	de b7       	in	r29, 0x3e	; 62
     2ac:	6c 97       	sbiw	r28, 0x1c	; 28
     2ae:	0f b6       	in	r0, 0x3f	; 63
     2b0:	f8 94       	cli
     2b2:	de bf       	out	0x3e, r29	; 62
     2b4:	0f be       	out	0x3f, r0	; 63
     2b6:	cd bf       	out	0x3d, r28	; 61
	//DDRD = 0b111111111;
	setupSerial();
     2b8:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <setupSerial>
	sei();
     2bc:	78 94       	sei
	
	say("hEllo ^_^!\n\r");
     2be:	89 e0       	ldi	r24, 0x09	; 9
     2c0:	91 e0       	ldi	r25, 0x01	; 1
     2c2:	0e 94 b0 07 	call	0xf60	; 0xf60 <say>
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	aa ef       	ldi	r26, 0xFA	; 250
     2cc:	b3 e4       	ldi	r27, 0x43	; 67
     2ce:	89 83       	std	Y+1, r24	; 0x01
     2d0:	9a 83       	std	Y+2, r25	; 0x02
     2d2:	ab 83       	std	Y+3, r26	; 0x03
     2d4:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     2d6:	69 81       	ldd	r22, Y+1	; 0x01
     2d8:	7a 81       	ldd	r23, Y+2	; 0x02
     2da:	8b 81       	ldd	r24, Y+3	; 0x03
     2dc:	9c 81       	ldd	r25, Y+4	; 0x04
     2de:	20 e0       	ldi	r18, 0x00	; 0
     2e0:	30 e0       	ldi	r19, 0x00	; 0
     2e2:	4a e7       	ldi	r20, 0x7A	; 122
     2e4:	55 e4       	ldi	r21, 0x45	; 69
     2e6:	0e 94 0f 0a 	call	0x141e	; 0x141e <__mulsf3>
     2ea:	dc 01       	movw	r26, r24
     2ec:	cb 01       	movw	r24, r22
     2ee:	8d 83       	std	Y+5, r24	; 0x05
     2f0:	9e 83       	std	Y+6, r25	; 0x06
     2f2:	af 83       	std	Y+7, r26	; 0x07
     2f4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     2f6:	11 e0       	ldi	r17, 0x01	; 1
     2f8:	6d 81       	ldd	r22, Y+5	; 0x05
     2fa:	7e 81       	ldd	r23, Y+6	; 0x06
     2fc:	8f 81       	ldd	r24, Y+7	; 0x07
     2fe:	98 85       	ldd	r25, Y+8	; 0x08
     300:	20 e0       	ldi	r18, 0x00	; 0
     302:	30 e0       	ldi	r19, 0x00	; 0
     304:	40 e8       	ldi	r20, 0x80	; 128
     306:	5f e3       	ldi	r21, 0x3F	; 63
     308:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__ltsf2>
     30c:	88 23       	and	r24, r24
     30e:	0c f0       	brlt	.+2      	; 0x312 <main+0x72>
     310:	10 e0       	ldi	r17, 0x00	; 0
     312:	11 23       	and	r17, r17
     314:	29 f0       	breq	.+10     	; 0x320 <main+0x80>
		__ticks = 1;
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	9a 87       	std	Y+10, r25	; 0x0a
     31c:	89 87       	std	Y+9, r24	; 0x09
     31e:	46 c0       	rjmp	.+140    	; 0x3ac <main+0x10c>
	else if (__tmp > 65535)
     320:	11 e0       	ldi	r17, 0x01	; 1
     322:	6d 81       	ldd	r22, Y+5	; 0x05
     324:	7e 81       	ldd	r23, Y+6	; 0x06
     326:	8f 81       	ldd	r24, Y+7	; 0x07
     328:	98 85       	ldd	r25, Y+8	; 0x08
     32a:	20 e0       	ldi	r18, 0x00	; 0
     32c:	3f ef       	ldi	r19, 0xFF	; 255
     32e:	4f e7       	ldi	r20, 0x7F	; 127
     330:	57 e4       	ldi	r21, 0x47	; 71
     332:	0e 94 09 0b 	call	0x1612	; 0x1612 <__gtsf2>
     336:	18 16       	cp	r1, r24
     338:	0c f0       	brlt	.+2      	; 0x33c <main+0x9c>
     33a:	10 e0       	ldi	r17, 0x00	; 0
     33c:	11 23       	and	r17, r17
     33e:	61 f1       	breq	.+88     	; 0x398 <main+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     340:	69 81       	ldd	r22, Y+1	; 0x01
     342:	7a 81       	ldd	r23, Y+2	; 0x02
     344:	8b 81       	ldd	r24, Y+3	; 0x03
     346:	9c 81       	ldd	r25, Y+4	; 0x04
     348:	20 e0       	ldi	r18, 0x00	; 0
     34a:	30 e0       	ldi	r19, 0x00	; 0
     34c:	40 e2       	ldi	r20, 0x20	; 32
     34e:	51 e4       	ldi	r21, 0x41	; 65
     350:	0e 94 0f 0a 	call	0x141e	; 0x141e <__mulsf3>
     354:	dc 01       	movw	r26, r24
     356:	cb 01       	movw	r24, r22
     358:	bc 01       	movw	r22, r24
     35a:	cd 01       	movw	r24, r26
     35c:	0e 94 3b 08 	call	0x1076	; 0x1076 <__fixunssfsi>
     360:	dc 01       	movw	r26, r24
     362:	cb 01       	movw	r24, r22
     364:	9a 87       	std	Y+10, r25	; 0x0a
     366:	89 87       	std	Y+9, r24	; 0x09
     368:	12 c0       	rjmp	.+36     	; 0x38e <main+0xee>
     36a:	80 e9       	ldi	r24, 0x90	; 144
     36c:	91 e0       	ldi	r25, 0x01	; 1
     36e:	9c 87       	std	Y+12, r25	; 0x0c
     370:	8b 87       	std	Y+11, r24	; 0x0b
     372:	8b 85       	ldd	r24, Y+11	; 0x0b
     374:	9c 85       	ldd	r25, Y+12	; 0x0c
     376:	8c 01       	movw	r16, r24
     378:	c8 01       	movw	r24, r16
     37a:	01 97       	sbiw	r24, 0x01	; 1
     37c:	f1 f7       	brne	.-4      	; 0x37a <main+0xda>
     37e:	8c 01       	movw	r16, r24
     380:	1c 87       	std	Y+12, r17	; 0x0c
     382:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     384:	89 85       	ldd	r24, Y+9	; 0x09
     386:	9a 85       	ldd	r25, Y+10	; 0x0a
     388:	01 97       	sbiw	r24, 0x01	; 1
     38a:	9a 87       	std	Y+10, r25	; 0x0a
     38c:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     38e:	89 85       	ldd	r24, Y+9	; 0x09
     390:	9a 85       	ldd	r25, Y+10	; 0x0a
     392:	00 97       	sbiw	r24, 0x00	; 0
     394:	51 f7       	brne	.-44     	; 0x36a <main+0xca>
     396:	17 c0       	rjmp	.+46     	; 0x3c6 <main+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     398:	6d 81       	ldd	r22, Y+5	; 0x05
     39a:	7e 81       	ldd	r23, Y+6	; 0x06
     39c:	8f 81       	ldd	r24, Y+7	; 0x07
     39e:	98 85       	ldd	r25, Y+8	; 0x08
     3a0:	0e 94 3b 08 	call	0x1076	; 0x1076 <__fixunssfsi>
     3a4:	dc 01       	movw	r26, r24
     3a6:	cb 01       	movw	r24, r22
     3a8:	9a 87       	std	Y+10, r25	; 0x0a
     3aa:	89 87       	std	Y+9, r24	; 0x09
     3ac:	89 85       	ldd	r24, Y+9	; 0x09
     3ae:	9a 85       	ldd	r25, Y+10	; 0x0a
     3b0:	9e 87       	std	Y+14, r25	; 0x0e
     3b2:	8d 87       	std	Y+13, r24	; 0x0d
     3b4:	8d 85       	ldd	r24, Y+13	; 0x0d
     3b6:	9e 85       	ldd	r25, Y+14	; 0x0e
     3b8:	8c 01       	movw	r16, r24
     3ba:	c8 01       	movw	r24, r16
     3bc:	01 97       	sbiw	r24, 0x01	; 1
     3be:	f1 f7       	brne	.-4      	; 0x3bc <main+0x11c>
     3c0:	8c 01       	movw	r16, r24
     3c2:	1e 87       	std	Y+14, r17	; 0x0e
     3c4:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(500);
	
	OSInit();
     3c6:	0e 94 cf 05 	call	0xb9e	; 0xb9e <OSInit>
	
	setup();	
     3ca:	0e 94 2e 01 	call	0x25c	; 0x25c <setup>
	
	// Create the tasks. Task1 is for the buzzer and we pass in the base frequency as an argument.
	
	OSAddTask(task1, 0, NULL);	// buzzer tune
     3ce:	83 e5       	ldi	r24, 0x53	; 83
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	60 e0       	ldi	r22, 0x00	; 0
     3d4:	70 e0       	ldi	r23, 0x00	; 0
     3d6:	40 e0       	ldi	r20, 0x00	; 0
     3d8:	50 e0       	ldi	r21, 0x00	; 0
     3da:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <OSAddTask>
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	aa e7       	ldi	r26, 0x7A	; 122
     3e4:	b4 e4       	ldi	r27, 0x44	; 68
     3e6:	8f 87       	std	Y+15, r24	; 0x0f
     3e8:	98 8b       	std	Y+16, r25	; 0x10
     3ea:	a9 8b       	std	Y+17, r26	; 0x11
     3ec:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     3ee:	6f 85       	ldd	r22, Y+15	; 0x0f
     3f0:	78 89       	ldd	r23, Y+16	; 0x10
     3f2:	89 89       	ldd	r24, Y+17	; 0x11
     3f4:	9a 89       	ldd	r25, Y+18	; 0x12
     3f6:	20 e0       	ldi	r18, 0x00	; 0
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	4a e7       	ldi	r20, 0x7A	; 122
     3fc:	55 e4       	ldi	r21, 0x45	; 69
     3fe:	0e 94 0f 0a 	call	0x141e	; 0x141e <__mulsf3>
     402:	dc 01       	movw	r26, r24
     404:	cb 01       	movw	r24, r22
     406:	8b 8b       	std	Y+19, r24	; 0x13
     408:	9c 8b       	std	Y+20, r25	; 0x14
     40a:	ad 8b       	std	Y+21, r26	; 0x15
     40c:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     40e:	11 e0       	ldi	r17, 0x01	; 1
     410:	6b 89       	ldd	r22, Y+19	; 0x13
     412:	7c 89       	ldd	r23, Y+20	; 0x14
     414:	8d 89       	ldd	r24, Y+21	; 0x15
     416:	9e 89       	ldd	r25, Y+22	; 0x16
     418:	20 e0       	ldi	r18, 0x00	; 0
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	40 e8       	ldi	r20, 0x80	; 128
     41e:	5f e3       	ldi	r21, 0x3F	; 63
     420:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <__ltsf2>
     424:	88 23       	and	r24, r24
     426:	0c f0       	brlt	.+2      	; 0x42a <main+0x18a>
     428:	10 e0       	ldi	r17, 0x00	; 0
     42a:	11 23       	and	r17, r17
     42c:	29 f0       	breq	.+10     	; 0x438 <main+0x198>
		__ticks = 1;
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	98 8f       	std	Y+24, r25	; 0x18
     434:	8f 8b       	std	Y+23, r24	; 0x17
     436:	46 c0       	rjmp	.+140    	; 0x4c4 <main+0x224>
	else if (__tmp > 65535)
     438:	11 e0       	ldi	r17, 0x01	; 1
     43a:	6b 89       	ldd	r22, Y+19	; 0x13
     43c:	7c 89       	ldd	r23, Y+20	; 0x14
     43e:	8d 89       	ldd	r24, Y+21	; 0x15
     440:	9e 89       	ldd	r25, Y+22	; 0x16
     442:	20 e0       	ldi	r18, 0x00	; 0
     444:	3f ef       	ldi	r19, 0xFF	; 255
     446:	4f e7       	ldi	r20, 0x7F	; 127
     448:	57 e4       	ldi	r21, 0x47	; 71
     44a:	0e 94 09 0b 	call	0x1612	; 0x1612 <__gtsf2>
     44e:	18 16       	cp	r1, r24
     450:	0c f0       	brlt	.+2      	; 0x454 <main+0x1b4>
     452:	10 e0       	ldi	r17, 0x00	; 0
     454:	11 23       	and	r17, r17
     456:	61 f1       	breq	.+88     	; 0x4b0 <main+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     458:	6f 85       	ldd	r22, Y+15	; 0x0f
     45a:	78 89       	ldd	r23, Y+16	; 0x10
     45c:	89 89       	ldd	r24, Y+17	; 0x11
     45e:	9a 89       	ldd	r25, Y+18	; 0x12
     460:	20 e0       	ldi	r18, 0x00	; 0
     462:	30 e0       	ldi	r19, 0x00	; 0
     464:	40 e2       	ldi	r20, 0x20	; 32
     466:	51 e4       	ldi	r21, 0x41	; 65
     468:	0e 94 0f 0a 	call	0x141e	; 0x141e <__mulsf3>
     46c:	dc 01       	movw	r26, r24
     46e:	cb 01       	movw	r24, r22
     470:	bc 01       	movw	r22, r24
     472:	cd 01       	movw	r24, r26
     474:	0e 94 3b 08 	call	0x1076	; 0x1076 <__fixunssfsi>
     478:	dc 01       	movw	r26, r24
     47a:	cb 01       	movw	r24, r22
     47c:	98 8f       	std	Y+24, r25	; 0x18
     47e:	8f 8b       	std	Y+23, r24	; 0x17
     480:	12 c0       	rjmp	.+36     	; 0x4a6 <main+0x206>
     482:	80 e9       	ldi	r24, 0x90	; 144
     484:	91 e0       	ldi	r25, 0x01	; 1
     486:	9a 8f       	std	Y+26, r25	; 0x1a
     488:	89 8f       	std	Y+25, r24	; 0x19
     48a:	89 8d       	ldd	r24, Y+25	; 0x19
     48c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     48e:	8c 01       	movw	r16, r24
     490:	c8 01       	movw	r24, r16
     492:	01 97       	sbiw	r24, 0x01	; 1
     494:	f1 f7       	brne	.-4      	; 0x492 <main+0x1f2>
     496:	8c 01       	movw	r16, r24
     498:	1a 8f       	std	Y+26, r17	; 0x1a
     49a:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     49c:	8f 89       	ldd	r24, Y+23	; 0x17
     49e:	98 8d       	ldd	r25, Y+24	; 0x18
     4a0:	01 97       	sbiw	r24, 0x01	; 1
     4a2:	98 8f       	std	Y+24, r25	; 0x18
     4a4:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4a6:	8f 89       	ldd	r24, Y+23	; 0x17
     4a8:	98 8d       	ldd	r25, Y+24	; 0x18
     4aa:	00 97       	sbiw	r24, 0x00	; 0
     4ac:	51 f7       	brne	.-44     	; 0x482 <main+0x1e2>
     4ae:	17 c0       	rjmp	.+46     	; 0x4de <main+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4b0:	6b 89       	ldd	r22, Y+19	; 0x13
     4b2:	7c 89       	ldd	r23, Y+20	; 0x14
     4b4:	8d 89       	ldd	r24, Y+21	; 0x15
     4b6:	9e 89       	ldd	r25, Y+22	; 0x16
     4b8:	0e 94 3b 08 	call	0x1076	; 0x1076 <__fixunssfsi>
     4bc:	dc 01       	movw	r26, r24
     4be:	cb 01       	movw	r24, r22
     4c0:	98 8f       	std	Y+24, r25	; 0x18
     4c2:	8f 8b       	std	Y+23, r24	; 0x17
     4c4:	8f 89       	ldd	r24, Y+23	; 0x17
     4c6:	98 8d       	ldd	r25, Y+24	; 0x18
     4c8:	9c 8f       	std	Y+28, r25	; 0x1c
     4ca:	8b 8f       	std	Y+27, r24	; 0x1b
     4cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     4ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
     4d0:	8c 01       	movw	r16, r24
     4d2:	c8 01       	movw	r24, r16
     4d4:	01 97       	sbiw	r24, 0x01	; 1
     4d6:	f1 f7       	brne	.-4      	; 0x4d4 <main+0x234>
     4d8:	8c 01       	movw	r16, r24
     4da:	1c 8f       	std	Y+28, r17	; 0x1c
     4dc:	0b 8f       	std	Y+27, r16	; 0x1b
	//OSAddTask(task2, 1, NULL);	// read for LED
	
	//OSAddTask(task3, 2, NULL);	// convert for buzzer
	
	// And start the OS
	OSRun();
     4de:	0e 94 48 06 	call	0xc90	; 0xc90 <OSRun>
	
	
	
	while(1);
     4e2:	ff cf       	rjmp	.-2      	; 0x4e2 <main+0x242>

000004e4 <enterCritical>:

/* ======================================= */
/* Critical section management             */
/* ======================================= */
inline void enterCritical()
{
     4e4:	df 93       	push	r29
     4e6:	cf 93       	push	r28
     4e8:	cd b7       	in	r28, 0x3d	; 61
     4ea:	de b7       	in	r29, 0x3e	; 62
	cli();
     4ec:	f8 94       	cli
}
     4ee:	cf 91       	pop	r28
     4f0:	df 91       	pop	r29
     4f2:	08 95       	ret

000004f4 <leaveCritical>:

inline void leaveCritical()
{
     4f4:	df 93       	push	r29
     4f6:	cf 93       	push	r28
     4f8:	cd b7       	in	r28, 0x3d	; 61
     4fa:	de b7       	in	r29, 0x3e	; 62
	sei();
     4fc:	78 94       	sei
}
     4fe:	cf 91       	pop	r28
     500:	df 91       	pop	r29
     502:	08 95       	ret

00000504 <OSmakeSema>:

#ifdef OSIncludeSema

// Creates a semaphore with initial value initval
OSSignal *OSmakeSema(int initval)
{
     504:	df 93       	push	r29
     506:	cf 93       	push	r28
     508:	00 d0       	rcall	.+0      	; 0x50a <OSmakeSema+0x6>
     50a:	00 d0       	rcall	.+0      	; 0x50c <OSmakeSema+0x8>
     50c:	cd b7       	in	r28, 0x3d	; 61
     50e:	de b7       	in	r29, 0x3e	; 62
     510:	9c 83       	std	Y+4, r25	; 0x04
     512:	8b 83       	std	Y+3, r24	; 0x03
	OSSignal *sem = (OSSignal *) malloc(sizeof(OSSignal));
     514:	8c e6       	ldi	r24, 0x6C	; 108
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <malloc>
     51c:	9a 83       	std	Y+2, r25	; 0x02
     51e:	89 83       	std	Y+1, r24	; 0x01
	sem->type	= SEMAPHORE_TYPE;
     520:	89 81       	ldd	r24, Y+1	; 0x01
     522:	9a 81       	ldd	r25, Y+2	; 0x02
     524:	fc 01       	movw	r30, r24
     526:	11 82       	std	Z+1, r1	; 0x01
     528:	10 82       	st	Z, r1
	sem->num	= initval;
     52a:	89 81       	ldd	r24, Y+1	; 0x01
     52c:	9a 81       	ldd	r25, Y+2	; 0x02
     52e:	2b 81       	ldd	r18, Y+3	; 0x03
     530:	3c 81       	ldd	r19, Y+4	; 0x04
     532:	fc 01       	movw	r30, r24
     534:	33 83       	std	Z+3, r19	; 0x03
     536:	22 83       	std	Z+2, r18	; 0x02
	sem->qH		= 0;
     538:	89 81       	ldd	r24, Y+1	; 0x01
     53a:	9a 81       	ldd	r25, Y+2	; 0x02
     53c:	86 59       	subi	r24, 0x96	; 150
     53e:	9f 4f       	sbci	r25, 0xFF	; 255
     540:	fc 01       	movw	r30, r24
     542:	11 82       	std	Z+1, r1	; 0x01
     544:	10 82       	st	Z, r1
	sem->size	= 0;
     546:	89 81       	ldd	r24, Y+1	; 0x01
     548:	9a 81       	ldd	r25, Y+2	; 0x02
     54a:	fc 01       	movw	r30, r24
     54c:	15 82       	std	Z+5, r1	; 0x05
     54e:	14 82       	std	Z+4, r1	; 0x04
}
     550:	0f 90       	pop	r0
     552:	0f 90       	pop	r0
     554:	0f 90       	pop	r0
     556:	0f 90       	pop	r0
     558:	cf 91       	pop	r28
     55a:	df 91       	pop	r29
     55c:	08 95       	ret

0000055e <OSSemPend>:

// Takes a semaphore. Blocks if semaphore is 0.
void OSSemPend(OSSignal *sema)
{
     55e:	df 93       	push	r29
     560:	cf 93       	push	r28
     562:	00 d0       	rcall	.+0      	; 0x564 <OSSemPend+0x6>
     564:	cd b7       	in	r28, 0x3d	; 61
     566:	de b7       	in	r29, 0x3e	; 62
     568:	9a 83       	std	Y+2, r25	; 0x02
     56a:	89 83       	std	Y+1, r24	; 0x01
	
}
     56c:	0f 90       	pop	r0
     56e:	0f 90       	pop	r0
     570:	cf 91       	pop	r28
     572:	df 91       	pop	r29
     574:	08 95       	ret

00000576 <OSSemPost>:

// Posts a semaphore.
void OSSemPost(OSSignal *sema)
{
     576:	df 93       	push	r29
     578:	cf 93       	push	r28
     57a:	00 d0       	rcall	.+0      	; 0x57c <OSSemPost+0x6>
     57c:	cd b7       	in	r28, 0x3d	; 61
     57e:	de b7       	in	r29, 0x3e	; 62
     580:	9a 83       	std	Y+2, r25	; 0x02
     582:	89 83       	std	Y+1, r24	; 0x01
	
}
     584:	0f 90       	pop	r0
     586:	0f 90       	pop	r0
     588:	cf 91       	pop	r28
     58a:	df 91       	pop	r29
     58c:	08 95       	ret

0000058e <OSmakeQ>:
#ifdef OSIncludeQueues

// qsize=number of elements in the queue. esize=size of each element. So calling makeQ(10, sizeof(int)) would produce a queue of 10 elements, 
// with each element being the size of an integer.
OSSignal *OSmakeQ(int qsize, int esize)
{
     58e:	df 93       	push	r29
     590:	cf 93       	push	r28
     592:	00 d0       	rcall	.+0      	; 0x594 <OSmakeQ+0x6>
     594:	00 d0       	rcall	.+0      	; 0x596 <OSmakeQ+0x8>
     596:	00 d0       	rcall	.+0      	; 0x598 <OSmakeQ+0xa>
     598:	cd b7       	in	r28, 0x3d	; 61
     59a:	de b7       	in	r29, 0x3e	; 62
     59c:	9c 83       	std	Y+4, r25	; 0x04
     59e:	8b 83       	std	Y+3, r24	; 0x03
     5a0:	7e 83       	std	Y+6, r23	; 0x06
     5a2:	6d 83       	std	Y+5, r22	; 0x05
	// when cannot hold such a huge queue
	if(qsize * esize > MAX_QUEUE_SIZE)	return 0;
     5a4:	4b 81       	ldd	r20, Y+3	; 0x03
     5a6:	5c 81       	ldd	r21, Y+4	; 0x04
     5a8:	2d 81       	ldd	r18, Y+5	; 0x05
     5aa:	3e 81       	ldd	r19, Y+6	; 0x06
     5ac:	42 9f       	mul	r20, r18
     5ae:	c0 01       	movw	r24, r0
     5b0:	43 9f       	mul	r20, r19
     5b2:	90 0d       	add	r25, r0
     5b4:	52 9f       	mul	r21, r18
     5b6:	90 0d       	add	r25, r0
     5b8:	11 24       	eor	r1, r1
     5ba:	85 36       	cpi	r24, 0x65	; 101
     5bc:	91 05       	cpc	r25, r1
     5be:	1c f0       	brlt	.+6      	; 0x5c6 <OSmakeQ+0x38>
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	20 c0       	rjmp	.+64     	; 0x606 <OSmakeQ+0x78>
	
	OSSignal *res = (OSSignal *) malloc(sizeof(OSSignal));
     5c6:	8c e6       	ldi	r24, 0x6C	; 108
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <malloc>
     5ce:	9a 83       	std	Y+2, r25	; 0x02
     5d0:	89 83       	std	Y+1, r24	; 0x01
	res->type	= QUEUE_TYPE;
     5d2:	89 81       	ldd	r24, Y+1	; 0x01
     5d4:	9a 81       	ldd	r25, Y+2	; 0x02
     5d6:	21 e0       	ldi	r18, 0x01	; 1
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	fc 01       	movw	r30, r24
     5dc:	31 83       	std	Z+1, r19	; 0x01
     5de:	20 83       	st	Z, r18
	res->num	= esize;
     5e0:	89 81       	ldd	r24, Y+1	; 0x01
     5e2:	9a 81       	ldd	r25, Y+2	; 0x02
     5e4:	2d 81       	ldd	r18, Y+5	; 0x05
     5e6:	3e 81       	ldd	r19, Y+6	; 0x06
     5e8:	fc 01       	movw	r30, r24
     5ea:	33 83       	std	Z+3, r19	; 0x03
     5ec:	22 83       	std	Z+2, r18	; 0x02
	res->qH		= 0;
     5ee:	89 81       	ldd	r24, Y+1	; 0x01
     5f0:	9a 81       	ldd	r25, Y+2	; 0x02
     5f2:	86 59       	subi	r24, 0x96	; 150
     5f4:	9f 4f       	sbci	r25, 0xFF	; 255
     5f6:	fc 01       	movw	r30, r24
     5f8:	11 82       	std	Z+1, r1	; 0x01
     5fa:	10 82       	st	Z, r1
	res->size	= 0;
     5fc:	89 81       	ldd	r24, Y+1	; 0x01
     5fe:	9a 81       	ldd	r25, Y+2	; 0x02
     600:	fc 01       	movw	r30, r24
     602:	15 82       	std	Z+5, r1	; 0x05
     604:	14 82       	std	Z+4, r1	; 0x04
}
     606:	26 96       	adiw	r28, 0x06	; 6
     608:	0f b6       	in	r0, 0x3f	; 63
     60a:	f8 94       	cli
     60c:	de bf       	out	0x3e, r29	; 62
     60e:	0f be       	out	0x3f, r0	; 63
     610:	cd bf       	out	0x3d, r28	; 61
     612:	cf 91       	pop	r28
     614:	df 91       	pop	r29
     616:	08 95       	ret

00000618 <OSenq>:

// Inserts item into queue q
void OSenq(OSSignal *q, void *item)
{
     618:	df 93       	push	r29
     61a:	cf 93       	push	r28
     61c:	cd b7       	in	r28, 0x3d	; 61
     61e:	de b7       	in	r29, 0x3e	; 62
     620:	28 97       	sbiw	r28, 0x08	; 8
     622:	0f b6       	in	r0, 0x3f	; 63
     624:	f8 94       	cli
     626:	de bf       	out	0x3e, r29	; 62
     628:	0f be       	out	0x3f, r0	; 63
     62a:	cd bf       	out	0x3d, r28	; 61
     62c:	9e 83       	std	Y+6, r25	; 0x06
     62e:	8d 83       	std	Y+5, r24	; 0x05
     630:	78 87       	std	Y+8, r23	; 0x08
     632:	6f 83       	std	Y+7, r22	; 0x07
	int i, currentPos;
	while(q->size >= MAX_QUEUE_SIZE/q->num - 1){
     634:	16 c0       	rjmp	.+44     	; 0x662 <OSenq+0x4a>
		// block
		taskTable[currentTask].runflag = TASK_BLOCKED;
     636:	40 91 18 01 	lds	r20, 0x0118
     63a:	50 91 19 01 	lds	r21, 0x0119
     63e:	2b e0       	ldi	r18, 0x0B	; 11
     640:	31 e0       	ldi	r19, 0x01	; 1
     642:	42 9f       	mul	r20, r18
     644:	c0 01       	movw	r24, r0
     646:	43 9f       	mul	r20, r19
     648:	90 0d       	add	r25, r0
     64a:	52 9f       	mul	r21, r18
     64c:	90 0d       	add	r25, r0
     64e:	11 24       	eor	r1, r1
     650:	86 53       	subi	r24, 0x36	; 54
     652:	9e 4f       	sbci	r25, 0xFE	; 254
     654:	22 e0       	ldi	r18, 0x02	; 2
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	fc 01       	movw	r30, r24
     65a:	31 83       	std	Z+1, r19	; 0x01
     65c:	20 83       	st	Z, r18
		OSSwapTask();
     65e:	0e 94 db 04 	call	0x9b6	; 0x9b6 <OSSwapTask>

// Inserts item into queue q
void OSenq(OSSignal *q, void *item)
{
	int i, currentPos;
	while(q->size >= MAX_QUEUE_SIZE/q->num - 1){
     662:	8d 81       	ldd	r24, Y+5	; 0x05
     664:	9e 81       	ldd	r25, Y+6	; 0x06
     666:	fc 01       	movw	r30, r24
     668:	24 81       	ldd	r18, Z+4	; 0x04
     66a:	35 81       	ldd	r19, Z+5	; 0x05
     66c:	8d 81       	ldd	r24, Y+5	; 0x05
     66e:	9e 81       	ldd	r25, Y+6	; 0x06
     670:	fc 01       	movw	r30, r24
     672:	42 81       	ldd	r20, Z+2	; 0x02
     674:	53 81       	ldd	r21, Z+3	; 0x03
     676:	84 e6       	ldi	r24, 0x64	; 100
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	ba 01       	movw	r22, r20
     67c:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <__divmodhi4>
     680:	ab 01       	movw	r20, r22
     682:	ca 01       	movw	r24, r20
     684:	01 97       	sbiw	r24, 0x01	; 1
     686:	28 17       	cp	r18, r24
     688:	39 07       	cpc	r19, r25
     68a:	ac f6       	brge	.-86     	; 0x636 <OSenq+0x1e>
		// block
		taskTable[currentTask].runflag = TASK_BLOCKED;
		OSSwapTask();
	}
	
	cli();
     68c:	f8 94       	cli
	
	for(i = 0, currentPos = q->qH + q->num * q->size ;i < q->num;i += sizeof(char),currentPos+= sizeof(char)){
     68e:	1a 82       	std	Y+2, r1	; 0x02
     690:	19 82       	std	Y+1, r1	; 0x01
     692:	8d 81       	ldd	r24, Y+5	; 0x05
     694:	9e 81       	ldd	r25, Y+6	; 0x06
     696:	86 59       	subi	r24, 0x96	; 150
     698:	9f 4f       	sbci	r25, 0xFF	; 255
     69a:	fc 01       	movw	r30, r24
     69c:	20 81       	ld	r18, Z
     69e:	31 81       	ldd	r19, Z+1	; 0x01
     6a0:	8d 81       	ldd	r24, Y+5	; 0x05
     6a2:	9e 81       	ldd	r25, Y+6	; 0x06
     6a4:	fc 01       	movw	r30, r24
     6a6:	62 81       	ldd	r22, Z+2	; 0x02
     6a8:	73 81       	ldd	r23, Z+3	; 0x03
     6aa:	8d 81       	ldd	r24, Y+5	; 0x05
     6ac:	9e 81       	ldd	r25, Y+6	; 0x06
     6ae:	fc 01       	movw	r30, r24
     6b0:	44 81       	ldd	r20, Z+4	; 0x04
     6b2:	55 81       	ldd	r21, Z+5	; 0x05
     6b4:	64 9f       	mul	r22, r20
     6b6:	c0 01       	movw	r24, r0
     6b8:	65 9f       	mul	r22, r21
     6ba:	90 0d       	add	r25, r0
     6bc:	74 9f       	mul	r23, r20
     6be:	90 0d       	add	r25, r0
     6c0:	11 24       	eor	r1, r1
     6c2:	82 0f       	add	r24, r18
     6c4:	93 1f       	adc	r25, r19
     6c6:	9c 83       	std	Y+4, r25	; 0x04
     6c8:	8b 83       	std	Y+3, r24	; 0x03
     6ca:	22 c0       	rjmp	.+68     	; 0x710 <OSenq+0xf8>
		if(currentPos == MAX_QUEUE_SIZE)	currentPos = 0;
     6cc:	8b 81       	ldd	r24, Y+3	; 0x03
     6ce:	9c 81       	ldd	r25, Y+4	; 0x04
     6d0:	84 36       	cpi	r24, 0x64	; 100
     6d2:	91 05       	cpc	r25, r1
     6d4:	11 f4       	brne	.+4      	; 0x6da <OSenq+0xc2>
     6d6:	1c 82       	std	Y+4, r1	; 0x04
     6d8:	1b 82       	std	Y+3, r1	; 0x03
		q->q[currentPos] = *(char *)(item + i);
     6da:	2f 81       	ldd	r18, Y+7	; 0x07
     6dc:	38 85       	ldd	r19, Y+8	; 0x08
     6de:	89 81       	ldd	r24, Y+1	; 0x01
     6e0:	9a 81       	ldd	r25, Y+2	; 0x02
     6e2:	82 0f       	add	r24, r18
     6e4:	93 1f       	adc	r25, r19
     6e6:	fc 01       	movw	r30, r24
     6e8:	40 81       	ld	r20, Z
     6ea:	2d 81       	ldd	r18, Y+5	; 0x05
     6ec:	3e 81       	ldd	r19, Y+6	; 0x06
     6ee:	8b 81       	ldd	r24, Y+3	; 0x03
     6f0:	9c 81       	ldd	r25, Y+4	; 0x04
     6f2:	82 0f       	add	r24, r18
     6f4:	93 1f       	adc	r25, r19
     6f6:	06 96       	adiw	r24, 0x06	; 6
     6f8:	fc 01       	movw	r30, r24
     6fa:	40 83       	st	Z, r20
		OSSwapTask();
	}
	
	cli();
	
	for(i = 0, currentPos = q->qH + q->num * q->size ;i < q->num;i += sizeof(char),currentPos+= sizeof(char)){
     6fc:	89 81       	ldd	r24, Y+1	; 0x01
     6fe:	9a 81       	ldd	r25, Y+2	; 0x02
     700:	01 96       	adiw	r24, 0x01	; 1
     702:	9a 83       	std	Y+2, r25	; 0x02
     704:	89 83       	std	Y+1, r24	; 0x01
     706:	8b 81       	ldd	r24, Y+3	; 0x03
     708:	9c 81       	ldd	r25, Y+4	; 0x04
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	9c 83       	std	Y+4, r25	; 0x04
     70e:	8b 83       	std	Y+3, r24	; 0x03
     710:	8d 81       	ldd	r24, Y+5	; 0x05
     712:	9e 81       	ldd	r25, Y+6	; 0x06
     714:	fc 01       	movw	r30, r24
     716:	22 81       	ldd	r18, Z+2	; 0x02
     718:	33 81       	ldd	r19, Z+3	; 0x03
     71a:	89 81       	ldd	r24, Y+1	; 0x01
     71c:	9a 81       	ldd	r25, Y+2	; 0x02
     71e:	82 17       	cp	r24, r18
     720:	93 07       	cpc	r25, r19
     722:	a4 f2       	brlt	.-88     	; 0x6cc <OSenq+0xb4>
		if(currentPos == MAX_QUEUE_SIZE)	currentPos = 0;
		q->q[currentPos] = *(char *)(item + i);
	}
	
	q->size++;
     724:	8d 81       	ldd	r24, Y+5	; 0x05
     726:	9e 81       	ldd	r25, Y+6	; 0x06
     728:	fc 01       	movw	r30, r24
     72a:	84 81       	ldd	r24, Z+4	; 0x04
     72c:	95 81       	ldd	r25, Z+5	; 0x05
     72e:	9c 01       	movw	r18, r24
     730:	2f 5f       	subi	r18, 0xFF	; 255
     732:	3f 4f       	sbci	r19, 0xFF	; 255
     734:	8d 81       	ldd	r24, Y+5	; 0x05
     736:	9e 81       	ldd	r25, Y+6	; 0x06
     738:	fc 01       	movw	r30, r24
     73a:	35 83       	std	Z+5, r19	; 0x05
     73c:	24 83       	std	Z+4, r18	; 0x04
	sei();
     73e:	78 94       	sei
}
     740:	28 96       	adiw	r28, 0x08	; 8
     742:	0f b6       	in	r0, 0x3f	; 63
     744:	f8 94       	cli
     746:	de bf       	out	0x3e, r29	; 62
     748:	0f be       	out	0x3f, r0	; 63
     74a:	cd bf       	out	0x3d, r28	; 61
     74c:	cf 91       	pop	r28
     74e:	df 91       	pop	r29
     750:	08 95       	ret

00000752 <OSdeq>:

// Removes and returns item from head of queue. Process blocks if queue is empty.
void *OSdeq(OSSignal *q)
{
     752:	df 93       	push	r29
     754:	cf 93       	push	r28
     756:	00 d0       	rcall	.+0      	; 0x758 <OSdeq+0x6>
     758:	00 d0       	rcall	.+0      	; 0x75a <OSdeq+0x8>
     75a:	cd b7       	in	r28, 0x3d	; 61
     75c:	de b7       	in	r29, 0x3e	; 62
     75e:	9c 83       	std	Y+4, r25	; 0x04
     760:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	int iniqH = q->qH;
     762:	8b 81       	ldd	r24, Y+3	; 0x03
     764:	9c 81       	ldd	r25, Y+4	; 0x04
     766:	86 59       	subi	r24, 0x96	; 150
     768:	9f 4f       	sbci	r25, 0xFF	; 255
     76a:	fc 01       	movw	r30, r24
     76c:	80 81       	ld	r24, Z
     76e:	91 81       	ldd	r25, Z+1	; 0x01
     770:	9a 83       	std	Y+2, r25	; 0x02
     772:	89 83       	std	Y+1, r24	; 0x01
	
	// when the queue is empty
	while(q->size == 0){
     774:	16 c0       	rjmp	.+44     	; 0x7a2 <OSdeq+0x50>
		
		taskTable[currentTask].runflag = TASK_BLOCKED;
     776:	40 91 18 01 	lds	r20, 0x0118
     77a:	50 91 19 01 	lds	r21, 0x0119
     77e:	2b e0       	ldi	r18, 0x0B	; 11
     780:	31 e0       	ldi	r19, 0x01	; 1
     782:	42 9f       	mul	r20, r18
     784:	c0 01       	movw	r24, r0
     786:	43 9f       	mul	r20, r19
     788:	90 0d       	add	r25, r0
     78a:	52 9f       	mul	r21, r18
     78c:	90 0d       	add	r25, r0
     78e:	11 24       	eor	r1, r1
     790:	86 53       	subi	r24, 0x36	; 54
     792:	9e 4f       	sbci	r25, 0xFE	; 254
     794:	22 e0       	ldi	r18, 0x02	; 2
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	fc 01       	movw	r30, r24
     79a:	31 83       	std	Z+1, r19	; 0x01
     79c:	20 83       	st	Z, r18
		OSSwapTask();
     79e:	0e 94 db 04 	call	0x9b6	; 0x9b6 <OSSwapTask>
{
	int i;
	int iniqH = q->qH;
	
	// when the queue is empty
	while(q->size == 0){
     7a2:	8b 81       	ldd	r24, Y+3	; 0x03
     7a4:	9c 81       	ldd	r25, Y+4	; 0x04
     7a6:	fc 01       	movw	r30, r24
     7a8:	84 81       	ldd	r24, Z+4	; 0x04
     7aa:	95 81       	ldd	r25, Z+5	; 0x05
     7ac:	00 97       	sbiw	r24, 0x00	; 0
     7ae:	19 f3       	breq	.-58     	; 0x776 <OSdeq+0x24>
		
		taskTable[currentTask].runflag = TASK_BLOCKED;
		OSSwapTask();
	}
	
	cli();
     7b0:	f8 94       	cli
	q->qH += q->num * sizeof(char);
     7b2:	8b 81       	ldd	r24, Y+3	; 0x03
     7b4:	9c 81       	ldd	r25, Y+4	; 0x04
     7b6:	86 59       	subi	r24, 0x96	; 150
     7b8:	9f 4f       	sbci	r25, 0xFF	; 255
     7ba:	fc 01       	movw	r30, r24
     7bc:	80 81       	ld	r24, Z
     7be:	91 81       	ldd	r25, Z+1	; 0x01
     7c0:	9c 01       	movw	r18, r24
     7c2:	8b 81       	ldd	r24, Y+3	; 0x03
     7c4:	9c 81       	ldd	r25, Y+4	; 0x04
     7c6:	fc 01       	movw	r30, r24
     7c8:	82 81       	ldd	r24, Z+2	; 0x02
     7ca:	93 81       	ldd	r25, Z+3	; 0x03
     7cc:	82 0f       	add	r24, r18
     7ce:	93 1f       	adc	r25, r19
     7d0:	9c 01       	movw	r18, r24
     7d2:	8b 81       	ldd	r24, Y+3	; 0x03
     7d4:	9c 81       	ldd	r25, Y+4	; 0x04
     7d6:	86 59       	subi	r24, 0x96	; 150
     7d8:	9f 4f       	sbci	r25, 0xFF	; 255
     7da:	fc 01       	movw	r30, r24
     7dc:	31 83       	std	Z+1, r19	; 0x01
     7de:	20 83       	st	Z, r18
	q->qH %= MAX_QUEUE_SIZE;
     7e0:	8b 81       	ldd	r24, Y+3	; 0x03
     7e2:	9c 81       	ldd	r25, Y+4	; 0x04
     7e4:	86 59       	subi	r24, 0x96	; 150
     7e6:	9f 4f       	sbci	r25, 0xFF	; 255
     7e8:	fc 01       	movw	r30, r24
     7ea:	80 81       	ld	r24, Z
     7ec:	91 81       	ldd	r25, Z+1	; 0x01
     7ee:	24 e6       	ldi	r18, 0x64	; 100
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	b9 01       	movw	r22, r18
     7f4:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <__divmodhi4>
     7f8:	9c 01       	movw	r18, r24
     7fa:	8b 81       	ldd	r24, Y+3	; 0x03
     7fc:	9c 81       	ldd	r25, Y+4	; 0x04
     7fe:	86 59       	subi	r24, 0x96	; 150
     800:	9f 4f       	sbci	r25, 0xFF	; 255
     802:	fc 01       	movw	r30, r24
     804:	31 83       	std	Z+1, r19	; 0x01
     806:	20 83       	st	Z, r18
	
	return (void *) &(q->q[iniqH]);
     808:	8b 81       	ldd	r24, Y+3	; 0x03
     80a:	9c 81       	ldd	r25, Y+4	; 0x04
     80c:	9c 01       	movw	r18, r24
     80e:	2a 5f       	subi	r18, 0xFA	; 250
     810:	3f 4f       	sbci	r19, 0xFF	; 255
     812:	89 81       	ldd	r24, Y+1	; 0x01
     814:	9a 81       	ldd	r25, Y+2	; 0x02
     816:	82 0f       	add	r24, r18
     818:	93 1f       	adc	r25, r19
}
     81a:	0f 90       	pop	r0
     81c:	0f 90       	pop	r0
     81e:	0f 90       	pop	r0
     820:	0f 90       	pop	r0
     822:	cf 91       	pop	r28
     824:	df 91       	pop	r29
     826:	08 95       	ret

00000828 <OSdestroyQ>:

// Destroys the queue
void *OSdestroyQ(OSSignal *q)
{
     828:	df 93       	push	r29
     82a:	cf 93       	push	r28
     82c:	00 d0       	rcall	.+0      	; 0x82e <OSdestroyQ+0x6>
     82e:	cd b7       	in	r28, 0x3d	; 61
     830:	de b7       	in	r29, 0x3e	; 62
     832:	9a 83       	std	Y+2, r25	; 0x02
     834:	89 83       	std	Y+1, r24	; 0x01
	free(q);
     836:	89 81       	ldd	r24, Y+1	; 0x01
     838:	9a 81       	ldd	r25, Y+2	; 0x02
     83a:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <free>
}
     83e:	0f 90       	pop	r0
     840:	0f 90       	pop	r0
     842:	cf 91       	pop	r28
     844:	df 91       	pop	r29
     846:	08 95       	ret

00000848 <runTaskFirstTime>:
	"pop r0	\n\t"\
	"out __SREG__, r0\n\t"\
	"pop r0	\n\t": : "r" (pxCurrentTCB):\
	);

void runTaskFirstTime(int i){
     848:	df 93       	push	r29
     84a:	cf 93       	push	r28
     84c:	00 d0       	rcall	.+0      	; 0x84e <runTaskFirstTime+0x6>
     84e:	cd b7       	in	r28, 0x3d	; 61
     850:	de b7       	in	r29, 0x3e	; 62
     852:	9a 83       	std	Y+2, r25	; 0x02
     854:	89 83       	std	Y+1, r24	; 0x01
	cli();
     856:	f8 94       	cli
	currentTask = i;
     858:	89 81       	ldd	r24, Y+1	; 0x01
     85a:	9a 81       	ldd	r25, Y+2	; 0x02
     85c:	90 93 19 01 	sts	0x0119, r25
     860:	80 93 18 01 	sts	0x0118, r24
	// set the run flag to be running
	taskTable[currentTask].runflag = TASK_RUNNING;
     864:	40 91 18 01 	lds	r20, 0x0118
     868:	50 91 19 01 	lds	r21, 0x0119
     86c:	2b e0       	ldi	r18, 0x0B	; 11
     86e:	31 e0       	ldi	r19, 0x01	; 1
     870:	42 9f       	mul	r20, r18
     872:	c0 01       	movw	r24, r0
     874:	43 9f       	mul	r20, r19
     876:	90 0d       	add	r25, r0
     878:	52 9f       	mul	r21, r18
     87a:	90 0d       	add	r25, r0
     87c:	11 24       	eor	r1, r1
     87e:	86 53       	subi	r24, 0x36	; 54
     880:	9e 4f       	sbci	r25, 0xFE	; 254
     882:	21 e0       	ldi	r18, 0x01	; 1
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	fc 01       	movw	r30, r24
     888:	31 83       	std	Z+1, r19	; 0x01
     88a:	20 83       	st	Z, r18
	
	pxCurrentTCB = (unsigned long)(taskTable[currentTask].stack + TASK_STACK_SIZE - 1);
     88c:	40 91 18 01 	lds	r20, 0x0118
     890:	50 91 19 01 	lds	r21, 0x0119
     894:	2b e0       	ldi	r18, 0x0B	; 11
     896:	31 e0       	ldi	r19, 0x01	; 1
     898:	42 9f       	mul	r20, r18
     89a:	c0 01       	movw	r24, r0
     89c:	43 9f       	mul	r20, r19
     89e:	90 0d       	add	r25, r0
     8a0:	52 9f       	mul	r21, r18
     8a2:	90 0d       	add	r25, r0
     8a4:	11 24       	eor	r1, r1
     8a6:	86 5f       	subi	r24, 0xF6	; 246
     8a8:	9e 4f       	sbci	r25, 0xFE	; 254
     8aa:	86 53       	subi	r24, 0x36	; 54
     8ac:	9e 4f       	sbci	r25, 0xFE	; 254
     8ae:	aa 27       	eor	r26, r26
     8b0:	97 fd       	sbrc	r25, 7
     8b2:	a0 95       	com	r26
     8b4:	ba 2f       	mov	r27, r26
     8b6:	80 93 c6 01 	sts	0x01C6, r24
     8ba:	90 93 c7 01 	sts	0x01C7, r25
     8be:	a0 93 c8 01 	sts	0x01C8, r26
     8c2:	b0 93 c9 01 	sts	0x01C9, r27
	
    asm volatile ("\n\t"\
     8c6:	a0 91 c6 01 	lds	r26, 0x01C6
     8ca:	b0 91 c7 01 	lds	r27, 0x01C7
     8ce:	ad bf       	out	0x3d, r26	; 61
     8d0:	be bf       	out	0x3e, r27	; 62
                  "lds r26, pxCurrentTCB \n\t"\
                  "lds r27, pxCurrentTCB+1 \n\t"\
                  "out __SP_L__, r26 \n\t"\
                  "out __SP_H__, r27 \n\t"\
                  );
	sei();
     8d2:	78 94       	sei
	
	// start running the task
    taskTable[currentTask].fptr(taskTable[currentTask].arg);
     8d4:	40 91 18 01 	lds	r20, 0x0118
     8d8:	50 91 19 01 	lds	r21, 0x0119
     8dc:	2b e0       	ldi	r18, 0x0B	; 11
     8de:	31 e0       	ldi	r19, 0x01	; 1
     8e0:	42 9f       	mul	r20, r18
     8e2:	c0 01       	movw	r24, r0
     8e4:	43 9f       	mul	r20, r19
     8e6:	90 0d       	add	r25, r0
     8e8:	52 9f       	mul	r21, r18
     8ea:	90 0d       	add	r25, r0
     8ec:	11 24       	eor	r1, r1
     8ee:	82 53       	subi	r24, 0x32	; 50
     8f0:	9e 4f       	sbci	r25, 0xFE	; 254
     8f2:	fc 01       	movw	r30, r24
     8f4:	20 81       	ld	r18, Z
     8f6:	31 81       	ldd	r19, Z+1	; 0x01
     8f8:	60 91 18 01 	lds	r22, 0x0118
     8fc:	70 91 19 01 	lds	r23, 0x0119
     900:	4b e0       	ldi	r20, 0x0B	; 11
     902:	51 e0       	ldi	r21, 0x01	; 1
     904:	64 9f       	mul	r22, r20
     906:	c0 01       	movw	r24, r0
     908:	65 9f       	mul	r22, r21
     90a:	90 0d       	add	r25, r0
     90c:	74 9f       	mul	r23, r20
     90e:	90 0d       	add	r25, r0
     910:	11 24       	eor	r1, r1
     912:	80 53       	subi	r24, 0x30	; 48
     914:	9e 4f       	sbci	r25, 0xFE	; 254
     916:	fc 01       	movw	r30, r24
     918:	80 81       	ld	r24, Z
     91a:	91 81       	ldd	r25, Z+1	; 0x01
     91c:	f9 01       	movw	r30, r18
     91e:	09 95       	icall
}
     920:	0f 90       	pop	r0
     922:	0f 90       	pop	r0
     924:	cf 91       	pop	r28
     926:	df 91       	pop	r29
     928:	08 95       	ret

0000092a <OSMakeAtomic>:



void OSMakeAtomic()
{
     92a:	df 93       	push	r29
     92c:	cf 93       	push	r28
     92e:	cd b7       	in	r28, 0x3d	; 61
     930:	de b7       	in	r29, 0x3e	; 62
	// Disables interrupts to create an atomic section.
	cli();
     932:	f8 94       	cli
}
     934:	cf 91       	pop	r28
     936:	df 91       	pop	r29
     938:	08 95       	ret

0000093a <OSLeaveAtomic>:

void OSLeaveAtomic()
{
     93a:	df 93       	push	r29
     93c:	cf 93       	push	r28
     93e:	cd b7       	in	r28, 0x3d	; 61
     940:	de b7       	in	r29, 0x3e	; 62
	// Leaves atomic section by re-enabling interrupts.
	sei();
     942:	78 94       	sei
}
     944:	cf 91       	pop	r28
     946:	df 91       	pop	r29
     948:	08 95       	ret

0000094a <findNextTask>:
	
	return -1;	// unsuccessful
}*/

int findNextTask()
{
     94a:	df 93       	push	r29
     94c:	cf 93       	push	r28
     94e:	cd b7       	in	r28, 0x3d	; 61
     950:	de b7       	in	r29, 0x3e	; 62
	int res;
	// Apply scheduling algorithm to find next task to run, and returns the index number of that task.
	// Note that OS_NUM_TASKS in kernel.h is the MAXIMUM number of tasks that can be created, not the actual number
	// created. So OS_NUM_TASKS can be 10 although in actual fact only 4 tasks were created. You should pick only amongst
	// these 4 tasks.
	if(task_counter == 0)	return -1;
     952:	80 91 2a 01 	lds	r24, 0x012A
     956:	90 91 2b 01 	lds	r25, 0x012B
     95a:	00 97       	sbiw	r24, 0x00	; 0
     95c:	19 f4       	brne	.+6      	; 0x964 <findNextTask+0x1a>
     95e:	8f ef       	ldi	r24, 0xFF	; 255
     960:	9f ef       	ldi	r25, 0xFF	; 255
     962:	26 c0       	rjmp	.+76     	; 0x9b0 <findNextTask+0x66>
	
	// mark the current task as being run
	if(currentTask >= 0)	taskTable[currentTask].runflag = 1;
     964:	80 91 18 01 	lds	r24, 0x0118
     968:	90 91 19 01 	lds	r25, 0x0119
     96c:	99 23       	and	r25, r25
     96e:	a4 f0       	brlt	.+40     	; 0x998 <findNextTask+0x4e>
     970:	40 91 18 01 	lds	r20, 0x0118
     974:	50 91 19 01 	lds	r21, 0x0119
     978:	2b e0       	ldi	r18, 0x0B	; 11
     97a:	31 e0       	ldi	r19, 0x01	; 1
     97c:	42 9f       	mul	r20, r18
     97e:	c0 01       	movw	r24, r0
     980:	43 9f       	mul	r20, r19
     982:	90 0d       	add	r25, r0
     984:	52 9f       	mul	r21, r18
     986:	90 0d       	add	r25, r0
     988:	11 24       	eor	r1, r1
     98a:	86 53       	subi	r24, 0x36	; 54
     98c:	9e 4f       	sbci	r25, 0xFE	; 254
     98e:	21 e0       	ldi	r18, 0x01	; 1
     990:	30 e0       	ldi	r19, 0x00	; 0
     992:	fc 01       	movw	r30, r24
     994:	31 83       	std	Z+1, r19	; 0x01
     996:	20 83       	st	Z, r18
	
	return ((currentTask+1)%task_counter);	// round robin
     998:	80 91 18 01 	lds	r24, 0x0118
     99c:	90 91 19 01 	lds	r25, 0x0119
     9a0:	01 96       	adiw	r24, 0x01	; 1
     9a2:	20 91 2a 01 	lds	r18, 0x012A
     9a6:	30 91 2b 01 	lds	r19, 0x012B
     9aa:	b9 01       	movw	r22, r18
     9ac:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <__divmodhi4>
}
     9b0:	cf 91       	pop	r28
     9b2:	df 91       	pop	r29
     9b4:	08 95       	ret

000009b6 <OSSwapTask>:


void OSSwapTask()
 {
	// assumption: when this method is being called, there's always a running task; otherwise it would do nothing
	if(currentTask < 0)	return;
     9b6:	80 91 18 01 	lds	r24, 0x0118
     9ba:	90 91 19 01 	lds	r25, 0x0119
     9be:	99 23       	and	r25, r25
     9c0:	0c f4       	brge	.+2      	; 0x9c4 <OSSwapTask+0xe>
     9c2:	e4 c0       	rjmp	.+456    	; 0xb8c <OSSwapTask+0x1d6>
	
	// assumption: when this method is being called, there's always a running task; otherwise it would do nothing
	if(currentTask > OS_NUM_TASKS || currentTask < -1){
     9c4:	80 91 18 01 	lds	r24, 0x0118
     9c8:	90 91 19 01 	lds	r25, 0x0119
     9cc:	85 30       	cpi	r24, 0x05	; 5
     9ce:	91 05       	cpc	r25, r1
     9d0:	44 f4       	brge	.+16     	; 0x9e2 <OSSwapTask+0x2c>
     9d2:	80 91 18 01 	lds	r24, 0x0118
     9d6:	90 91 19 01 	lds	r25, 0x0119
     9da:	2f ef       	ldi	r18, 0xFF	; 255
     9dc:	8f 3f       	cpi	r24, 0xFF	; 255
     9de:	92 07       	cpc	r25, r18
     9e0:	5c f4       	brge	.+22     	; 0x9f8 <OSSwapTask+0x42>
		// value of current task over flow
		// TODO: delete later
		PORTD ^= 0b00010000;
     9e2:	8b e2       	ldi	r24, 0x2B	; 43
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	2b e2       	ldi	r18, 0x2B	; 43
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	f9 01       	movw	r30, r18
     9ec:	30 81       	ld	r19, Z
     9ee:	20 e1       	ldi	r18, 0x10	; 16
     9f0:	23 27       	eor	r18, r19
     9f2:	fc 01       	movw	r30, r24
     9f4:	20 83       	st	Z, r18
		return;
     9f6:	cf c0       	rjmp	.+414    	; 0xb96 <__vector_14>
	} else if(currentTask == -1){
     9f8:	80 91 18 01 	lds	r24, 0x0118
     9fc:	90 91 19 01 	lds	r25, 0x0119
     a00:	ff ef       	ldi	r31, 0xFF	; 255
     a02:	8f 3f       	cpi	r24, 0xFF	; 255
     a04:	9f 07       	cpc	r25, r31
     a06:	09 f4       	brne	.+2      	; 0xa0a <OSSwapTask+0x54>
     a08:	c3 c0       	rjmp	.+390    	; 0xb90 <OSSwapTask+0x1da>
	} else{
		// the normal condition
	}
	
	// Call findNextTask to decide which task to run next.
	int taskNum = findNextTask();
     a0a:	0e 94 a5 04 	call	0x94a	; 0x94a <findNextTask>
     a0e:	9a 83       	std	Y+2, r25	; 0x02
     a10:	89 83       	std	Y+1, r24	; 0x01
	if(taskNum < 0)	return;	// no task to swap
     a12:	89 81       	ldd	r24, Y+1	; 0x01
     a14:	9a 81       	ldd	r25, Y+2	; 0x02
     a16:	99 23       	and	r25, r25
     a18:	0c f4       	brge	.+2      	; 0xa1c <OSSwapTask+0x66>
     a1a:	bc c0       	rjmp	.+376    	; 0xb94 <OSSwapTask+0x1de>
	cli();
     a1c:	f8 94       	cli
	// Save the context of the current task, and copy the task stack pointer to the task's entry in the Task Control Block (tcb).
	portSAVE_CONTEXT();
     a1e:	0f 92       	push	r0
     a20:	0f b6       	in	r0, 0x3f	; 63
     a22:	0f 92       	push	r0
     a24:	1f 92       	push	r1
     a26:	11 24       	eor	r1, r1
     a28:	2f 92       	push	r2
     a2a:	3f 92       	push	r3
     a2c:	4f 92       	push	r4
     a2e:	5f 92       	push	r5
     a30:	6f 92       	push	r6
     a32:	7f 92       	push	r7
     a34:	8f 92       	push	r8
     a36:	9f 92       	push	r9
     a38:	af 92       	push	r10
     a3a:	bf 92       	push	r11
     a3c:	cf 92       	push	r12
     a3e:	df 92       	push	r13
     a40:	ef 92       	push	r14
     a42:	ff 92       	push	r15
     a44:	0f 93       	push	r16
     a46:	1f 93       	push	r17
     a48:	2f 93       	push	r18
     a4a:	3f 93       	push	r19
     a4c:	4f 93       	push	r20
     a4e:	5f 93       	push	r21
     a50:	6f 93       	push	r22
     a52:	7f 93       	push	r23
     a54:	8f 93       	push	r24
     a56:	9f 93       	push	r25
     a58:	af 93       	push	r26
     a5a:	bf 93       	push	r27
     a5c:	cf 93       	push	r28
     a5e:	df 93       	push	r29
     a60:	ef 93       	push	r30
     a62:	ff 93       	push	r31
     a64:	ad b7       	in	r26, 0x3d	; 61
     a66:	be b7       	in	r27, 0x3e	; 62
     a68:	b0 93 c7 01 	sts	0x01C7, r27
     a6c:	a0 93 c6 01 	sts	0x01C6, r26
	
	// save the current stack pointer
	taskTable[currentTask].stack_ptr = pxCurrentTCB;
     a70:	60 91 18 01 	lds	r22, 0x0118
     a74:	70 91 19 01 	lds	r23, 0x0119
     a78:	80 91 c6 01 	lds	r24, 0x01C6
     a7c:	90 91 c7 01 	lds	r25, 0x01C7
     a80:	a0 91 c8 01 	lds	r26, 0x01C8
     a84:	b0 91 c9 01 	lds	r27, 0x01C9
     a88:	4b e0       	ldi	r20, 0x0B	; 11
     a8a:	51 e0       	ldi	r21, 0x01	; 1
     a8c:	64 9f       	mul	r22, r20
     a8e:	90 01       	movw	r18, r0
     a90:	65 9f       	mul	r22, r21
     a92:	30 0d       	add	r19, r0
     a94:	74 9f       	mul	r23, r20
     a96:	30 0d       	add	r19, r0
     a98:	11 24       	eor	r1, r1
     a9a:	2e 52       	subi	r18, 0x2E	; 46
     a9c:	3e 4f       	sbci	r19, 0xFE	; 254
     a9e:	f9 01       	movw	r30, r18
     aa0:	80 83       	st	Z, r24
     aa2:	91 83       	std	Z+1, r25	; 0x01
     aa4:	a2 83       	std	Z+2, r26	; 0x02
     aa6:	b3 83       	std	Z+3, r27	; 0x03
	
	// update the "currentTask" to be the next task to run
	currentTask = taskNum;
     aa8:	89 81       	ldd	r24, Y+1	; 0x01
     aaa:	9a 81       	ldd	r25, Y+2	; 0x02
     aac:	90 93 19 01 	sts	0x0119, r25
     ab0:	80 93 18 01 	sts	0x0118, r24
	
	TTaskBlock *t = &taskTable[currentTask];
     ab4:	80 91 18 01 	lds	r24, 0x0118
     ab8:	90 91 19 01 	lds	r25, 0x0119
     abc:	ac 01       	movw	r20, r24
     abe:	2b e0       	ldi	r18, 0x0B	; 11
     ac0:	31 e0       	ldi	r19, 0x01	; 1
     ac2:	42 9f       	mul	r20, r18
     ac4:	c0 01       	movw	r24, r0
     ac6:	43 9f       	mul	r20, r19
     ac8:	90 0d       	add	r25, r0
     aca:	52 9f       	mul	r21, r18
     acc:	90 0d       	add	r25, r0
     ace:	11 24       	eor	r1, r1
     ad0:	86 53       	subi	r24, 0x36	; 54
     ad2:	9e 4f       	sbci	r25, 0xFE	; 254
     ad4:	9c 83       	std	Y+4, r25	; 0x04
     ad6:	8b 83       	std	Y+3, r24	; 0x03
	
	if(t->runflag){	// has been run
     ad8:	8b 81       	ldd	r24, Y+3	; 0x03
     ada:	9c 81       	ldd	r25, Y+4	; 0x04
     adc:	fc 01       	movw	r30, r24
     ade:	80 81       	ld	r24, Z
     ae0:	91 81       	ldd	r25, Z+1	; 0x01
     ae2:	00 97       	sbiw	r24, 0x00	; 0
     ae4:	09 f4       	brne	.+2      	; 0xae8 <OSSwapTask+0x132>
     ae6:	4a c0       	rjmp	.+148    	; 0xb7c <OSSwapTask+0x1c6>
		// get the stack pointer saved
		pxCurrentTCB = taskTable[currentTask].stack_ptr;
     ae8:	40 91 18 01 	lds	r20, 0x0118
     aec:	50 91 19 01 	lds	r21, 0x0119
     af0:	2b e0       	ldi	r18, 0x0B	; 11
     af2:	31 e0       	ldi	r19, 0x01	; 1
     af4:	42 9f       	mul	r20, r18
     af6:	c0 01       	movw	r24, r0
     af8:	43 9f       	mul	r20, r19
     afa:	90 0d       	add	r25, r0
     afc:	52 9f       	mul	r21, r18
     afe:	90 0d       	add	r25, r0
     b00:	11 24       	eor	r1, r1
     b02:	8e 52       	subi	r24, 0x2E	; 46
     b04:	9e 4f       	sbci	r25, 0xFE	; 254
     b06:	fc 01       	movw	r30, r24
     b08:	80 81       	ld	r24, Z
     b0a:	91 81       	ldd	r25, Z+1	; 0x01
     b0c:	a2 81       	ldd	r26, Z+2	; 0x02
     b0e:	b3 81       	ldd	r27, Z+3	; 0x03
     b10:	80 93 c6 01 	sts	0x01C6, r24
     b14:	90 93 c7 01 	sts	0x01C7, r25
     b18:	a0 93 c8 01 	sts	0x01C8, r26
     b1c:	b0 93 c9 01 	sts	0x01C9, r27
		portRESTORE_CONTEXT();
     b20:	80 91 c6 01 	lds	r24, 0x01C6
     b24:	90 91 c7 01 	lds	r25, 0x01C7
     b28:	a0 91 c8 01 	lds	r26, 0x01C8
     b2c:	b0 91 c9 01 	lds	r27, 0x01C9
     b30:	8d bf       	out	0x3d, r24	; 61
     b32:	9e bf       	out	0x3e, r25	; 62
     b34:	ff 91       	pop	r31
     b36:	ef 91       	pop	r30
     b38:	df 91       	pop	r29
     b3a:	cf 91       	pop	r28
     b3c:	bf 91       	pop	r27
     b3e:	af 91       	pop	r26
     b40:	9f 91       	pop	r25
     b42:	8f 91       	pop	r24
     b44:	7f 91       	pop	r23
     b46:	6f 91       	pop	r22
     b48:	5f 91       	pop	r21
     b4a:	4f 91       	pop	r20
     b4c:	3f 91       	pop	r19
     b4e:	2f 91       	pop	r18
     b50:	1f 91       	pop	r17
     b52:	0f 91       	pop	r16
     b54:	ff 90       	pop	r15
     b56:	ef 90       	pop	r14
     b58:	df 90       	pop	r13
     b5a:	cf 90       	pop	r12
     b5c:	bf 90       	pop	r11
     b5e:	af 90       	pop	r10
     b60:	9f 90       	pop	r9
     b62:	8f 90       	pop	r8
     b64:	7f 90       	pop	r7
     b66:	6f 90       	pop	r6
     b68:	5f 90       	pop	r5
     b6a:	4f 90       	pop	r4
     b6c:	3f 90       	pop	r3
     b6e:	2f 90       	pop	r2
     b70:	1f 90       	pop	r1
     b72:	0f 90       	pop	r0
     b74:	0f be       	out	0x3f, r0	; 63
     b76:	0f 90       	pop	r0
		sei();
     b78:	78 94       	sei
     b7a:	06 c0       	rjmp	.+12     	; 0xb88 <OSSwapTask+0x1d2>
	}else{	// never run -> then run
		runTaskFirstTime(currentTask);
     b7c:	80 91 18 01 	lds	r24, 0x0118
     b80:	90 91 19 01 	lds	r25, 0x0119
     b84:	0e 94 24 04 	call	0x848	; 0x848 <runTaskFirstTime>
	}
	
	// Do not modify the line below!	
	asm("ret");
     b88:	08 95       	ret
     b8a:	05 c0       	rjmp	.+10     	; 0xb96 <__vector_14>


void OSSwapTask()
 {
	// assumption: when this method is being called, there's always a running task; otherwise it would do nothing
	if(currentTask < 0)	return;
     b8c:	00 00       	nop
     b8e:	03 c0       	rjmp	.+6      	; 0xb96 <__vector_14>
		// value of current task over flow
		// TODO: delete later
		PORTD ^= 0b00010000;
		return;
	} else if(currentTask == -1){
		return;	// never got any task run
     b90:	00 00       	nop
     b92:	01 c0       	rjmp	.+2      	; 0xb96 <__vector_14>
	...

00000b96 <__vector_14>:
// ISR for the timer. IMPLEMENT ONLY IN PART 2!


ISR(TIMER0_COMPA_vect, ISR_NAKED)
{
	cli();
     b96:	f8 94       	cli

	OSSwapTask();
     b98:	0e 94 db 04 	call	0x9b6	; 0x9b6 <OSSwapTask>
	
	// Do not change this!
	asm("reti");
     b9c:	18 95       	reti

00000b9e <OSInit>:
}

void OSInit()
{ 
     b9e:	df 93       	push	r29
     ba0:	cf 93       	push	r28
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
	// Initialize all OS state variables, hardware used DIRECTLY by the OS, etc etc. Do not initialize variables or hardware
	// used by the application. Only those used by the OS.
	int i;
	
	// initialize timer 0
	TCNT0 = 0; OCR0A = 100;
     ba6:	86 e4       	ldi	r24, 0x46	; 70
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	fc 01       	movw	r30, r24
     bac:	10 82       	st	Z, r1
     bae:	87 e4       	ldi	r24, 0x47	; 71
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	24 e6       	ldi	r18, 0x64	; 100
     bb4:	fc 01       	movw	r30, r24
     bb6:	20 83       	st	Z, r18
	TCCR0A = 0b00000010;
     bb8:	84 e4       	ldi	r24, 0x44	; 68
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	22 e0       	ldi	r18, 0x02	; 2
     bbe:	fc 01       	movw	r30, r24
     bc0:	20 83       	st	Z, r18
	TCCR0B = 0b00000101;
     bc2:	85 e4       	ldi	r24, 0x45	; 69
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	25 e0       	ldi	r18, 0x05	; 5
     bc8:	fc 01       	movw	r30, r24
     bca:	20 83       	st	Z, r18
}
     bcc:	cf 91       	pop	r28
     bce:	df 91       	pop	r29
     bd0:	08 95       	ret

00000bd2 <OSAddTask>:
// First argument is a pointer to the task's function code, the second is a priority number (0=highest priority)
// and the 3rd argument is an argument that will be passed to the task function the first time it is run.
// E.g. OSAddTask(task1, 0, (void *) 5) causes a task called task1 to be created with priority 0, and the integer
// 5 is passed to task1 when it is first called. See app.c to fully understand how OSAddTask is used.
int OSAddTask(void (*taskptr)(void *), int prio, void* arg)
{
     bd2:	df 93       	push	r29
     bd4:	cf 93       	push	r28
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
     bda:	28 97       	sbiw	r28, 0x08	; 8
     bdc:	0f b6       	in	r0, 0x3f	; 63
     bde:	f8 94       	cli
     be0:	de bf       	out	0x3e, r29	; 62
     be2:	0f be       	out	0x3f, r0	; 63
     be4:	cd bf       	out	0x3d, r28	; 61
     be6:	9c 83       	std	Y+4, r25	; 0x04
     be8:	8b 83       	std	Y+3, r24	; 0x03
     bea:	7e 83       	std	Y+6, r23	; 0x06
     bec:	6d 83       	std	Y+5, r22	; 0x05
     bee:	58 87       	std	Y+8, r21	; 0x08
     bf0:	4f 83       	std	Y+7, r20	; 0x07
	// Adds a new entry to the TCB. Returns a -1 if # of tasks > OS_NUM_TASKS. Note that OS_NUM_TASKS is the MAXIMUM
	// number of tasks that can be created, not the actual number.
	if(task_counter >= OS_NUM_TASKS)	return -1;
     bf2:	80 91 2a 01 	lds	r24, 0x012A
     bf6:	90 91 2b 01 	lds	r25, 0x012B
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	91 05       	cpc	r25, r1
     bfe:	1c f0       	brlt	.+6      	; 0xc06 <OSAddTask+0x34>
     c00:	8f ef       	ldi	r24, 0xFF	; 255
     c02:	9f ef       	ldi	r25, 0xFF	; 255
     c04:	3c c0       	rjmp	.+120    	; 0xc7e <OSAddTask+0xac>
	TTaskBlock *t = &taskTable[task_counter++];
     c06:	80 91 2a 01 	lds	r24, 0x012A
     c0a:	90 91 2b 01 	lds	r25, 0x012B
     c0e:	bc 01       	movw	r22, r24
     c10:	4b e0       	ldi	r20, 0x0B	; 11
     c12:	51 e0       	ldi	r21, 0x01	; 1
     c14:	64 9f       	mul	r22, r20
     c16:	90 01       	movw	r18, r0
     c18:	65 9f       	mul	r22, r21
     c1a:	30 0d       	add	r19, r0
     c1c:	74 9f       	mul	r23, r20
     c1e:	30 0d       	add	r19, r0
     c20:	11 24       	eor	r1, r1
     c22:	26 53       	subi	r18, 0x36	; 54
     c24:	3e 4f       	sbci	r19, 0xFE	; 254
     c26:	3a 83       	std	Y+2, r19	; 0x02
     c28:	29 83       	std	Y+1, r18	; 0x01
     c2a:	01 96       	adiw	r24, 0x01	; 1
     c2c:	90 93 2b 01 	sts	0x012B, r25
     c30:	80 93 2a 01 	sts	0x012A, r24
	t->fptr = taskptr;
     c34:	89 81       	ldd	r24, Y+1	; 0x01
     c36:	9a 81       	ldd	r25, Y+2	; 0x02
     c38:	2b 81       	ldd	r18, Y+3	; 0x03
     c3a:	3c 81       	ldd	r19, Y+4	; 0x04
     c3c:	fc 01       	movw	r30, r24
     c3e:	35 83       	std	Z+5, r19	; 0x05
     c40:	24 83       	std	Z+4, r18	; 0x04
	t->prio = prio;
     c42:	89 81       	ldd	r24, Y+1	; 0x01
     c44:	9a 81       	ldd	r25, Y+2	; 0x02
     c46:	2d 81       	ldd	r18, Y+5	; 0x05
     c48:	3e 81       	ldd	r19, Y+6	; 0x06
     c4a:	fc 01       	movw	r30, r24
     c4c:	33 83       	std	Z+3, r19	; 0x03
     c4e:	22 83       	std	Z+2, r18	; 0x02
	t->arg = arg;
     c50:	89 81       	ldd	r24, Y+1	; 0x01
     c52:	9a 81       	ldd	r25, Y+2	; 0x02
     c54:	2f 81       	ldd	r18, Y+7	; 0x07
     c56:	38 85       	ldd	r19, Y+8	; 0x08
     c58:	fc 01       	movw	r30, r24
     c5a:	37 83       	std	Z+7, r19	; 0x07
     c5c:	26 83       	std	Z+6, r18	; 0x06
	t->runflag = 0;
     c5e:	89 81       	ldd	r24, Y+1	; 0x01
     c60:	9a 81       	ldd	r25, Y+2	; 0x02
     c62:	fc 01       	movw	r30, r24
     c64:	11 82       	std	Z+1, r1	; 0x01
     c66:	10 82       	st	Z, r1
	
	task_counter++;
     c68:	80 91 2a 01 	lds	r24, 0x012A
     c6c:	90 91 2b 01 	lds	r25, 0x012B
     c70:	01 96       	adiw	r24, 0x01	; 1
     c72:	90 93 2b 01 	sts	0x012B, r25
     c76:	80 93 2a 01 	sts	0x012A, r24
	
	return 0;
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	90 e0       	ldi	r25, 0x00	; 0
}
     c7e:	28 96       	adiw	r28, 0x08	; 8
     c80:	0f b6       	in	r0, 0x3f	; 63
     c82:	f8 94       	cli
     c84:	de bf       	out	0x3e, r29	; 62
     c86:	0f be       	out	0x3f, r0	; 63
     c88:	cd bf       	out	0x3d, r28	; 61
     c8a:	cf 91       	pop	r28
     c8c:	df 91       	pop	r29
     c8e:	08 95       	ret

00000c90 <OSRun>:

void OSRun()
{
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	cd b7       	in	r28, 0x3d	; 61
     c96:	de b7       	in	r29, 0x3e	; 62
	// possibly that the interrupt has been enabled earlier(like.. by say function),
	// so disable it first
	cli();
     c98:	f8 94       	cli
	
	// when there's no task to run
	if(task_counter == 0)	return;
     c9a:	80 91 2a 01 	lds	r24, 0x012A
     c9e:	90 91 2b 01 	lds	r25, 0x012B
     ca2:	00 97       	sbiw	r24, 0x00	; 0
     ca4:	a1 f0       	breq	.+40     	; 0xcce <OSRun+0x3e>
	
	// Starts by executing the first task
	currentTask = 0;
     ca6:	10 92 19 01 	sts	0x0119, r1
     caa:	10 92 18 01 	sts	0x0118, r1
	
	// start timer 0
	TIMSK0 |= 0b10;
     cae:	8e e6       	ldi	r24, 0x6E	; 110
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	2e e6       	ldi	r18, 0x6E	; 110
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	f9 01       	movw	r30, r18
     cb8:	20 81       	ld	r18, Z
     cba:	22 60       	ori	r18, 0x02	; 2
     cbc:	fc 01       	movw	r30, r24
     cbe:	20 83       	st	Z, r18
	
	// this would enable the interrupt after it starts the task
	runTaskFirstTime(currentTask);
     cc0:	80 91 18 01 	lds	r24, 0x0118
     cc4:	90 91 19 01 	lds	r25, 0x0119
     cc8:	0e 94 24 04 	call	0x848	; 0x848 <runTaskFirstTime>
     ccc:	01 c0       	rjmp	.+2      	; 0xcd0 <OSRun+0x40>
	// possibly that the interrupt has been enabled earlier(like.. by say function),
	// so disable it first
	cli();
	
	// when there's no task to run
	if(task_counter == 0)	return;
     cce:	00 00       	nop
	// start timer 0
	TIMSK0 |= 0b10;
	
	// this would enable the interrupt after it starts the task
	runTaskFirstTime(currentTask);
     cd0:	cf 91       	pop	r28
     cd2:	df 91       	pop	r29
     cd4:	08 95       	ret

00000cd6 <setupSerial>:
#define enter_atomic() cli()
#define leave_atomic() sei()

// Set up for 9600 8N1
void setupSerial()
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
	enter_atomic();
     cde:	f8 94       	cli
	qcount=0;
     ce0:	10 92 41 06 	sts	0x0641, r1
     ce4:	10 92 40 06 	sts	0x0640, r1
	qhead=0;
     ce8:	10 92 85 06 	sts	0x0685, r1
     cec:	10 92 84 06 	sts	0x0684, r1
	qtail=0;
     cf0:	10 92 43 06 	sts	0x0643, r1
     cf4:	10 92 42 06 	sts	0x0642, r1
	lqhead=0;
     cf8:	10 92 3d 06 	sts	0x063D, r1
     cfc:	10 92 3c 06 	sts	0x063C, r1
	lqtail=0;
     d00:	10 92 3f 06 	sts	0x063F, r1
     d04:	10 92 3e 06 	sts	0x063E, r1
	lqcount=0;
     d08:	10 92 3b 06 	sts	0x063B, r1
     d0c:	10 92 3a 06 	sts	0x063A, r1

	// Set up baud rate generator. UBBR=16000000/(16*9600)-1 = 103
	UBRR0L=103;
     d10:	84 ec       	ldi	r24, 0xC4	; 196
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	27 e6       	ldi	r18, 0x67	; 103
     d16:	fc 01       	movw	r30, r24
     d18:	20 83       	st	Z, r18
	UBRR0H=0;
     d1a:	85 ec       	ldi	r24, 0xC5	; 197
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	fc 01       	movw	r30, r24
     d20:	10 82       	st	Z, r1
	
	// Set up 8N1
	UCSR0C=0b110;
     d22:	82 ec       	ldi	r24, 0xC2	; 194
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	26 e0       	ldi	r18, 0x06	; 6
     d28:	fc 01       	movw	r30, r24
     d2a:	20 83       	st	Z, r18
	
	// Enable RX and TX.
	UCSR0B=0b10011000;
     d2c:	81 ec       	ldi	r24, 0xC1	; 193
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	28 e9       	ldi	r18, 0x98	; 152
     d32:	fc 01       	movw	r30, r24
     d34:	20 83       	st	Z, r18
	UCSR0A=0;
     d36:	80 ec       	ldi	r24, 0xC0	; 192
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	fc 01       	movw	r30, r24
     d3c:	10 82       	st	Z, r1
	leave_atomic();
     d3e:	78 94       	sei
}
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <__vector_20>:

// ISR for transmit end.
ISR(USART_TX_vect)
{
     d46:	1f 92       	push	r1
     d48:	0f 92       	push	r0
     d4a:	0f b6       	in	r0, 0x3f	; 63
     d4c:	0f 92       	push	r0
     d4e:	11 24       	eor	r1, r1
     d50:	2f 93       	push	r18
     d52:	3f 93       	push	r19
     d54:	5f 93       	push	r21
     d56:	6f 93       	push	r22
     d58:	7f 93       	push	r23
     d5a:	8f 93       	push	r24
     d5c:	9f 93       	push	r25
     d5e:	af 93       	push	r26
     d60:	bf 93       	push	r27
     d62:	ef 93       	push	r30
     d64:	ff 93       	push	r31
     d66:	df 93       	push	r29
     d68:	cf 93       	push	r28
     d6a:	cd b7       	in	r28, 0x3d	; 61
     d6c:	de b7       	in	r29, 0x3e	; 62

	enter_atomic();
     d6e:	f8 94       	cli
	// Disable interrupts. 
	if(qcount==0)
     d70:	80 91 40 06 	lds	r24, 0x0640
     d74:	90 91 41 06 	lds	r25, 0x0641
     d78:	00 97       	sbiw	r24, 0x00	; 0
     d7a:	51 f4       	brne	.+20     	; 0xd90 <__vector_20+0x4a>
		UCSR0B&=0b10111111;
     d7c:	81 ec       	ldi	r24, 0xC1	; 193
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	21 ec       	ldi	r18, 0xC1	; 193
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	f9 01       	movw	r30, r18
     d86:	20 81       	ld	r18, Z
     d88:	2f 7b       	andi	r18, 0xBF	; 191
     d8a:	fc 01       	movw	r30, r24
     d8c:	20 83       	st	Z, r18
     d8e:	23 c0       	rjmp	.+70     	; 0xdd6 <__vector_20+0x90>
	else
	{
		UDR0=q[qtail];
     d90:	86 ec       	ldi	r24, 0xC6	; 198
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	20 91 42 06 	lds	r18, 0x0642
     d98:	30 91 43 06 	lds	r19, 0x0643
     d9c:	2c 5b       	subi	r18, 0xBC	; 188
     d9e:	39 4f       	sbci	r19, 0xF9	; 249
     da0:	f9 01       	movw	r30, r18
     da2:	20 81       	ld	r18, Z
     da4:	fc 01       	movw	r30, r24
     da6:	20 83       	st	Z, r18
		qtail=(qtail+1)%QLEN;
     da8:	80 91 42 06 	lds	r24, 0x0642
     dac:	90 91 43 06 	lds	r25, 0x0643
     db0:	01 96       	adiw	r24, 0x01	; 1
     db2:	20 e4       	ldi	r18, 0x40	; 64
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	b9 01       	movw	r22, r18
     db8:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <__divmodhi4>
     dbc:	90 93 43 06 	sts	0x0643, r25
     dc0:	80 93 42 06 	sts	0x0642, r24
		qcount--;
     dc4:	80 91 40 06 	lds	r24, 0x0640
     dc8:	90 91 41 06 	lds	r25, 0x0641
     dcc:	01 97       	sbiw	r24, 0x01	; 1
     dce:	90 93 41 06 	sts	0x0641, r25
     dd2:	80 93 40 06 	sts	0x0640, r24
	}	
	leave_atomic();
     dd6:	78 94       	sei
}
     dd8:	cf 91       	pop	r28
     dda:	df 91       	pop	r29
     ddc:	ff 91       	pop	r31
     dde:	ef 91       	pop	r30
     de0:	bf 91       	pop	r27
     de2:	af 91       	pop	r26
     de4:	9f 91       	pop	r25
     de6:	8f 91       	pop	r24
     de8:	7f 91       	pop	r23
     dea:	6f 91       	pop	r22
     dec:	5f 91       	pop	r21
     dee:	3f 91       	pop	r19
     df0:	2f 91       	pop	r18
     df2:	0f 90       	pop	r0
     df4:	0f be       	out	0x3f, r0	; 63
     df6:	0f 90       	pop	r0
     df8:	1f 90       	pop	r1
     dfa:	18 95       	reti

00000dfc <__vector_18>:

// Listener
ISR(USART_RX_vect)
{
     dfc:	1f 92       	push	r1
     dfe:	0f 92       	push	r0
     e00:	0f b6       	in	r0, 0x3f	; 63
     e02:	0f 92       	push	r0
     e04:	11 24       	eor	r1, r1
     e06:	2f 93       	push	r18
     e08:	3f 93       	push	r19
     e0a:	5f 93       	push	r21
     e0c:	6f 93       	push	r22
     e0e:	7f 93       	push	r23
     e10:	8f 93       	push	r24
     e12:	9f 93       	push	r25
     e14:	af 93       	push	r26
     e16:	bf 93       	push	r27
     e18:	ef 93       	push	r30
     e1a:	ff 93       	push	r31
     e1c:	df 93       	push	r29
     e1e:	cf 93       	push	r28
     e20:	0f 92       	push	r0
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
	// Guarantee atomicity
	enter_atomic();
     e26:	f8 94       	cli
		
	// Get the character
	char ch=UDR0;
     e28:	86 ec       	ldi	r24, 0xC6	; 198
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	fc 01       	movw	r30, r24
     e2e:	80 81       	ld	r24, Z
     e30:	89 83       	std	Y+1, r24	; 0x01
	if(lqcount<LQLEN)
     e32:	80 91 3a 06 	lds	r24, 0x063A
     e36:	90 91 3b 06 	lds	r25, 0x063B
     e3a:	80 38       	cpi	r24, 0x80	; 128
     e3c:	91 05       	cpc	r25, r1
     e3e:	04 f5       	brge	.+64     	; 0xe80 <__vector_18+0x84>
	{
		lq[lqhead]=ch;
     e40:	80 91 3c 06 	lds	r24, 0x063C
     e44:	90 91 3d 06 	lds	r25, 0x063D
     e48:	86 50       	subi	r24, 0x06	; 6
     e4a:	9a 4f       	sbci	r25, 0xFA	; 250
     e4c:	29 81       	ldd	r18, Y+1	; 0x01
     e4e:	fc 01       	movw	r30, r24
     e50:	20 83       	st	Z, r18
		lqhead=(lqhead+1)%LQLEN;
     e52:	80 91 3c 06 	lds	r24, 0x063C
     e56:	90 91 3d 06 	lds	r25, 0x063D
     e5a:	01 96       	adiw	r24, 0x01	; 1
     e5c:	20 e8       	ldi	r18, 0x80	; 128
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	b9 01       	movw	r22, r18
     e62:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <__divmodhi4>
     e66:	90 93 3d 06 	sts	0x063D, r25
     e6a:	80 93 3c 06 	sts	0x063C, r24
		lqcount++;
     e6e:	80 91 3a 06 	lds	r24, 0x063A
     e72:	90 91 3b 06 	lds	r25, 0x063B
     e76:	01 96       	adiw	r24, 0x01	; 1
     e78:	90 93 3b 06 	sts	0x063B, r25
     e7c:	80 93 3a 06 	sts	0x063A, r24
	}
	
	leave_atomic();
     e80:	78 94       	sei
}
     e82:	0f 90       	pop	r0
     e84:	cf 91       	pop	r28
     e86:	df 91       	pop	r29
     e88:	ff 91       	pop	r31
     e8a:	ef 91       	pop	r30
     e8c:	bf 91       	pop	r27
     e8e:	af 91       	pop	r26
     e90:	9f 91       	pop	r25
     e92:	8f 91       	pop	r24
     e94:	7f 91       	pop	r23
     e96:	6f 91       	pop	r22
     e98:	5f 91       	pop	r21
     e9a:	3f 91       	pop	r19
     e9c:	2f 91       	pop	r18
     e9e:	0f 90       	pop	r0
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	0f 90       	pop	r0
     ea4:	1f 90       	pop	r1
     ea6:	18 95       	reti

00000ea8 <hear>:

void hear(char *str, int *len)
{
     ea8:	df 93       	push	r29
     eaa:	cf 93       	push	r28
     eac:	00 d0       	rcall	.+0      	; 0xeae <hear+0x6>
     eae:	00 d0       	rcall	.+0      	; 0xeb0 <hear+0x8>
     eb0:	00 d0       	rcall	.+0      	; 0xeb2 <hear+0xa>
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62
     eb6:	9c 83       	std	Y+4, r25	; 0x04
     eb8:	8b 83       	std	Y+3, r24	; 0x03
     eba:	7e 83       	std	Y+6, r23	; 0x06
     ebc:	6d 83       	std	Y+5, r22	; 0x05
	int i;
	
	enter_atomic();
     ebe:	f8 94       	cli
	for(i=0; i<lqcount; i++)
     ec0:	1a 82       	std	Y+2, r1	; 0x02
     ec2:	19 82       	std	Y+1, r1	; 0x01
     ec4:	23 c0       	rjmp	.+70     	; 0xf0c <hear+0x64>
	{
		str[i]=lq[lqtail];
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
     ec8:	9a 81       	ldd	r25, Y+2	; 0x02
     eca:	2b 81       	ldd	r18, Y+3	; 0x03
     ecc:	3c 81       	ldd	r19, Y+4	; 0x04
     ece:	82 0f       	add	r24, r18
     ed0:	93 1f       	adc	r25, r19
     ed2:	20 91 3e 06 	lds	r18, 0x063E
     ed6:	30 91 3f 06 	lds	r19, 0x063F
     eda:	26 50       	subi	r18, 0x06	; 6
     edc:	3a 4f       	sbci	r19, 0xFA	; 250
     ede:	f9 01       	movw	r30, r18
     ee0:	20 81       	ld	r18, Z
     ee2:	fc 01       	movw	r30, r24
     ee4:	20 83       	st	Z, r18
		lqtail=(lqtail+1)%LQLEN;
     ee6:	80 91 3e 06 	lds	r24, 0x063E
     eea:	90 91 3f 06 	lds	r25, 0x063F
     eee:	01 96       	adiw	r24, 0x01	; 1
     ef0:	20 e8       	ldi	r18, 0x80	; 128
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	b9 01       	movw	r22, r18
     ef6:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <__divmodhi4>
     efa:	90 93 3f 06 	sts	0x063F, r25
     efe:	80 93 3e 06 	sts	0x063E, r24
void hear(char *str, int *len)
{
	int i;
	
	enter_atomic();
	for(i=0; i<lqcount; i++)
     f02:	89 81       	ldd	r24, Y+1	; 0x01
     f04:	9a 81       	ldd	r25, Y+2	; 0x02
     f06:	01 96       	adiw	r24, 0x01	; 1
     f08:	9a 83       	std	Y+2, r25	; 0x02
     f0a:	89 83       	std	Y+1, r24	; 0x01
     f0c:	80 91 3a 06 	lds	r24, 0x063A
     f10:	90 91 3b 06 	lds	r25, 0x063B
     f14:	29 81       	ldd	r18, Y+1	; 0x01
     f16:	3a 81       	ldd	r19, Y+2	; 0x02
     f18:	28 17       	cp	r18, r24
     f1a:	39 07       	cpc	r19, r25
     f1c:	a4 f2       	brlt	.-88     	; 0xec6 <hear+0x1e>
	{
		str[i]=lq[lqtail];
		lqtail=(lqtail+1)%LQLEN;
	}	
	
	str[lqtail]=0;
     f1e:	80 91 3e 06 	lds	r24, 0x063E
     f22:	90 91 3f 06 	lds	r25, 0x063F
     f26:	2b 81       	ldd	r18, Y+3	; 0x03
     f28:	3c 81       	ldd	r19, Y+4	; 0x04
     f2a:	82 0f       	add	r24, r18
     f2c:	93 1f       	adc	r25, r19
     f2e:	fc 01       	movw	r30, r24
     f30:	10 82       	st	Z, r1
	
	*len=lqcount;
     f32:	20 91 3a 06 	lds	r18, 0x063A
     f36:	30 91 3b 06 	lds	r19, 0x063B
     f3a:	8d 81       	ldd	r24, Y+5	; 0x05
     f3c:	9e 81       	ldd	r25, Y+6	; 0x06
     f3e:	fc 01       	movw	r30, r24
     f40:	31 83       	std	Z+1, r19	; 0x01
     f42:	20 83       	st	Z, r18
	lqcount=0;
     f44:	10 92 3b 06 	sts	0x063B, r1
     f48:	10 92 3a 06 	sts	0x063A, r1
	
	leave_atomic();
     f4c:	78 94       	sei
}
     f4e:	26 96       	adiw	r28, 0x06	; 6
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	f8 94       	cli
     f54:	de bf       	out	0x3e, r29	; 62
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	cd bf       	out	0x3d, r28	; 61
     f5a:	cf 91       	pop	r28
     f5c:	df 91       	pop	r29
     f5e:	08 95       	ret

00000f60 <say>:

void say(char *str)
{
     f60:	0f 93       	push	r16
     f62:	1f 93       	push	r17
     f64:	df 93       	push	r29
     f66:	cf 93       	push	r28
     f68:	00 d0       	rcall	.+0      	; 0xf6a <say+0xa>
     f6a:	00 d0       	rcall	.+0      	; 0xf6c <say+0xc>
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
     f70:	9c 83       	std	Y+4, r25	; 0x04
     f72:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	
	// Guarantee atomicity
	enter_atomic();
     f74:	f8 94       	cli
	for(i=0; i<strlen(str) && qcount < QLEN; i++)
     f76:	1a 82       	std	Y+2, r1	; 0x02
     f78:	19 82       	std	Y+1, r1	; 0x01
     f7a:	62 c0       	rjmp	.+196    	; 0x1040 <say+0xe0>
	{
		q[qhead]=str[i];
     f7c:	80 91 84 06 	lds	r24, 0x0684
     f80:	90 91 85 06 	lds	r25, 0x0685
     f84:	29 81       	ldd	r18, Y+1	; 0x01
     f86:	3a 81       	ldd	r19, Y+2	; 0x02
     f88:	4b 81       	ldd	r20, Y+3	; 0x03
     f8a:	5c 81       	ldd	r21, Y+4	; 0x04
     f8c:	24 0f       	add	r18, r20
     f8e:	35 1f       	adc	r19, r21
     f90:	f9 01       	movw	r30, r18
     f92:	20 81       	ld	r18, Z
     f94:	8c 5b       	subi	r24, 0xBC	; 188
     f96:	99 4f       	sbci	r25, 0xF9	; 249
     f98:	fc 01       	movw	r30, r24
     f9a:	20 83       	st	Z, r18
		qhead=(qhead+1) %QLEN;
     f9c:	80 91 84 06 	lds	r24, 0x0684
     fa0:	90 91 85 06 	lds	r25, 0x0685
     fa4:	01 96       	adiw	r24, 0x01	; 1
     fa6:	20 e4       	ldi	r18, 0x40	; 64
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	b9 01       	movw	r22, r18
     fac:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <__divmodhi4>
     fb0:	90 93 85 06 	sts	0x0685, r25
     fb4:	80 93 84 06 	sts	0x0684, r24
		qcount++;			
     fb8:	80 91 40 06 	lds	r24, 0x0640
     fbc:	90 91 41 06 	lds	r25, 0x0641
     fc0:	01 96       	adiw	r24, 0x01	; 1
     fc2:	90 93 41 06 	sts	0x0641, r25
     fc6:	80 93 40 06 	sts	0x0640, r24
	
		if(!(UCSR0B & 0b01000000))
     fca:	81 ec       	ldi	r24, 0xC1	; 193
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	fc 01       	movw	r30, r24
     fd0:	80 81       	ld	r24, Z
     fd2:	88 2f       	mov	r24, r24
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	80 74       	andi	r24, 0x40	; 64
     fd8:	90 70       	andi	r25, 0x00	; 0
     fda:	00 97       	sbiw	r24, 0x00	; 0
     fdc:	61 f5       	brne	.+88     	; 0x1036 <say+0xd6>
		{
			UDR0=q[qtail];
     fde:	86 ec       	ldi	r24, 0xC6	; 198
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	20 91 42 06 	lds	r18, 0x0642
     fe6:	30 91 43 06 	lds	r19, 0x0643
     fea:	2c 5b       	subi	r18, 0xBC	; 188
     fec:	39 4f       	sbci	r19, 0xF9	; 249
     fee:	f9 01       	movw	r30, r18
     ff0:	20 81       	ld	r18, Z
     ff2:	fc 01       	movw	r30, r24
     ff4:	20 83       	st	Z, r18
			qtail=(qtail+1)%QLEN;
     ff6:	80 91 42 06 	lds	r24, 0x0642
     ffa:	90 91 43 06 	lds	r25, 0x0643
     ffe:	01 96       	adiw	r24, 0x01	; 1
    1000:	20 e4       	ldi	r18, 0x40	; 64
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	b9 01       	movw	r22, r18
    1006:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <__divmodhi4>
    100a:	90 93 43 06 	sts	0x0643, r25
    100e:	80 93 42 06 	sts	0x0642, r24
			qcount--;
    1012:	80 91 40 06 	lds	r24, 0x0640
    1016:	90 91 41 06 	lds	r25, 0x0641
    101a:	01 97       	sbiw	r24, 0x01	; 1
    101c:	90 93 41 06 	sts	0x0641, r25
    1020:	80 93 40 06 	sts	0x0640, r24
			UCSR0B|=0b01000000;
    1024:	81 ec       	ldi	r24, 0xC1	; 193
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	21 ec       	ldi	r18, 0xC1	; 193
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	f9 01       	movw	r30, r18
    102e:	20 81       	ld	r18, Z
    1030:	20 64       	ori	r18, 0x40	; 64
    1032:	fc 01       	movw	r30, r24
    1034:	20 83       	st	Z, r18
{
	int i;
	
	// Guarantee atomicity
	enter_atomic();
	for(i=0; i<strlen(str) && qcount < QLEN; i++)
    1036:	89 81       	ldd	r24, Y+1	; 0x01
    1038:	9a 81       	ldd	r25, Y+2	; 0x02
    103a:	01 96       	adiw	r24, 0x01	; 1
    103c:	9a 83       	std	Y+2, r25	; 0x02
    103e:	89 83       	std	Y+1, r24	; 0x01
    1040:	09 81       	ldd	r16, Y+1	; 0x01
    1042:	1a 81       	ldd	r17, Y+2	; 0x02
    1044:	8b 81       	ldd	r24, Y+3	; 0x03
    1046:	9c 81       	ldd	r25, Y+4	; 0x04
    1048:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <strlen>
    104c:	08 17       	cp	r16, r24
    104e:	19 07       	cpc	r17, r25
    1050:	40 f4       	brcc	.+16     	; 0x1062 <say+0x102>
    1052:	80 91 40 06 	lds	r24, 0x0640
    1056:	90 91 41 06 	lds	r25, 0x0641
    105a:	80 34       	cpi	r24, 0x40	; 64
    105c:	91 05       	cpc	r25, r1
    105e:	0c f4       	brge	.+2      	; 0x1062 <say+0x102>
    1060:	8d cf       	rjmp	.-230    	; 0xf7c <say+0x1c>
			qtail=(qtail+1)%QLEN;
			qcount--;
			UCSR0B|=0b01000000;
		}
	}
	leave_atomic();
    1062:	78 94       	sei
}
    1064:	0f 90       	pop	r0
    1066:	0f 90       	pop	r0
    1068:	0f 90       	pop	r0
    106a:	0f 90       	pop	r0
    106c:	cf 91       	pop	r28
    106e:	df 91       	pop	r29
    1070:	1f 91       	pop	r17
    1072:	0f 91       	pop	r16
    1074:	08 95       	ret

00001076 <__fixunssfsi>:
    1076:	ef 92       	push	r14
    1078:	ff 92       	push	r15
    107a:	0f 93       	push	r16
    107c:	1f 93       	push	r17
    107e:	7b 01       	movw	r14, r22
    1080:	8c 01       	movw	r16, r24
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	40 e0       	ldi	r20, 0x00	; 0
    1088:	5f e4       	ldi	r21, 0x4F	; 79
    108a:	0e 94 39 0b 	call	0x1672	; 0x1672 <__gesf2>
    108e:	87 fd       	sbrc	r24, 7
    1090:	11 c0       	rjmp	.+34     	; 0x10b4 <__fixunssfsi+0x3e>
    1092:	c8 01       	movw	r24, r16
    1094:	b7 01       	movw	r22, r14
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	40 e0       	ldi	r20, 0x00	; 0
    109c:	5f e4       	ldi	r21, 0x4F	; 79
    109e:	0e 94 de 09 	call	0x13bc	; 0x13bc <__subsf3>
    10a2:	0e 94 99 0b 	call	0x1732	; 0x1732 <__fixsfsi>
    10a6:	9b 01       	movw	r18, r22
    10a8:	ac 01       	movw	r20, r24
    10aa:	20 50       	subi	r18, 0x00	; 0
    10ac:	30 40       	sbci	r19, 0x00	; 0
    10ae:	40 40       	sbci	r20, 0x00	; 0
    10b0:	50 48       	sbci	r21, 0x80	; 128
    10b2:	06 c0       	rjmp	.+12     	; 0x10c0 <__fixunssfsi+0x4a>
    10b4:	c8 01       	movw	r24, r16
    10b6:	b7 01       	movw	r22, r14
    10b8:	0e 94 99 0b 	call	0x1732	; 0x1732 <__fixsfsi>
    10bc:	9b 01       	movw	r18, r22
    10be:	ac 01       	movw	r20, r24
    10c0:	b9 01       	movw	r22, r18
    10c2:	ca 01       	movw	r24, r20
    10c4:	1f 91       	pop	r17
    10c6:	0f 91       	pop	r16
    10c8:	ff 90       	pop	r15
    10ca:	ef 90       	pop	r14
    10cc:	08 95       	ret

000010ce <_fpadd_parts>:
    10ce:	a0 e0       	ldi	r26, 0x00	; 0
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	ed e6       	ldi	r30, 0x6D	; 109
    10d4:	f8 e0       	ldi	r31, 0x08	; 8
    10d6:	0c 94 a6 0d 	jmp	0x1b4c	; 0x1b4c <__prologue_saves__+0x8>
    10da:	fc 01       	movw	r30, r24
    10dc:	ea 01       	movw	r28, r20
    10de:	80 81       	ld	r24, Z
    10e0:	82 30       	cpi	r24, 0x02	; 2
    10e2:	08 f4       	brcc	.+2      	; 0x10e6 <_fpadd_parts+0x18>
    10e4:	38 c1       	rjmp	.+624    	; 0x1356 <_fpadd_parts+0x288>
    10e6:	db 01       	movw	r26, r22
    10e8:	9c 91       	ld	r25, X
    10ea:	92 30       	cpi	r25, 0x02	; 2
    10ec:	08 f4       	brcc	.+2      	; 0x10f0 <_fpadd_parts+0x22>
    10ee:	30 c1       	rjmp	.+608    	; 0x1350 <_fpadd_parts+0x282>
    10f0:	84 30       	cpi	r24, 0x04	; 4
    10f2:	59 f4       	brne	.+22     	; 0x110a <_fpadd_parts+0x3c>
    10f4:	94 30       	cpi	r25, 0x04	; 4
    10f6:	09 f0       	breq	.+2      	; 0x10fa <_fpadd_parts+0x2c>
    10f8:	2e c1       	rjmp	.+604    	; 0x1356 <_fpadd_parts+0x288>
    10fa:	91 81       	ldd	r25, Z+1	; 0x01
    10fc:	11 96       	adiw	r26, 0x01	; 1
    10fe:	8c 91       	ld	r24, X
    1100:	11 97       	sbiw	r26, 0x01	; 1
    1102:	98 17       	cp	r25, r24
    1104:	09 f0       	breq	.+2      	; 0x1108 <_fpadd_parts+0x3a>
    1106:	21 c1       	rjmp	.+578    	; 0x134a <_fpadd_parts+0x27c>
    1108:	26 c1       	rjmp	.+588    	; 0x1356 <_fpadd_parts+0x288>
    110a:	94 30       	cpi	r25, 0x04	; 4
    110c:	09 f4       	brne	.+2      	; 0x1110 <_fpadd_parts+0x42>
    110e:	20 c1       	rjmp	.+576    	; 0x1350 <_fpadd_parts+0x282>
    1110:	92 30       	cpi	r25, 0x02	; 2
    1112:	b1 f4       	brne	.+44     	; 0x1140 <_fpadd_parts+0x72>
    1114:	82 30       	cpi	r24, 0x02	; 2
    1116:	09 f0       	breq	.+2      	; 0x111a <_fpadd_parts+0x4c>
    1118:	1e c1       	rjmp	.+572    	; 0x1356 <_fpadd_parts+0x288>
    111a:	ca 01       	movw	r24, r20
    111c:	af 01       	movw	r20, r30
    111e:	28 e0       	ldi	r18, 0x08	; 8
    1120:	da 01       	movw	r26, r20
    1122:	0d 90       	ld	r0, X+
    1124:	ad 01       	movw	r20, r26
    1126:	dc 01       	movw	r26, r24
    1128:	0d 92       	st	X+, r0
    112a:	cd 01       	movw	r24, r26
    112c:	21 50       	subi	r18, 0x01	; 1
    112e:	c1 f7       	brne	.-16     	; 0x1120 <_fpadd_parts+0x52>
    1130:	db 01       	movw	r26, r22
    1132:	11 96       	adiw	r26, 0x01	; 1
    1134:	8c 91       	ld	r24, X
    1136:	11 97       	sbiw	r26, 0x01	; 1
    1138:	91 81       	ldd	r25, Z+1	; 0x01
    113a:	89 23       	and	r24, r25
    113c:	89 83       	std	Y+1, r24	; 0x01
    113e:	0a c1       	rjmp	.+532    	; 0x1354 <_fpadd_parts+0x286>
    1140:	82 30       	cpi	r24, 0x02	; 2
    1142:	09 f4       	brne	.+2      	; 0x1146 <_fpadd_parts+0x78>
    1144:	05 c1       	rjmp	.+522    	; 0x1350 <_fpadd_parts+0x282>
    1146:	c2 80       	ldd	r12, Z+2	; 0x02
    1148:	d3 80       	ldd	r13, Z+3	; 0x03
    114a:	db 01       	movw	r26, r22
    114c:	12 96       	adiw	r26, 0x02	; 2
    114e:	6d 90       	ld	r6, X+
    1150:	7c 90       	ld	r7, X
    1152:	13 97       	sbiw	r26, 0x03	; 3
    1154:	24 81       	ldd	r18, Z+4	; 0x04
    1156:	35 81       	ldd	r19, Z+5	; 0x05
    1158:	46 81       	ldd	r20, Z+6	; 0x06
    115a:	57 81       	ldd	r21, Z+7	; 0x07
    115c:	14 96       	adiw	r26, 0x04	; 4
    115e:	ed 90       	ld	r14, X+
    1160:	fd 90       	ld	r15, X+
    1162:	0d 91       	ld	r16, X+
    1164:	1c 91       	ld	r17, X
    1166:	17 97       	sbiw	r26, 0x07	; 7
    1168:	c6 01       	movw	r24, r12
    116a:	86 19       	sub	r24, r6
    116c:	97 09       	sbc	r25, r7
    116e:	5c 01       	movw	r10, r24
    1170:	97 ff       	sbrs	r25, 7
    1172:	04 c0       	rjmp	.+8      	; 0x117c <_fpadd_parts+0xae>
    1174:	aa 24       	eor	r10, r10
    1176:	bb 24       	eor	r11, r11
    1178:	a8 1a       	sub	r10, r24
    117a:	b9 0a       	sbc	r11, r25
    117c:	b0 e2       	ldi	r27, 0x20	; 32
    117e:	ab 16       	cp	r10, r27
    1180:	b1 04       	cpc	r11, r1
    1182:	0c f0       	brlt	.+2      	; 0x1186 <_fpadd_parts+0xb8>
    1184:	61 c0       	rjmp	.+194    	; 0x1248 <_fpadd_parts+0x17a>
    1186:	18 16       	cp	r1, r24
    1188:	19 06       	cpc	r1, r25
    118a:	6c f5       	brge	.+90     	; 0x11e6 <_fpadd_parts+0x118>
    118c:	37 01       	movw	r6, r14
    118e:	48 01       	movw	r8, r16
    1190:	0a 2c       	mov	r0, r10
    1192:	04 c0       	rjmp	.+8      	; 0x119c <_fpadd_parts+0xce>
    1194:	96 94       	lsr	r9
    1196:	87 94       	ror	r8
    1198:	77 94       	ror	r7
    119a:	67 94       	ror	r6
    119c:	0a 94       	dec	r0
    119e:	d2 f7       	brpl	.-12     	; 0x1194 <_fpadd_parts+0xc6>
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	a0 e0       	ldi	r26, 0x00	; 0
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	0a 2c       	mov	r0, r10
    11aa:	04 c0       	rjmp	.+8      	; 0x11b4 <_fpadd_parts+0xe6>
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	aa 1f       	adc	r26, r26
    11b2:	bb 1f       	adc	r27, r27
    11b4:	0a 94       	dec	r0
    11b6:	d2 f7       	brpl	.-12     	; 0x11ac <_fpadd_parts+0xde>
    11b8:	01 97       	sbiw	r24, 0x01	; 1
    11ba:	a1 09       	sbc	r26, r1
    11bc:	b1 09       	sbc	r27, r1
    11be:	8e 21       	and	r24, r14
    11c0:	9f 21       	and	r25, r15
    11c2:	a0 23       	and	r26, r16
    11c4:	b1 23       	and	r27, r17
    11c6:	ee 24       	eor	r14, r14
    11c8:	ff 24       	eor	r15, r15
    11ca:	87 01       	movw	r16, r14
    11cc:	e3 94       	inc	r14
    11ce:	00 97       	sbiw	r24, 0x00	; 0
    11d0:	a1 05       	cpc	r26, r1
    11d2:	b1 05       	cpc	r27, r1
    11d4:	19 f4       	brne	.+6      	; 0x11dc <_fpadd_parts+0x10e>
    11d6:	ee 24       	eor	r14, r14
    11d8:	ff 24       	eor	r15, r15
    11da:	87 01       	movw	r16, r14
    11dc:	e6 28       	or	r14, r6
    11de:	f7 28       	or	r15, r7
    11e0:	08 29       	or	r16, r8
    11e2:	19 29       	or	r17, r9
    11e4:	3c c0       	rjmp	.+120    	; 0x125e <_fpadd_parts+0x190>
    11e6:	00 97       	sbiw	r24, 0x00	; 0
    11e8:	d1 f1       	breq	.+116    	; 0x125e <_fpadd_parts+0x190>
    11ea:	ca 0c       	add	r12, r10
    11ec:	db 1c       	adc	r13, r11
    11ee:	39 01       	movw	r6, r18
    11f0:	4a 01       	movw	r8, r20
    11f2:	0a 2c       	mov	r0, r10
    11f4:	04 c0       	rjmp	.+8      	; 0x11fe <_fpadd_parts+0x130>
    11f6:	96 94       	lsr	r9
    11f8:	87 94       	ror	r8
    11fa:	77 94       	ror	r7
    11fc:	67 94       	ror	r6
    11fe:	0a 94       	dec	r0
    1200:	d2 f7       	brpl	.-12     	; 0x11f6 <_fpadd_parts+0x128>
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	a0 e0       	ldi	r26, 0x00	; 0
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	0a 2c       	mov	r0, r10
    120c:	04 c0       	rjmp	.+8      	; 0x1216 <_fpadd_parts+0x148>
    120e:	88 0f       	add	r24, r24
    1210:	99 1f       	adc	r25, r25
    1212:	aa 1f       	adc	r26, r26
    1214:	bb 1f       	adc	r27, r27
    1216:	0a 94       	dec	r0
    1218:	d2 f7       	brpl	.-12     	; 0x120e <_fpadd_parts+0x140>
    121a:	01 97       	sbiw	r24, 0x01	; 1
    121c:	a1 09       	sbc	r26, r1
    121e:	b1 09       	sbc	r27, r1
    1220:	82 23       	and	r24, r18
    1222:	93 23       	and	r25, r19
    1224:	a4 23       	and	r26, r20
    1226:	b5 23       	and	r27, r21
    1228:	21 e0       	ldi	r18, 0x01	; 1
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	40 e0       	ldi	r20, 0x00	; 0
    122e:	50 e0       	ldi	r21, 0x00	; 0
    1230:	00 97       	sbiw	r24, 0x00	; 0
    1232:	a1 05       	cpc	r26, r1
    1234:	b1 05       	cpc	r27, r1
    1236:	19 f4       	brne	.+6      	; 0x123e <_fpadd_parts+0x170>
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	a9 01       	movw	r20, r18
    123e:	26 29       	or	r18, r6
    1240:	37 29       	or	r19, r7
    1242:	48 29       	or	r20, r8
    1244:	59 29       	or	r21, r9
    1246:	0b c0       	rjmp	.+22     	; 0x125e <_fpadd_parts+0x190>
    1248:	6c 14       	cp	r6, r12
    124a:	7d 04       	cpc	r7, r13
    124c:	24 f4       	brge	.+8      	; 0x1256 <_fpadd_parts+0x188>
    124e:	ee 24       	eor	r14, r14
    1250:	ff 24       	eor	r15, r15
    1252:	87 01       	movw	r16, r14
    1254:	04 c0       	rjmp	.+8      	; 0x125e <_fpadd_parts+0x190>
    1256:	63 01       	movw	r12, r6
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	a9 01       	movw	r20, r18
    125e:	81 81       	ldd	r24, Z+1	; 0x01
    1260:	fb 01       	movw	r30, r22
    1262:	91 81       	ldd	r25, Z+1	; 0x01
    1264:	89 17       	cp	r24, r25
    1266:	09 f4       	brne	.+2      	; 0x126a <_fpadd_parts+0x19c>
    1268:	45 c0       	rjmp	.+138    	; 0x12f4 <_fpadd_parts+0x226>
    126a:	88 23       	and	r24, r24
    126c:	49 f0       	breq	.+18     	; 0x1280 <_fpadd_parts+0x1b2>
    126e:	d8 01       	movw	r26, r16
    1270:	c7 01       	movw	r24, r14
    1272:	82 1b       	sub	r24, r18
    1274:	93 0b       	sbc	r25, r19
    1276:	a4 0b       	sbc	r26, r20
    1278:	b5 0b       	sbc	r27, r21
    127a:	9c 01       	movw	r18, r24
    127c:	ad 01       	movw	r20, r26
    127e:	04 c0       	rjmp	.+8      	; 0x1288 <_fpadd_parts+0x1ba>
    1280:	2e 19       	sub	r18, r14
    1282:	3f 09       	sbc	r19, r15
    1284:	40 0b       	sbc	r20, r16
    1286:	51 0b       	sbc	r21, r17
    1288:	57 fd       	sbrc	r21, 7
    128a:	04 c0       	rjmp	.+8      	; 0x1294 <_fpadd_parts+0x1c6>
    128c:	19 82       	std	Y+1, r1	; 0x01
    128e:	db 82       	std	Y+3, r13	; 0x03
    1290:	ca 82       	std	Y+2, r12	; 0x02
    1292:	0b c0       	rjmp	.+22     	; 0x12aa <_fpadd_parts+0x1dc>
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	89 83       	std	Y+1, r24	; 0x01
    1298:	db 82       	std	Y+3, r13	; 0x03
    129a:	ca 82       	std	Y+2, r12	; 0x02
    129c:	50 95       	com	r21
    129e:	40 95       	com	r20
    12a0:	30 95       	com	r19
    12a2:	21 95       	neg	r18
    12a4:	3f 4f       	sbci	r19, 0xFF	; 255
    12a6:	4f 4f       	sbci	r20, 0xFF	; 255
    12a8:	5f 4f       	sbci	r21, 0xFF	; 255
    12aa:	2c 83       	std	Y+4, r18	; 0x04
    12ac:	3d 83       	std	Y+5, r19	; 0x05
    12ae:	4e 83       	std	Y+6, r20	; 0x06
    12b0:	5f 83       	std	Y+7, r21	; 0x07
    12b2:	0d c0       	rjmp	.+26     	; 0x12ce <_fpadd_parts+0x200>
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	aa 1f       	adc	r26, r26
    12ba:	bb 1f       	adc	r27, r27
    12bc:	8c 83       	std	Y+4, r24	; 0x04
    12be:	9d 83       	std	Y+5, r25	; 0x05
    12c0:	ae 83       	std	Y+6, r26	; 0x06
    12c2:	bf 83       	std	Y+7, r27	; 0x07
    12c4:	8a 81       	ldd	r24, Y+2	; 0x02
    12c6:	9b 81       	ldd	r25, Y+3	; 0x03
    12c8:	01 97       	sbiw	r24, 0x01	; 1
    12ca:	9b 83       	std	Y+3, r25	; 0x03
    12cc:	8a 83       	std	Y+2, r24	; 0x02
    12ce:	8c 81       	ldd	r24, Y+4	; 0x04
    12d0:	9d 81       	ldd	r25, Y+5	; 0x05
    12d2:	ae 81       	ldd	r26, Y+6	; 0x06
    12d4:	bf 81       	ldd	r27, Y+7	; 0x07
    12d6:	9c 01       	movw	r18, r24
    12d8:	ad 01       	movw	r20, r26
    12da:	21 50       	subi	r18, 0x01	; 1
    12dc:	30 40       	sbci	r19, 0x00	; 0
    12de:	40 40       	sbci	r20, 0x00	; 0
    12e0:	50 40       	sbci	r21, 0x00	; 0
    12e2:	2f 3f       	cpi	r18, 0xFF	; 255
    12e4:	ef ef       	ldi	r30, 0xFF	; 255
    12e6:	3e 07       	cpc	r19, r30
    12e8:	ef ef       	ldi	r30, 0xFF	; 255
    12ea:	4e 07       	cpc	r20, r30
    12ec:	ef e3       	ldi	r30, 0x3F	; 63
    12ee:	5e 07       	cpc	r21, r30
    12f0:	08 f3       	brcs	.-62     	; 0x12b4 <_fpadd_parts+0x1e6>
    12f2:	0b c0       	rjmp	.+22     	; 0x130a <_fpadd_parts+0x23c>
    12f4:	89 83       	std	Y+1, r24	; 0x01
    12f6:	db 82       	std	Y+3, r13	; 0x03
    12f8:	ca 82       	std	Y+2, r12	; 0x02
    12fa:	2e 0d       	add	r18, r14
    12fc:	3f 1d       	adc	r19, r15
    12fe:	40 1f       	adc	r20, r16
    1300:	51 1f       	adc	r21, r17
    1302:	2c 83       	std	Y+4, r18	; 0x04
    1304:	3d 83       	std	Y+5, r19	; 0x05
    1306:	4e 83       	std	Y+6, r20	; 0x06
    1308:	5f 83       	std	Y+7, r21	; 0x07
    130a:	83 e0       	ldi	r24, 0x03	; 3
    130c:	88 83       	st	Y, r24
    130e:	2c 81       	ldd	r18, Y+4	; 0x04
    1310:	3d 81       	ldd	r19, Y+5	; 0x05
    1312:	4e 81       	ldd	r20, Y+6	; 0x06
    1314:	5f 81       	ldd	r21, Y+7	; 0x07
    1316:	57 ff       	sbrs	r21, 7
    1318:	1d c0       	rjmp	.+58     	; 0x1354 <_fpadd_parts+0x286>
    131a:	da 01       	movw	r26, r20
    131c:	c9 01       	movw	r24, r18
    131e:	81 70       	andi	r24, 0x01	; 1
    1320:	90 70       	andi	r25, 0x00	; 0
    1322:	a0 70       	andi	r26, 0x00	; 0
    1324:	b0 70       	andi	r27, 0x00	; 0
    1326:	56 95       	lsr	r21
    1328:	47 95       	ror	r20
    132a:	37 95       	ror	r19
    132c:	27 95       	ror	r18
    132e:	82 2b       	or	r24, r18
    1330:	93 2b       	or	r25, r19
    1332:	a4 2b       	or	r26, r20
    1334:	b5 2b       	or	r27, r21
    1336:	8c 83       	std	Y+4, r24	; 0x04
    1338:	9d 83       	std	Y+5, r25	; 0x05
    133a:	ae 83       	std	Y+6, r26	; 0x06
    133c:	bf 83       	std	Y+7, r27	; 0x07
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	9b 81       	ldd	r25, Y+3	; 0x03
    1342:	01 96       	adiw	r24, 0x01	; 1
    1344:	9b 83       	std	Y+3, r25	; 0x03
    1346:	8a 83       	std	Y+2, r24	; 0x02
    1348:	05 c0       	rjmp	.+10     	; 0x1354 <_fpadd_parts+0x286>
    134a:	ea e1       	ldi	r30, 0x1A	; 26
    134c:	f1 e0       	ldi	r31, 0x01	; 1
    134e:	03 c0       	rjmp	.+6      	; 0x1356 <_fpadd_parts+0x288>
    1350:	fb 01       	movw	r30, r22
    1352:	01 c0       	rjmp	.+2      	; 0x1356 <_fpadd_parts+0x288>
    1354:	fe 01       	movw	r30, r28
    1356:	cf 01       	movw	r24, r30
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62
    135c:	ee e0       	ldi	r30, 0x0E	; 14
    135e:	0c 94 c2 0d 	jmp	0x1b84	; 0x1b84 <__epilogue_restores__+0x8>

00001362 <__addsf3>:
    1362:	a0 e2       	ldi	r26, 0x20	; 32
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	e7 eb       	ldi	r30, 0xB7	; 183
    1368:	f9 e0       	ldi	r31, 0x09	; 9
    136a:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__prologue_saves__+0x18>
    136e:	69 83       	std	Y+1, r22	; 0x01
    1370:	7a 83       	std	Y+2, r23	; 0x02
    1372:	8b 83       	std	Y+3, r24	; 0x03
    1374:	9c 83       	std	Y+4, r25	; 0x04
    1376:	2d 83       	std	Y+5, r18	; 0x05
    1378:	3e 83       	std	Y+6, r19	; 0x06
    137a:	4f 83       	std	Y+7, r20	; 0x07
    137c:	58 87       	std	Y+8, r21	; 0x08
    137e:	89 e0       	ldi	r24, 0x09	; 9
    1380:	e8 2e       	mov	r14, r24
    1382:	f1 2c       	mov	r15, r1
    1384:	ec 0e       	add	r14, r28
    1386:	fd 1e       	adc	r15, r29
    1388:	ce 01       	movw	r24, r28
    138a:	01 96       	adiw	r24, 0x01	; 1
    138c:	b7 01       	movw	r22, r14
    138e:	0e 94 b9 0c 	call	0x1972	; 0x1972 <__unpack_f>
    1392:	8e 01       	movw	r16, r28
    1394:	0f 5e       	subi	r16, 0xEF	; 239
    1396:	1f 4f       	sbci	r17, 0xFF	; 255
    1398:	ce 01       	movw	r24, r28
    139a:	05 96       	adiw	r24, 0x05	; 5
    139c:	b8 01       	movw	r22, r16
    139e:	0e 94 b9 0c 	call	0x1972	; 0x1972 <__unpack_f>
    13a2:	c7 01       	movw	r24, r14
    13a4:	b8 01       	movw	r22, r16
    13a6:	ae 01       	movw	r20, r28
    13a8:	47 5e       	subi	r20, 0xE7	; 231
    13aa:	5f 4f       	sbci	r21, 0xFF	; 255
    13ac:	0e 94 67 08 	call	0x10ce	; 0x10ce <_fpadd_parts>
    13b0:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__pack_f>
    13b4:	a0 96       	adiw	r28, 0x20	; 32
    13b6:	e6 e0       	ldi	r30, 0x06	; 6
    13b8:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__epilogue_restores__+0x18>

000013bc <__subsf3>:
    13bc:	a0 e2       	ldi	r26, 0x20	; 32
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	e4 ee       	ldi	r30, 0xE4	; 228
    13c2:	f9 e0       	ldi	r31, 0x09	; 9
    13c4:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__prologue_saves__+0x18>
    13c8:	69 83       	std	Y+1, r22	; 0x01
    13ca:	7a 83       	std	Y+2, r23	; 0x02
    13cc:	8b 83       	std	Y+3, r24	; 0x03
    13ce:	9c 83       	std	Y+4, r25	; 0x04
    13d0:	2d 83       	std	Y+5, r18	; 0x05
    13d2:	3e 83       	std	Y+6, r19	; 0x06
    13d4:	4f 83       	std	Y+7, r20	; 0x07
    13d6:	58 87       	std	Y+8, r21	; 0x08
    13d8:	8e 01       	movw	r16, r28
    13da:	07 5f       	subi	r16, 0xF7	; 247
    13dc:	1f 4f       	sbci	r17, 0xFF	; 255
    13de:	ce 01       	movw	r24, r28
    13e0:	01 96       	adiw	r24, 0x01	; 1
    13e2:	b8 01       	movw	r22, r16
    13e4:	0e 94 b9 0c 	call	0x1972	; 0x1972 <__unpack_f>
    13e8:	91 e1       	ldi	r25, 0x11	; 17
    13ea:	e9 2e       	mov	r14, r25
    13ec:	f1 2c       	mov	r15, r1
    13ee:	ec 0e       	add	r14, r28
    13f0:	fd 1e       	adc	r15, r29
    13f2:	ce 01       	movw	r24, r28
    13f4:	05 96       	adiw	r24, 0x05	; 5
    13f6:	b7 01       	movw	r22, r14
    13f8:	0e 94 b9 0c 	call	0x1972	; 0x1972 <__unpack_f>
    13fc:	8a 89       	ldd	r24, Y+18	; 0x12
    13fe:	91 e0       	ldi	r25, 0x01	; 1
    1400:	89 27       	eor	r24, r25
    1402:	8a 8b       	std	Y+18, r24	; 0x12
    1404:	c8 01       	movw	r24, r16
    1406:	b7 01       	movw	r22, r14
    1408:	ae 01       	movw	r20, r28
    140a:	47 5e       	subi	r20, 0xE7	; 231
    140c:	5f 4f       	sbci	r21, 0xFF	; 255
    140e:	0e 94 67 08 	call	0x10ce	; 0x10ce <_fpadd_parts>
    1412:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__pack_f>
    1416:	a0 96       	adiw	r28, 0x20	; 32
    1418:	e6 e0       	ldi	r30, 0x06	; 6
    141a:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__epilogue_restores__+0x18>

0000141e <__mulsf3>:
    141e:	a0 e2       	ldi	r26, 0x20	; 32
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	e5 e1       	ldi	r30, 0x15	; 21
    1424:	fa e0       	ldi	r31, 0x0A	; 10
    1426:	0c 94 a2 0d 	jmp	0x1b44	; 0x1b44 <__prologue_saves__>
    142a:	69 83       	std	Y+1, r22	; 0x01
    142c:	7a 83       	std	Y+2, r23	; 0x02
    142e:	8b 83       	std	Y+3, r24	; 0x03
    1430:	9c 83       	std	Y+4, r25	; 0x04
    1432:	2d 83       	std	Y+5, r18	; 0x05
    1434:	3e 83       	std	Y+6, r19	; 0x06
    1436:	4f 83       	std	Y+7, r20	; 0x07
    1438:	58 87       	std	Y+8, r21	; 0x08
    143a:	ce 01       	movw	r24, r28
    143c:	01 96       	adiw	r24, 0x01	; 1
    143e:	be 01       	movw	r22, r28
    1440:	67 5f       	subi	r22, 0xF7	; 247
    1442:	7f 4f       	sbci	r23, 0xFF	; 255
    1444:	0e 94 b9 0c 	call	0x1972	; 0x1972 <__unpack_f>
    1448:	ce 01       	movw	r24, r28
    144a:	05 96       	adiw	r24, 0x05	; 5
    144c:	be 01       	movw	r22, r28
    144e:	6f 5e       	subi	r22, 0xEF	; 239
    1450:	7f 4f       	sbci	r23, 0xFF	; 255
    1452:	0e 94 b9 0c 	call	0x1972	; 0x1972 <__unpack_f>
    1456:	99 85       	ldd	r25, Y+9	; 0x09
    1458:	92 30       	cpi	r25, 0x02	; 2
    145a:	78 f0       	brcs	.+30     	; 0x147a <__mulsf3+0x5c>
    145c:	89 89       	ldd	r24, Y+17	; 0x11
    145e:	82 30       	cpi	r24, 0x02	; 2
    1460:	c0 f0       	brcs	.+48     	; 0x1492 <__mulsf3+0x74>
    1462:	94 30       	cpi	r25, 0x04	; 4
    1464:	19 f4       	brne	.+6      	; 0x146c <__mulsf3+0x4e>
    1466:	82 30       	cpi	r24, 0x02	; 2
    1468:	41 f4       	brne	.+16     	; 0x147a <__mulsf3+0x5c>
    146a:	cb c0       	rjmp	.+406    	; 0x1602 <__mulsf3+0x1e4>
    146c:	84 30       	cpi	r24, 0x04	; 4
    146e:	19 f4       	brne	.+6      	; 0x1476 <__mulsf3+0x58>
    1470:	92 30       	cpi	r25, 0x02	; 2
    1472:	79 f4       	brne	.+30     	; 0x1492 <__mulsf3+0x74>
    1474:	c6 c0       	rjmp	.+396    	; 0x1602 <__mulsf3+0x1e4>
    1476:	92 30       	cpi	r25, 0x02	; 2
    1478:	51 f4       	brne	.+20     	; 0x148e <__mulsf3+0x70>
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	2a 85       	ldd	r18, Y+10	; 0x0a
    147e:	9a 89       	ldd	r25, Y+18	; 0x12
    1480:	29 17       	cp	r18, r25
    1482:	09 f4       	brne	.+2      	; 0x1486 <__mulsf3+0x68>
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	8a 87       	std	Y+10, r24	; 0x0a
    1488:	ce 01       	movw	r24, r28
    148a:	09 96       	adiw	r24, 0x09	; 9
    148c:	bc c0       	rjmp	.+376    	; 0x1606 <__mulsf3+0x1e8>
    148e:	82 30       	cpi	r24, 0x02	; 2
    1490:	51 f4       	brne	.+20     	; 0x14a6 <__mulsf3+0x88>
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	2a 85       	ldd	r18, Y+10	; 0x0a
    1496:	9a 89       	ldd	r25, Y+18	; 0x12
    1498:	29 17       	cp	r18, r25
    149a:	09 f4       	brne	.+2      	; 0x149e <__mulsf3+0x80>
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	8a 8b       	std	Y+18, r24	; 0x12
    14a0:	ce 01       	movw	r24, r28
    14a2:	41 96       	adiw	r24, 0x11	; 17
    14a4:	b0 c0       	rjmp	.+352    	; 0x1606 <__mulsf3+0x1e8>
    14a6:	6d 84       	ldd	r6, Y+13	; 0x0d
    14a8:	7e 84       	ldd	r7, Y+14	; 0x0e
    14aa:	8f 84       	ldd	r8, Y+15	; 0x0f
    14ac:	98 88       	ldd	r9, Y+16	; 0x10
    14ae:	ed 88       	ldd	r14, Y+21	; 0x15
    14b0:	fe 88       	ldd	r15, Y+22	; 0x16
    14b2:	0f 89       	ldd	r16, Y+23	; 0x17
    14b4:	18 8d       	ldd	r17, Y+24	; 0x18
    14b6:	e0 e2       	ldi	r30, 0x20	; 32
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 e0       	ldi	r24, 0x00	; 0
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	dc 01       	movw	r26, r24
    14c0:	aa 24       	eor	r10, r10
    14c2:	bb 24       	eor	r11, r11
    14c4:	65 01       	movw	r12, r10
    14c6:	20 e0       	ldi	r18, 0x00	; 0
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	a9 01       	movw	r20, r18
    14cc:	b3 01       	movw	r22, r6
    14ce:	61 70       	andi	r22, 0x01	; 1
    14d0:	70 70       	andi	r23, 0x00	; 0
    14d2:	61 15       	cp	r22, r1
    14d4:	71 05       	cpc	r23, r1
    14d6:	d1 f0       	breq	.+52     	; 0x150c <__mulsf3+0xee>
    14d8:	2e 0d       	add	r18, r14
    14da:	3f 1d       	adc	r19, r15
    14dc:	40 1f       	adc	r20, r16
    14de:	51 1f       	adc	r21, r17
    14e0:	15 01       	movw	r2, r10
    14e2:	26 01       	movw	r4, r12
    14e4:	28 0e       	add	r2, r24
    14e6:	39 1e       	adc	r3, r25
    14e8:	4a 1e       	adc	r4, r26
    14ea:	5b 1e       	adc	r5, r27
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	a0 e0       	ldi	r26, 0x00	; 0
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	2e 15       	cp	r18, r14
    14f6:	3f 05       	cpc	r19, r15
    14f8:	40 07       	cpc	r20, r16
    14fa:	51 07       	cpc	r21, r17
    14fc:	18 f0       	brcs	.+6      	; 0x1504 <__mulsf3+0xe6>
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	dc 01       	movw	r26, r24
    1504:	82 0d       	add	r24, r2
    1506:	93 1d       	adc	r25, r3
    1508:	a4 1d       	adc	r26, r4
    150a:	b5 1d       	adc	r27, r5
    150c:	aa 0c       	add	r10, r10
    150e:	bb 1c       	adc	r11, r11
    1510:	cc 1c       	adc	r12, r12
    1512:	dd 1c       	adc	r13, r13
    1514:	17 ff       	sbrs	r17, 7
    1516:	09 c0       	rjmp	.+18     	; 0x152a <__mulsf3+0x10c>
    1518:	61 e0       	ldi	r22, 0x01	; 1
    151a:	26 2e       	mov	r2, r22
    151c:	31 2c       	mov	r3, r1
    151e:	41 2c       	mov	r4, r1
    1520:	51 2c       	mov	r5, r1
    1522:	a2 28       	or	r10, r2
    1524:	b3 28       	or	r11, r3
    1526:	c4 28       	or	r12, r4
    1528:	d5 28       	or	r13, r5
    152a:	31 97       	sbiw	r30, 0x01	; 1
    152c:	49 f0       	breq	.+18     	; 0x1540 <__mulsf3+0x122>
    152e:	ee 0c       	add	r14, r14
    1530:	ff 1c       	adc	r15, r15
    1532:	00 1f       	adc	r16, r16
    1534:	11 1f       	adc	r17, r17
    1536:	96 94       	lsr	r9
    1538:	87 94       	ror	r8
    153a:	77 94       	ror	r7
    153c:	67 94       	ror	r6
    153e:	c6 cf       	rjmp	.-116    	; 0x14cc <__mulsf3+0xae>
    1540:	6b 89       	ldd	r22, Y+19	; 0x13
    1542:	7c 89       	ldd	r23, Y+20	; 0x14
    1544:	eb 85       	ldd	r30, Y+11	; 0x0b
    1546:	fc 85       	ldd	r31, Y+12	; 0x0c
    1548:	6e 0f       	add	r22, r30
    154a:	7f 1f       	adc	r23, r31
    154c:	6e 5f       	subi	r22, 0xFE	; 254
    154e:	7f 4f       	sbci	r23, 0xFF	; 255
    1550:	7c 8f       	std	Y+28, r23	; 0x1c
    1552:	6b 8f       	std	Y+27, r22	; 0x1b
    1554:	61 e0       	ldi	r22, 0x01	; 1
    1556:	ea 85       	ldd	r30, Y+10	; 0x0a
    1558:	7a 89       	ldd	r23, Y+18	; 0x12
    155a:	e7 17       	cp	r30, r23
    155c:	09 f4       	brne	.+2      	; 0x1560 <__mulsf3+0x142>
    155e:	60 e0       	ldi	r22, 0x00	; 0
    1560:	6a 8f       	std	Y+26, r22	; 0x1a
    1562:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1564:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1566:	10 c0       	rjmp	.+32     	; 0x1588 <__mulsf3+0x16a>
    1568:	fc 01       	movw	r30, r24
    156a:	e1 70       	andi	r30, 0x01	; 1
    156c:	f0 70       	andi	r31, 0x00	; 0
    156e:	30 97       	sbiw	r30, 0x00	; 0
    1570:	29 f0       	breq	.+10     	; 0x157c <__mulsf3+0x15e>
    1572:	56 95       	lsr	r21
    1574:	47 95       	ror	r20
    1576:	37 95       	ror	r19
    1578:	27 95       	ror	r18
    157a:	50 68       	ori	r21, 0x80	; 128
    157c:	b6 95       	lsr	r27
    157e:	a7 95       	ror	r26
    1580:	97 95       	ror	r25
    1582:	87 95       	ror	r24
    1584:	6f 5f       	subi	r22, 0xFF	; 255
    1586:	7f 4f       	sbci	r23, 0xFF	; 255
    1588:	b7 fd       	sbrc	r27, 7
    158a:	ee cf       	rjmp	.-36     	; 0x1568 <__mulsf3+0x14a>
    158c:	0c c0       	rjmp	.+24     	; 0x15a6 <__mulsf3+0x188>
    158e:	88 0f       	add	r24, r24
    1590:	99 1f       	adc	r25, r25
    1592:	aa 1f       	adc	r26, r26
    1594:	bb 1f       	adc	r27, r27
    1596:	57 fd       	sbrc	r21, 7
    1598:	81 60       	ori	r24, 0x01	; 1
    159a:	22 0f       	add	r18, r18
    159c:	33 1f       	adc	r19, r19
    159e:	44 1f       	adc	r20, r20
    15a0:	55 1f       	adc	r21, r21
    15a2:	61 50       	subi	r22, 0x01	; 1
    15a4:	70 40       	sbci	r23, 0x00	; 0
    15a6:	80 30       	cpi	r24, 0x00	; 0
    15a8:	e0 e0       	ldi	r30, 0x00	; 0
    15aa:	9e 07       	cpc	r25, r30
    15ac:	e0 e0       	ldi	r30, 0x00	; 0
    15ae:	ae 07       	cpc	r26, r30
    15b0:	e0 e4       	ldi	r30, 0x40	; 64
    15b2:	be 07       	cpc	r27, r30
    15b4:	60 f3       	brcs	.-40     	; 0x158e <__mulsf3+0x170>
    15b6:	6b 8f       	std	Y+27, r22	; 0x1b
    15b8:	7c 8f       	std	Y+28, r23	; 0x1c
    15ba:	6f e7       	ldi	r22, 0x7F	; 127
    15bc:	e6 2e       	mov	r14, r22
    15be:	f1 2c       	mov	r15, r1
    15c0:	01 2d       	mov	r16, r1
    15c2:	11 2d       	mov	r17, r1
    15c4:	e8 22       	and	r14, r24
    15c6:	f9 22       	and	r15, r25
    15c8:	0a 23       	and	r16, r26
    15ca:	1b 23       	and	r17, r27
    15cc:	60 e4       	ldi	r22, 0x40	; 64
    15ce:	e6 16       	cp	r14, r22
    15d0:	f1 04       	cpc	r15, r1
    15d2:	01 05       	cpc	r16, r1
    15d4:	11 05       	cpc	r17, r1
    15d6:	61 f4       	brne	.+24     	; 0x15f0 <__mulsf3+0x1d2>
    15d8:	87 fd       	sbrc	r24, 7
    15da:	0a c0       	rjmp	.+20     	; 0x15f0 <__mulsf3+0x1d2>
    15dc:	21 15       	cp	r18, r1
    15de:	31 05       	cpc	r19, r1
    15e0:	41 05       	cpc	r20, r1
    15e2:	51 05       	cpc	r21, r1
    15e4:	29 f0       	breq	.+10     	; 0x15f0 <__mulsf3+0x1d2>
    15e6:	80 5c       	subi	r24, 0xC0	; 192
    15e8:	9f 4f       	sbci	r25, 0xFF	; 255
    15ea:	af 4f       	sbci	r26, 0xFF	; 255
    15ec:	bf 4f       	sbci	r27, 0xFF	; 255
    15ee:	80 78       	andi	r24, 0x80	; 128
    15f0:	8d 8f       	std	Y+29, r24	; 0x1d
    15f2:	9e 8f       	std	Y+30, r25	; 0x1e
    15f4:	af 8f       	std	Y+31, r26	; 0x1f
    15f6:	b8 a3       	std	Y+32, r27	; 0x20
    15f8:	83 e0       	ldi	r24, 0x03	; 3
    15fa:	89 8f       	std	Y+25, r24	; 0x19
    15fc:	ce 01       	movw	r24, r28
    15fe:	49 96       	adiw	r24, 0x19	; 25
    1600:	02 c0       	rjmp	.+4      	; 0x1606 <__mulsf3+0x1e8>
    1602:	8a e1       	ldi	r24, 0x1A	; 26
    1604:	91 e0       	ldi	r25, 0x01	; 1
    1606:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__pack_f>
    160a:	a0 96       	adiw	r28, 0x20	; 32
    160c:	e2 e1       	ldi	r30, 0x12	; 18
    160e:	0c 94 be 0d 	jmp	0x1b7c	; 0x1b7c <__epilogue_restores__>

00001612 <__gtsf2>:
    1612:	a8 e1       	ldi	r26, 0x18	; 24
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	ef e0       	ldi	r30, 0x0F	; 15
    1618:	fb e0       	ldi	r31, 0x0B	; 11
    161a:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__prologue_saves__+0x18>
    161e:	69 83       	std	Y+1, r22	; 0x01
    1620:	7a 83       	std	Y+2, r23	; 0x02
    1622:	8b 83       	std	Y+3, r24	; 0x03
    1624:	9c 83       	std	Y+4, r25	; 0x04
    1626:	2d 83       	std	Y+5, r18	; 0x05
    1628:	3e 83       	std	Y+6, r19	; 0x06
    162a:	4f 83       	std	Y+7, r20	; 0x07
    162c:	58 87       	std	Y+8, r21	; 0x08
    162e:	8e 01       	movw	r16, r28
    1630:	07 5f       	subi	r16, 0xF7	; 247
    1632:	1f 4f       	sbci	r17, 0xFF	; 255
    1634:	ce 01       	movw	r24, r28
    1636:	01 96       	adiw	r24, 0x01	; 1
    1638:	b8 01       	movw	r22, r16
    163a:	0e 94 b9 0c 	call	0x1972	; 0x1972 <__unpack_f>
    163e:	81 e1       	ldi	r24, 0x11	; 17
    1640:	e8 2e       	mov	r14, r24
    1642:	f1 2c       	mov	r15, r1
    1644:	ec 0e       	add	r14, r28
    1646:	fd 1e       	adc	r15, r29
    1648:	ce 01       	movw	r24, r28
    164a:	05 96       	adiw	r24, 0x05	; 5
    164c:	b7 01       	movw	r22, r14
    164e:	0e 94 b9 0c 	call	0x1972	; 0x1972 <__unpack_f>
    1652:	89 85       	ldd	r24, Y+9	; 0x09
    1654:	82 30       	cpi	r24, 0x02	; 2
    1656:	40 f0       	brcs	.+16     	; 0x1668 <__gtsf2+0x56>
    1658:	89 89       	ldd	r24, Y+17	; 0x11
    165a:	82 30       	cpi	r24, 0x02	; 2
    165c:	28 f0       	brcs	.+10     	; 0x1668 <__gtsf2+0x56>
    165e:	c8 01       	movw	r24, r16
    1660:	b7 01       	movw	r22, r14
    1662:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__fpcmp_parts_f>
    1666:	01 c0       	rjmp	.+2      	; 0x166a <__gtsf2+0x58>
    1668:	8f ef       	ldi	r24, 0xFF	; 255
    166a:	68 96       	adiw	r28, 0x18	; 24
    166c:	e6 e0       	ldi	r30, 0x06	; 6
    166e:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__epilogue_restores__+0x18>

00001672 <__gesf2>:
    1672:	a8 e1       	ldi	r26, 0x18	; 24
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	ef e3       	ldi	r30, 0x3F	; 63
    1678:	fb e0       	ldi	r31, 0x0B	; 11
    167a:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__prologue_saves__+0x18>
    167e:	69 83       	std	Y+1, r22	; 0x01
    1680:	7a 83       	std	Y+2, r23	; 0x02
    1682:	8b 83       	std	Y+3, r24	; 0x03
    1684:	9c 83       	std	Y+4, r25	; 0x04
    1686:	2d 83       	std	Y+5, r18	; 0x05
    1688:	3e 83       	std	Y+6, r19	; 0x06
    168a:	4f 83       	std	Y+7, r20	; 0x07
    168c:	58 87       	std	Y+8, r21	; 0x08
    168e:	8e 01       	movw	r16, r28
    1690:	07 5f       	subi	r16, 0xF7	; 247
    1692:	1f 4f       	sbci	r17, 0xFF	; 255
    1694:	ce 01       	movw	r24, r28
    1696:	01 96       	adiw	r24, 0x01	; 1
    1698:	b8 01       	movw	r22, r16
    169a:	0e 94 b9 0c 	call	0x1972	; 0x1972 <__unpack_f>
    169e:	81 e1       	ldi	r24, 0x11	; 17
    16a0:	e8 2e       	mov	r14, r24
    16a2:	f1 2c       	mov	r15, r1
    16a4:	ec 0e       	add	r14, r28
    16a6:	fd 1e       	adc	r15, r29
    16a8:	ce 01       	movw	r24, r28
    16aa:	05 96       	adiw	r24, 0x05	; 5
    16ac:	b7 01       	movw	r22, r14
    16ae:	0e 94 b9 0c 	call	0x1972	; 0x1972 <__unpack_f>
    16b2:	89 85       	ldd	r24, Y+9	; 0x09
    16b4:	82 30       	cpi	r24, 0x02	; 2
    16b6:	40 f0       	brcs	.+16     	; 0x16c8 <__gesf2+0x56>
    16b8:	89 89       	ldd	r24, Y+17	; 0x11
    16ba:	82 30       	cpi	r24, 0x02	; 2
    16bc:	28 f0       	brcs	.+10     	; 0x16c8 <__gesf2+0x56>
    16be:	c8 01       	movw	r24, r16
    16c0:	b7 01       	movw	r22, r14
    16c2:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__fpcmp_parts_f>
    16c6:	01 c0       	rjmp	.+2      	; 0x16ca <__gesf2+0x58>
    16c8:	8f ef       	ldi	r24, 0xFF	; 255
    16ca:	68 96       	adiw	r28, 0x18	; 24
    16cc:	e6 e0       	ldi	r30, 0x06	; 6
    16ce:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__epilogue_restores__+0x18>

000016d2 <__ltsf2>:
    16d2:	a8 e1       	ldi	r26, 0x18	; 24
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	ef e6       	ldi	r30, 0x6F	; 111
    16d8:	fb e0       	ldi	r31, 0x0B	; 11
    16da:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__prologue_saves__+0x18>
    16de:	69 83       	std	Y+1, r22	; 0x01
    16e0:	7a 83       	std	Y+2, r23	; 0x02
    16e2:	8b 83       	std	Y+3, r24	; 0x03
    16e4:	9c 83       	std	Y+4, r25	; 0x04
    16e6:	2d 83       	std	Y+5, r18	; 0x05
    16e8:	3e 83       	std	Y+6, r19	; 0x06
    16ea:	4f 83       	std	Y+7, r20	; 0x07
    16ec:	58 87       	std	Y+8, r21	; 0x08
    16ee:	8e 01       	movw	r16, r28
    16f0:	07 5f       	subi	r16, 0xF7	; 247
    16f2:	1f 4f       	sbci	r17, 0xFF	; 255
    16f4:	ce 01       	movw	r24, r28
    16f6:	01 96       	adiw	r24, 0x01	; 1
    16f8:	b8 01       	movw	r22, r16
    16fa:	0e 94 b9 0c 	call	0x1972	; 0x1972 <__unpack_f>
    16fe:	81 e1       	ldi	r24, 0x11	; 17
    1700:	e8 2e       	mov	r14, r24
    1702:	f1 2c       	mov	r15, r1
    1704:	ec 0e       	add	r14, r28
    1706:	fd 1e       	adc	r15, r29
    1708:	ce 01       	movw	r24, r28
    170a:	05 96       	adiw	r24, 0x05	; 5
    170c:	b7 01       	movw	r22, r14
    170e:	0e 94 b9 0c 	call	0x1972	; 0x1972 <__unpack_f>
    1712:	89 85       	ldd	r24, Y+9	; 0x09
    1714:	82 30       	cpi	r24, 0x02	; 2
    1716:	40 f0       	brcs	.+16     	; 0x1728 <__ltsf2+0x56>
    1718:	89 89       	ldd	r24, Y+17	; 0x11
    171a:	82 30       	cpi	r24, 0x02	; 2
    171c:	28 f0       	brcs	.+10     	; 0x1728 <__ltsf2+0x56>
    171e:	c8 01       	movw	r24, r16
    1720:	b7 01       	movw	r22, r14
    1722:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <__fpcmp_parts_f>
    1726:	01 c0       	rjmp	.+2      	; 0x172a <__ltsf2+0x58>
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	68 96       	adiw	r28, 0x18	; 24
    172c:	e6 e0       	ldi	r30, 0x06	; 6
    172e:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__epilogue_restores__+0x18>

00001732 <__fixsfsi>:
    1732:	ac e0       	ldi	r26, 0x0C	; 12
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	ef e9       	ldi	r30, 0x9F	; 159
    1738:	fb e0       	ldi	r31, 0x0B	; 11
    173a:	0c 94 b2 0d 	jmp	0x1b64	; 0x1b64 <__prologue_saves__+0x20>
    173e:	69 83       	std	Y+1, r22	; 0x01
    1740:	7a 83       	std	Y+2, r23	; 0x02
    1742:	8b 83       	std	Y+3, r24	; 0x03
    1744:	9c 83       	std	Y+4, r25	; 0x04
    1746:	ce 01       	movw	r24, r28
    1748:	01 96       	adiw	r24, 0x01	; 1
    174a:	be 01       	movw	r22, r28
    174c:	6b 5f       	subi	r22, 0xFB	; 251
    174e:	7f 4f       	sbci	r23, 0xFF	; 255
    1750:	0e 94 b9 0c 	call	0x1972	; 0x1972 <__unpack_f>
    1754:	8d 81       	ldd	r24, Y+5	; 0x05
    1756:	82 30       	cpi	r24, 0x02	; 2
    1758:	81 f1       	breq	.+96     	; 0x17ba <__fixsfsi+0x88>
    175a:	82 30       	cpi	r24, 0x02	; 2
    175c:	70 f1       	brcs	.+92     	; 0x17ba <__fixsfsi+0x88>
    175e:	84 30       	cpi	r24, 0x04	; 4
    1760:	21 f4       	brne	.+8      	; 0x176a <__fixsfsi+0x38>
    1762:	8e 81       	ldd	r24, Y+6	; 0x06
    1764:	88 23       	and	r24, r24
    1766:	69 f1       	breq	.+90     	; 0x17c2 <__fixsfsi+0x90>
    1768:	0a c0       	rjmp	.+20     	; 0x177e <__fixsfsi+0x4c>
    176a:	2f 81       	ldd	r18, Y+7	; 0x07
    176c:	38 85       	ldd	r19, Y+8	; 0x08
    176e:	37 fd       	sbrc	r19, 7
    1770:	24 c0       	rjmp	.+72     	; 0x17ba <__fixsfsi+0x88>
    1772:	6e 81       	ldd	r22, Y+6	; 0x06
    1774:	2f 31       	cpi	r18, 0x1F	; 31
    1776:	31 05       	cpc	r19, r1
    1778:	3c f0       	brlt	.+14     	; 0x1788 <__fixsfsi+0x56>
    177a:	66 23       	and	r22, r22
    177c:	11 f1       	breq	.+68     	; 0x17c2 <__fixsfsi+0x90>
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	40 e0       	ldi	r20, 0x00	; 0
    1784:	50 e8       	ldi	r21, 0x80	; 128
    1786:	21 c0       	rjmp	.+66     	; 0x17ca <__fixsfsi+0x98>
    1788:	8e e1       	ldi	r24, 0x1E	; 30
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	82 1b       	sub	r24, r18
    178e:	93 0b       	sbc	r25, r19
    1790:	29 85       	ldd	r18, Y+9	; 0x09
    1792:	3a 85       	ldd	r19, Y+10	; 0x0a
    1794:	4b 85       	ldd	r20, Y+11	; 0x0b
    1796:	5c 85       	ldd	r21, Y+12	; 0x0c
    1798:	04 c0       	rjmp	.+8      	; 0x17a2 <__fixsfsi+0x70>
    179a:	56 95       	lsr	r21
    179c:	47 95       	ror	r20
    179e:	37 95       	ror	r19
    17a0:	27 95       	ror	r18
    17a2:	8a 95       	dec	r24
    17a4:	d2 f7       	brpl	.-12     	; 0x179a <__fixsfsi+0x68>
    17a6:	66 23       	and	r22, r22
    17a8:	81 f0       	breq	.+32     	; 0x17ca <__fixsfsi+0x98>
    17aa:	50 95       	com	r21
    17ac:	40 95       	com	r20
    17ae:	30 95       	com	r19
    17b0:	21 95       	neg	r18
    17b2:	3f 4f       	sbci	r19, 0xFF	; 255
    17b4:	4f 4f       	sbci	r20, 0xFF	; 255
    17b6:	5f 4f       	sbci	r21, 0xFF	; 255
    17b8:	08 c0       	rjmp	.+16     	; 0x17ca <__fixsfsi+0x98>
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	a9 01       	movw	r20, r18
    17c0:	04 c0       	rjmp	.+8      	; 0x17ca <__fixsfsi+0x98>
    17c2:	2f ef       	ldi	r18, 0xFF	; 255
    17c4:	3f ef       	ldi	r19, 0xFF	; 255
    17c6:	4f ef       	ldi	r20, 0xFF	; 255
    17c8:	5f e7       	ldi	r21, 0x7F	; 127
    17ca:	b9 01       	movw	r22, r18
    17cc:	ca 01       	movw	r24, r20
    17ce:	2c 96       	adiw	r28, 0x0c	; 12
    17d0:	e2 e0       	ldi	r30, 0x02	; 2
    17d2:	0c 94 ce 0d 	jmp	0x1b9c	; 0x1b9c <__epilogue_restores__+0x20>

000017d6 <__pack_f>:
    17d6:	ef 92       	push	r14
    17d8:	ff 92       	push	r15
    17da:	0f 93       	push	r16
    17dc:	1f 93       	push	r17
    17de:	cf 93       	push	r28
    17e0:	df 93       	push	r29
    17e2:	fc 01       	movw	r30, r24
    17e4:	24 81       	ldd	r18, Z+4	; 0x04
    17e6:	35 81       	ldd	r19, Z+5	; 0x05
    17e8:	46 81       	ldd	r20, Z+6	; 0x06
    17ea:	57 81       	ldd	r21, Z+7	; 0x07
    17ec:	61 81       	ldd	r22, Z+1	; 0x01
    17ee:	80 81       	ld	r24, Z
    17f0:	82 30       	cpi	r24, 0x02	; 2
    17f2:	20 f4       	brcc	.+8      	; 0x17fc <__pack_f+0x26>
    17f4:	40 61       	ori	r20, 0x10	; 16
    17f6:	ef ef       	ldi	r30, 0xFF	; 255
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	a3 c0       	rjmp	.+326    	; 0x1942 <__pack_f+0x16c>
    17fc:	84 30       	cpi	r24, 0x04	; 4
    17fe:	09 f4       	brne	.+2      	; 0x1802 <__pack_f+0x2c>
    1800:	9b c0       	rjmp	.+310    	; 0x1938 <__pack_f+0x162>
    1802:	82 30       	cpi	r24, 0x02	; 2
    1804:	09 f4       	brne	.+2      	; 0x1808 <__pack_f+0x32>
    1806:	92 c0       	rjmp	.+292    	; 0x192c <__pack_f+0x156>
    1808:	21 15       	cp	r18, r1
    180a:	31 05       	cpc	r19, r1
    180c:	41 05       	cpc	r20, r1
    180e:	51 05       	cpc	r21, r1
    1810:	09 f4       	brne	.+2      	; 0x1814 <__pack_f+0x3e>
    1812:	8f c0       	rjmp	.+286    	; 0x1932 <__pack_f+0x15c>
    1814:	02 80       	ldd	r0, Z+2	; 0x02
    1816:	f3 81       	ldd	r31, Z+3	; 0x03
    1818:	e0 2d       	mov	r30, r0
    181a:	8f ef       	ldi	r24, 0xFF	; 255
    181c:	e2 38       	cpi	r30, 0x82	; 130
    181e:	f8 07       	cpc	r31, r24
    1820:	0c f0       	brlt	.+2      	; 0x1824 <__pack_f+0x4e>
    1822:	5a c0       	rjmp	.+180    	; 0x18d8 <__pack_f+0x102>
    1824:	c2 e8       	ldi	r28, 0x82	; 130
    1826:	df ef       	ldi	r29, 0xFF	; 255
    1828:	ce 1b       	sub	r28, r30
    182a:	df 0b       	sbc	r29, r31
    182c:	ca 31       	cpi	r28, 0x1A	; 26
    182e:	d1 05       	cpc	r29, r1
    1830:	6c f5       	brge	.+90     	; 0x188c <__pack_f+0xb6>
    1832:	79 01       	movw	r14, r18
    1834:	8a 01       	movw	r16, r20
    1836:	0c 2e       	mov	r0, r28
    1838:	04 c0       	rjmp	.+8      	; 0x1842 <__pack_f+0x6c>
    183a:	16 95       	lsr	r17
    183c:	07 95       	ror	r16
    183e:	f7 94       	ror	r15
    1840:	e7 94       	ror	r14
    1842:	0a 94       	dec	r0
    1844:	d2 f7       	brpl	.-12     	; 0x183a <__pack_f+0x64>
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	a0 e0       	ldi	r26, 0x00	; 0
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	0c 2e       	mov	r0, r28
    1850:	04 c0       	rjmp	.+8      	; 0x185a <__pack_f+0x84>
    1852:	88 0f       	add	r24, r24
    1854:	99 1f       	adc	r25, r25
    1856:	aa 1f       	adc	r26, r26
    1858:	bb 1f       	adc	r27, r27
    185a:	0a 94       	dec	r0
    185c:	d2 f7       	brpl	.-12     	; 0x1852 <__pack_f+0x7c>
    185e:	01 97       	sbiw	r24, 0x01	; 1
    1860:	a1 09       	sbc	r26, r1
    1862:	b1 09       	sbc	r27, r1
    1864:	82 23       	and	r24, r18
    1866:	93 23       	and	r25, r19
    1868:	a4 23       	and	r26, r20
    186a:	b5 23       	and	r27, r21
    186c:	21 e0       	ldi	r18, 0x01	; 1
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	40 e0       	ldi	r20, 0x00	; 0
    1872:	50 e0       	ldi	r21, 0x00	; 0
    1874:	00 97       	sbiw	r24, 0x00	; 0
    1876:	a1 05       	cpc	r26, r1
    1878:	b1 05       	cpc	r27, r1
    187a:	19 f4       	brne	.+6      	; 0x1882 <__pack_f+0xac>
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	a9 01       	movw	r20, r18
    1882:	2e 29       	or	r18, r14
    1884:	3f 29       	or	r19, r15
    1886:	40 2b       	or	r20, r16
    1888:	51 2b       	or	r21, r17
    188a:	03 c0       	rjmp	.+6      	; 0x1892 <__pack_f+0xbc>
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	a9 01       	movw	r20, r18
    1892:	da 01       	movw	r26, r20
    1894:	c9 01       	movw	r24, r18
    1896:	8f 77       	andi	r24, 0x7F	; 127
    1898:	90 70       	andi	r25, 0x00	; 0
    189a:	a0 70       	andi	r26, 0x00	; 0
    189c:	b0 70       	andi	r27, 0x00	; 0
    189e:	80 34       	cpi	r24, 0x40	; 64
    18a0:	91 05       	cpc	r25, r1
    18a2:	a1 05       	cpc	r26, r1
    18a4:	b1 05       	cpc	r27, r1
    18a6:	39 f4       	brne	.+14     	; 0x18b6 <__pack_f+0xe0>
    18a8:	27 ff       	sbrs	r18, 7
    18aa:	09 c0       	rjmp	.+18     	; 0x18be <__pack_f+0xe8>
    18ac:	20 5c       	subi	r18, 0xC0	; 192
    18ae:	3f 4f       	sbci	r19, 0xFF	; 255
    18b0:	4f 4f       	sbci	r20, 0xFF	; 255
    18b2:	5f 4f       	sbci	r21, 0xFF	; 255
    18b4:	04 c0       	rjmp	.+8      	; 0x18be <__pack_f+0xe8>
    18b6:	21 5c       	subi	r18, 0xC1	; 193
    18b8:	3f 4f       	sbci	r19, 0xFF	; 255
    18ba:	4f 4f       	sbci	r20, 0xFF	; 255
    18bc:	5f 4f       	sbci	r21, 0xFF	; 255
    18be:	e1 e0       	ldi	r30, 0x01	; 1
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	20 30       	cpi	r18, 0x00	; 0
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	38 07       	cpc	r19, r24
    18c8:	80 e0       	ldi	r24, 0x00	; 0
    18ca:	48 07       	cpc	r20, r24
    18cc:	80 e4       	ldi	r24, 0x40	; 64
    18ce:	58 07       	cpc	r21, r24
    18d0:	28 f5       	brcc	.+74     	; 0x191c <__pack_f+0x146>
    18d2:	e0 e0       	ldi	r30, 0x00	; 0
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	22 c0       	rjmp	.+68     	; 0x191c <__pack_f+0x146>
    18d8:	e0 38       	cpi	r30, 0x80	; 128
    18da:	f1 05       	cpc	r31, r1
    18dc:	6c f5       	brge	.+90     	; 0x1938 <__pack_f+0x162>
    18de:	e1 58       	subi	r30, 0x81	; 129
    18e0:	ff 4f       	sbci	r31, 0xFF	; 255
    18e2:	da 01       	movw	r26, r20
    18e4:	c9 01       	movw	r24, r18
    18e6:	8f 77       	andi	r24, 0x7F	; 127
    18e8:	90 70       	andi	r25, 0x00	; 0
    18ea:	a0 70       	andi	r26, 0x00	; 0
    18ec:	b0 70       	andi	r27, 0x00	; 0
    18ee:	80 34       	cpi	r24, 0x40	; 64
    18f0:	91 05       	cpc	r25, r1
    18f2:	a1 05       	cpc	r26, r1
    18f4:	b1 05       	cpc	r27, r1
    18f6:	39 f4       	brne	.+14     	; 0x1906 <__pack_f+0x130>
    18f8:	27 ff       	sbrs	r18, 7
    18fa:	09 c0       	rjmp	.+18     	; 0x190e <__pack_f+0x138>
    18fc:	20 5c       	subi	r18, 0xC0	; 192
    18fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1900:	4f 4f       	sbci	r20, 0xFF	; 255
    1902:	5f 4f       	sbci	r21, 0xFF	; 255
    1904:	04 c0       	rjmp	.+8      	; 0x190e <__pack_f+0x138>
    1906:	21 5c       	subi	r18, 0xC1	; 193
    1908:	3f 4f       	sbci	r19, 0xFF	; 255
    190a:	4f 4f       	sbci	r20, 0xFF	; 255
    190c:	5f 4f       	sbci	r21, 0xFF	; 255
    190e:	57 ff       	sbrs	r21, 7
    1910:	05 c0       	rjmp	.+10     	; 0x191c <__pack_f+0x146>
    1912:	56 95       	lsr	r21
    1914:	47 95       	ror	r20
    1916:	37 95       	ror	r19
    1918:	27 95       	ror	r18
    191a:	31 96       	adiw	r30, 0x01	; 1
    191c:	87 e0       	ldi	r24, 0x07	; 7
    191e:	56 95       	lsr	r21
    1920:	47 95       	ror	r20
    1922:	37 95       	ror	r19
    1924:	27 95       	ror	r18
    1926:	8a 95       	dec	r24
    1928:	d1 f7       	brne	.-12     	; 0x191e <__pack_f+0x148>
    192a:	0b c0       	rjmp	.+22     	; 0x1942 <__pack_f+0x16c>
    192c:	e0 e0       	ldi	r30, 0x00	; 0
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	05 c0       	rjmp	.+10     	; 0x193c <__pack_f+0x166>
    1932:	e0 e0       	ldi	r30, 0x00	; 0
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	05 c0       	rjmp	.+10     	; 0x1942 <__pack_f+0x16c>
    1938:	ef ef       	ldi	r30, 0xFF	; 255
    193a:	f0 e0       	ldi	r31, 0x00	; 0
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	a9 01       	movw	r20, r18
    1942:	8e 2f       	mov	r24, r30
    1944:	87 95       	ror	r24
    1946:	88 27       	eor	r24, r24
    1948:	87 95       	ror	r24
    194a:	94 2f       	mov	r25, r20
    194c:	9f 77       	andi	r25, 0x7F	; 127
    194e:	67 95       	ror	r22
    1950:	66 27       	eor	r22, r22
    1952:	67 95       	ror	r22
    1954:	e6 95       	lsr	r30
    1956:	e2 2e       	mov	r14, r18
    1958:	a9 2f       	mov	r26, r25
    195a:	a8 2b       	or	r26, r24
    195c:	fe 2f       	mov	r31, r30
    195e:	f6 2b       	or	r31, r22
    1960:	62 2f       	mov	r22, r18
    1962:	73 2f       	mov	r23, r19
    1964:	8a 2f       	mov	r24, r26
    1966:	9f 2f       	mov	r25, r31
    1968:	cd b7       	in	r28, 0x3d	; 61
    196a:	de b7       	in	r29, 0x3e	; 62
    196c:	e6 e0       	ldi	r30, 0x06	; 6
    196e:	0c 94 ca 0d 	jmp	0x1b94	; 0x1b94 <__epilogue_restores__+0x18>

00001972 <__unpack_f>:
    1972:	dc 01       	movw	r26, r24
    1974:	fb 01       	movw	r30, r22
    1976:	2c 91       	ld	r18, X
    1978:	11 96       	adiw	r26, 0x01	; 1
    197a:	3c 91       	ld	r19, X
    197c:	11 97       	sbiw	r26, 0x01	; 1
    197e:	12 96       	adiw	r26, 0x02	; 2
    1980:	8c 91       	ld	r24, X
    1982:	12 97       	sbiw	r26, 0x02	; 2
    1984:	48 2f       	mov	r20, r24
    1986:	4f 77       	andi	r20, 0x7F	; 127
    1988:	50 e0       	ldi	r21, 0x00	; 0
    198a:	98 2f       	mov	r25, r24
    198c:	99 1f       	adc	r25, r25
    198e:	99 27       	eor	r25, r25
    1990:	99 1f       	adc	r25, r25
    1992:	13 96       	adiw	r26, 0x03	; 3
    1994:	6c 91       	ld	r22, X
    1996:	13 97       	sbiw	r26, 0x03	; 3
    1998:	86 2f       	mov	r24, r22
    199a:	88 0f       	add	r24, r24
    199c:	89 2b       	or	r24, r25
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	66 1f       	adc	r22, r22
    19a2:	66 27       	eor	r22, r22
    19a4:	66 1f       	adc	r22, r22
    19a6:	61 83       	std	Z+1, r22	; 0x01
    19a8:	00 97       	sbiw	r24, 0x00	; 0
    19aa:	39 f5       	brne	.+78     	; 0x19fa <__unpack_f+0x88>
    19ac:	21 15       	cp	r18, r1
    19ae:	31 05       	cpc	r19, r1
    19b0:	41 05       	cpc	r20, r1
    19b2:	51 05       	cpc	r21, r1
    19b4:	11 f4       	brne	.+4      	; 0x19ba <__unpack_f+0x48>
    19b6:	82 e0       	ldi	r24, 0x02	; 2
    19b8:	29 c0       	rjmp	.+82     	; 0x1a0c <__unpack_f+0x9a>
    19ba:	82 e8       	ldi	r24, 0x82	; 130
    19bc:	9f ef       	ldi	r25, 0xFF	; 255
    19be:	93 83       	std	Z+3, r25	; 0x03
    19c0:	82 83       	std	Z+2, r24	; 0x02
    19c2:	67 e0       	ldi	r22, 0x07	; 7
    19c4:	22 0f       	add	r18, r18
    19c6:	33 1f       	adc	r19, r19
    19c8:	44 1f       	adc	r20, r20
    19ca:	55 1f       	adc	r21, r21
    19cc:	6a 95       	dec	r22
    19ce:	d1 f7       	brne	.-12     	; 0x19c4 <__unpack_f+0x52>
    19d0:	83 e0       	ldi	r24, 0x03	; 3
    19d2:	80 83       	st	Z, r24
    19d4:	09 c0       	rjmp	.+18     	; 0x19e8 <__unpack_f+0x76>
    19d6:	22 0f       	add	r18, r18
    19d8:	33 1f       	adc	r19, r19
    19da:	44 1f       	adc	r20, r20
    19dc:	55 1f       	adc	r21, r21
    19de:	82 81       	ldd	r24, Z+2	; 0x02
    19e0:	93 81       	ldd	r25, Z+3	; 0x03
    19e2:	01 97       	sbiw	r24, 0x01	; 1
    19e4:	93 83       	std	Z+3, r25	; 0x03
    19e6:	82 83       	std	Z+2, r24	; 0x02
    19e8:	20 30       	cpi	r18, 0x00	; 0
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	38 07       	cpc	r19, r24
    19ee:	80 e0       	ldi	r24, 0x00	; 0
    19f0:	48 07       	cpc	r20, r24
    19f2:	80 e4       	ldi	r24, 0x40	; 64
    19f4:	58 07       	cpc	r21, r24
    19f6:	78 f3       	brcs	.-34     	; 0x19d6 <__unpack_f+0x64>
    19f8:	20 c0       	rjmp	.+64     	; 0x1a3a <__unpack_f+0xc8>
    19fa:	8f 3f       	cpi	r24, 0xFF	; 255
    19fc:	91 05       	cpc	r25, r1
    19fe:	79 f4       	brne	.+30     	; 0x1a1e <__unpack_f+0xac>
    1a00:	21 15       	cp	r18, r1
    1a02:	31 05       	cpc	r19, r1
    1a04:	41 05       	cpc	r20, r1
    1a06:	51 05       	cpc	r21, r1
    1a08:	19 f4       	brne	.+6      	; 0x1a10 <__unpack_f+0x9e>
    1a0a:	84 e0       	ldi	r24, 0x04	; 4
    1a0c:	80 83       	st	Z, r24
    1a0e:	08 95       	ret
    1a10:	44 ff       	sbrs	r20, 4
    1a12:	03 c0       	rjmp	.+6      	; 0x1a1a <__unpack_f+0xa8>
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	80 83       	st	Z, r24
    1a18:	10 c0       	rjmp	.+32     	; 0x1a3a <__unpack_f+0xc8>
    1a1a:	10 82       	st	Z, r1
    1a1c:	0e c0       	rjmp	.+28     	; 0x1a3a <__unpack_f+0xc8>
    1a1e:	8f 57       	subi	r24, 0x7F	; 127
    1a20:	90 40       	sbci	r25, 0x00	; 0
    1a22:	93 83       	std	Z+3, r25	; 0x03
    1a24:	82 83       	std	Z+2, r24	; 0x02
    1a26:	83 e0       	ldi	r24, 0x03	; 3
    1a28:	80 83       	st	Z, r24
    1a2a:	87 e0       	ldi	r24, 0x07	; 7
    1a2c:	22 0f       	add	r18, r18
    1a2e:	33 1f       	adc	r19, r19
    1a30:	44 1f       	adc	r20, r20
    1a32:	55 1f       	adc	r21, r21
    1a34:	8a 95       	dec	r24
    1a36:	d1 f7       	brne	.-12     	; 0x1a2c <__unpack_f+0xba>
    1a38:	50 64       	ori	r21, 0x40	; 64
    1a3a:	24 83       	std	Z+4, r18	; 0x04
    1a3c:	35 83       	std	Z+5, r19	; 0x05
    1a3e:	46 83       	std	Z+6, r20	; 0x06
    1a40:	57 83       	std	Z+7, r21	; 0x07
    1a42:	08 95       	ret

00001a44 <__fpcmp_parts_f>:
    1a44:	fc 01       	movw	r30, r24
    1a46:	db 01       	movw	r26, r22
    1a48:	90 81       	ld	r25, Z
    1a4a:	92 30       	cpi	r25, 0x02	; 2
    1a4c:	08 f4       	brcc	.+2      	; 0x1a50 <__fpcmp_parts_f+0xc>
    1a4e:	49 c0       	rjmp	.+146    	; 0x1ae2 <__fpcmp_parts_f+0x9e>
    1a50:	8c 91       	ld	r24, X
    1a52:	82 30       	cpi	r24, 0x02	; 2
    1a54:	08 f4       	brcc	.+2      	; 0x1a58 <__fpcmp_parts_f+0x14>
    1a56:	45 c0       	rjmp	.+138    	; 0x1ae2 <__fpcmp_parts_f+0x9e>
    1a58:	94 30       	cpi	r25, 0x04	; 4
    1a5a:	51 f4       	brne	.+20     	; 0x1a70 <__fpcmp_parts_f+0x2c>
    1a5c:	61 81       	ldd	r22, Z+1	; 0x01
    1a5e:	84 30       	cpi	r24, 0x04	; 4
    1a60:	b1 f5       	brne	.+108    	; 0x1ace <__fpcmp_parts_f+0x8a>
    1a62:	11 96       	adiw	r26, 0x01	; 1
    1a64:	2c 91       	ld	r18, X
    1a66:	11 97       	sbiw	r26, 0x01	; 1
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	26 1b       	sub	r18, r22
    1a6c:	31 09       	sbc	r19, r1
    1a6e:	41 c0       	rjmp	.+130    	; 0x1af2 <__fpcmp_parts_f+0xae>
    1a70:	84 30       	cpi	r24, 0x04	; 4
    1a72:	21 f0       	breq	.+8      	; 0x1a7c <__fpcmp_parts_f+0x38>
    1a74:	92 30       	cpi	r25, 0x02	; 2
    1a76:	41 f4       	brne	.+16     	; 0x1a88 <__fpcmp_parts_f+0x44>
    1a78:	82 30       	cpi	r24, 0x02	; 2
    1a7a:	b1 f1       	breq	.+108    	; 0x1ae8 <__fpcmp_parts_f+0xa4>
    1a7c:	11 96       	adiw	r26, 0x01	; 1
    1a7e:	8c 91       	ld	r24, X
    1a80:	11 97       	sbiw	r26, 0x01	; 1
    1a82:	88 23       	and	r24, r24
    1a84:	a1 f1       	breq	.+104    	; 0x1aee <__fpcmp_parts_f+0xaa>
    1a86:	2d c0       	rjmp	.+90     	; 0x1ae2 <__fpcmp_parts_f+0x9e>
    1a88:	61 81       	ldd	r22, Z+1	; 0x01
    1a8a:	82 30       	cpi	r24, 0x02	; 2
    1a8c:	01 f1       	breq	.+64     	; 0x1ace <__fpcmp_parts_f+0x8a>
    1a8e:	11 96       	adiw	r26, 0x01	; 1
    1a90:	8c 91       	ld	r24, X
    1a92:	11 97       	sbiw	r26, 0x01	; 1
    1a94:	68 17       	cp	r22, r24
    1a96:	d9 f4       	brne	.+54     	; 0x1ace <__fpcmp_parts_f+0x8a>
    1a98:	22 81       	ldd	r18, Z+2	; 0x02
    1a9a:	33 81       	ldd	r19, Z+3	; 0x03
    1a9c:	12 96       	adiw	r26, 0x02	; 2
    1a9e:	8d 91       	ld	r24, X+
    1aa0:	9c 91       	ld	r25, X
    1aa2:	13 97       	sbiw	r26, 0x03	; 3
    1aa4:	82 17       	cp	r24, r18
    1aa6:	93 07       	cpc	r25, r19
    1aa8:	94 f0       	brlt	.+36     	; 0x1ace <__fpcmp_parts_f+0x8a>
    1aaa:	28 17       	cp	r18, r24
    1aac:	39 07       	cpc	r19, r25
    1aae:	bc f0       	brlt	.+46     	; 0x1ade <__fpcmp_parts_f+0x9a>
    1ab0:	24 81       	ldd	r18, Z+4	; 0x04
    1ab2:	35 81       	ldd	r19, Z+5	; 0x05
    1ab4:	46 81       	ldd	r20, Z+6	; 0x06
    1ab6:	57 81       	ldd	r21, Z+7	; 0x07
    1ab8:	14 96       	adiw	r26, 0x04	; 4
    1aba:	8d 91       	ld	r24, X+
    1abc:	9d 91       	ld	r25, X+
    1abe:	0d 90       	ld	r0, X+
    1ac0:	bc 91       	ld	r27, X
    1ac2:	a0 2d       	mov	r26, r0
    1ac4:	82 17       	cp	r24, r18
    1ac6:	93 07       	cpc	r25, r19
    1ac8:	a4 07       	cpc	r26, r20
    1aca:	b5 07       	cpc	r27, r21
    1acc:	18 f4       	brcc	.+6      	; 0x1ad4 <__fpcmp_parts_f+0x90>
    1ace:	66 23       	and	r22, r22
    1ad0:	41 f0       	breq	.+16     	; 0x1ae2 <__fpcmp_parts_f+0x9e>
    1ad2:	0d c0       	rjmp	.+26     	; 0x1aee <__fpcmp_parts_f+0xaa>
    1ad4:	28 17       	cp	r18, r24
    1ad6:	39 07       	cpc	r19, r25
    1ad8:	4a 07       	cpc	r20, r26
    1ada:	5b 07       	cpc	r21, r27
    1adc:	28 f4       	brcc	.+10     	; 0x1ae8 <__fpcmp_parts_f+0xa4>
    1ade:	66 23       	and	r22, r22
    1ae0:	31 f0       	breq	.+12     	; 0x1aee <__fpcmp_parts_f+0xaa>
    1ae2:	21 e0       	ldi	r18, 0x01	; 1
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	05 c0       	rjmp	.+10     	; 0x1af2 <__fpcmp_parts_f+0xae>
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	02 c0       	rjmp	.+4      	; 0x1af2 <__fpcmp_parts_f+0xae>
    1aee:	2f ef       	ldi	r18, 0xFF	; 255
    1af0:	3f ef       	ldi	r19, 0xFF	; 255
    1af2:	c9 01       	movw	r24, r18
    1af4:	08 95       	ret

00001af6 <__divmodhi4>:
    1af6:	97 fb       	bst	r25, 7
    1af8:	09 2e       	mov	r0, r25
    1afa:	07 26       	eor	r0, r23
    1afc:	0a d0       	rcall	.+20     	; 0x1b12 <__divmodhi4_neg1>
    1afe:	77 fd       	sbrc	r23, 7
    1b00:	04 d0       	rcall	.+8      	; 0x1b0a <__divmodhi4_neg2>
    1b02:	0c d0       	rcall	.+24     	; 0x1b1c <__udivmodhi4>
    1b04:	06 d0       	rcall	.+12     	; 0x1b12 <__divmodhi4_neg1>
    1b06:	00 20       	and	r0, r0
    1b08:	1a f4       	brpl	.+6      	; 0x1b10 <__divmodhi4_exit>

00001b0a <__divmodhi4_neg2>:
    1b0a:	70 95       	com	r23
    1b0c:	61 95       	neg	r22
    1b0e:	7f 4f       	sbci	r23, 0xFF	; 255

00001b10 <__divmodhi4_exit>:
    1b10:	08 95       	ret

00001b12 <__divmodhi4_neg1>:
    1b12:	f6 f7       	brtc	.-4      	; 0x1b10 <__divmodhi4_exit>
    1b14:	90 95       	com	r25
    1b16:	81 95       	neg	r24
    1b18:	9f 4f       	sbci	r25, 0xFF	; 255
    1b1a:	08 95       	ret

00001b1c <__udivmodhi4>:
    1b1c:	aa 1b       	sub	r26, r26
    1b1e:	bb 1b       	sub	r27, r27
    1b20:	51 e1       	ldi	r21, 0x11	; 17
    1b22:	07 c0       	rjmp	.+14     	; 0x1b32 <__udivmodhi4_ep>

00001b24 <__udivmodhi4_loop>:
    1b24:	aa 1f       	adc	r26, r26
    1b26:	bb 1f       	adc	r27, r27
    1b28:	a6 17       	cp	r26, r22
    1b2a:	b7 07       	cpc	r27, r23
    1b2c:	10 f0       	brcs	.+4      	; 0x1b32 <__udivmodhi4_ep>
    1b2e:	a6 1b       	sub	r26, r22
    1b30:	b7 0b       	sbc	r27, r23

00001b32 <__udivmodhi4_ep>:
    1b32:	88 1f       	adc	r24, r24
    1b34:	99 1f       	adc	r25, r25
    1b36:	5a 95       	dec	r21
    1b38:	a9 f7       	brne	.-22     	; 0x1b24 <__udivmodhi4_loop>
    1b3a:	80 95       	com	r24
    1b3c:	90 95       	com	r25
    1b3e:	bc 01       	movw	r22, r24
    1b40:	cd 01       	movw	r24, r26
    1b42:	08 95       	ret

00001b44 <__prologue_saves__>:
    1b44:	2f 92       	push	r2
    1b46:	3f 92       	push	r3
    1b48:	4f 92       	push	r4
    1b4a:	5f 92       	push	r5
    1b4c:	6f 92       	push	r6
    1b4e:	7f 92       	push	r7
    1b50:	8f 92       	push	r8
    1b52:	9f 92       	push	r9
    1b54:	af 92       	push	r10
    1b56:	bf 92       	push	r11
    1b58:	cf 92       	push	r12
    1b5a:	df 92       	push	r13
    1b5c:	ef 92       	push	r14
    1b5e:	ff 92       	push	r15
    1b60:	0f 93       	push	r16
    1b62:	1f 93       	push	r17
    1b64:	cf 93       	push	r28
    1b66:	df 93       	push	r29
    1b68:	cd b7       	in	r28, 0x3d	; 61
    1b6a:	de b7       	in	r29, 0x3e	; 62
    1b6c:	ca 1b       	sub	r28, r26
    1b6e:	db 0b       	sbc	r29, r27
    1b70:	0f b6       	in	r0, 0x3f	; 63
    1b72:	f8 94       	cli
    1b74:	de bf       	out	0x3e, r29	; 62
    1b76:	0f be       	out	0x3f, r0	; 63
    1b78:	cd bf       	out	0x3d, r28	; 61
    1b7a:	09 94       	ijmp

00001b7c <__epilogue_restores__>:
    1b7c:	2a 88       	ldd	r2, Y+18	; 0x12
    1b7e:	39 88       	ldd	r3, Y+17	; 0x11
    1b80:	48 88       	ldd	r4, Y+16	; 0x10
    1b82:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b84:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b86:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b88:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b8a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b8c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b8e:	b9 84       	ldd	r11, Y+9	; 0x09
    1b90:	c8 84       	ldd	r12, Y+8	; 0x08
    1b92:	df 80       	ldd	r13, Y+7	; 0x07
    1b94:	ee 80       	ldd	r14, Y+6	; 0x06
    1b96:	fd 80       	ldd	r15, Y+5	; 0x05
    1b98:	0c 81       	ldd	r16, Y+4	; 0x04
    1b9a:	1b 81       	ldd	r17, Y+3	; 0x03
    1b9c:	aa 81       	ldd	r26, Y+2	; 0x02
    1b9e:	b9 81       	ldd	r27, Y+1	; 0x01
    1ba0:	ce 0f       	add	r28, r30
    1ba2:	d1 1d       	adc	r29, r1
    1ba4:	0f b6       	in	r0, 0x3f	; 63
    1ba6:	f8 94       	cli
    1ba8:	de bf       	out	0x3e, r29	; 62
    1baa:	0f be       	out	0x3f, r0	; 63
    1bac:	cd bf       	out	0x3d, r28	; 61
    1bae:	ed 01       	movw	r28, r26
    1bb0:	08 95       	ret

00001bb2 <malloc>:
    1bb2:	cf 93       	push	r28
    1bb4:	df 93       	push	r29
    1bb6:	82 30       	cpi	r24, 0x02	; 2
    1bb8:	91 05       	cpc	r25, r1
    1bba:	10 f4       	brcc	.+4      	; 0x1bc0 <malloc+0xe>
    1bbc:	82 e0       	ldi	r24, 0x02	; 2
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	e0 91 88 06 	lds	r30, 0x0688
    1bc4:	f0 91 89 06 	lds	r31, 0x0689
    1bc8:	40 e0       	ldi	r20, 0x00	; 0
    1bca:	50 e0       	ldi	r21, 0x00	; 0
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	26 c0       	rjmp	.+76     	; 0x1c1e <malloc+0x6c>
    1bd2:	60 81       	ld	r22, Z
    1bd4:	71 81       	ldd	r23, Z+1	; 0x01
    1bd6:	68 17       	cp	r22, r24
    1bd8:	79 07       	cpc	r23, r25
    1bda:	e0 f0       	brcs	.+56     	; 0x1c14 <malloc+0x62>
    1bdc:	68 17       	cp	r22, r24
    1bde:	79 07       	cpc	r23, r25
    1be0:	81 f4       	brne	.+32     	; 0x1c02 <malloc+0x50>
    1be2:	82 81       	ldd	r24, Z+2	; 0x02
    1be4:	93 81       	ldd	r25, Z+3	; 0x03
    1be6:	21 15       	cp	r18, r1
    1be8:	31 05       	cpc	r19, r1
    1bea:	31 f0       	breq	.+12     	; 0x1bf8 <malloc+0x46>
    1bec:	d9 01       	movw	r26, r18
    1bee:	13 96       	adiw	r26, 0x03	; 3
    1bf0:	9c 93       	st	X, r25
    1bf2:	8e 93       	st	-X, r24
    1bf4:	12 97       	sbiw	r26, 0x02	; 2
    1bf6:	2b c0       	rjmp	.+86     	; 0x1c4e <malloc+0x9c>
    1bf8:	90 93 89 06 	sts	0x0689, r25
    1bfc:	80 93 88 06 	sts	0x0688, r24
    1c00:	26 c0       	rjmp	.+76     	; 0x1c4e <malloc+0x9c>
    1c02:	41 15       	cp	r20, r1
    1c04:	51 05       	cpc	r21, r1
    1c06:	19 f0       	breq	.+6      	; 0x1c0e <malloc+0x5c>
    1c08:	64 17       	cp	r22, r20
    1c0a:	75 07       	cpc	r23, r21
    1c0c:	18 f4       	brcc	.+6      	; 0x1c14 <malloc+0x62>
    1c0e:	ab 01       	movw	r20, r22
    1c10:	e9 01       	movw	r28, r18
    1c12:	df 01       	movw	r26, r30
    1c14:	9f 01       	movw	r18, r30
    1c16:	72 81       	ldd	r23, Z+2	; 0x02
    1c18:	63 81       	ldd	r22, Z+3	; 0x03
    1c1a:	e7 2f       	mov	r30, r23
    1c1c:	f6 2f       	mov	r31, r22
    1c1e:	30 97       	sbiw	r30, 0x00	; 0
    1c20:	c1 f6       	brne	.-80     	; 0x1bd2 <malloc+0x20>
    1c22:	41 15       	cp	r20, r1
    1c24:	51 05       	cpc	r21, r1
    1c26:	01 f1       	breq	.+64     	; 0x1c68 <malloc+0xb6>
    1c28:	48 1b       	sub	r20, r24
    1c2a:	59 0b       	sbc	r21, r25
    1c2c:	44 30       	cpi	r20, 0x04	; 4
    1c2e:	51 05       	cpc	r21, r1
    1c30:	80 f4       	brcc	.+32     	; 0x1c52 <malloc+0xa0>
    1c32:	12 96       	adiw	r26, 0x02	; 2
    1c34:	8d 91       	ld	r24, X+
    1c36:	9c 91       	ld	r25, X
    1c38:	13 97       	sbiw	r26, 0x03	; 3
    1c3a:	20 97       	sbiw	r28, 0x00	; 0
    1c3c:	19 f0       	breq	.+6      	; 0x1c44 <malloc+0x92>
    1c3e:	9b 83       	std	Y+3, r25	; 0x03
    1c40:	8a 83       	std	Y+2, r24	; 0x02
    1c42:	04 c0       	rjmp	.+8      	; 0x1c4c <malloc+0x9a>
    1c44:	90 93 89 06 	sts	0x0689, r25
    1c48:	80 93 88 06 	sts	0x0688, r24
    1c4c:	fd 01       	movw	r30, r26
    1c4e:	32 96       	adiw	r30, 0x02	; 2
    1c50:	46 c0       	rjmp	.+140    	; 0x1cde <malloc+0x12c>
    1c52:	fd 01       	movw	r30, r26
    1c54:	e4 0f       	add	r30, r20
    1c56:	f5 1f       	adc	r31, r21
    1c58:	81 93       	st	Z+, r24
    1c5a:	91 93       	st	Z+, r25
    1c5c:	42 50       	subi	r20, 0x02	; 2
    1c5e:	50 40       	sbci	r21, 0x00	; 0
    1c60:	11 96       	adiw	r26, 0x01	; 1
    1c62:	5c 93       	st	X, r21
    1c64:	4e 93       	st	-X, r20
    1c66:	3b c0       	rjmp	.+118    	; 0x1cde <malloc+0x12c>
    1c68:	20 91 86 06 	lds	r18, 0x0686
    1c6c:	30 91 87 06 	lds	r19, 0x0687
    1c70:	21 15       	cp	r18, r1
    1c72:	31 05       	cpc	r19, r1
    1c74:	41 f4       	brne	.+16     	; 0x1c86 <malloc+0xd4>
    1c76:	20 91 24 01 	lds	r18, 0x0124
    1c7a:	30 91 25 01 	lds	r19, 0x0125
    1c7e:	30 93 87 06 	sts	0x0687, r19
    1c82:	20 93 86 06 	sts	0x0686, r18
    1c86:	20 91 26 01 	lds	r18, 0x0126
    1c8a:	30 91 27 01 	lds	r19, 0x0127
    1c8e:	21 15       	cp	r18, r1
    1c90:	31 05       	cpc	r19, r1
    1c92:	41 f4       	brne	.+16     	; 0x1ca4 <malloc+0xf2>
    1c94:	2d b7       	in	r18, 0x3d	; 61
    1c96:	3e b7       	in	r19, 0x3e	; 62
    1c98:	40 91 22 01 	lds	r20, 0x0122
    1c9c:	50 91 23 01 	lds	r21, 0x0123
    1ca0:	24 1b       	sub	r18, r20
    1ca2:	35 0b       	sbc	r19, r21
    1ca4:	e0 91 86 06 	lds	r30, 0x0686
    1ca8:	f0 91 87 06 	lds	r31, 0x0687
    1cac:	e2 17       	cp	r30, r18
    1cae:	f3 07       	cpc	r31, r19
    1cb0:	a0 f4       	brcc	.+40     	; 0x1cda <malloc+0x128>
    1cb2:	2e 1b       	sub	r18, r30
    1cb4:	3f 0b       	sbc	r19, r31
    1cb6:	28 17       	cp	r18, r24
    1cb8:	39 07       	cpc	r19, r25
    1cba:	78 f0       	brcs	.+30     	; 0x1cda <malloc+0x128>
    1cbc:	ac 01       	movw	r20, r24
    1cbe:	4e 5f       	subi	r20, 0xFE	; 254
    1cc0:	5f 4f       	sbci	r21, 0xFF	; 255
    1cc2:	24 17       	cp	r18, r20
    1cc4:	35 07       	cpc	r19, r21
    1cc6:	48 f0       	brcs	.+18     	; 0x1cda <malloc+0x128>
    1cc8:	4e 0f       	add	r20, r30
    1cca:	5f 1f       	adc	r21, r31
    1ccc:	50 93 87 06 	sts	0x0687, r21
    1cd0:	40 93 86 06 	sts	0x0686, r20
    1cd4:	81 93       	st	Z+, r24
    1cd6:	91 93       	st	Z+, r25
    1cd8:	02 c0       	rjmp	.+4      	; 0x1cde <malloc+0x12c>
    1cda:	e0 e0       	ldi	r30, 0x00	; 0
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	cf 01       	movw	r24, r30
    1ce0:	df 91       	pop	r29
    1ce2:	cf 91       	pop	r28
    1ce4:	08 95       	ret

00001ce6 <free>:
    1ce6:	cf 93       	push	r28
    1ce8:	df 93       	push	r29
    1cea:	00 97       	sbiw	r24, 0x00	; 0
    1cec:	09 f4       	brne	.+2      	; 0x1cf0 <free+0xa>
    1cee:	91 c0       	rjmp	.+290    	; 0x1e12 <free+0x12c>
    1cf0:	fc 01       	movw	r30, r24
    1cf2:	32 97       	sbiw	r30, 0x02	; 2
    1cf4:	13 82       	std	Z+3, r1	; 0x03
    1cf6:	12 82       	std	Z+2, r1	; 0x02
    1cf8:	60 91 88 06 	lds	r22, 0x0688
    1cfc:	70 91 89 06 	lds	r23, 0x0689
    1d00:	61 15       	cp	r22, r1
    1d02:	71 05       	cpc	r23, r1
    1d04:	81 f4       	brne	.+32     	; 0x1d26 <free+0x40>
    1d06:	20 81       	ld	r18, Z
    1d08:	31 81       	ldd	r19, Z+1	; 0x01
    1d0a:	28 0f       	add	r18, r24
    1d0c:	39 1f       	adc	r19, r25
    1d0e:	80 91 86 06 	lds	r24, 0x0686
    1d12:	90 91 87 06 	lds	r25, 0x0687
    1d16:	82 17       	cp	r24, r18
    1d18:	93 07       	cpc	r25, r19
    1d1a:	99 f5       	brne	.+102    	; 0x1d82 <free+0x9c>
    1d1c:	f0 93 87 06 	sts	0x0687, r31
    1d20:	e0 93 86 06 	sts	0x0686, r30
    1d24:	76 c0       	rjmp	.+236    	; 0x1e12 <free+0x12c>
    1d26:	db 01       	movw	r26, r22
    1d28:	80 e0       	ldi	r24, 0x00	; 0
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	02 c0       	rjmp	.+4      	; 0x1d32 <free+0x4c>
    1d2e:	cd 01       	movw	r24, r26
    1d30:	d9 01       	movw	r26, r18
    1d32:	ae 17       	cp	r26, r30
    1d34:	bf 07       	cpc	r27, r31
    1d36:	48 f4       	brcc	.+18     	; 0x1d4a <free+0x64>
    1d38:	12 96       	adiw	r26, 0x02	; 2
    1d3a:	2d 91       	ld	r18, X+
    1d3c:	3c 91       	ld	r19, X
    1d3e:	13 97       	sbiw	r26, 0x03	; 3
    1d40:	21 15       	cp	r18, r1
    1d42:	31 05       	cpc	r19, r1
    1d44:	a1 f7       	brne	.-24     	; 0x1d2e <free+0x48>
    1d46:	cd 01       	movw	r24, r26
    1d48:	21 c0       	rjmp	.+66     	; 0x1d8c <free+0xa6>
    1d4a:	b3 83       	std	Z+3, r27	; 0x03
    1d4c:	a2 83       	std	Z+2, r26	; 0x02
    1d4e:	ef 01       	movw	r28, r30
    1d50:	49 91       	ld	r20, Y+
    1d52:	59 91       	ld	r21, Y+
    1d54:	9e 01       	movw	r18, r28
    1d56:	24 0f       	add	r18, r20
    1d58:	35 1f       	adc	r19, r21
    1d5a:	a2 17       	cp	r26, r18
    1d5c:	b3 07       	cpc	r27, r19
    1d5e:	79 f4       	brne	.+30     	; 0x1d7e <free+0x98>
    1d60:	2d 91       	ld	r18, X+
    1d62:	3c 91       	ld	r19, X
    1d64:	11 97       	sbiw	r26, 0x01	; 1
    1d66:	24 0f       	add	r18, r20
    1d68:	35 1f       	adc	r19, r21
    1d6a:	2e 5f       	subi	r18, 0xFE	; 254
    1d6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d6e:	31 83       	std	Z+1, r19	; 0x01
    1d70:	20 83       	st	Z, r18
    1d72:	12 96       	adiw	r26, 0x02	; 2
    1d74:	2d 91       	ld	r18, X+
    1d76:	3c 91       	ld	r19, X
    1d78:	13 97       	sbiw	r26, 0x03	; 3
    1d7a:	33 83       	std	Z+3, r19	; 0x03
    1d7c:	22 83       	std	Z+2, r18	; 0x02
    1d7e:	00 97       	sbiw	r24, 0x00	; 0
    1d80:	29 f4       	brne	.+10     	; 0x1d8c <free+0xa6>
    1d82:	f0 93 89 06 	sts	0x0689, r31
    1d86:	e0 93 88 06 	sts	0x0688, r30
    1d8a:	43 c0       	rjmp	.+134    	; 0x1e12 <free+0x12c>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	13 96       	adiw	r26, 0x03	; 3
    1d90:	fc 93       	st	X, r31
    1d92:	ee 93       	st	-X, r30
    1d94:	12 97       	sbiw	r26, 0x02	; 2
    1d96:	4d 91       	ld	r20, X+
    1d98:	5d 91       	ld	r21, X+
    1d9a:	a4 0f       	add	r26, r20
    1d9c:	b5 1f       	adc	r27, r21
    1d9e:	ea 17       	cp	r30, r26
    1da0:	fb 07       	cpc	r31, r27
    1da2:	69 f4       	brne	.+26     	; 0x1dbe <free+0xd8>
    1da4:	20 81       	ld	r18, Z
    1da6:	31 81       	ldd	r19, Z+1	; 0x01
    1da8:	24 0f       	add	r18, r20
    1daa:	35 1f       	adc	r19, r21
    1dac:	2e 5f       	subi	r18, 0xFE	; 254
    1dae:	3f 4f       	sbci	r19, 0xFF	; 255
    1db0:	ec 01       	movw	r28, r24
    1db2:	39 83       	std	Y+1, r19	; 0x01
    1db4:	28 83       	st	Y, r18
    1db6:	22 81       	ldd	r18, Z+2	; 0x02
    1db8:	33 81       	ldd	r19, Z+3	; 0x03
    1dba:	3b 83       	std	Y+3, r19	; 0x03
    1dbc:	2a 83       	std	Y+2, r18	; 0x02
    1dbe:	e0 e0       	ldi	r30, 0x00	; 0
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	02 c0       	rjmp	.+4      	; 0x1dc8 <free+0xe2>
    1dc4:	fb 01       	movw	r30, r22
    1dc6:	bc 01       	movw	r22, r24
    1dc8:	db 01       	movw	r26, r22
    1dca:	12 96       	adiw	r26, 0x02	; 2
    1dcc:	8d 91       	ld	r24, X+
    1dce:	9c 91       	ld	r25, X
    1dd0:	13 97       	sbiw	r26, 0x03	; 3
    1dd2:	00 97       	sbiw	r24, 0x00	; 0
    1dd4:	b9 f7       	brne	.-18     	; 0x1dc4 <free+0xde>
    1dd6:	9b 01       	movw	r18, r22
    1dd8:	2e 5f       	subi	r18, 0xFE	; 254
    1dda:	3f 4f       	sbci	r19, 0xFF	; 255
    1ddc:	8d 91       	ld	r24, X+
    1dde:	9c 91       	ld	r25, X
    1de0:	11 97       	sbiw	r26, 0x01	; 1
    1de2:	82 0f       	add	r24, r18
    1de4:	93 1f       	adc	r25, r19
    1de6:	40 91 86 06 	lds	r20, 0x0686
    1dea:	50 91 87 06 	lds	r21, 0x0687
    1dee:	48 17       	cp	r20, r24
    1df0:	59 07       	cpc	r21, r25
    1df2:	79 f4       	brne	.+30     	; 0x1e12 <free+0x12c>
    1df4:	30 97       	sbiw	r30, 0x00	; 0
    1df6:	29 f4       	brne	.+10     	; 0x1e02 <free+0x11c>
    1df8:	10 92 89 06 	sts	0x0689, r1
    1dfc:	10 92 88 06 	sts	0x0688, r1
    1e00:	02 c0       	rjmp	.+4      	; 0x1e06 <free+0x120>
    1e02:	13 82       	std	Z+3, r1	; 0x03
    1e04:	12 82       	std	Z+2, r1	; 0x02
    1e06:	22 50       	subi	r18, 0x02	; 2
    1e08:	30 40       	sbci	r19, 0x00	; 0
    1e0a:	30 93 87 06 	sts	0x0687, r19
    1e0e:	20 93 86 06 	sts	0x0686, r18
    1e12:	df 91       	pop	r29
    1e14:	cf 91       	pop	r28
    1e16:	08 95       	ret

00001e18 <strlen>:
    1e18:	fc 01       	movw	r30, r24
    1e1a:	01 90       	ld	r0, Z+
    1e1c:	00 20       	and	r0, r0
    1e1e:	e9 f7       	brne	.-6      	; 0x1e1a <strlen+0x2>
    1e20:	80 95       	com	r24
    1e22:	90 95       	com	r25
    1e24:	8e 0f       	add	r24, r30
    1e26:	9f 1f       	adc	r25, r31
    1e28:	08 95       	ret

00001e2a <_exit>:
    1e2a:	f8 94       	cli

00001e2c <__stop_program>:
    1e2c:	ff cf       	rjmp	.-2      	; 0x1e2c <__stop_program>
